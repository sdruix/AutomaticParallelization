#line 2 "c99-scanner.c"

#line 4 "c99-scanner.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer mc99_create_buffer
#define yy_delete_buffer mc99_delete_buffer
#define yy_flex_debug mc99_flex_debug
#define yy_init_buffer mc99_init_buffer
#define yy_flush_buffer mc99_flush_buffer
#define yy_load_buffer_state mc99_load_buffer_state
#define yy_switch_to_buffer mc99_switch_to_buffer
#define yyin mc99in
#define yyleng mc99leng
#define yylex mc99lex
#define yylineno mc99lineno
#define yyout mc99out
#define yyrestart mc99restart
#define yytext mc99text
#define yywrap mc99wrap
#define yyalloc mc99alloc
#define yyrealloc mc99realloc
#define yyfree mc99free

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mc99restart(mc99in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int mc99leng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *mc99in, *mc99out;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mc99text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up mc99text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mc99restart()), so that the user can continue scanning by
	 * just pointing mc99in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when mc99text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int mc99leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow mc99wrap()'s to do buffer switches
 * instead of setting up a fresh mc99in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void mc99restart (FILE *input_file  );
void mc99_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE mc99_create_buffer (FILE *file,int size  );
void mc99_delete_buffer (YY_BUFFER_STATE b  );
void mc99_flush_buffer (YY_BUFFER_STATE b  );
void mc99push_buffer_state (YY_BUFFER_STATE new_buffer  );
void mc99pop_buffer_state (void );

static void mc99ensure_buffer_stack (void );
static void mc99_load_buffer_state (void );
static void mc99_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER mc99_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE mc99_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE mc99_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE mc99_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *mc99alloc (yy_size_t  );
void *mc99realloc (void *,yy_size_t  );
void mc99free (void *  );

#define yy_new_buffer mc99_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mc99ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mc99_create_buffer(mc99in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mc99ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mc99_create_buffer(mc99in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] mc99text/mc99in/mc99out/yy_state_type/mc99lineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *mc99in = (FILE *) 0, *mc99out = (FILE *) 0;

typedef int yy_state_type;

extern int mc99lineno;

int mc99lineno = 1;

extern char *mc99text;
#define yytext_ptr mc99text

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up mc99text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle mc99text and mc99leng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	mc99leng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to mc99text[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 219
#define YY_END_OF_BUFFER 220
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1286] =
    {   0,
      159,  159,   18,   18,  220,  218,  219,  217,  218,  219,
      216,  219,  176,  218,  219,  213,  218,  219,    1,  218,
      219,  178,  218,  219,  211,  218,  219,  218,  219,  169,
      218,  219,  168,  218,  219,  212,  218,  219,  173,  218,
      219,  205,  218,  219,  174,  218,  219,  204,  218,  219,
      177,  218,  219,  159,  162,  218,  219,  158,  159,  162,
      218,  219,  158,  162,  218,  219,  203,  218,  219,  202,
      218,  219,  209,  218,  219,  191,  218,  219,  210,  218,
      219,  206,  218,  219,  218,  219,  157,  218,  219,  157,
      159,  218,  219,  157,  159,  218,  219,  166,  218,  219,

      218,  219,  167,  218,  219,  187,  218,  219,  157,  218,
      219,  157,  218,  219,  157,  218,  219,  157,  218,  219,
      157,  218,  219,  157,  218,  219,  157,  218,  219,  157,
      218,  219,  157,  159,  218,  219,  157,  159,  218,  219,
      157,  159,  218,  219,  157,  218,  219,  157,  218,  219,
      157,  218,  219,  157,  159,  218,  219,  157,  218,  219,
      157,  218,  219,  207,  218,  219,  188,  218,  219,  208,
      218,  219,  175,  218,  219,   49,  218,  219,   48,  219,
       49,  218,  219,   45,  218,  219,   46,  219,   45,  218,
      219,   37,  218,  219,   38,  219,   37,  218,  219,   37,

      218,  219,   37,  218,  219,  219,   17,  218,  219,  218,
      219,   17,  218,  219,   17,  218,  219,   42,  218,  219,
       40,   42,  218,  219,   41,   42,  218,  219,   18,  218,
      219,   21,  218,  219,   20,  219,   19,  218,  219,  218,
      219,   19,  218,  219,   28,  218,  219,   26,  219,   27,
      218,  219,  218,  219,   27,  218,  219,   24,  218,  219,
       22,  219,   25,  218,  219,   23,  218,  219,  218,  219,
       23,  218,  219,   34,  218,  219,   31,   34,  218,  219,
       33,  219,   29,   34,  218,  219,   30,   34,  218,  219,
       32,   34,  218,  219,   34,  218,  219,   32,   34,  218,

      219,   14,  218,  219,   15,  219,   14,  218,  219,    5,
      218,  219,    6,  219,  218,  219,    9,  218,  219,   11,
      219,    7,  218,  219,    8,  218,  219,   10,  218,  219,
       10,  218,  219,  218,  219,   10,  218,  219,   10,  218,
      219,  186,  165,  194,  189,  199,  161,  192,  171,  195,
      172,  196,  170,  215,  162,   47,   43,  193,  162,  159,
      162,  159,  162,  162,  162,  159,  162,  159,  159,  162,
      158,  159,  162,  158,  162,  158,  159,  162,  158,  159,
      158,  159,  162,  158,  162,  158,  158,  162,  179,  183,
      185,  184,  181,  157,  157,  157,  159,  157,  159,  157,

      159,  157,  159,  157,  159,  157,  159,  200,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
       82,  157,  157,  157,  157,  157,  157,  157,  157,  159,
      157,  159,   78,  157,  157,  157,  159,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  201,
      190,   50,   44,   17,   17,   17,   17,   18,   19,   19,
       19,   27,   27,   27,   23,   23,   23,   31,   32,   32,
       32,   10,   10,   10,   10,   10,  214,  162,  162,  162,
      159,  159,  159,  162,  159,  159,  160,  159,  162,  159,
      158,  159,  158,  159,  158,  159,  162,  158,  159,  158,

      159,  158,  159,  162,  158,  159,  158,  158,  158,  162,
      158,  158,  158,  162,  158,  180,  197,  198,  182,  157,
      157,  159,  157,  159,  157,  159,  157,  159,  157,  159,
      157,  159,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,   74,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,   83,  157,  157,  157,  159,  157,
      159,  157,  159,  157,  159,  157,   54,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,   17,   17,

       17,   17,   19,   19,   19,   19,   27,   27,   23,   23,
       32,   32,   10,   10,   10,   10,  159,  159,  159,  159,
      159,  159,  160,  160,  160,  160,  159,  159,  159,  158,
      159,  158,  159,  158,  159,  158,  159,  158,  159,  158,
      159,  158,  159,  158,  159,  158,  159,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  157,  157,  159,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,   66,  157,  157,   76,  157,   51,  157,
      157,  157,  157,  157,   79,  157,   64,  157,  157,  157,

       86,  157,  157,  159,  157,   55,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,   62,  157,  157,  157,   17,   17,
       19,   19,   19,   19,   19,   27,   27,   23,   23,   32,
       32,    4,   10,   10,   10,   10,  159,  160,  160,  160,
      164,  160,  160,  160,  160,  159,  158,  159,  158,  159,
      158,  158,  157,   52,  157,  157,  157,  157,  157,  157,
      157,  119,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,   84,  157,   71,  157,  157,  157,  157,  157,   60,

      157,  157,  157,  157,  157,  157,  157,   53,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,   73,  157,
      157,  157,  157,  157,  157,  157,  157,  157,   81,  157,
       17,   17,   19,   19,   19,   19,   27,   27,   23,   23,
       32,   32,   10,   10,   10,   10,  163,  160,  160,  164,
      164,  160,  160,  160,  160,  160,  160,  143,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,   96,  157,
      157,  157,  157,  157,  157,  157,  157,  157,   61,  157,
       69,  157,   70,  157,  157,  157,  157,   87,  157,  123,

      157,   56,  157,   75,  157,   68,  157,  124,  157,   65,
      157,   80,  157,  157,  104,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,   36,   35,   17,   17,
       19,   19,   19,   19,   27,   27,   23,   23,   32,   32,
       10,   10,   10,   10,  163,  163,  164,  160,  160,  157,
      157,  157,  157,   39,  157,  157,  157,  120,  157,  157,
      157,  157,  110,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,   77,
      157,  157,  122,  157,  157,   63,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,   36,   35,   35,

       35,    2,   17,   19,   19,   19,   27,   23,   32,   10,
       10,   10,  163,  121,  157,  102,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  135,
      157,   98,  157,  115,  157,  157,   97,  157,  157,  157,
       57,  157,  114,  157,  105,  157,  157,   85,  157,   67,
      157,  107,  157,   59,  157,  157,  157,  157,  157,  157,
      157,  157,  132,  157,   72,  157,   35,   19,   19,   10,
       10,  157,  157,   93,  157,  157,  157,  100,  157,  111,
      157,  157,  157,  157,  157,  157,  157,   99,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  128,  157,  157,

      157,  157,   35,   35,   35,   19,   10,   10,  103,  157,
      157,  157,  157,  157,  157,  157,  157,  133,  157,  157,
      134,  157,  116,  157,  108,  157,  137,  157,   58,  157,
      106,  157,  117,  157,  157,  157,  157,  129,  157,  157,
      131,  157,   35,   35,   35,   10,   10,  151,  152,  141,
      144,   95,  157,   94,  157,  112,  157,  157,  157,  157,
      157,  101,  157,  157,  157,  157,  157,  157,  125,  157,
      157,  157,  157,   35,   35,   35,   10,   10,  139,  157,
      157,  157,  157,  157,  136,  157,  157,  157,  109,  157,
      118,  157,  157,  157,  157,   35,   10,   10,  142,  113,

      157,  157,  157,  157,  157,  138,  157,   92,  157,  157,
      157,  157,   10,   10,   10,  157,  157,  157,  157,  157,
      127,  157,  157,   12,   10,  145,  157,  157,  157,  157,
      126,  157,  130,  157,   10,  157,  157,  157,   88,  157,
       10,  140,  147,  157,  157,  157,   10,  149,  157,   89,
      157,  157,    3,   10,  146,  148,  153,  157,  157,    3,
       10,  157,  157,   10,  150,   90,  157,  157,   10,  157,
       10,  157,   10,  154,  156,  157,   10,  157,   16,   13,
      157,  157,   91,  157,  155
    } ;

static yyconst flex_int16_t yy_accept[1417] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        8,   11,   13,   16,   19,   22,   25,   28,   30,   33,
       36,   39,   42,   45,   48,   51,   54,   58,   63,   67,
       70,   73,   76,   79,   82,   85,   87,   90,   94,   98,
      101,  103,  106,  109,  112,  115,  118,  121,  124,  127,
      130,  133,  137,  141,  145,  148,  151,  154,  158,  161,
      164,  167,  170,  173,  176,  179,  181,  184,  187,  189,
      192,  195,  197,  200,  203,  206,  207,  210,  212,  215,

      218,  221,  225,  229,  232,  235,  237,  240,  242,  245,
      248,  250,  253,  255,  258,  261,  263,  266,  269,  271,
      274,  277,  281,  283,  287,  291,  295,  298,  302,  305,
      307,  310,  313,  315,  317,  320,  322,  325,  328,  331,
      334,  336,  339,  342,  343,  343,  344,  344,  345,  346,
      347,  347,  348,  348,  349,  350,  351,  352,  353,  354,
      355,  356,  357,  358,  359,  359,  360,  362,  364,  365,
      365,  366,  368,  369,  369,  371,  374,  376,  379,  381,
      384,  386,  387,  389,  390,  391,  392,  393,  394,  394,
      394,  394,  394,  394,  394,  394,  395,  395,  396,  396,

      396,  398,  400,  402,  404,  406,  408,  408,  408,  409,
      410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  421,  423,  424,  425,  426,  427,  428,  429,  431,
      433,  435,  436,  438,  439,  440,  441,  442,  443,  444,
      445,  446,  447,  448,  449,  450,  451,  452,  453,  453,
      454,  454,  454,  454,  454,  454,  454,  455,  455,  456,
      456,  456,  457,  458,  459,  459,  460,  460,  461,  461,
      461,  462,  463,  463,  464,  464,  464,  465,  466,  466,
      467,  467,  467,  468,  469,  470,  470,  471,  471,  471,
      472,  472,  472,  473,  473,  474,  475,  475,  475,  476,

      477,  477,  477,  477,  477,  477,  477,  478,  479,  479,
      479,  480,  481,  482,  483,  485,  486,  487,  487,  488,
      490,  491,  493,  495,  498,  500,  502,  505,  507,  508,
      509,  511,  512,  513,  515,  516,  517,  518,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  521,  523,  525,  527,  529,  531,  533,  533,  533,
      534,  535,  536,  537,  538,  539,  540,  541,  542,  543,
      544,  545,  546,  547,  548,  549,  550,  551,  552,  554,
      555,  556,  557,  558,  559,  560,  561,  562,  563,  564,
      565,  567,  568,  570,  572,  574,  576,  577,  579,  580,

      581,  582,  583,  584,  585,  586,  587,  588,  589,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  599,  599,
      599,  599,  599,  599,  599,  600,  600,  600,  601,  602,
      603,  604,  604,  605,  605,  605,  606,  606,  606,  607,
      607,  607,  608,  608,  608,  609,  609,  609,  610,  610,
      610,  611,  611,  611,  612,  612,  612,  613,  613,  613,
      613,  613,  614,  615,  615,  615,  616,  617,  617,  617,
      617,  617,  617,  617,  618,  619,  620,  621,  622,  623,
      623,  623,  624,  625,  625,  626,  627,  628,  629,  630,
      632,  634,  636,  638,  640,  642,  644,  646,  648,  649,

      650,  651,  652,  653,  654,  655,  656,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  658,
      660,  660,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  676,  677,
      678,  679,  680,  681,  682,  683,  684,  686,  687,  689,
      691,  692,  693,  694,  695,  697,  699,  700,  701,  703,
      705,  706,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
      727,  728,  729,  729,  729,  729,  729,  729,  730,  730,
      730,  730,  731,  732,  732,  733,  733,  733,  734,  734,

      734,  735,  735,  735,  736,  736,  736,  737,  737,  737,
      738,  738,  738,  739,  739,  739,  740,  740,  740,  741,
      741,  741,  742,  742,  743,  743,  743,  744,  745,  745,
      745,  746,  747,  747,  747,  748,  748,  749,  750,  751,
      751,  752,  753,  754,  755,  756,  757,  759,  761,  762,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  764,  764,  764,  766,  767,  768,  769,  770,
      771,  772,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  794,  796,  797,  798,  799,  800,  802,  803,  804,

      805,  806,  807,  808,  810,  811,  812,  813,  814,  815,
      816,  817,  818,  819,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  831,  831,  831,  831,  831,  831,  832,
      832,  832,  832,  833,  833,  833,  834,  834,  834,  835,
      835,  835,  836,  836,  836,  837,  837,  837,  838,  838,
      838,  839,  839,  839,  840,  840,  840,  841,  841,  841,
      842,  842,  842,  843,  843,  843,  843,  844,  845,  845,
      845,  846,  847,  847,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  859,  859,  859,

      860,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,  877,  878,
      879,  881,  882,  883,  884,  885,  886,  887,  888,  889,
      891,  893,  895,  896,  897,  898,  900,  902,  904,  906,
      908,  910,  912,  914,  915,  917,  918,  919,  920,  921,
      922,  923,  924,  925,  926,  927,  928,  929,  929,  929,
      929,  930,  930,  931,  931,  931,  931,  932,  932,  932,
      933,  933,  933,  934,  934,  935,  935,  935,  936,  936,
      937,  937,  937,  938,  938,  939,  939,  939,  940,  940,
      941,  941,  941,  941,  942,  943,  943,  944,  945,  946,

      947,  948,  949,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  951,  951,  952,  953,  954,
      956,  957,  958,  960,  961,  962,  963,  965,  966,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  982,  983,  985,  986,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1003, 1004, 1004, 1004, 1004, 1004, 1005,
     1005, 1005, 1006, 1006, 1007, 1007, 1007, 1008, 1008, 1008,
     1009, 1009, 1009, 1010, 1010, 1010, 1010, 1011, 1012, 1012,
     1013, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014, 1016, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034,
     1036, 1037, 1039, 1040, 1041, 1043, 1045, 1047, 1048, 1050,
     1052, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
     1065, 1067, 1068, 1068, 1068, 1068, 1068, 1068, 1069, 1069,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1073, 1074, 1076, 1077,
     1078, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090,
     1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101,

     1102, 1103, 1104, 1105, 1106, 1106, 1106, 1106, 1106, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1108, 1108, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1120, 1121, 1123, 1125, 1127,
     1129, 1131, 1133, 1135, 1136, 1137, 1138, 1140, 1141, 1143,
     1144, 1145, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1147, 1148, 1149, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1151, 1151, 1152, 1154, 1156,
     1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168,

     1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1177, 1177,
     1177, 1177, 1177, 1178, 1179, 1179, 1179, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1181, 1182, 1183, 1184, 1185,
     1187, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1197,
     1197, 1197, 1198, 1199, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1202, 1203, 1204, 1205, 1206, 1208, 1210,
     1211, 1212, 1213, 1213, 1213, 1214, 1214, 1215, 1215, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217,
     1218, 1219, 1220, 1221, 1223, 1224, 1224, 1224, 1225, 1225,
     1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1228, 1229, 1230, 1231, 1233, 1235, 1235, 1235, 1235, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1237, 1238,
     1239, 1241, 1241, 1241, 1241, 1242, 1243, 1243, 1243, 1244,
     1244, 1244, 1244, 1244, 1244, 1245, 1246, 1247, 1247, 1247,
     1247, 1248, 1248, 1248, 1248, 1249, 1249, 1249, 1249, 1250,
     1252, 1253, 1254, 1254, 1254, 1255, 1256, 1256, 1257, 1258,
     1258, 1258, 1259, 1260, 1261, 1261, 1261, 1262, 1262, 1262,
     1262, 1263, 1264, 1264, 1264, 1265, 1266, 1266, 1266, 1268,
     1269, 1269, 1269, 1270, 1270, 1270, 1271, 1271, 1271, 1272,
     1272, 1272, 1273, 1273, 1273, 1274, 1275, 1275, 1276, 1277,

     1277, 1277, 1278, 1278, 1279, 1280, 1280, 1281, 1281, 1282,
     1282, 1283, 1283, 1285, 1286, 1286
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       21,   21,   21,   21,   21,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   41,   42,   43,   44,   45,
       40,   46,   47,   48,   49,   40,   40,   50,   51,   40,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   40,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[86] =
    {   0,
        1,    2,    3,    1,    2,    1,    4,    1,    1,    1,
        5,    1,    1,    1,    1,    1,    1,    6,    1,    7,
        7,    7,    8,    1,    1,    1,    1,    1,    5,    1,
        9,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       11,   10,   10,   10,   12,   10,   10,   10,   11,   10,
       10,    1,   13,    1,    1,   10,   14,   14,    9,    9,
       14,   14,   10,   10,   11,   11,   10,   11,   10,   15,
       10,   12,   15,   10,   15,   11,   15,   10,   15,   10,
       10,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1701] =
    {   0,
        0,    0,   83,   84,   85,   86,   87,   88,  160,    0,
       91,   93, 3911, 3910,  245,    0,  330,    0,  415,    0,
      500,    0,   92,   99,  584,  588,  663,    0, 3908, 6203,
     6203, 6203, 3880,   92, 6203, 3879,   91,   97, 6203, 6203,
     3878,   94, 6203,   95,   93,  105,  731,  793,  852, 6203,
     6203,   99, 3865,  100, 6203,  571,   57,  585,   76, 6203,
       71, 6203, 3864,  568,   77,   81,  559,  556,  561,  586,
      549,  709,  715,  759,  580,  768,  569,  824,  702,  706,
     6203,  572, 6203, 6203, 6203, 6203,  575, 6203, 6203, 3887,
     6203, 6203,  781, 3824, 3807, 6203,  708,  711,  764,  786,

     6203, 6203, 6203,    0, 6203, 6203,  804,  714,  845, 6203,
     6203,  712,  746,  823, 6203, 6203, 6203,  722,  787,  826,
     6203,  135, 6203, 6203, 6203,  765,  788,  850, 6203, 6203,
     3807, 6203, 6203, 3798, 6203, 6203, 6203, 6203,  795,  831,
      802,  853,  857, 6203,  590, 6203,  915, 6203, 6203, 6203,
      593, 6203,  919, 6203, 6203, 6203, 6203, 6203, 6203, 3859,
      922, 6203, 6203, 6203, 3873,  931,  726,  818,  982,  953,
       70,  960,  882, 3857,  970,    0,    0,  986,  914,  993,
      992,  948, 1004,  122, 6203, 6203, 6203,  620,   98, 3837,
     3821, 3836, 3827,  771, 3813,  855,  856,  932,  874,  778,

     1010, 1012,  862, 1026, 1029,  893,    0,    0, 6203, 1028,
     1030, 1020, 1011, 1076, 1040, 1055,  954, 1037, 1062, 1047,
     1050, 1045, 1069, 1071, 1079, 1089, 1093, 1095, 1115, 1120,
     1104, 1106, 1126, 1119, 1124, 1133, 1140, 1144, 1153, 1152,
     1155, 1158, 1154, 1157, 1161, 6203, 6203, 6203, 3860, 6203,
     1170, 1230, 3797, 3788, 3786, 3798, 1183,  910, 1186,    0,
        0, 1187, 1191,    0, 1252, 1256,  946, 1263,    0,    0,
     1267, 1188,  961, 1217,    0,    0, 1207, 1203,  963, 1221,
        0,    0, 1220,  593, 1222, 1228, 1232,    0,    0, 1225,
     3781, 3781, 1234, 1237, 1235, 1253,    0,    0, 1242, 1239,

      912, 1305, 3795,  967, 1313, 3794, 6203, 1278,  589, 1327,
     1331, 6203, 1295,  859, 1281, 1297, 1296,    0, 1337, 1332,
     1300, 1325, 1062, 1293, 1346, 1315, 1339, 1336, 1357, 1097,
     1340, 1353, 1357, 1379, 1369, 6203, 6203, 6203, 6203, 3829,
     3828, 3807, 3794, 3782, 3792, 3798, 3783, 3782,    0,    0,
     1374, 1247, 1283, 1373, 1364, 1378, 1383,    0,    0, 1381,
     1403, 1389, 1388, 1391, 1419, 1408, 1390, 1410, 1416, 1417,
     1421, 1427, 1418, 1447, 1438, 1437, 1452, 1453, 1432, 1454,
     1458, 1457, 1464, 1467, 1469, 1491, 1478, 1493, 1494, 1500,
     1459, 1485, 1510, 1495, 1505, 1519, 1512, 1498, 1515, 1520,

     1522, 1527, 1513, 1531, 1537, 1529, 1539, 1541, 1544, 1548,
     1553, 1555, 1565, 1568, 1566, 1572, 1573, 1575,  807,  653,
     3765, 3762,    0,    0, 1574,    0,    0, 1606, 1581, 1582,
     1635, 1397, 1650,    0,    0, 1651,    0,    0, 1659,    0,
        0, 1601,    0,    0, 1609,    0,    0, 1610,    0,    0,
     1614,    0,    0, 1615,    0,    0, 1616, 3766, 3756,    0,
        0, 1617, 1641,    0,    0, 1619, 1630, 1677, 1729, 3737,
     1702, 1781, 3736, 1460, 6203, 6203, 1182, 6203, 1634, 1633,
     1656, 1779, 1680, 1717, 1701, 1730, 1665, 6203, 1679, 1682,
     6203, 6203, 1216, 6203, 1702, 1704, 6203, 1713, 1708, 6203,

     6203, 1310, 6203, 1727, 1723, 6203, 1732, 3784, 3783, 3770,
     3717, 3727, 3705, 3712, 3711, 3678,    0,    0, 1643, 1657,
        0,    0, 1743, 1754, 1755, 1770, 1772, 1797, 1756, 1784,
     1796, 1799, 1808, 1803, 1806, 1812, 1813, 1810, 1817, 1816,
     1837, 1838, 1843, 1844, 1846, 1847, 1845, 1849, 1848, 1850,
     1852, 1876, 1854, 1878, 1856, 1857, 1882, 1881, 1883, 1884,
     1891, 1886, 1889, 1890, 1895, 1911, 1919, 1898, 1922, 1923,
     1924, 1926, 1929, 1933, 1937, 1928, 1940, 1943, 1959, 1938,
     1950, 1954,    0, 3693, 3520,    0,    0, 1965,    0,    0,
      944, 1958, 2031, 1729, 2037,    0,    0, 2038,    0,    0,

     2042,    0,    0, 2044,    0,    0, 1975,    0,    0, 1985,
        0,    0, 1995,    0,    0, 1992,    0,    0, 1997,    0,
        0, 2002, 3525, 6203,    0,    0, 2000, 2013,    0,    0,
     2007, 2006, 2114, 2166, 6203, 2083, 2043, 1319, 1734, 1754,
     2142, 2060, 2026, 2075, 2044, 6203, 6203, 6203, 6203, 6203,
     3556, 3555, 3553, 3548, 3532,  725, 3546, 3534,  947,    0,
        0, 2057,    0,    0, 2010, 2078, 2076, 2062, 2011, 2035,
     2079, 2103, 2108, 2117, 2137, 2129, 2104, 2153, 2158, 2142,
     2159, 2167, 2177, 2168, 2180, 2178, 2187, 2184, 2186, 2017,
     2115, 2139, 2188, 2193, 2189, 2196, 2195, 2206, 2215, 2217,

     2220, 2222, 2221, 2223, 2224, 2226, 2227, 2230, 2248, 2251,
     2234, 2254, 2241, 2255, 2256, 2261, 2260, 2272, 2268, 2269,
     2281, 2282, 2266, 3572, 2341, 3521,    0,    0, 2296,    0,
        0, 3516, 2297,    0,    0, 2349,    0,    0, 2350,    0,
        0, 2351,    0,    0, 2363,    0,    0, 2306,    0,    0,
     2307,    0,    0, 2313,    0,    0, 2314,    0,    0, 2318,
        0,    0, 2317, 3507,    0,    0, 2322, 2323,    0,    0,
     2332, 2325, 2389, 2397, 6203, 6203, 1580, 2387, 1642, 6203,
     2098, 2338, 6203, 2347, 3545, 3556, 3541, 3551, 3518, 3510,
     3505, 3466, 3471, 3455, 3447, 3431, 6203,    0,    0, 2353,

        0, 2368, 2369, 2382, 2377, 2384, 2393, 2378, 2408, 2403,
     2397, 2398, 2414, 2417, 2418, 2424, 2422, 2427, 2429, 2433,
     2439, 2434, 2443, 2453, 2455, 2449, 2458, 2460, 2463, 2464,
     2465, 2468, 2469, 2475, 2473, 2470, 2471, 2474, 2484, 2489,
     2490, 2495, 2499, 2500, 2501, 2502, 2506, 2514, 2508, 2504,
     2515, 2505, 2517, 2530, 2533,    0, 2582, 3457,    0,    0,
     2520,    0, 2536, 3373,    0,    0, 2592,    0,    0, 2605,
        0,    0, 2606,    0, 2611,    0,    0, 2545,    0, 2546,
        0,    0, 2547,    0, 2561,    0,    0, 2562,    0, 2564,
     3370,    0,    0, 2565, 2566,    0, 2567, 2576, 1728, 2589,

     6203, 6203, 6203, 3389, 3376, 3383, 3366, 3276, 3278, 3266,
     3276, 3274, 3266,    0, 2571,    0, 2578, 2586, 2579, 2580,
     2591, 2600, 2597, 2608, 2607, 2616, 2632, 2633, 2617, 2622,
     2643, 2644, 2642, 2648, 2654, 2649, 2653, 2662, 2663, 2659,
     2675, 2673, 2674, 2680, 2678, 2683, 2684, 2688, 2689, 2693,
     2692, 2704, 2690, 2714, 2717, 2702, 2720,    0,    0,  955,
     2778, 3298,    0, 2719,    0, 3244,    0,    0, 2774,    0,
        0, 2782,    0, 2783,    0,    0, 2721,    0,    0, 2733,
        0,    0, 2736,    0, 3296,    0, 2738, 2749,    0, 2741,
     6203, 3267, 3253, 3248, 3248, 3236, 3224, 3210, 3213, 3224,

     3161,    0,    0, 2739, 2750, 2755, 2770, 2754, 2757, 2767,
     2765, 2776, 2781, 2766, 2792, 2796, 2800, 2786, 2787, 2811,
     2813, 2801, 2812, 2817, 2822, 2807, 2826, 2827, 2821, 2828,
     2831, 2832, 2841, 2833, 2837, 2838, 2848, 2852, 2857, 2839,
     2859, 1067,    0,    0, 3150,    0,    0, 2916,    0, 2920,
        0,    0,    0,    0,    0,    0,    0,    0, 1238,    0,
     2873,    0, 2874, 3181, 3180, 3152, 3145, 3118, 3133, 2903,
     3115, 3116, 3104,    0,    0, 2876, 2885, 2887, 2892, 2901,
     2902, 2870, 2895, 2900, 2909, 2911, 2919, 2927, 2913, 2926,
     2928, 2935, 2937, 2933, 2944, 2945, 2947, 2946, 2957, 2953,

     2954, 1468,    0, 3028,    0,    0, 3073,    0, 3012,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3062,    0,
     2971,    0, 2962, 3087, 3083, 3038, 3037, 3020, 3015, 3018,
     3019, 3008, 1362, 3005, 2988,    0, 2955, 2984, 2988, 2990,
     2999, 3003, 3015, 3008, 2993, 3024, 3002, 3020, 3039, 3034,
     3040, 3044, 3046, 3051, 3053, 3055, 3056, 3058, 3059, 1855,
     3118, 3152,    0, 2951,    0,    0,    0,    0,    0,    0,
     1099,    0, 3066, 3073, 6203, 6203, 2931, 1923, 2921, 2903,
     2901, 2906, 2899, 2887, 6203, 2850, 6203, 3061, 3075, 3077,
     3090, 3093, 3114, 3103, 3092, 3094, 3105, 3106, 3124, 3139,

     3123, 3125, 3143, 3140, 3210, 3257, 2776, 2769,    0,    0,
     2819, 2742, 3169, 3149, 2783, 2770, 6203, 2761, 2729, 2697,
     2676, 2668, 2642, 2623, 3167, 3165, 3171, 3176, 3182, 3150,
     3184, 3186, 3175, 3191, 3193, 3197, 3196,    0, 2669,    0,
     1244, 3206, 3319, 6203, 2624, 2591, 2572, 2578, 2541, 2508,
     2473, 1915, 3200, 3228, 3221, 3233, 3208, 3230, 3232, 3352,
     3353, 3354, 1044, 2430, 3383, 2417, 3356, 2977, 3358, 2410,
     2422, 2399, 2394, 2359, 2357, 2368, 2346, 2330, 3357, 3359,
     3363, 3365, 3387, 3366, 3390, 2302, 2301, 6203, 2276, 3391,
     2272, 6203, 2280, 2240, 2161, 2146, 2121, 2107, 2078, 3392,

     3394, 3395, 3397, 3401, 3402, 2065, 2023, 1999, 3404, 2032,
     1982, 1990, 1688, 1927, 1597, 1897, 1866, 3405, 3411, 3426,
     3412, 1831, 1819, 1807, 3422, 6203, 1822, 1806, 6203, 1807,
     1796,    0, 1787, 1690, 3423, 3433, 3436, 1518, 1444, 1422,
     3437, 1423, 1395, 1405, 6203, 1365, 1324, 1298, 3438, 3439,
     3447, 1312, 1237, 1157, 3448, 6203, 1169, 6203, 6203, 1181,
     1137, 3450, 3453, 1171, 1056, 1034, 3443, 1041, 1019, 1017,
     3455, 3477, 1026,  955, 3451, 6203,  937,  927, 3468, 3479,
     1522,  898, 3480,  849,  848, 3482,  816,  806, 3484, 1729,
      826, 3483,  792,  721, 3489, 6203,  716, 6203, 3493, 1942,

     2359, 3514,  613, 3487, 6203, 2155, 6203,  589, 3496,  563,
     3498,  116, 3490, 6203, 6203, 3590, 3605, 3620, 3635, 3650,
     3665, 3680, 3695, 3710, 3719, 3728, 3743, 3757, 3766, 3775,
     3784, 3793, 3805, 3817, 3827, 3835, 3843, 3851, 3859, 3872,
     3886, 3895, 3903, 3911, 3920, 3928, 3936, 3945, 3953, 3961,
     3970, 3978, 3986, 3995, 4003, 4017, 4026, 4040, 4049, 4057,
     4066, 4074, 4082, 4090, 4099, 4107, 4115, 4123, 4131, 4140,
     4148, 4161, 4170, 4178, 4191, 4200, 4208, 4216, 4224, 4232,
     4241, 4249, 4257, 4265, 4273, 4282, 4290, 4298, 4306, 4314,
     4323, 4331, 4339, 4347, 4355, 4364, 4372, 4386, 4401, 4410,

     4419, 4427, 4435, 4443, 4452, 4460, 4474, 4483, 4491, 4499,
     4508, 4516, 4529, 4538, 4546, 4554, 4562, 4575, 4584, 4592,
     4600, 4608, 4616, 4625, 4633, 4641, 4649, 4657, 4666, 4674,
     4682, 4690, 4698, 4707, 4715, 4723, 4731, 4739, 4748, 4756,
     4770, 4785, 4800, 4815, 4824, 4832, 4840, 4849, 4857, 4871,
     4880, 4888, 4896, 4905, 4913, 4921, 4929, 4942, 4951, 4959,
     4967, 4975, 4988, 4997, 5005, 5013, 5021, 5029, 5038, 5046,
     5054, 5062, 5070, 5079, 5087, 5095, 5103, 5111, 5120, 5128,
     5136, 5144, 5152, 5161, 5169, 5183, 5198, 5207, 5215, 5223,
     5232, 5246, 5261, 5270, 5278, 5286, 5295, 5303, 5311, 5324,

     5333, 5341, 5349, 5357, 5370, 5379, 5387, 5395, 5403, 5412,
     5420, 5428, 5436, 5445, 5453, 5461, 5469, 5478, 5486, 5494,
     5502, 5511, 5519, 5527, 5536, 5550, 5565, 5574, 5582, 5591,
     5599, 5607, 5620, 5629, 5637, 5645, 5658, 5667, 5675, 5683,
     5692, 5700, 5708, 5717, 5725, 5733, 5742, 5750, 5758, 5767,
     5775, 5783, 5791, 5806, 5815, 5823, 5831, 5839, 5852, 5861,
     5869, 5877, 5885, 5893, 5901, 5909, 5917, 5925, 5933, 5941,
     5949, 5957, 5971, 5980, 5988, 5996, 6004, 6012, 6020, 6028,
     6036, 6044, 6052, 6060, 6068, 6076, 6084, 6092, 6100, 6108,
     6116, 6124, 6132, 6140, 6148, 6156, 6164, 6172, 6180, 6188

    } ;

static yyconst flex_int16_t yy_def[1701] =
    {   0,
     1415,    1, 1416, 1416, 1417, 1417, 1418, 1418, 1415,    9,
     1419, 1419, 1420, 1420, 1415,   15, 1415,   17, 1415,   19,
     1415,   21, 1421, 1421, 1422, 1422, 1415,   27, 1415, 1415,
     1415, 1415, 1415, 1423, 1415, 1415, 1415, 1424, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1425, 1425, 1425, 1415,
     1415, 1415, 1415, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1426, 1415, 1426, 1426,

     1415, 1415, 1415, 1427, 1415, 1415, 1428, 1415, 1428, 1415,
     1415, 1429, 1415, 1429, 1415, 1415, 1415, 1430, 1415, 1430,
     1415, 1415, 1415, 1415, 1415, 1431, 1415, 1431, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1432, 1432,
     1415, 1432, 1432, 1415, 1423, 1415, 1433, 1415, 1415, 1415,
     1424, 1415, 1434, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415,   47,   47, 1415, 1415,
     1415, 1415, 1415, 1435, 1415,   48,   49, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1425, 1415, 1425, 1423, 1424,

     1425, 1425, 1425, 1425, 1425, 1425, 1436, 1437, 1415, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1426, 1415, 1426, 1438,
     1439, 1426, 1426, 1427, 1440, 1441, 1415, 1441, 1442, 1443,
     1441, 1444, 1415, 1444, 1445, 1446, 1444, 1447, 1415, 1447,
     1448, 1449, 1447, 1415, 1450, 1415, 1450, 1451, 1452, 1450,
     1415, 1415, 1453, 1415, 1453, 1453, 1454, 1455, 1453, 1453,

     1456, 1456, 1457, 1458, 1458, 1459, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1460, 1461, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1462, 1463,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1466, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,

     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1415, 1415,
     1415, 1415, 1467, 1468, 1469, 1470, 1471, 1469, 1469, 1469,
     1472, 1415, 1472, 1473, 1474, 1475, 1476, 1477, 1475, 1478,
     1479, 1480, 1481, 1482, 1480, 1483, 1484, 1485, 1486, 1487,
     1485, 1488, 1489, 1490, 1491, 1492, 1490, 1415, 1415, 1493,
     1494, 1495, 1495, 1496, 1497, 1495, 1495, 1498, 1498, 1415,
     1499, 1499, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1500,
     1500, 1501, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1502, 1503, 1504, 1504,
     1505, 1506, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1507, 1415, 1415, 1508, 1509, 1510, 1511, 1512,
     1415, 1510, 1513, 1415, 1513, 1514, 1515, 1513, 1516, 1517,

     1518, 1519, 1520, 1518, 1521, 1522, 1523, 1524, 1525, 1523,
     1526, 1527, 1528, 1529, 1530, 1528, 1531, 1532, 1533, 1534,
     1535, 1533, 1415, 1415, 1536, 1537, 1538, 1538, 1539, 1540,
     1538, 1538, 1541, 1542, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1543, 1544, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1545,
     1546, 1547, 1548, 1549, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,

     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1550, 1415, 1415, 1551, 1552, 1553, 1554,
     1555, 1415, 1553, 1556, 1557, 1558, 1559, 1560, 1558, 1561,
     1562, 1563, 1564, 1565, 1563, 1566, 1567, 1568, 1569, 1570,
     1568, 1571, 1572, 1573, 1574, 1575, 1573, 1576, 1577, 1578,
     1579, 1580, 1578, 1415, 1581, 1582, 1583, 1583, 1584, 1585,
     1583, 1583, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1586, 1415, 1587, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1588, 1589, 1590,

     1591, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1592, 1593, 1415, 1594, 1595,
     1596, 1597, 1596, 1415, 1598, 1599, 1600, 1601, 1602, 1600,
     1603, 1604, 1605, 1606, 1605, 1607, 1608, 1609, 1610, 1609,
     1611, 1612, 1613, 1614, 1613, 1615, 1616, 1617, 1618, 1617,
     1415, 1619, 1620, 1621, 1621, 1622, 1621, 1621, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1623, 1624, 1625, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1626, 1627, 1627,
     1627, 1415, 1628, 1629, 1630, 1415, 1631, 1632, 1633, 1634,
     1635, 1633, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
     1644, 1645, 1646, 1647, 1415, 1648, 1649, 1649, 1650, 1649,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1651, 1652, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1654, 1655, 1656, 1415, 1657, 1658, 1659, 1660, 1659,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1415, 1669,
     1649, 1670, 1649, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1671, 1672, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,

     1653, 1654, 1673, 1673, 1674, 1675, 1415, 1676, 1659, 1677,
     1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1415, 1686,
     1649, 1687, 1649, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1688, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1654,
     1654, 1673, 1689, 1415, 1690, 1691, 1692, 1693, 1694, 1695,
     1415, 1696, 1649, 1649, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,

     1653, 1653, 1653, 1653, 1654, 1654, 1673, 1415, 1697, 1698,
     1415, 1415, 1649, 1649, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1206, 1415, 1699,
     1415, 1649, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1415, 1415, 1649, 1415, 1649, 1415, 1649, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1415, 1415, 1415, 1415, 1649,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1653,

     1653, 1653, 1653, 1653, 1653, 1415, 1415, 1415, 1649, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1653, 1653, 1653,
     1653, 1415, 1415, 1415, 1649, 1415, 1415, 1415, 1415, 1415,
     1415, 1700, 1415, 1415, 1653, 1653, 1653, 1415, 1415, 1415,
     1649, 1415, 1415, 1415, 1415, 1700, 1415, 1415, 1653, 1653,
     1653, 1415, 1415, 1415, 1649, 1415, 1415, 1415, 1415, 1415,
     1415, 1653, 1653, 1415, 1415, 1415, 1649, 1415, 1415, 1415,
     1653, 1653, 1415, 1415, 1649, 1415, 1415, 1415, 1653, 1653,
     1415, 1415, 1649, 1415, 1415, 1653, 1415, 1415, 1649, 1415,
     1415, 1653, 1415, 1415, 1649, 1415, 1415, 1415, 1653, 1415,

     1415, 1649, 1415, 1653, 1415, 1415, 1415, 1415, 1653, 1415,
     1653, 1415, 1653, 1415,    0, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415

    } ;

static yyconst flex_int16_t yy_nxt[6289] =
    {   0,
       30,   31,   32,   31,   31,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       58,   57,   57,   57,   57,   57,   57,   57,   59,   57,
       57,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   57,   72,   73,   57,   74,   57,   57,
       57,   57,   75,   76,   77,   78,   79,   80,   57,   57,
       57,   81,   82,   83,   84,   86,   86,   89,   89,   92,
       92,   93,   93,   96,  130,   96,   87,   87,  146,  131,

      149,  130,  102,  103,  102,  103,  131,  152,  155,  197,
      160,  157,  161,  161,  161,  161,  205,  150,  162,  207,
      156,  158,  159,  163,  184,  185,  187,  188,  197,  197,
      340,  164,  198,  197,  312,  312,  284,   90,   90,  284,
      206,  206,  341,  205,  147, 1414,  208,  336,  337,  153,
      215,  198,  216,  217,   94,   94,  198,  165,   95,   95,
       30,   30,   96,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   30,   98,   30,   30,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   99,   97,
       97,   97,   97,   97,   97,  100,   97,   97,   97,   97,
       97,   30,   30,   30,   30,   30,  105,  106,   30,  105,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,   30,  108,   30,   30,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      109,  107,  107,  107,  107,  107,   30,   30,   30,   30,
       30,  110,  111,   30,  110,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   30,  113,   30,   30,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  114,  112,  112,  112,  112,
      112,   30,   30,   30,   30,   30,  115,  116,   30,  115,
       30,   30,   30,   30,   30,   30,  117,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   30,  119,   30,   30,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      120,  118,  118,  118,  118,  118,   30,   30,   30,   30,

      121,  122,  123,  121,  122,  121,  121,  121,  121,  121,
      121,  124,  125,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  121,  127,  121,  121,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  128,  126,  126,  126,  126,
      126,  121,  121,  121,  121,  132,  133,  189,  132,  132,
      133,  199,  132,  248,  284,  200,  146,  284,  246,  210,

      211,  197,  162,  152,  190,  191,  212,  163,  197,  192,
     1412,  197,  213,  197,  193,  218,  221,  194,  195,  228,
      197,  197,  219,  214,  198,  201,  222,  249,  223,  220,
      224,  198,  197,  202,  198, 1410,  198,  197,  197,  225,
      235,  165,  147,  198,  198,  153,  338,  339,  240,  203,
      203, 1408,  201,  226,  247,  198,  227,  420,  134,  583,
      204,  198,  134,   30,  135,  136,   30,  135,   30,   30,
       30,   30,   30,   30,  137,  138,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  139,  140,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,   30,  141,   30,   30,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  142,  139,  143,  139,
      139,  139,  139,  139,   30,   30,   30,   30,  166,  229,
      167,  168,  168,  169,  197,  229, 1403,  230,  197,  260,
      258,  197,  269,  230,  273,  170,  171,  197,  792,  245,
      231,  172,  244,  793,  279, 1415,  229,  198,  232,  173,
      174,  198,  229,  259,  233,  251,  261,  274,  152,  270,
      233,  170,  171, 1401,  275,  175,  175,  280,  172,  201,

      252,  252,  252,  252, 1415,  265,  173,  202,  265,  174,
      166,  197,  176,  176,  176,  177,  258,  286,  346,  347,
      197,  276,  262,  203,  203,  248,  201,  170,  171,  234,
      153,  236,  237,  178,  204,  281,  288,  168,  258,  259,
      287,  179,  238,  198,  263,  239,  265,  294,  253,  265,
      297, 1400,  254,  170,  171, 1398,  267,  180,  180,  249,
      178,  259,  282,  289,  205,  296, 1394, 1415,  179,  166,
      295,  177,  177,  177,  177,  273,  197,  298,  279,  268,
      146,  277,  241,  294,  283, 1393,  170,  171,  206,  206,
     1391,  205,  181,  242, 1390,  243, 1415,  267,  274,  198,

      182,  280,  286,  271,  349,  294,  295,  197,  290,  294,
      353,  299,  170,  171,  197,  300,  183,  183,  146,  181,
      268,  301,  316,  475,  475,  287,  147,  182,  295,  304,
      198,  350,  295,  357,  302,  302,  302,  354,  305,  305,
      305,  161,  161,  161,  161,  197,  317,  317,  591,  316,
      161,  161,  161,  161,  325, 1388,  170,  171,  423,  960,
      357, 1042,  171,  796,  147,  170,  171,  310,  198,  310,
     1385,  171,  311,  311,  311,  311,  797,  152,  326,  326,
     1384,  325,  170,  171,  197,  424,  308,  308,  332,  171,
      351,  170,  171,  303,  434,  308,  308,  306,  171,  166,

      313,  169,  169,  169,  169,  312,  197,  198,  314,  440,
      320,  446,  333,  333,  381,  332,  170,  171,  321,  153,
      732,  435,  171, 1382,  315,  315,  322,  313,  312,  198,
     1381,  312,  329,  327,  323,  314,  441,  320,  447,  312,
      330,  328,  170,  171,  334,  321,  308,  308, 1263,  171,
      324,  324,  335,  322,  312, 1378,  331,  331,  202,  329,
      327,  323,  197,  197,  197,  312, 1377,  330,  328,  355,
     1376,  334,  197, 1103,  203,  203,  352,  352,  197,  335,
      197,  197,  197,  364,  351,  204,  198,  198,  363,  197,
      352,  352,  197,  356,  356,  198,  355,  197,  360,  197,

      362,  198,  197,  361,  198,  198,  365,  197,  379, 1374,
      382,  385,  198,  351,  197,  198,  384, 1286,  383, 1104,
      386,  197,  198,  197, 1373,  198,  491,  491,  197,  380,
      198,  197,  366,  367,  368,  369,  370,  198,  371,  372,
      373,  197,  387,  374,  198,  197,  388,  197,  375,  376,
      377,  198,  378,  389,  198,  393,  197, 1211,  197,  390,
      396,  500,  500,  394,  198,  391,  396,  197,  198,  392,
      198,  197,  197,  397,  251, 1364,  197, 1212,  197,  198,
      398,  198,  393, 1370,  351,  197,  400,  396,  399,  404,
      395,  401,  197,  396,  198,  198,  197,  402,  403,  198,

      408,  198,  406,  405,  197,  197,  197,  197,  198,  197,
      197, 1369,  415,  197, 1368,  198,  409,  410,  412,  198,
      407,  416,  413,  411,  417,  418, 1366,  198,  198,  198,
      198,  414,  198,  198,  420,  258,  198,  253,  258,  258,
      273,  254, 1059,  258,  425,  428,  478,  478, 1241,  252,
      252,  252,  252,  265,  430,  279,  265,  265,  259,  273,
      265,  259,  259,  274,  265,  429,  259,  265,  265,  273,
      445,  265,  279,  279,  286,  442,  452,  286,  280,  448,
      494,  494,  274,  451,  286,  460,  294,  294,  457,  463,
      454,  294,  274,  462,  294,  280,  280,  287,  466,  197,

      287, 1365,  467,  453,  432,  294, 1119,  287,  267,  295,
      295,  146,  461,  312,  295,  267, 1364,  295,  312,  267,
     1264,  436,  198,  152,  468,  468,  468,  433,  295,  476,
      439,  268,  471,  471,  471,  197,  479,  477,  268,  312,
      489,  492,  268,  314, 1361,  312,  311,  311,  311,  311,
      311,  311,  311,  311,  481,  495,  476,  147,  198,  474,
      474,  478,  478,  479,  477,  153,  171,  489,  492, 1360,
      314,  171,  487,  323,  503,  503,  498,  483, 1184,  496,
      488,  484,  495,  775,  775,  485,  493,  497,  501,  490,
      490, 1185,  171,  502, 1359,  308,  308,  504,  171,  487,

      323,  486,  486,  498,  483,  330,  496,  488,  484,  507,
      494,  494,  485,  493,  497,  501,  197,  503,  503,  505,
      502,  499,  499,  520,  504,  197,  197,  506,  356,  356,
      197,  351,  330,  197, 1358,  197,  507,  519, 1357,  198,
      197,  197,  197,  197,  526,  596,  505,  527,  198,  198,
      520,  523, 1356,  198,  506,  197,  198,  525,  198,  528,
      197,  351,  197,  198,  198,  532,  198,  524,  197,  197,
      197,  197,  597,  197, 1103,  529,  534, 1354,  198,  197,
      533,  530,  531,  198,  197,  198,  538,  539,  536,  197,
      197,  198,  198,  198,  198,  535,  198,  537,  541,  197,

      542,  543,  198,  540,  197,  197,  197,  198,  476,  197,
      197,  197,  198,  198,  548,  544,  197,  549, 1353,  197,
     1104,  197,  198,  546,  547,  553, 1381,  198,  198,  198,
      197,  545,  198,  198,  198,  476,  550,  197,  555,  198,
      551,  552,  198,  197,  198,  197,  197,  197,  554,  351,
      197,  351,  197,  198,  557,  559,  558,  197,  394,  560,
      198,  556,  197,  351,  197,  197,  198,  197,  198,  198,
      198,  197,  197,  198,  197,  198,  561,  562,  564,  197,
      198,  197, 1387,  197,  563,  395,  560,  198,  566,  197,
      198,  197, 1352,  197,  198,  198,  197,  198,  569,  570,

      197,  565,  198,  567,  198,  197,  198,  197,  572,  568,
      591,  576,  198,  575,  198,  571,  198,  197,  197,  573,
      197,  579,  574,  198,  197,  197,  258,  197,  198,  581,
      198,  580,  578,  258,  258,  577,  265,  588,  592,  265,
      198,  198,  582,  198,  901,  901, 1332,  198,  198,  259,
      198,  265,  265,  273,  265,  265,  259,  259,  258,  428,
      265,  273,  279,  265,  607,  610,  279,  286,  286,  294,
      616,  294,  622,  613,  635, 1332,  274,  636,  619,  628,
      627,  259,  294,  146,  274,  280,  632,  594,  631,  280,
      287,  287,  295,  294,  295,  197,  301,  301,  301,  662,

      636,  635,  594,  267,  636,  295,  780,  780,  598,  197,
      595,  267,  152,  488,  601,  604,  295, 1329,  198,  646,
      637,  304,  304,  304, 1348,  595,  268,  636,  638,  147,
      492,  640,  198,  640,  268,  146,  641,  641,  641,  641,
      488,  642,  647, 1330,  639,  639,  646,  637,  633,  633,
      633,  633,  497,  648,  153,  638,  501,  492, 1396,  633,
      633,  633,  633,  633,  633,  643,  643,  649,  642,  647,
      644,  506,  650,  641,  641,  641,  641,  734,  645,  497,
      648,  147,  776,  501, 1397,  633,  633,  633,  633,  633,
      633,  152,  991,  991,  649,  197,  318,  644,  506,  650,

      634,  634,  634,  634,  735,  645,  197,  197,  197,  776,
      665,  634,  634,  634,  634,  634,  634, 1347,  198,  483,
      671,  666,  197,  484,  197, 1345,  667,  485, 1344,  198,
      198,  198,  668,  153,  669,  670,  197,  634,  634,  634,
      634,  634,  634,  486,  486,  198,  483,  198,  197,  197,
      484,  197,  672, 1343,  485,  197, 1342,  351,  197,  198,
      197, 1103,  197,  674,  197,  197,  681, 1340,  197,  197,
      673,  198,  198,  683,  198, 1339,  675,  676,  198,  677,
      678,  198,  679,  198,  682,  198,  680,  198,  198,  197,
      197,  198,  198,  684,  686,  197,  197,  197,  197,  197,

      197,  197,  197, 1338,  197,  687,  197, 1104,  197,  197,
      685, 1334,  198,  198,  690,  691,  688,  689,  198,  198,
      198,  198,  198,  198,  198,  198,  692,  198,  197,  694,
      197,  198,  198,  197,  197,  197,  197, 1333,  197, 1216,
      693,  197,  197,  197, 1405,  695, 1406,  197, 1277, 1278,
      197,  198, 1217,  198,  696,  697,  198,  198,  198,  198,
      698,  198,  699,  197,  198,  198,  198,  701,  700,  351,
      198,  197,  704,  198,  197,  197,  197, 1331,  197,  703,
      197,  197,  705,  702,  708,  197,  198,  709,  707,  197,
      197,  710,  197,  706,  198,  197,  711,  198,  198,  198,

      713,  198,  197,  198,  198,  715,  197,  712,  198,  714,
      258,  197,  198,  198,  723,  198,  716,  258,  198,  717,
      718,  729, 1328, 1327,  722,  198,  719,  273,  720,  198,
      733,  748,  265,  259,  198,  265,  721,  273,  265,  265,
      259,  265,  265,  265,  279,  265,  265,  279,  265,  286,
      274,  754,  294,  760,  286,  768,  767,  751,  294,  294,
      274, 1326,  197,  197,  757,  294,  781,  280, 1324,  197,
      280,  807,  287,  827,  763,  295,  771,  287,  772,  806,
     1323,  295,  295,  594,  784,  198,  198,  197,  295,  594,
      594,  638,  198,  781,  267,  736,  267,  773,  742,  773,

      779,  739,  774,  774,  774,  774,  595,  639,  639,  197,
      198,  784,  595,  595,  197,  782,  745,  268,  638,  268,
      146, 1322, 1317,  783,  780,  780,  805,  779,  197,  800,
      197,  197,  198,  633,  633,  633,  633,  198,  902, 1316,
     1315,  808,  782,  804,  633,  633,  633,  633,  633,  633,
      783,  198,  803,  198,  198,  197,  197, 1405,  809, 1406,
      197,  641,  641,  641,  641,  902,  147,  197,  814,  197,
      633,  633,  633,  633,  633,  633,  152,  777,  198,  198,
      810,  197,  777,  198,  811,  634,  634,  634,  634,  197,
      198,  197,  198, 1314,  197, 1313,  634,  634,  634,  634,

      634,  634,  813,  777,  198,  197,  778,  778,  812,  777,
      197,  197,  198,  815,  198,  816,  817,  198,  153,  197,
      197,  818,  634,  634,  634,  634,  634,  634,  198,  197,
      197,  819,  197,  198,  198,  821,  197,  820,  197,  197,
      197,  197,  198,  198,  825,  197,  826,  197,  197,  830,
      823,  351,  198,  198,  822,  198,  824,  828,  197,  198,
      829,  198,  198,  198,  198,  831,  832,  197,  198,  197,
      198,  198,  197,  197,  197,  197,  197,  834,  197,  197,
      837,  198,  197,  838,  835,  840,  197,  839, 1312,  833,
      198,  836,  198,  197,  844,  198,  198,  198,  198,  198,

      197,  198,  198,  197,  841,  198,  197,  197,  197,  198,
     1311,  519,  197,  197,  843,  845,  198,  847,  197, 1310,
      197,  197,  842,  198,  197,  846,  198,  849,  848,  198,
      198,  198,  850,  197,  197,  198,  198,  854,  852,  853,
     1308,  198,  851,  198,  198,  725,  855,  198,  258,  258,
      265,  265,  265,  265,  265,  265,  198,  198,  273,  273,
      857,  857,  857,  857,  265,  279,  279,  265,  861,  286,
      286,  259,  259, 1307,  294,  294, 1306,  294,  878, 1299,
     1298,  274,  274, 1407,  294,  883,  783,  903,  280,  280,
      888, 1297,  287,  287,  894, 1296,  898,  295,  295,  895,

      295,  594,  594,  267, 1295,  197,  870,  295,  774,  774,
      774,  774,  867,  783,  903,  267,  774,  774,  774,  774,
      197,  197,  901,  873,  595,  595,  268,  901,  198,  197,
      197, 1401,  899,  917,  197,  921,  197,  899,  268, 1294,
      920, 1293,  918,  198,  198,  197,  919,  922,  901,  197,
      197, 1292,  198,  198,  901,  197, 1291,  198,  899,  198,
      197,  900,  900,  923,  899,  926,  197,  924,  198,  197,
      197,  925,  198,  198,  197,  928,  197,  931,  198,  197,
      930,  197,  932,  198, 1289,  197,  197,  929,  927,  198,
     1287,  197,  198,  198,  935,  197, 1276,  198,  933,  198,

      934,  197,  198,  937,  198,  197,  936,  197,  198,  198,
      197,  939,  197,  938,  198,  197,  197,  197,  198,  940,
      197,  197,  197,  197,  198,  197,  197,  197,  198,  944,
      198,  946,  941,  198,  945,  942,  197,  943,  198,  198,
      198,  197,  197,  198,  198,  198,  198,  197,  198,  198,
      198,  197,  197,  197,  197, 1275,  197,  197,  197,  198,
      197,  947,  948,  954,  198,  198,  197,  197,  951,  197,
      198, 1274,  258,  952,  198,  198,  198,  198,  949,  198,
      198,  198,  197,  198,  950,  197,  960,  953,  258,  198,
      198,  955,  198,  265,  956,  259,  265,  273,  273,  279,

      957,  961,  961,  961,  961,  198,  265,  265,  198,  265,
      265,  259,  265,  279,  286,  265,  286,  294,  294,  294,
      274,  274,  280,  197,  991, 1273,  988, 1272,  294,  991,
      197,  197,  197, 1271, 1007, 1006,  280,  287,  197,  287,
      295,  295,  295,  197,  594,  990,  198, 1004,  969,  197,
      991,  295,  197,  198,  198,  198,  991,  594,  267,  197,
      197,  198, 1270,  267, 1005, 1009,  198,  595,  197,  197,
     1008, 1010,  198, 1263,  197,  198, 1011,  972, 1252, 1251,
      595,  268,  198,  198,  197,  197,  268, 1012, 1013, 1017,
     1016,  198,  198, 1015,  197,  197,  197,  198, 1018, 1019,

      197,  197, 1020, 1021, 1014,  197,  197,  198,  198, 1022,
     1250,  197, 1024, 1023,  197,  197, 1249,  198,  198,  198,
     1027, 1025, 1026,  198,  198,  197,  197,  197,  198,  198,
      197,  351,  197, 1029,  198,  197,  197,  198,  198, 1028,
      197,  197,  197, 1248,  197,  197, 1037, 1032,  198,  198,
      198, 1034, 1030,  198,  197,  198,  197, 1031,  198,  198,
     1035, 1033, 1036,  198,  198,  198,  197,  198,  198,  197,
     1038,  258,  197,  273, 1247,  265, 1040,  198,  265,  198,
     1041, 1039,  960,  265,  265,  279,  265,  265,  286,  198,
      294,  197,  198,  294,  259,  198,  274,  961,  961,  961,

      961,  294,  197, 1063, 1246, 1077,  197,  197,  280,  197,
     1245,  287, 1244,  295,  198, 1078,  295,  197,  197,  197,
     1211, 1061,  197, 1241,  295,  198,  594, 1076,  197,  198,
      198, 1082, 1079,  197,  594,  267, 1080, 1239,  197,  197,
      198, 1084,  198, 1081,  197,  198, 1048, 1085,  197,  595,
     1083,  198,  197,  197, 1162, 1087,  198,  595,  268,  197,
     1086,  198,  198,  197,  197,  197, 1088,  198, 1089,  197,
     1090,  198, 1091,  197,  197,  198,  198, 1092,  197,  197,
      197, 1093,  198,  197,  197,  197,  198,  198,  198,  197,
      197,  197,  198,  197, 1094, 1224,  198,  198, 1098, 1096,

      197,  198,  198,  198,  197, 1095,  198,  198,  198,  197,
     1097,  197,  198,  198,  198, 1099,  198,  265, 1101, 1100,
      265,  265,  197,  198,  265,  294,  294,  198,  197, 1123,
     1121, 1223,  198, 1222,  198, 1130, 1131,  197, 1221,  197,
     1138, 1132, 1139, 1220,  197,  198, 1219,  197,  295,  295,
      351,  198,  197,  197,  197, 1137, 1141, 1142, 1144, 1218,
      198,  197,  198,  197, 1145,  197, 1140,  198,  594, 1143,
      198,  197,  594, 1215, 1147,  198,  198,  198,  197,  197,
      197, 1146, 1148, 1150,  198,  197,  198,  197,  198,  197,
     1151,  595, 1152, 1153,  198,  595,  197,  197,  197,  197,

     1149,  198,  198,  198, 1154,  197,  197,  197,  198,  197,
      198, 1156,  198,  265,  294, 1208,  265, 1187, 1155,  198,
      198,  198,  198,  294, 1157,  460, 1158, 1173,  198,  198,
      198, 1174,  198, 1159, 1160, 1186,  197,  295, 1102, 1188,
      197, 1183,  197, 1189, 1289,  197,  295, 1161, 1161, 1161,
     1190,  197,  461, 1182,  197,  197, 1102, 1191, 1195,  198,
      197, 1181, 1180,  198,  594,  198, 1179,  197,  198, 1192,
     1196,  519,  197, 1193,  198, 1194,  197,  198,  198, 1178,
     1102, 1177, 1197,  198, 1102, 1102,  197,  595, 1102, 1102,
      198,  197,  197, 1198, 1199,  198,  197, 1102,  197,  198,

     1102, 1200, 1102,  197, 1102,  197, 1162,  197,  197,  198,
      197,  197, 1176,  197,  198,  198, 1175, 1202,  294,  198,
     1171,  198, 1204, 1201, 1103,  294,  198,  197,  198,  197,
      198,  198, 1225,  198,  198, 1203,  198, 1205, 1205, 1205,
     1213,  295,  197, 1214,  197,  197,  197, 1164,  295, 1230,
      198, 1135,  198, 1226, 1227,  197, 1134,  197,  197, 1229,
     1231, 1232, 1133, 1129, 1128,  198,  197,  198,  198,  198,
     1104, 1206, 1206, 1206, 1206,  197,  197,  197,  198, 1233,
      198,  198, 1206, 1206, 1206, 1206, 1206, 1206, 1127,  198,
     1126,  197,  197, 1228, 1234,  197, 1125, 1124,  198,  198,

      198,  294,  197, 1236, 1207, 1235, 1107, 1073, 1206, 1206,
     1206, 1206, 1206, 1206,  198,  198, 1103,  197,  198,  197,
     1237,  294, 1253,  197,  295,  198, 1243,  197,  197, 1160,
     1160, 1160, 1255, 1242,  197, 1254,  197, 1257,  197, 1258,
      198, 1259,  198,  197,  295,  197,  198, 1256,  197,  197,
      198,  198,  197, 1260, 1072, 1071, 1262,  198,  294,  198,
      197,  198, 1104, 1103, 1282, 1070,  198, 1261,  198, 1069,
     1068,  198,  198,  197, 1265,  198, 1238, 1238, 1238, 1238,
      197,  295,  197,  198,  197,  197, 1067, 1238, 1238, 1238,
     1238, 1238, 1238, 1281, 1280, 1066,  198, 1065, 1279, 1064,

     1059, 1045,  962,  198, 1001,  198, 1000,  198,  198, 1104,
      999,  998,  997, 1238, 1238, 1238, 1238, 1238, 1238, 1266,
     1266,  996, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1267, 1267,
     1267, 1267, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1266, 1268, 1266, 1266, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1269, 1267, 1267, 1267, 1267, 1267,

     1266, 1266, 1266, 1266,  197,  197,  197, 1288,  294,  197,
      294,  197,  995,  994, 1284,  197,  462,  197,  197, 1301,
      993,  992, 1283, 1290, 1285, 1290,  985,  198,  198,  198,
     1300,  295,  198,  295,  198,  294, 1302, 1303,  198,  197,
      198,  198,  197,  294,  197,  966,  197,  197, 1304,  197,
     1320, 1305, 1318,  197,  197, 1309,  294,  197,  295, 1321,
     1335,  962,  198,  197,  197,  198,  295,  198, 1319,  198,
      198,  913,  198, 1325,  294,  197,  198,  198,  197,  295,
      198, 1336, 1341, 1349, 1337,  197,  198,  198,  197,  294,
      197,  197, 1355,  912, 1350,  294,  911,  295,  198,  197,

      294,  198,  197,  294,  910,  197, 1351,  197,  198,  462,
      909,  198,  295,  198,  198, 1363, 1362, 1367, 1375, 1383,
      197, 1371,  198,  295, 1372,  198,  295, 1379,  198,  197,
      198,  197,  294, 1380,  197,  197,  294, 1389, 1407,  197,
     1399,  294,  197,  198, 1395,  197, 1392, 1409,  197,  908,
      197, 1411,  198, 1386,  198,  295,  907,  198,  198,  295,
     1404, 1402,  198,  906,  295,  198,  294,  905,  198, 1413,
      788,  198,  904,  198,  786,  891,  864,  858,  856,  795,
      794,  791,  790,  789,  788,  786, 1402,  764,  726,  295,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  145,  145,  725,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      151,  151,  659,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  264,  264,  658,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  266,  657,
      656,  655,  654,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  145,  145,
      653,  145,  652,  651,  306,  303,  624,  145,  145,  145,
      151,  151,  623,  151,  585,  584,  516,  515,  514,  151,
      151,  151,  319,  319,  319,  319,  513,  512,  511,  510,
      319,  358,  358,  358,  509,  508,  473,  470,  358,  359,
      359,  359,  459,  458,  422,  421,  359,  426,  426,  426,
      256,  255,  419,  348,  426,  427,  427,  427,  345,  344,
      343,  342,  427,  431,  318,  309,  307,  292,  291,  256,
      431,  431,  431,  431,  431,  431,  431,  266,  255,  250,
      209,  186,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  437,  437,  437,  154,  148,  144, 1415,  437,  438,
      438,  438,   96,   96, 1415, 1415,  438,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  443,  443,  443, 1415,
     1415, 1415, 1415,  443,  444,  444,  444, 1415, 1415, 1415,
     1415,  444,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  449,  449,  449, 1415, 1415, 1415, 1415,  449,  450,
      450,  450, 1415, 1415, 1415, 1415,  450,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  455,  455,  455, 1415,
     1415, 1415, 1415,  455,  456,  456,  456, 1415, 1415, 1415,
     1415,  456,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  464,  464,  464, 1415, 1415, 1415, 1415,  464,  465,
      465,  465, 1415, 1415, 1415, 1415,  465,  145,  145, 1415,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  469,  469,  469, 1415, 1415, 1415,  469,  469,
      151,  151, 1415,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  472,  472,  472, 1415, 1415,
     1415,  472,  472,  480,  480,  480, 1415, 1415, 1415, 1415,
      480,  482,  482,  482,  482, 1415,  482,  482, 1415,  482,
      517,  517,  517, 1415, 1415, 1415, 1415,  517,  518,  518,
      518, 1415, 1415, 1415, 1415,  518,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  521,  521,  521, 1415, 1415,
     1415, 1415,  521,  522,  522,  522, 1415, 1415, 1415, 1415,
      522,  586,  586,  586, 1415, 1415, 1415, 1415,  586,  587,
      587,  587, 1415, 1415, 1415, 1415,  587,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  589,  589,  589, 1415,
     1415, 1415, 1415,  589,  590,  590,  590, 1415, 1415, 1415,
     1415,  590,  593, 1415, 1415, 1415, 1415,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  599,  599,  599, 1415,
     1415, 1415, 1415,  599,  600,  600,  600, 1415, 1415, 1415,
     1415,  600,  266, 1415, 1415, 1415, 1415,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  602,  602,  602, 1415,
     1415, 1415, 1415,  602,  603,  603,  603, 1415, 1415, 1415,
     1415,  603,  605,  605,  605, 1415, 1415, 1415, 1415,  605,
      606,  606,  606, 1415, 1415, 1415, 1415,  606,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  608,  608,  608,
     1415, 1415, 1415, 1415,  608,  609,  609,  609, 1415, 1415,
     1415, 1415,  609,  611,  611,  611, 1415, 1415, 1415, 1415,
      611,  612,  612,  612, 1415, 1415, 1415, 1415,  612,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  614,  614,
      614, 1415, 1415, 1415, 1415,  614,  615,  615,  615, 1415,

     1415, 1415, 1415,  615,  617,  617,  617, 1415, 1415, 1415,
     1415,  617,  618,  618,  618, 1415, 1415, 1415, 1415,  618,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  620,
      620,  620, 1415, 1415, 1415, 1415,  620,  621,  621,  621,
     1415, 1415, 1415, 1415,  621,  625,  625,  625, 1415, 1415,
     1415, 1415,  625,  626,  626,  626, 1415, 1415, 1415, 1415,
      626,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      629,  629,  629, 1415, 1415, 1415, 1415,  629,  630,  630,
      630, 1415, 1415, 1415, 1415,  630,  145,  145, 1415,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  151,  151, 1415,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  480,  480,  480, 1415,
     1415,  480, 1415,  480,  482,  482,  482,  482, 1415,  482,
      482, 1415,  482,  660,  660,  660, 1415, 1415, 1415, 1415,
      660,  661,  661,  661, 1415, 1415, 1415, 1415,  661,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  663,  663,
      663, 1415, 1415, 1415, 1415,  663,  664,  664,  664, 1415,
     1415, 1415, 1415,  664,  724,  724,  724, 1415,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  727,
      727,  727, 1415, 1415, 1415, 1415,  727,  728,  728,  728,

     1415, 1415, 1415, 1415,  728,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  730,  730,  730, 1415, 1415, 1415,
     1415,  730,  731,  731,  731, 1415, 1415, 1415, 1415,  731,
      593, 1415, 1415, 1415, 1415,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  737,  737,  737, 1415, 1415, 1415,
     1415,  737,  738,  738,  738, 1415, 1415, 1415, 1415,  738,
      740,  740,  740, 1415, 1415, 1415, 1415,  740,  741,  741,
      741, 1415, 1415, 1415, 1415,  741,  266, 1415, 1415, 1415,
     1415,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      743,  743,  743, 1415, 1415, 1415, 1415,  743,  744,  744,

      744, 1415, 1415, 1415, 1415,  744,  746,  746,  746, 1415,
     1415, 1415, 1415,  746,  747,  747,  747, 1415, 1415, 1415,
     1415,  747,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  749,  749,  749, 1415, 1415, 1415, 1415,  749,  750,
      750,  750, 1415, 1415, 1415, 1415,  750,  752,  752,  752,
     1415, 1415, 1415, 1415,  752,  753,  753,  753, 1415, 1415,
     1415, 1415,  753,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  755,  755,  755, 1415, 1415, 1415, 1415,  755,
      756,  756,  756, 1415, 1415, 1415, 1415,  756,  758,  758,
      758, 1415, 1415, 1415, 1415,  758,  759,  759,  759, 1415,

     1415, 1415, 1415,  759,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  761,  761,  761, 1415, 1415, 1415, 1415,
      761,  762,  762,  762, 1415, 1415, 1415, 1415,  762,  765,
      765,  765, 1415, 1415, 1415, 1415,  765,  766,  766,  766,
     1415, 1415, 1415, 1415,  766,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  769,  769,  769, 1415, 1415, 1415,
     1415,  769,  770,  770,  770, 1415, 1415, 1415, 1415,  770,
      145,  145, 1415,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  151,  151, 1415,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      798,  798,  798, 1415, 1415, 1415, 1415,  798,  799,  799,
      799, 1415, 1415, 1415, 1415,  799,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  801,  801,  801, 1415, 1415,
     1415, 1415,  801,  802,  802,  802, 1415, 1415, 1415, 1415,
      802,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  859,  859,  859, 1415,
     1415, 1415, 1415,  859,  860,  860,  860, 1415, 1415, 1415,

     1415,  860,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  862,  862,  862, 1415, 1415, 1415, 1415,  862,  863,
      863,  863, 1415, 1415, 1415, 1415,  863,  865,  865,  865,
     1415, 1415, 1415, 1415,  865,  866,  866,  866, 1415, 1415,
     1415, 1415,  866,  593, 1415, 1415, 1415, 1415,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  868,  868,  868,
     1415, 1415, 1415, 1415,  868,  869,  869,  869, 1415, 1415,
     1415, 1415,  869,  871,  871,  871, 1415, 1415, 1415, 1415,
      871,  872,  872,  872, 1415, 1415, 1415, 1415,  872,  266,
     1415, 1415, 1415, 1415,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  874,  874,  874, 1415, 1415, 1415, 1415,
      874,  875,  875,  875, 1415, 1415, 1415, 1415,  875,  876,
      876,  876, 1415, 1415, 1415, 1415,  876,  877,  877,  877,
     1415, 1415, 1415, 1415,  877,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  879,  879,  879, 1415, 1415, 1415,
     1415,  879,  880,  880,  880, 1415, 1415, 1415, 1415,  880,
      881,  881,  881, 1415, 1415, 1415, 1415,  881,  882,  882,
      882, 1415, 1415, 1415, 1415,  882,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  884,  884,  884, 1415, 1415,
     1415, 1415,  884,  885,  885,  885, 1415, 1415, 1415, 1415,

      885,  886,  886,  886, 1415, 1415, 1415, 1415,  886,  887,
      887,  887, 1415, 1415, 1415, 1415,  887,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  889,  889,  889, 1415,
     1415, 1415, 1415,  889,  890,  890,  890, 1415, 1415, 1415,
     1415,  890,  892,  892,  892, 1415, 1415, 1415, 1415,  892,
      893,  893,  893, 1415, 1415, 1415, 1415,  893,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  896,  896,  896,
     1415, 1415, 1415, 1415,  896,  897,  897,  897, 1415, 1415,
     1415, 1415,  897,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  914,  914,  914, 1415, 1415, 1415, 1415,
      914,  915,  915,  915, 1415, 1415, 1415, 1415,  915,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  916,  916,
      916, 1415, 1415, 1415, 1415,  916,  958,  958, 1415,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  959,  959, 1415,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  963,  963,  963, 1415,
     1415, 1415, 1415,  963,  964,  964,  964, 1415, 1415, 1415,
     1415,  964,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  965,  965,  965, 1415, 1415, 1415, 1415,  965,  967,
      967,  967, 1415, 1415, 1415, 1415,  967,  968,  968,  968,
     1415, 1415, 1415, 1415,  968,  593, 1415, 1415, 1415, 1415,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  970,
      970,  970, 1415, 1415, 1415, 1415,  970,  971,  971,  971,
     1415, 1415, 1415, 1415,  971,  973,  973,  973, 1415, 1415,
     1415, 1415,  973,  974,  974,  974, 1415, 1415, 1415, 1415,
      974,  266, 1415, 1415, 1415, 1415,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  975,  975,  975, 1415, 1415,
     1415, 1415,  975,  976,  976,  976, 1415, 1415, 1415, 1415,

      976,  977,  977,  977, 1415, 1415, 1415, 1415,  977,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  978,  978,
      978, 1415, 1415, 1415, 1415,  978,  979,  979,  979, 1415,
     1415, 1415, 1415,  979,  980,  980,  980, 1415, 1415, 1415,
     1415,  980,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  981,  981,  981, 1415, 1415, 1415, 1415,  981,  982,
      982,  982, 1415, 1415, 1415, 1415,  982,  983,  983,  983,
     1415, 1415, 1415, 1415,  983,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  984,  984,  984, 1415, 1415, 1415,
     1415,  984,  986,  986,  986, 1415, 1415, 1415, 1415,  986,

      987,  987,  987, 1415, 1415, 1415, 1415,  987,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  989,  989,  989,
     1415, 1415, 1415, 1415,  989, 1002, 1002, 1002, 1415, 1415,
     1415, 1415, 1002,  196,  196,  196,  196,  196,  196,  196,
      196,  196, 1003, 1003, 1003, 1415, 1415, 1415, 1415, 1003,
      958,  958, 1415,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  959,  959, 1415,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
     1043, 1043, 1043, 1415, 1415, 1415, 1415, 1043,  257,  257,
      257,  257,  257,  257,  257,  257,  257, 1044, 1044, 1044,

     1415, 1415, 1415, 1415, 1044, 1046, 1046, 1046, 1415, 1415,
     1415, 1415, 1046, 1047, 1047, 1047, 1415, 1415, 1415, 1415,
     1047,  593, 1415, 1415, 1415, 1415,  593,  593,  593,  593,
      593,  593,  593,  593,  593, 1049, 1049, 1049, 1415, 1415,
     1415, 1415, 1049, 1050, 1050, 1050, 1415, 1415, 1415, 1415,
     1050, 1051, 1051, 1051, 1415, 1415, 1415, 1415, 1051,  266,
     1415, 1415, 1415, 1415,  266,  266,  266,  266,  266,  266,
      266,  266,  266, 1052, 1052, 1052, 1415, 1415, 1415, 1415,
     1052, 1053, 1053, 1053, 1415, 1415, 1415, 1415, 1053,  272,
      272,  272,  272,  272,  272,  272,  272,  272, 1054, 1054,

     1054, 1415, 1415, 1415, 1415, 1054, 1055, 1055, 1055, 1415,
     1415, 1415, 1415, 1055,  278,  278,  278,  278,  278,  278,
      278,  278,  278, 1056, 1056, 1056, 1415, 1415, 1415, 1415,
     1056, 1057, 1057, 1057, 1415, 1415, 1415, 1415, 1057,  285,
      285,  285,  285,  285,  285,  285,  285,  285, 1058, 1058,
     1058, 1415, 1415, 1415, 1415, 1058, 1060, 1060, 1060, 1415,
     1415, 1415, 1415, 1060,  293,  293,  293,  293,  293,  293,
      293,  293,  293, 1062, 1062, 1062, 1415, 1415, 1415, 1415,
     1062, 1074, 1074, 1074, 1415, 1415, 1415, 1415, 1074, 1075,
     1075, 1075, 1415, 1415, 1415, 1415, 1075,  196,  196,  196,

      196,  196,  196,  196,  196,  196, 1102, 1102, 1415, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1105, 1105, 1105, 1415, 1415, 1415, 1415, 1105, 1106,
     1106, 1106, 1415, 1415, 1415, 1415, 1106, 1108, 1108, 1108,
     1415, 1415, 1415, 1415, 1108, 1109, 1109, 1109, 1415, 1415,
     1415, 1415, 1109,  593, 1415, 1415, 1415, 1415,  593,  593,
      593,  593,  593,  593,  593,  593,  593, 1110, 1110, 1110,
     1415, 1415, 1415, 1415, 1110, 1111, 1111, 1111, 1415, 1415,
     1415, 1415, 1111, 1112, 1112, 1112, 1415, 1415, 1415, 1415,
     1112, 1113, 1113, 1113, 1415, 1415, 1415, 1415, 1113, 1114,

     1114, 1114, 1415, 1415, 1415, 1415, 1114, 1115, 1115, 1115,
     1415, 1415, 1415, 1415, 1115, 1116, 1116, 1116, 1415, 1415,
     1415, 1415, 1116, 1117, 1117, 1117, 1415, 1415, 1415, 1415,
     1117, 1118, 1118, 1118, 1415, 1415, 1415, 1415, 1118, 1120,
     1120, 1120, 1415, 1415, 1415, 1415, 1120, 1122, 1122, 1122,
     1415, 1415, 1415, 1415, 1122, 1136, 1136, 1136, 1415, 1415,
     1415, 1415, 1136,  802,  802,  802, 1415, 1415, 1415, 1415,
      802,  959,  959, 1415,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959, 1163, 1163, 1163, 1415,
     1415, 1415, 1415, 1163,  863,  863,  863, 1415, 1415, 1415,

     1415,  863, 1165, 1165, 1165, 1415, 1415, 1415, 1415, 1165,
     1166, 1166, 1166, 1415, 1415, 1415, 1415, 1166, 1167, 1167,
     1167, 1415, 1415, 1415, 1415, 1167,  875,  875,  875, 1415,
     1415, 1415, 1415,  875, 1168, 1168, 1168, 1415, 1415, 1415,
     1415, 1168,  880,  880,  880, 1415, 1415, 1415, 1415,  880,
     1169, 1169, 1169, 1415, 1415, 1415, 1415, 1169,  885,  885,
      885, 1415, 1415, 1415, 1415,  885, 1170, 1170, 1170, 1415,
     1415, 1415, 1415, 1170,  890,  890,  890, 1415, 1415, 1415,
     1415,  890, 1172, 1172, 1172, 1415, 1415, 1415, 1415, 1172,
      897,  897,  897, 1415, 1415, 1415, 1415,  897,  915,  915,

      915, 1415, 1415, 1415, 1415,  915,  964,  964,  964, 1415,
     1415, 1415, 1415,  964, 1209, 1209, 1209, 1415, 1415, 1415,
     1415, 1209, 1210, 1210, 1210, 1415, 1415, 1415, 1415, 1210,
      974,  974,  974, 1415, 1415, 1415, 1415,  974,  977,  977,
      977, 1415, 1415, 1415, 1415,  977,  980,  980,  980, 1415,
     1415, 1415, 1415,  980,  983,  983,  983, 1415, 1415, 1415,
     1415,  983,  987,  987,  987, 1415, 1415, 1415, 1415,  987,
     1240, 1240, 1240, 1415, 1415, 1415, 1415, 1240, 1050, 1050,
     1050, 1415, 1415, 1415, 1415, 1050, 1109, 1109, 1109, 1415,
     1415, 1415, 1415, 1109, 1346, 1346, 1346, 1415, 1415, 1415,

     1415, 1346,   29, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415
    } ;

static yyconst flex_int16_t yy_chk[6289] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    7,
        8,    7,    8,   11,   23,   12,    3,    4,   34,   23,

       37,   24,   11,   11,   12,   12,   24,   38,   42,   57,
       45,   44,   45,   45,   45,   45,   59,   37,   46,   61,
       42,   44,   44,   46,   52,   52,   54,   54,   59,   65,
      189,   46,   57,   66,  171,  171,  122,    5,    6,  122,
       59,   59,  189,   59,   34, 1412,   61,  184,  184,   38,
       65,   59,   65,   66,    7,    8,   66,   46,    7,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   25,   25,   56,   25,   26,
       26,   58,   26,   87,  284,   58,  145,  284,   82,   64,

       64,   71,  309,  151,   56,   56,   64,  309,   68,   56,
     1410,   67,   64,   69,   56,   67,   68,   56,   56,   71,
       64,   77,   67,   64,   71,   58,   68,   87,   69,   67,
       69,   68,   75,   58,   67, 1408,   69,   58,   70,   69,
       75,  309,  145,   64,   77,  151,  188,  188,   77,   58,
       58, 1403,   58,   70,   82,   75,   70,  420,   25,  420,
       58,   70,   26,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   47,   72,
       47,   47,   47,   47,   79,   73, 1397,   72,   80,   98,
       97,   72,  108,   73,  112,   47,   47,   73,  656,   80,
       72,   47,   79,  656,  118,  167,   72,   79,   72,   47,
       47,   80,   73,   97,   72,   93,   98,  112,  200,  108,
       73,   47,   47, 1394,  113,   47,   47,  118,   47,   74,

       93,   93,   93,   93,  167,  107,   47,   74,  107,   47,
       48,   74,   48,   48,   48,   48,   99,  126,  194,  194,
       76,  113,   99,   74,   74,  419,   74,   48,   48,   74,
      200,   76,   76,   48,   74,  119,  127,  168,  100,   99,
      126,   48,   76,   76,  100,   76,  109,  139,   93,  109,
      141, 1393,   93,   48,   48, 1391,  107,   48,   48,  419,
       48,  100,  119,  127,   78,  140, 1388,  168,   48,   49,
      139,   49,   49,   49,   49,  114,   78,  141,  120,  107,
      199,  114,   78,  140,  120, 1387,   49,   49,   78,   78,
     1385,   78,   49,   78, 1384,   78,  168,  109,  114,   78,

       49,  120,  128,  109,  197,  142,  140,  196,  128,  143,
      203,  142,   49,   49,  203,  143,   49,   49,  301,   49,
      109,  147,  173,  314,  314,  128,  199,   49,  142,  153,
      196,  197,  143,  206,  147,  147,  147,  203,  153,  153,
      153,  161,  161,  161,  161,  206,  173,  173,  591,  173,
      166,  166,  166,  166,  179, 1382,  161,  161,  258,  960,
      206,  960,  161,  659,  301,  166,  166,  170,  206,  170,
     1378,  166,  170,  170,  170,  170,  659,  304,  179,  179,
     1377,  179,  161,  161,  198,  258,  161,  161,  182,  161,
      198,  166,  166,  147,  267,  166,  166,  153,  166,  169,

      172,  169,  169,  169,  169,  175,  217,  198,  172,  273,
      175,  279,  182,  182,  217,  182,  169,  169,  175,  304,
      591,  267,  169, 1374,  172,  172,  178,  172,  180,  217,
     1373,  175,  181,  180,  178,  172,  273,  175,  279,  183,
      181,  180,  169,  169,  183,  175,  169,  169, 1263,  169,
      178,  178,  183,  178,  180, 1370,  181,  181,  201,  181,
      180,  178,  201,  213,  202,  183, 1369,  181,  180,  205,
     1368,  183,  212, 1042,  201,  201,  202,  202,  204,  183,
      210,  205,  211,  213,  204,  201,  213,  202,  212,  218,
      204,  204,  215,  205,  205,  212,  205,  222,  210,  220,

      211,  204,  221,  210,  205,  211,  214,  216,  215, 1366,
      218,  221,  218,  216,  219,  215,  220, 1263,  219, 1042,
      222,  223,  220,  224, 1365,  221,  323,  323,  214,  216,
      216,  225,  214,  214,  214,  214,  214,  219,  214,  214,
      214,  226,  223,  214,  223,  227,  224,  228,  214,  214,
      214,  214,  214,  225,  225,  229,  231, 1171,  232,  226,
      230,  330,  330,  229,  226,  227,  233,  229,  227,  228,
      228,  234,  230,  232,  251, 1364,  235, 1171,  233,  231,
      232,  232,  229, 1361,  233,  236,  235,  230,  234,  236,
      229,  235,  237,  233,  234,  230,  238,  235,  235,  235,

      238,  233,  237,  236,  240,  239,  243,  241,  236,  244,
      242, 1360,  243,  245, 1357,  237,  238,  239,  241,  238,
      237,  244,  242,  240,  244,  245, 1354,  240,  239,  243,
      241,  242,  244,  242,  252,  257,  245,  251,  259,  262,
      272,  251, 1059,  263,  259,  262,  477,  477, 1241,  252,
      252,  252,  252,  265,  263,  278,  265,  266,  257,  277,
      266,  259,  262,  272,  268,  262,  263,  268,  271,  274,
      277,  271,  283,  280,  285,  274,  286,  290,  278,  280,
      493,  493,  277,  283,  287,  294,  293,  295,  290,  296,
      287,  300,  274,  295,  299,  283,  280,  285,  299,  352,

      290, 1353,  300,  286,  265,  296, 1059,  287,  266,  293,
      295,  302,  294,  308,  300,  268, 1352,  299,  308,  271,
     1241,  268,  352,  305,  302,  302,  302,  265,  296,  315,
      271,  266,  305,  305,  305,  353,  317,  316,  268,  308,
      321,  324,  271,  313, 1348,  308,  310,  310,  310,  310,
      311,  311,  311,  311,  319,  326,  315,  302,  353,  313,
      313,  316,  316,  317,  316,  305,  311,  321,  324, 1347,
      313,  311,  320,  322,  502,  502,  328,  319, 1133,  327,
      320,  319,  326,  638,  638,  319,  325,  327,  331,  322,
      322, 1133,  311,  332, 1346,  311,  311,  333,  311,  320,

      322,  319,  319,  328,  319,  329,  327,  320,  319,  335,
      325,  325,  319,  325,  327,  331,  355,  332,  332,  334,
      332,  329,  329,  357,  333,  354,  351,  334,  355,  355,
      356,  354,  329,  360, 1344,  357,  335,  351, 1343,  355,
      363,  362,  367,  364,  363,  432,  334,  364,  354,  351,
      357,  360, 1342,  356,  334,  361,  360,  362,  357,  365,
      366,  361,  368,  363,  362,  367,  364,  361,  369,  370,
      373,  365,  432,  371, 1102,  366,  369, 1340,  361,  372,
      368,  366,  366,  366,  379,  368,  373,  373,  371,  376,
      375,  369,  370,  373,  365,  370,  371,  372,  375,  374,

      376,  376,  372,  374,  377,  378,  380,  379,  474,  382,
      381,  391,  376,  375,  381,  377,  383,  382, 1339,  384,
     1102,  385,  374,  378,  380,  385, 1381,  377,  378,  380,
      387,  377,  382,  381,  391,  474,  383,  392,  387,  383,
      384,  384,  384,  386,  385,  388,  389,  394,  386,  386,
      398,  388,  390,  387,  389,  392,  390,  395,  393,  396,
      392,  388,  393,  395,  397,  403,  386,  399,  388,  389,
      394,  396,  400,  398,  401,  390,  397,  399,  401,  402,
      395,  406, 1381,  404,  400,  393,  396,  397,  403,  405,
      399,  407, 1338,  408,  396,  400,  409,  401,  406,  407,

      410,  402,  402,  404,  406,  411,  404,  412,  409,  405,
      428,  412,  405,  411,  407,  408,  408,  413,  415,  409,
      414,  415,  410,  410,  416,  417,  425,  418,  411,  417,
      412,  416,  414,  429,  430,  413,  431,  425,  430,  431,
      413,  415,  418,  414,  777,  777, 1315,  416,  417,  425,
      418,  433,  436,  442,  433,  436,  429,  430,  428,  429,
      439,  445,  448,  439,  442,  445,  451,  454,  457,  462,
      451,  466,  457,  448,  479, 1315,  442,  480,  454,  463,
      462,  428,  467,  468,  445,  448,  467,  431,  466,  451,
      454,  457,  462,  463,  466,  519,  468,  468,  468,  519,

      481,  479,  433,  436,  480,  467,  779,  779,  433,  520,
      431,  439,  471,  487,  436,  439,  463, 1313,  519,  489,
      483,  471,  471,  471, 1334,  433,  436,  481,  483,  468,
      490,  484,  520,  484,  439,  469,  484,  484,  484,  484,
      487,  485,  495, 1313,  483,  483,  489,  483,  469,  469,
      469,  469,  496,  498,  471,  483,  499,  490, 1390,  469,
      469,  469,  469,  469,  469,  485,  485,  504,  485,  495,
      486,  505,  507,  640,  640,  640,  640,  594,  486,  496,
      498,  469,  639,  499, 1390,  469,  469,  469,  469,  469,
      469,  472,  899,  899,  504,  523,  482,  486,  505,  507,

      472,  472,  472,  472,  594,  486,  524,  525,  529,  639,
      523,  472,  472,  472,  472,  472,  472, 1333,  523,  482,
      529,  524,  526,  482,  527, 1331,  525,  482, 1330,  524,
      525,  529,  526,  472,  527,  528,  530,  472,  472,  472,
      472,  472,  472,  482,  482,  526,  482,  527,  531,  528,
      482,  532,  530, 1328,  482,  534, 1327,  532,  535,  530,
      533, 1160,  538,  532,  536,  537,  538, 1324,  540,  539,
      531,  531,  528,  540,  532, 1323,  533,  533,  534,  534,
      535,  535,  536,  533,  539,  538,  537,  536,  537,  541,
      542,  540,  539,  541,  542,  543,  544,  547,  545,  546,

      549,  548,  550, 1322,  551,  543,  553, 1160,  555,  556,
      541, 1317,  541,  542,  546,  548,  544,  545,  543,  544,
      547,  545,  546,  549,  548,  550,  551,  551,  552,  553,
      554,  555,  556,  558,  557,  559,  560, 1316,  562, 1178,
      552,  563,  564,  561, 1400,  554, 1400,  565, 1252, 1252,
      568,  552, 1178,  554,  557,  558,  558,  557,  559,  560,
      561,  562,  563,  566,  563,  564,  561,  565,  564,  566,
      565,  567,  568,  568,  569,  570,  571, 1314,  572,  567,
      576,  573,  569,  566,  572,  574,  566,  573,  571,  575,
      580,  574,  577,  570,  567,  578,  575,  569,  570,  571,

      576,  572,  581,  576,  573,  578,  582,  575,  574,  577,
      592,  579,  575,  580,  582,  577,  579,  588,  578,  579,
      579,  588, 1312, 1311,  581,  581,  579,  607,  579,  582,
      592,  607,  593,  592,  579,  593,  579,  610,  595,  598,
      588,  595,  598,  601,  616,  604,  601,  613,  604,  619,
      607,  613,  627,  619,  622,  628,  627,  610,  632,  631,
      610, 1310,  665,  669,  616,  628,  643,  616, 1308,  690,
      613,  670,  619,  690,  622,  627,  631,  622,  632,  669,
     1307,  632,  631,  593,  645,  665,  669,  670,  628,  595,
      598,  637,  690,  643,  601,  595,  604,  636,  601,  636,

      642,  598,  636,  636,  636,  636,  593,  637,  637,  662,
      670,  645,  595,  598,  668,  644,  604,  601,  637,  604,
      633, 1306, 1299,  644,  642,  642,  668,  642,  667,  662,
      666,  671,  662,  633,  633,  633,  633,  668,  781, 1298,
     1297,  671,  644,  667,  633,  633,  633,  633,  633,  633,
      644,  667,  666,  666,  671,  672,  677, 1406,  672, 1406,
      673,  641,  641,  641,  641,  781,  633,  691,  677,  674,
      633,  633,  633,  633,  633,  633,  634,  641,  672,  677,
      673,  676,  641,  673,  674,  634,  634,  634,  634,  675,
      691,  692,  674, 1296,  680, 1295,  634,  634,  634,  634,

      634,  634,  676,  641,  676,  678,  641,  641,  675,  641,
      679,  681,  675,  678,  692,  679,  680,  680,  634,  682,
      684,  681,  634,  634,  634,  634,  634,  634,  678,  683,
      686,  682,  685,  679,  681,  684,  688,  683,  689,  687,
      693,  695,  682,  684,  688,  694,  689,  697,  696,  695,
      686,  694,  683,  686,  685,  685,  687,  693,  698,  688,
      694,  689,  687,  693,  695,  696,  698,  699,  694,  700,
      697,  696,  701,  703,  702,  704,  705,  700,  706,  707,
      703,  698,  708,  705,  701,  707,  711,  706, 1294,  699,
      699,  702,  700,  713,  711,  701,  703,  702,  704,  705,

      709,  706,  707,  710,  708,  708,  712,  714,  715,  711,
     1293,  709,  717,  716,  710,  712,  713,  716,  723, 1291,
      719,  720,  709,  709,  718,  715,  710,  717,  716,  712,
      714,  715,  718,  721,  722,  717,  716,  721,  719,  720,
     1289,  723,  718,  719,  720,  725,  722,  718,  729,  733,
      736,  739,  742,  736,  739,  742,  721,  722,  748,  751,
      725,  725,  725,  725,  745,  754,  757,  745,  729,  763,
      760,  729,  733, 1287,  767,  768, 1286,  772,  748, 1278,
     1277,  748,  751, 1401,  771,  754,  782,  784,  754,  757,
      760, 1276,  763,  760,  767, 1275,  771,  767,  768,  768,

      772,  736,  739,  742, 1274,  800,  739,  771,  773,  773,
      773,  773,  736,  782,  784,  745,  774,  774,  774,  774,
      802,  803,  778,  742,  736,  739,  742,  778,  800,  805,
      808, 1401,  774,  803,  804,  807,  806,  774,  745, 1273,
      806, 1272,  804,  802,  803,  807,  805,  808,  778,  811,
      812, 1271,  805,  808,  778,  810, 1270,  804,  774,  806,
      809,  774,  774,  809,  774,  812,  813,  810,  807,  814,
      815,  811,  811,  812,  817,  814,  816,  817,  810,  818,
      816,  819,  818,  809, 1266,  820,  822,  815,  813,  813,
     1264,  821,  814,  815,  821,  823, 1251,  817,  819,  816,

      820,  826,  818,  823,  819,  824,  822,  825,  820,  822,
      827,  825,  828,  824,  821,  829,  830,  831,  823,  826,
      832,  833,  836,  837,  826,  835,  838,  834,  824,  833,
      825,  835,  827,  827,  834,  828,  839,  829,  829,  830,
      831,  840,  841,  832,  833,  836,  837,  842,  835,  838,
      834,  843,  844,  845,  846, 1250,  850,  852,  847,  839,
      849,  844,  846,  852,  840,  841,  848,  851,  849,  853,
      842, 1249,  861,  850,  843,  844,  845,  846,  847,  850,
      852,  847,  854,  849,  848,  855,  857,  851,  863,  848,
      851,  853,  853,  867,  854,  861,  867,  878,  880,  883,

      855,  857,  857,  857,  857,  854,  870,  873,  855,  870,
      873,  863,  875,  885,  888,  875,  890,  894,  895,  897,
      878,  880,  883,  915,  900, 1248,  895, 1247,  898,  900,
      917,  919,  920, 1246,  921,  919,  885,  888,  918,  890,
      894,  895,  897,  921,  867,  898,  915,  917,  867,  923,
      900,  898,  922,  917,  919,  920,  900,  870,  873,  925,
      924,  918, 1245,  875,  918,  924,  921,  867,  926,  929,
      922,  925,  923, 1239,  930,  922,  926,  870, 1224, 1223,
      870,  873,  925,  924,  927,  928,  875,  927,  927,  930,
      929,  926,  929,  928,  933,  931,  932,  930,  931,  932,

      934,  936,  933,  934,  927,  937,  935,  927,  928,  935,
     1222,  940,  937,  936,  938,  939, 1221,  933,  931,  932,
      940,  938,  939,  934,  936,  942,  943,  941,  937,  935,
      945,  942,  944,  942,  940,  946,  947,  938,  939,  941,
      948,  949,  953, 1220,  951,  950,  953,  948,  942,  943,
      941,  950,  944,  945,  956,  944,  952,  946,  946,  947,
      951,  949,  952,  948,  949,  953,  954,  951,  950,  955,
      954,  964,  957,  977, 1219,  969,  956,  956,  969,  952,
      957,  955,  961,  972,  974,  980,  972,  974,  983,  954,
      987, 1004,  955,  990,  964,  957,  977,  961,  961,  961,

      961,  988, 1005,  990, 1218, 1007, 1008, 1006,  980, 1009,
     1216,  983, 1215,  987, 1004, 1008,  990, 1011, 1014, 1010,
     1212,  988, 1007, 1211,  988, 1005,  969, 1006, 1012, 1008,
     1006, 1012, 1009, 1013,  972,  974, 1010, 1208, 1018, 1019,
     1011, 1014, 1010, 1011, 1015, 1007,  969, 1015, 1016,  969,
     1013, 1012, 1017, 1022, 1207, 1017, 1013,  972,  974, 1026,
     1016, 1018, 1019, 1020, 1023, 1021, 1020, 1015, 1021, 1024,
     1023, 1016, 1024, 1029, 1025, 1017, 1022, 1025, 1027, 1028,
     1030, 1027, 1026, 1031, 1032, 1034, 1020, 1023, 1021, 1035,
     1036, 1040, 1024, 1033, 1028, 1186, 1029, 1025, 1036, 1034,

     1037, 1027, 1028, 1030, 1038, 1033, 1031, 1032, 1034, 1039,
     1035, 1041, 1035, 1036, 1040, 1037, 1033, 1048, 1039, 1038,
     1048, 1050, 1082, 1037, 1050, 1061, 1063, 1038, 1076, 1063,
     1061, 1184, 1039, 1183, 1041, 1070, 1070, 1077, 1182, 1078,
     1077, 1070, 1078, 1181, 1079, 1082, 1180, 1083, 1061, 1063,
     1079, 1076, 1084, 1080, 1081, 1076, 1080, 1081, 1084, 1179,
     1077, 1085, 1078, 1086, 1085, 1089, 1079, 1079, 1048, 1083,
     1083, 1087, 1050, 1177, 1087, 1084, 1080, 1081, 1090, 1088,
     1091, 1086, 1088, 1091, 1085, 1094, 1086, 1092, 1089, 1093,
     1092, 1048, 1093, 1094, 1087, 1050, 1095, 1096, 1098, 1097,

     1090, 1090, 1088, 1091, 1095, 1100, 1101, 1137, 1094, 1099,
     1092, 1097, 1093, 1109, 1123, 1164, 1109, 1135, 1096, 1095,
     1096, 1098, 1097, 1121, 1099, 1268, 1100, 1121, 1100, 1101,
     1137, 1123, 1099, 1101, 1104, 1134, 1138, 1123, 1104, 1138,
     1139, 1132, 1140, 1139, 1268, 1145, 1121, 1104, 1104, 1104,
     1140, 1141, 1268, 1131, 1147, 1142, 1104, 1141, 1142, 1138,
     1144, 1130, 1129, 1139, 1109, 1140, 1128, 1143, 1145, 1141,
     1143, 1144, 1148, 1141, 1141, 1141, 1146, 1147, 1142, 1127,
     1104, 1126, 1144, 1144, 1104, 1104, 1150, 1109, 1104, 1104,
     1143, 1149, 1151, 1146, 1149, 1148, 1152, 1104, 1153, 1146,

     1104, 1153, 1104, 1154, 1104, 1155, 1104, 1156, 1157, 1150,
     1158, 1159, 1125, 1188, 1149, 1151, 1124, 1155, 1173, 1152,
     1119, 1153, 1158, 1154, 1161, 1174, 1154, 1189, 1155, 1190,
     1156, 1157, 1190, 1158, 1159, 1156, 1188, 1161, 1161, 1161,
     1173, 1173, 1191, 1174, 1195, 1192, 1196, 1107, 1174, 1196,
     1189, 1073, 1190, 1191, 1192, 1194, 1072, 1197, 1198, 1194,
     1197, 1198, 1071, 1069, 1068, 1191, 1193, 1195, 1192, 1196,
     1161, 1162, 1162, 1162, 1162, 1201, 1199, 1202, 1194, 1199,
     1197, 1198, 1162, 1162, 1162, 1162, 1162, 1162, 1067, 1193,
     1066, 1200, 1204, 1193, 1200, 1203, 1065, 1064, 1201, 1199,

     1202, 1214, 1230, 1203, 1162, 1202, 1045, 1001, 1162, 1162,
     1162, 1162, 1162, 1162, 1200, 1204, 1205, 1226, 1203, 1225,
     1204, 1213, 1225, 1227, 1214, 1230, 1214, 1233, 1228, 1205,
     1205, 1205, 1227, 1213, 1229, 1226, 1231, 1229, 1232, 1231,
     1226, 1232, 1225, 1234, 1213, 1235, 1227, 1228, 1237, 1236,
     1233, 1228, 1253, 1235, 1000,  999, 1237, 1229, 1242, 1231,
     1257, 1232, 1205, 1206, 1257,  998, 1234, 1236, 1235,  997,
      996, 1237, 1236, 1255, 1242, 1253, 1206, 1206, 1206, 1206,
     1254, 1242, 1258, 1257, 1259, 1256,  995, 1206, 1206, 1206,
     1206, 1206, 1206, 1256, 1255,  994, 1255,  993, 1254,  992,

      985,  966,  962, 1254,  913, 1258,  912, 1259, 1256, 1206,
      911,  910,  909, 1206, 1206, 1206, 1206, 1206, 1206, 1243,
     1243,  908, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243, 1260, 1261, 1262, 1265, 1267, 1279,
     1269, 1280,  907,  906, 1261, 1281, 1269, 1282, 1284, 1280,
      905,  904, 1260, 1267, 1262, 1269,  891, 1260, 1261, 1262,
     1279, 1267, 1279, 1269, 1280, 1265, 1281, 1282, 1281, 1283,
     1282, 1284, 1285, 1290, 1300,  864, 1301, 1302, 1283, 1303,
     1302, 1285, 1300, 1304, 1305, 1290, 1309, 1318, 1265, 1303,
     1318,  858, 1283, 1319, 1321, 1285, 1290, 1300, 1301, 1301,
     1302,  796, 1303, 1309, 1325, 1335, 1304, 1305, 1320, 1309,
     1318, 1319, 1325, 1335, 1320, 1336, 1319, 1321, 1337, 1341,
     1349, 1350, 1341,  795, 1336, 1367,  794, 1325, 1335, 1351,

     1355, 1320, 1362, 1375,  793, 1363, 1337, 1371, 1336, 1375,
      792, 1337, 1341, 1349, 1350, 1351, 1349, 1355, 1367, 1375,
     1379, 1362, 1351, 1355, 1363, 1362, 1375, 1371, 1363, 1372,
     1371, 1380, 1383, 1372, 1386, 1392, 1389, 1383, 1402, 1404,
     1392, 1395, 1413, 1379, 1389, 1399, 1386, 1404, 1409,  791,
     1411, 1409, 1372, 1380, 1380, 1383,  790, 1386, 1392, 1389,
     1399, 1395, 1404,  789, 1395, 1413, 1402,  788, 1399, 1411,
      787, 1409,  786, 1411,  785,  764,  732,  726,  724,  658,
      657,  655,  654,  653,  652,  651, 1402,  623,  585, 1402,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,

     1416, 1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1423, 1423,  584, 1423, 1423,

     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1424, 1424,  516, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427,  515, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428,  514,
      513,  512,  511, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432,

     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433,
      510, 1433,  509,  508,  473,  470,  459, 1433, 1433, 1433,
     1434, 1434,  458, 1434,  422,  421,  348,  347,  346, 1434,
     1434, 1434, 1435, 1435, 1435, 1435,  345,  344,  343,  342,
     1435, 1436, 1436, 1436,  341,  340,  306,  303, 1436, 1437,
     1437, 1437,  292,  291,  256,  255, 1437, 1438, 1438, 1438,
      254,  253,  249,  195, 1438, 1439, 1439, 1439,  193,  192,
      191,  190, 1439, 1440,  174,  165,  160,  134,  131,   95,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441,   94,   90,
       63,   53, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1442, 1442, 1442,   41,   36,   33,   29, 1442, 1443,
     1443, 1443,   14,   13,    0,    0, 1443, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,    0,
        0,    0,    0, 1445, 1446, 1446, 1446,    0,    0,    0,
        0, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1448, 1448, 1448,    0,    0,    0,    0, 1448, 1449,
     1449, 1449,    0,    0,    0,    0, 1449, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451,    0,
        0,    0,    0, 1451, 1452, 1452, 1452,    0,    0,    0,
        0, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,

     1453, 1454, 1454, 1454,    0,    0,    0,    0, 1454, 1455,
     1455, 1455,    0,    0,    0,    0, 1455, 1456, 1456,    0,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1457, 1457, 1457,    0,    0,    0, 1457, 1457,
     1458, 1458,    0, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459,    0,    0,
        0, 1459, 1459, 1460, 1460, 1460,    0,    0,    0,    0,
     1460, 1461, 1461, 1461, 1461,    0, 1461, 1461,    0, 1461,
     1462, 1462, 1462,    0,    0,    0,    0, 1462, 1463, 1463,
     1463,    0,    0,    0,    0, 1463, 1464, 1464, 1464, 1464,

     1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465,    0,    0,
        0,    0, 1465, 1466, 1466, 1466,    0,    0,    0,    0,
     1466, 1467, 1467, 1467,    0,    0,    0,    0, 1467, 1468,
     1468, 1468,    0,    0,    0,    0, 1468, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470,    0,
        0,    0,    0, 1470, 1471, 1471, 1471,    0,    0,    0,
        0, 1471, 1472,    0,    0,    0,    0, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473,    0,
        0,    0,    0, 1473, 1474, 1474, 1474,    0,    0,    0,
        0, 1474, 1475,    0,    0,    0,    0, 1475, 1475, 1475,

     1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,    0,
        0,    0,    0, 1476, 1477, 1477, 1477,    0,    0,    0,
        0, 1477, 1478, 1478, 1478,    0,    0,    0,    0, 1478,
     1479, 1479, 1479,    0,    0,    0,    0, 1479, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,
        0,    0,    0,    0, 1481, 1482, 1482, 1482,    0,    0,
        0,    0, 1482, 1483, 1483, 1483,    0,    0,    0,    0,
     1483, 1484, 1484, 1484,    0,    0,    0,    0, 1484, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486,
     1486,    0,    0,    0,    0, 1486, 1487, 1487, 1487,    0,

        0,    0,    0, 1487, 1488, 1488, 1488,    0,    0,    0,
        0, 1488, 1489, 1489, 1489,    0,    0,    0,    0, 1489,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491,
     1491, 1491,    0,    0,    0,    0, 1491, 1492, 1492, 1492,
        0,    0,    0,    0, 1492, 1493, 1493, 1493,    0,    0,
        0,    0, 1493, 1494, 1494, 1494,    0,    0,    0,    0,
     1494, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1496, 1496, 1496,    0,    0,    0,    0, 1496, 1497, 1497,
     1497,    0,    0,    0,    0, 1497, 1498, 1498,    0, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,

     1498, 1499, 1499,    0, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500,    0,
        0, 1500,    0, 1500, 1501, 1501, 1501, 1501,    0, 1501,
     1501,    0, 1501, 1502, 1502, 1502,    0,    0,    0,    0,
     1502, 1503, 1503, 1503,    0,    0,    0,    0, 1503, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,
     1505,    0,    0,    0,    0, 1505, 1506, 1506, 1506,    0,
        0,    0,    0, 1506, 1507, 1507, 1507,    0, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1508,
     1508, 1508,    0,    0,    0,    0, 1508, 1509, 1509, 1509,

        0,    0,    0,    0, 1509, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1511, 1511, 1511,    0,    0,    0,
        0, 1511, 1512, 1512, 1512,    0,    0,    0,    0, 1512,
     1513,    0,    0,    0,    0, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1514, 1514, 1514,    0,    0,    0,
        0, 1514, 1515, 1515, 1515,    0,    0,    0,    0, 1515,
     1516, 1516, 1516,    0,    0,    0,    0, 1516, 1517, 1517,
     1517,    0,    0,    0,    0, 1517, 1518,    0,    0,    0,
        0, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1519, 1519, 1519,    0,    0,    0,    0, 1519, 1520, 1520,

     1520,    0,    0,    0,    0, 1520, 1521, 1521, 1521,    0,
        0,    0,    0, 1521, 1522, 1522, 1522,    0,    0,    0,
        0, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1524, 1524, 1524,    0,    0,    0,    0, 1524, 1525,
     1525, 1525,    0,    0,    0,    0, 1525, 1526, 1526, 1526,
        0,    0,    0,    0, 1526, 1527, 1527, 1527,    0,    0,
        0,    0, 1527, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1529, 1529, 1529,    0,    0,    0,    0, 1529,
     1530, 1530, 1530,    0,    0,    0,    0, 1530, 1531, 1531,
     1531,    0,    0,    0,    0, 1531, 1532, 1532, 1532,    0,

        0,    0,    0, 1532, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1534, 1534, 1534,    0,    0,    0,    0,
     1534, 1535, 1535, 1535,    0,    0,    0,    0, 1535, 1536,
     1536, 1536,    0,    0,    0,    0, 1536, 1537, 1537, 1537,
        0,    0,    0,    0, 1537, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1539, 1539, 1539,    0,    0,    0,
        0, 1539, 1540, 1540, 1540,    0,    0,    0,    0, 1540,
     1541, 1541,    0, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1542, 1542,    0, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,

     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1545, 1545, 1545,    0,    0,    0,    0, 1545, 1546, 1546,
     1546,    0,    0,    0,    0, 1546, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548,    0,    0,
        0,    0, 1548, 1549, 1549, 1549,    0,    0,    0,    0,
     1549, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551,    0,
        0,    0,    0, 1551, 1552, 1552, 1552,    0,    0,    0,

        0, 1552, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1554, 1554, 1554,    0,    0,    0,    0, 1554, 1555,
     1555, 1555,    0,    0,    0,    0, 1555, 1556, 1556, 1556,
        0,    0,    0,    0, 1556, 1557, 1557, 1557,    0,    0,
        0,    0, 1557, 1558,    0,    0,    0,    0, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559, 1559, 1559,
        0,    0,    0,    0, 1559, 1560, 1560, 1560,    0,    0,
        0,    0, 1560, 1561, 1561, 1561,    0,    0,    0,    0,
     1561, 1562, 1562, 1562,    0,    0,    0,    0, 1562, 1563,
        0,    0,    0,    0, 1563, 1563, 1563, 1563, 1563, 1563,

     1563, 1563, 1563, 1564, 1564, 1564,    0,    0,    0,    0,
     1564, 1565, 1565, 1565,    0,    0,    0,    0, 1565, 1566,
     1566, 1566,    0,    0,    0,    0, 1566, 1567, 1567, 1567,
        0,    0,    0,    0, 1567, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1569, 1569, 1569,    0,    0,    0,
        0, 1569, 1570, 1570, 1570,    0,    0,    0,    0, 1570,
     1571, 1571, 1571,    0,    0,    0,    0, 1571, 1572, 1572,
     1572,    0,    0,    0,    0, 1572, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574,    0,    0,
        0,    0, 1574, 1575, 1575, 1575,    0,    0,    0,    0,

     1575, 1576, 1576, 1576,    0,    0,    0,    0, 1576, 1577,
     1577, 1577,    0,    0,    0,    0, 1577, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579,    0,
        0,    0,    0, 1579, 1580, 1580, 1580,    0,    0,    0,
        0, 1580, 1581, 1581, 1581,    0,    0,    0,    0, 1581,
     1582, 1582, 1582,    0,    0,    0,    0, 1582, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584,
        0,    0,    0,    0, 1584, 1585, 1585, 1585,    0,    0,
        0,    0, 1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1587, 1587,

     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1588, 1588, 1588,    0,    0,    0,    0,
     1588, 1589, 1589, 1589,    0,    0,    0,    0, 1589, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591, 1591,
     1591,    0,    0,    0,    0, 1591, 1592, 1592,    0, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1593, 1593,    0, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594,    0,
        0,    0,    0, 1594, 1595, 1595, 1595,    0,    0,    0,
        0, 1595, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,

     1596, 1597, 1597, 1597,    0,    0,    0,    0, 1597, 1598,
     1598, 1598,    0,    0,    0,    0, 1598, 1599, 1599, 1599,
        0,    0,    0,    0, 1599, 1600,    0,    0,    0,    0,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1601,
     1601, 1601,    0,    0,    0,    0, 1601, 1602, 1602, 1602,
        0,    0,    0,    0, 1602, 1603, 1603, 1603,    0,    0,
        0,    0, 1603, 1604, 1604, 1604,    0,    0,    0,    0,
     1604, 1605,    0,    0,    0,    0, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606,    0,    0,
        0,    0, 1606, 1607, 1607, 1607,    0,    0,    0,    0,

     1607, 1608, 1608, 1608,    0,    0,    0,    0, 1608, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1610, 1610,
     1610,    0,    0,    0,    0, 1610, 1611, 1611, 1611,    0,
        0,    0,    0, 1611, 1612, 1612, 1612,    0,    0,    0,
        0, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1614, 1614, 1614,    0,    0,    0,    0, 1614, 1615,
     1615, 1615,    0,    0,    0,    0, 1615, 1616, 1616, 1616,
        0,    0,    0,    0, 1616, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1618, 1618, 1618,    0,    0,    0,
        0, 1618, 1619, 1619, 1619,    0,    0,    0,    0, 1619,

     1620, 1620, 1620,    0,    0,    0,    0, 1620, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1622, 1622, 1622,
        0,    0,    0,    0, 1622, 1623, 1623, 1623,    0,    0,
        0,    0, 1623, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1625, 1625, 1625,    0,    0,    0,    0, 1625,
     1626, 1626,    0, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1627, 1627,    0, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1628, 1628, 1628,    0,    0,    0,    0, 1628, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630,

        0,    0,    0,    0, 1630, 1631, 1631, 1631,    0,    0,
        0,    0, 1631, 1632, 1632, 1632,    0,    0,    0,    0,
     1632, 1633,    0,    0,    0,    0, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634,    0,    0,
        0,    0, 1634, 1635, 1635, 1635,    0,    0,    0,    0,
     1635, 1636, 1636, 1636,    0,    0,    0,    0, 1636, 1637,
        0,    0,    0,    0, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1638, 1638, 1638,    0,    0,    0,    0,
     1638, 1639, 1639, 1639,    0,    0,    0,    0, 1639, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641,

     1641,    0,    0,    0,    0, 1641, 1642, 1642, 1642,    0,
        0,    0,    0, 1642, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1644, 1644, 1644,    0,    0,    0,    0,
     1644, 1645, 1645, 1645,    0,    0,    0,    0, 1645, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647, 1647,
     1647,    0,    0,    0,    0, 1647, 1648, 1648, 1648,    0,
        0,    0,    0, 1648, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1650, 1650, 1650,    0,    0,    0,    0,
     1650, 1651, 1651, 1651,    0,    0,    0,    0, 1651, 1652,
     1652, 1652,    0,    0,    0,    0, 1652, 1653, 1653, 1653,

     1653, 1653, 1653, 1653, 1653, 1653, 1654, 1654,    0, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1655, 1655, 1655,    0,    0,    0,    0, 1655, 1656,
     1656, 1656,    0,    0,    0,    0, 1656, 1657, 1657, 1657,
        0,    0,    0,    0, 1657, 1658, 1658, 1658,    0,    0,
        0,    0, 1658, 1659,    0,    0,    0,    0, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1660, 1660, 1660,
        0,    0,    0,    0, 1660, 1661, 1661, 1661,    0,    0,
        0,    0, 1661, 1662, 1662, 1662,    0,    0,    0,    0,
     1662, 1663, 1663, 1663,    0,    0,    0,    0, 1663, 1664,

     1664, 1664,    0,    0,    0,    0, 1664, 1665, 1665, 1665,
        0,    0,    0,    0, 1665, 1666, 1666, 1666,    0,    0,
        0,    0, 1666, 1667, 1667, 1667,    0,    0,    0,    0,
     1667, 1668, 1668, 1668,    0,    0,    0,    0, 1668, 1669,
     1669, 1669,    0,    0,    0,    0, 1669, 1670, 1670, 1670,
        0,    0,    0,    0, 1670, 1671, 1671, 1671,    0,    0,
        0,    0, 1671, 1672, 1672, 1672,    0,    0,    0,    0,
     1672, 1673, 1673,    0, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674,    0,
        0,    0,    0, 1674, 1675, 1675, 1675,    0,    0,    0,

        0, 1675, 1676, 1676, 1676,    0,    0,    0,    0, 1676,
     1677, 1677, 1677,    0,    0,    0,    0, 1677, 1678, 1678,
     1678,    0,    0,    0,    0, 1678, 1679, 1679, 1679,    0,
        0,    0,    0, 1679, 1680, 1680, 1680,    0,    0,    0,
        0, 1680, 1681, 1681, 1681,    0,    0,    0,    0, 1681,
     1682, 1682, 1682,    0,    0,    0,    0, 1682, 1683, 1683,
     1683,    0,    0,    0,    0, 1683, 1684, 1684, 1684,    0,
        0,    0,    0, 1684, 1685, 1685, 1685,    0,    0,    0,
        0, 1685, 1686, 1686, 1686,    0,    0,    0,    0, 1686,
     1687, 1687, 1687,    0,    0,    0,    0, 1687, 1688, 1688,

     1688,    0,    0,    0,    0, 1688, 1689, 1689, 1689,    0,
        0,    0,    0, 1689, 1690, 1690, 1690,    0,    0,    0,
        0, 1690, 1691, 1691, 1691,    0,    0,    0,    0, 1691,
     1692, 1692, 1692,    0,    0,    0,    0, 1692, 1693, 1693,
     1693,    0,    0,    0,    0, 1693, 1694, 1694, 1694,    0,
        0,    0,    0, 1694, 1695, 1695, 1695,    0,    0,    0,
        0, 1695, 1696, 1696, 1696,    0,    0,    0,    0, 1696,
     1697, 1697, 1697,    0,    0,    0,    0, 1697, 1698, 1698,
     1698,    0,    0,    0,    0, 1698, 1699, 1699, 1699,    0,
        0,    0,    0, 1699, 1700, 1700, 1700,    0,    0,    0,

        0, 1700, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415
    } ;

extern int mc99_flex_debug;
int mc99_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[219] =
    {   0,
      254,  258,  262,  270,  276,  278,  287,  292,  298,  300,
      305,  307,  308,  315,  319,  324,  336,  390,  400,  451,
      458,  466,  472,  479,  483,  494,  500,  507,  515,  529,
      543,  552,  569,  586,  593,  658,  806,  807,  810,  812,
      816,  824,  833,  839,  840,  841,  845,  849,  850,  851,
      858,  864,  866,  867,  868,  869,  870,  871,  872,  873,
      874,  875,  877,  878,  879,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  931,  959,  960,  962,
      963,  965,  966,  967,  968,  969,  970,  971,  972,  973,

      974,  975,  977,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  990,  991,  992,  993,  994,  995,
      997, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1033, 1034, 1040, 1041, 1042, 1043, 1044, 1049, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
     1068, 1069, 1071, 1073, 1074, 1075, 1078, 1081, 1084, 1087,
     1090, 1093, 1097, 1102, 1108, 1111, 1112, 1113, 1114, 1115,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1138, 1139, 1148, 1151, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1171,

     1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1192,
     1194, 1195, 1196, 1200, 1202, 1204, 1205, 1206
    } ;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up mc99text */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *mc99text;
#line 1 "c99.l"
/*--------------------------------------------------------------------
  (C) Copyright 2006-2011 Barcelona Supercomputing Center 
                          Centro Nacional de Supercomputacion
  
  This file is part of Mercurium C/C++ source-to-source compiler.
  
  See AUTHORS file in the top level directory for information 
  regarding developers and contributors.
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 3 of the License, or (at your option) any later version.
  
  Mercurium C/C++ source-to-source compiler is distributed in the hope
  that it will be useful, but WITHOUT ANY WARRANTY; without even the
  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the GNU Lesser General Public License for more
  details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with Mercurium C/C++ source-to-source compiler; if
  not, write to the Free Software Foundation, Inc., 675 Mass Ave,
  Cambridge, MA 02139, USA.
--------------------------------------------------------------------*/
#line 28 "c99.l"
/* 
   This file should be preprocessed with tpp (available in lib)
   in order to produce c99.l and cxx03.l
*/






/*
   Lexer of ISO/IEC 9899:1999 - C
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>
#include <libgen.h>
#include "cxx-driver.h"
#include "cxx-utils.h"
#include "cxx-lexer.h"
#include "cxx-ast.h"

#include "c99-parser-internal.h"





typedef 
struct lexer_keyword_tag
{
    const char* keyword;
    int token;
} lexer_keyword_t;




























static lexer_keyword_t upc_keywords[] =
{
    // It is easier to sign these in as normal builtins
    // { "MYTHREAD", UPC_MYTHREAD },
    // { "THREADS", UPC_THREADS },
    // { "UPC_MAX_BLOCKSIZE", UPC_MAX_BLOCKSIZE },
    { "relaxed", UPC_RELAXED },
    { "shared", UPC_SHARED },
    { "strict", UPC_STRICT },
    { "upc_barrier", UPC_BARRIER },
    { "upc_blocksizeof", UPC_BLOCKSIZEOF },
    { "upc_elemsizeof", UPC_ELEMSIZEOF },
    { "upc_fence", UPC_FENCE },
    { "upc_forall", UPC_FORALL },
    { "upc_localsizeof", UPC_LOCALSIZEOF },
    { "upc_notify", UPC_NOTIFY },
    { "upc_wait", UPC_WAIT },
    // Sentinel
    { NULL, 0 }
};


static lexer_keyword_t cuda_keywords[] =
{
    {"__device__" , CUDA_DEVICE},
    {"__global__", CUDA_GLOBAL},
    {"__host__", CUDA_HOST},
    {"__constant__", CUDA_CONSTANT},
    {"__shared__", CUDA_SHARED},
    // Sentinel
    { NULL, 0 }
};

static int mc99wrap(void);

static void parse_token_text(void);
static void parse_token_text_str(const char*);

static int lookup_keyword_in_table(lexer_keyword_t *keyword_table, const char* keyword, char predicate);

struct scan_file_descriptor scanning_now;

static const char* main_input_filename = NULL;

static int pragma_custom_var_list_parentheses = 0;

static const char *current_pragma_prefix = NULL;

static int num_new_lines(const char* c)
{
    int result = 0;

    while (*c)
    {
        if (*c == '\n') 
            result++;
        c++;
    }

    return result;
}

static int include_counter = 0;

// static int verbatim_buffer_size = 0;
// static const char *verbatim_buffer = NULL;

static void verbatim_buffer_append(const char* c);
static void verbatim_buffer_free(void);
static const char* verbatim_buffer_get(void);

static const char* return_pragma_prefix_longest_match(const char* prefix, 
        const char* lexed_directive,
        pragma_directive_kind_t* kind);


/* Lexical conventions A.2 */
/* A.2.1 */
/* A.2.2 */
/* A.2.12 */
/* A.2.13 */
/* A.2.20 */
/* A.2.21 */
/* A.2.22 */
/* A.2.23 includes GNU extension of long long */
/* GCC is very flexible with suffixes */
/* A.2.24 */
/* A.2.25 */
/* GNU Extension */
/* Complex GNU Extension */
/* A.2.28 */
/* A.2.29 */
/* \e is a GNU extension */
/* A.2.34 */
/* A.2.35 */
/* A.2.38 */
/* GNU extension for complex floating suffix */
/* A.2.40 */
/* C99 additional */
/* Identifier */
/* states */













#line 2860 "c99-scanner.c"

#define INITIAL 0
#define longcomment 1
#define linecomment 2
#define preprocess 3
#define pragma_line 4
#define inline_pragma 5
#define unknown_pragma 6
#define pragma_custom_directive 7
#define pragma_custom_clause 8
#define pragma_custom_clause_first 9
#define pragma_custom_var_list 10
#define verbatim_text 11
#define verbatim_clauses 12
#define verbatim_clauses_args 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mc99lex_destroy (void );

int mc99get_debug (void );

void mc99set_debug (int debug_flag  );

YY_EXTRA_TYPE mc99get_extra (void );

void mc99set_extra (YY_EXTRA_TYPE user_defined  );

FILE *mc99get_in (void );

void mc99set_in  (FILE * in_str  );

FILE *mc99get_out (void );

void mc99set_out  (FILE * out_str  );

int mc99get_leng (void );

char *mc99get_text (void );

int mc99get_lineno (void );

void mc99set_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mc99wrap (void );
#else
extern int mc99wrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( mc99text, mc99leng, 1, mc99out )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( mc99in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( mc99in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, mc99in))==0 && ferror(mc99in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(mc99in); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int mc99lex (void);

#define YY_DECL int mc99lex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after mc99text and mc99leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 251 "c99.l"

 /* preprocess */

#line 3124 "c99-scanner.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)mc99alloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in mc99lex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! mc99in )
/* %if-c-only */
			mc99in = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! mc99out )
/* %if-c-only */
			mc99out = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			mc99ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				mc99_create_buffer(mc99in,YY_BUF_SIZE );
		}

		mc99_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of mc99text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1416 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6203 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for mc99lineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( mc99_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 219 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], mc99text );
			else if ( yy_act == 219 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         mc99text );
			else if ( yy_act == 220 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
YY_RULE_SETUP
#line 254 "c99.l"
{ 
    BEGIN(preprocess); 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 258 "c99.l"
{
	BEGIN(pragma_line);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 262 "c99.l"
{
    BEGIN(verbatim_clauses);
    parse_token_text();
    return VERBATIM_PRAGMA;
}
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 270 "c99.l"
{
    parse_token_text();
    BEGIN(verbatim_clauses_args);
    return VERBATIM_TYPE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 276 "c99.l"
{ } 
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 278 "c99.l"
{
    BEGIN(verbatim_text);
    scanning_now.line_number++;
}
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 287 "c99.l"
{
    parse_token_text();
    return '(';
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 292 "c99.l"
{
    parse_token_text();
    BEGIN(verbatim_clauses);
    return ')';
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 298 "c99.l"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 300 "c99.l"
{ 
    parse_token_text();
    return IDENTIFIER;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 305 "c99.l"

	YY_BREAK

case 12:
YY_RULE_SETUP
#line 307 "c99.l"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 308 "c99.l"

	YY_BREAK



case 14:
YY_RULE_SETUP
#line 315 "c99.l"
{
    verbatim_buffer_append(mc99text);
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 319 "c99.l"
{
    verbatim_buffer_append(mc99text);
    scanning_now.line_number++;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 324 "c99.l"
{
    BEGIN(INITIAL);

    parse_token_text_str(verbatim_buffer_get());
    verbatim_buffer_free();
    
    scanning_now.line_number++;
    return VERBATIM_TEXT;
}
	YY_BREAK

case 17:
YY_RULE_SETUP
#line 336 "c99.l"
{
	// Custom pragmas
	int i;
	char found = 0;

	char matched = 0;

	// Ignore gcc and ident
    if (!matched 
            && ((strcasecmp(mc99text, "gcc") == 0)
                || (strcasecmp(mc99text, "ident") == 0)))
	{
        // All the whole line will be handled as an unknown pragma
		BEGIN(unknown_pragma);
        // current mc99text must be included in the "unknown pragma"
		yymore();
		matched = 1;
	}

	if (!matched)
	{
		for (i = 0; i < CURRENT_CONFIGURATION->num_pragma_custom_prefix; i++)
		{
			if (strcmp(mc99text, CURRENT_CONFIGURATION->pragma_custom_prefix[i]) == 0)
            {
                found = 1;
                break;
            }
		}

		if (!found)
		{
			fprintf(stderr, "%s:%d: warning: unknown '#pragma %s'\n", 
					scanning_now.current_filename,
					scanning_now.line_number,
					mc99text);
			BEGIN(unknown_pragma);
			// Ignore this prefix as an unknown pragma
			yymore();
			matched = 1;
		}
		else
		{
			BEGIN(pragma_custom_directive);
			parse_token_text();
            current_pragma_prefix = CURRENT_CONFIGURATION->pragma_custom_prefix[i];
			return PRAGMA_CUSTOM;
		}
	}
}
	YY_BREAK

/* This will also catch #pragma gcc and #pragma ident */
case 18:
YY_RULE_SETUP
#line 390 "c99.l"
{
	parse_token_text();
	BEGIN(preprocess);
	return UNKNOWN_PRAGMA;
}
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 400 "c99.l"
{
	BEGIN(pragma_custom_clause_first);

    pragma_directive_kind_t directive_kind = PDK_NONE; 

    // This call will unput appropriately what was lexed too much
    const char* longest_match = return_pragma_prefix_longest_match(
            current_pragma_prefix, mc99text, &directive_kind);

    if (directive_kind == PDK_NONE)
    {
        // Give a chance to the empty "directive" since some ill-designed
        // pragmas might need this
        directive_kind = lookup_pragma_directive(current_pragma_prefix, "");
        parse_token_text(); 
    }
    else
    {
        parse_token_text_str(longest_match);
    }


    int token = 0;
    switch (directive_kind)
    {
        case PDK_DIRECTIVE : 
            {
                token = PRAGMA_CUSTOM_DIRECTIVE;
                break;
            }
        case PDK_CONSTRUCT :
            {
                token = PRAGMA_CUSTOM_CONSTRUCT;
                break;
            }
        case PDK_NONE :
            {
                running_error("%s:%d: error: unknown directive '%s' for pragma '%s'. Maybe you forgot to register it?",
                        scanning_now.current_filename, 
                        scanning_now.line_number,
                        mc99text,
                        current_pragma_prefix);
            }
        default:
            internal_error("Invalid pragma directive kind kind=%d", directive_kind);
    }

    current_pragma_prefix = NULL;
    return token;
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 451 "c99.l"
{
    // This will cause a fail in the parser, but better this way than a silent \n mislexed
    scanning_now.line_number++;
	BEGIN(INITIAL);
	return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 458 "c99.l"
{
	// This blank must be eaten and should be mandatory
}
	YY_BREAK


case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 466 "c99.l"
{
    scanning_now.line_number++;
	BEGIN(INITIAL);
	return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 472 "c99.l"
{
	// Special case for custom clauses
	BEGIN(pragma_custom_var_list);
	parse_token_text(); 
	return PRAGMA_CUSTOM_CLAUSE; 
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 479 "c99.l"
{
	// This blank must be eaten
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 483 "c99.l"
{
        // Parameter
	pragma_custom_var_list_parentheses = 1;
    BEGIN(pragma_custom_var_list);
    return '(';
}
	YY_BREAK


case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 494 "c99.l"
{
    scanning_now.line_number++;
	BEGIN(INITIAL);
	return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 500 "c99.l"
{
	// Special case for custom clauses
	BEGIN(pragma_custom_var_list);
	parse_token_text(); 
	return PRAGMA_CUSTOM_CLAUSE; 
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 507 "c99.l"
{
	// This blank must be eaten
}
	YY_BREAK


case 29:
YY_RULE_SETUP
#line 515 "c99.l"
{
	parse_token_text();
	if (pragma_custom_var_list_parentheses == 0)
    {
        pragma_custom_var_list_parentheses++;
        return '(';
    }
    else
    {
        pragma_custom_var_list_parentheses++;
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 529 "c99.l"
{
	parse_token_text();
	pragma_custom_var_list_parentheses--;
	if (pragma_custom_var_list_parentheses == 0)
	{
		BEGIN(pragma_custom_clause);
        return ')';
	}
    else
    {
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 543 "c99.l"
{
    // Ignore the blank if we are not yet within any parentheses
	if (pragma_custom_var_list_parentheses > 0)
    {
        parse_token_text();
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 552 "c99.l"
{
    if (pragma_custom_var_list_parentheses > 0)
    {
        parse_token_text();
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
    else
    {
        // We are in .
        // #pragma foo bar . doe
        // and 'doe' must be lexed as another custom clause
        BEGIN(pragma_custom_var_list);
        parse_token_text(); 
        return PRAGMA_CUSTOM_CLAUSE; 
    }
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 569 "c99.l"
{
    // We found a newline
    if (pragma_custom_var_list_parentheses != 0)
    {
        // Well, we found the newline but parentheses were not 
        // properly nested
        fprintf(stderr, "%s:%d: warning: unended custom clause. Skipping.\n",
                scanning_now.current_filename,
                scanning_now.line_number);
    }
    // Head back to initial state and finish this pragma
    scanning_now.line_number++;
    BEGIN(INITIAL);
    return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
/* Catch all rule */
case 34:
YY_RULE_SETUP
#line 586 "c99.l"
{
    parse_token_text();
    return PRAGMA_CLAUSE_ARG_TEXT;
}
	YY_BREAK

case 35:
YY_RULE_SETUP
#line 593 "c99.l"
{
 const char *p = mc99text;

 // Jump initial blanks (if any)
 while (*p == ' ')
    p++;

 // Jump "line" string
 p += strlen("line");

 // Jump blanks
 while (*p == ' ')
   p++;

 // Compute line
 int line_num = 0;
 while (*p != ' ' 
         && *p != '\0' // The filename location is optional
         )
 {
     if (isdigit(*p))
     {
         line_num = line_num*10 + ((*p) - '0');
     }
     else
     {
         internal_error("Digit expected here but '%c' (%x) found", *p, *p);
     }
     p++;
 }

   // Update the line number, note that it is line_num - 1 
   // because \n is not handled here, but in another rule
 scanning_now.line_number = (line_num - 1);

 // Jump blanks (if any)
 while (*p == ' ')
   p++;

 // If there is a filename, parse it
 if (*p == '"')
 {
     // Now we are on the quote "
     p++;
 
     char filename[256];
     memset(filename, 0, 256);
 
     char *f = filename;
 
     while (*p != '"')
     {
         if (f < &(filename[255]))
         {
             (*f) = *p;
             f++;
         }
         p++;
     }

     // Update the file 
	scanning_now.current_filename = uniquestr(filename);
 }
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 658 "c99.l"
{
	char* directive = mc99text;

	// Jump the blank
	directive++;

	int line_num = 0;
	while (*directive != ' ')
	{
		if (isdigit(*directive))
		{
			line_num = line_num*10 + ((*directive) - '0');
		}
		else
		{
			internal_error("Digit expected here but '%c' found", *directive);
		}
		directive++;
	}

	// Now directive is over the blank after the digits. Jump the blank
	directive++;

	// Now we are over the doublequote. Jump it
	directive++;

	char filename[256];
	memset(filename, 0, 256);

	char* p = filename;

	while (*directive != '"')
	{
        if (p < &(filename[255]))
        {
            *p = *directive;
            p++;
        }
		directive++;
	}

	// Now we have the new number line and the new file name

    // Check include flags from GNU cpp and other preprocessors.
    // We are on the the doublequote, jump it.
    directive++;

    // Advance the directive till the next nonblank
    while (*directive == ' ')
    {
        directive++;
    }

    // Get the flags
    char start_of_new_file = 0;
    char return_of_a_file = 0;
    char system_header_file = 0;
    char extern_c_block = 0;
    while (*directive == ' '
            || isdigit(*directive))
    {
        int current_flag = 0;
        while (isdigit(*directive))
        {
            current_flag = current_flag * 10 +  (*directive - '0');
            directive++;
        }

        switch (current_flag)
        {
            case 1:
                {
                    start_of_new_file = 1;
                    break;
                }
            case 2:
                {
                    return_of_a_file = 1;
                    break;
                }
            case 3:
                {
                    system_header_file = 1;
                    break;
                }
            case 4:
                {
                    extern_c_block = 1;
                    break;
                }
            default:
                // Ignore it
                break;
        }

        // Advance the directive till the next nonblank
        while (*directive == ' ')
        {
            directive++;
        }
    }

    if (system_header_file)
    {
        char path[256];
        strncpy(path, filename, 255);

        char *name_without_path = basename(path);
        strncpy(filename, name_without_path, 255);
    }

    if (start_of_new_file 
            || system_header_file)
    {
        if (include_counter == 0)
        {
            top_level_include_t *new_top_level_include = calloc(1, sizeof(*new_top_level_include));

            new_top_level_include->included_file = uniquestr(filename);

            if (system_header_file)
            {
                new_top_level_include->system_include = 1;
            }

            P_LIST_ADD(CURRENT_COMPILED_FILE->top_level_include_list,
                    CURRENT_COMPILED_FILE->num_top_level_includes,
                    new_top_level_include);
        }
    }

    if (start_of_new_file)
    {
        include_counter++;
    }

    if (return_of_a_file)
    {
        include_counter = (include_counter > 0) ? (include_counter - 1) : 0;
    }

    // Update the line number, note that it is line_num - 1 
    // because \n is not handled here, but in another rule
	scanning_now.line_number = (line_num - 1);
    // Update file
	scanning_now.current_filename = uniquestr(filename);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 806 "c99.l"
{ /* ignore line */  }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 807 "c99.l"
{ scanning_now.line_number++; BEGIN(INITIAL); }
	YY_BREAK
/* _Pragma */
case 39:
YY_RULE_SETUP
#line 810 "c99.l"
{ BEGIN(inline_pragma); pragma_custom_var_list_parentheses = 0; }
	YY_BREAK

case 40:
YY_RULE_SETUP
#line 812 "c99.l"
{
    pragma_custom_var_list_parentheses++;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 816 "c99.l"
{
    pragma_custom_var_list_parentheses--;

    if (pragma_custom_var_list_parentheses == 0)
        BEGIN(INITIAL);
}
	YY_BREAK
/* Ignore it */
case 42:
YY_RULE_SETUP
#line 824 "c99.l"
{
}
	YY_BREAK

/* C comments ( 6.4.9 ) */
/* // comments. // can be splitted across different lines */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 833 "c99.l"
{ 
    scanning_now.line_number += num_new_lines(mc99text); 
    BEGIN(linecomment); 
}
	YY_BREAK
/* escaped new line does not end comment */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 839 "c99.l"
{ scanning_now.line_number++; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 840 "c99.l"
{ /* ignore comment */  }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 841 "c99.l"
{ scanning_now.line_number++; BEGIN(INITIAL); }
	YY_BREAK
/* long C comments. tags can be splitted across diferent lines */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 845 "c99.l"
{ 
    scanning_now.line_number += num_new_lines(mc99text);
    BEGIN(longcomment); 
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 849 "c99.l"
{ scanning_now.line_number++; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 850 "c99.l"
{ /* ignore comment */ }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 851 "c99.l"
{ 
    scanning_now.line_number += num_new_lines(mc99text);
    BEGIN(INITIAL); 
}
	YY_BREAK
/* A.2.11 */
case 51:
YY_RULE_SETUP
#line 858 "c99.l"
{ parse_token_text(); return TOKEN_CHAR; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 864 "c99.l"
{ parse_token_text(); return TOKEN_BOOL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 866 "c99.l"
{ parse_token_text(); return TOKEN_SHORT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 867 "c99.l"
{ parse_token_text(); return TOKEN_INT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 868 "c99.l"
{ parse_token_text(); return TOKEN_LONG; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 869 "c99.l"
{ parse_token_text(); return TOKEN_SIGNED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 870 "c99.l"
{ parse_token_text(); return TOKEN_SIGNED; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 871 "c99.l"
{ parse_token_text(); return TOKEN_SIGNED; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 872 "c99.l"
{ parse_token_text(); return TOKEN_UNSIGNED; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 873 "c99.l"
{ parse_token_text(); return TOKEN_FLOAT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 874 "c99.l"
{ parse_token_text(); return TOKEN_DOUBLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 875 "c99.l"
{ parse_token_text(); return TOKEN_VOID; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 877 "c99.l"
{ parse_token_text(); return TYPEDEF; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 878 "c99.l"
{ parse_token_text(); return ENUM; } 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 879 "c99.l"
{ parse_token_text(); return STRUCT; } 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 880 "c99.l"
{ parse_token_text(); return AUTO; } 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 881 "c99.l"
{ parse_token_text(); return REGISTER; } 
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 882 "c99.l"
{ parse_token_text(); return STATIC; } 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 883 "c99.l"
{ parse_token_text(); return EXTERN; } 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 884 "c99.l"
{ parse_token_text(); return INLINE; } 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 885 "c99.l"
{ parse_token_text(); return TOKEN_CONST; } 
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 886 "c99.l"
{ parse_token_text(); return TOKEN_VOLATILE; } 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 887 "c99.l"
{ parse_token_text(); return UNION; } 
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 888 "c99.l"
{ parse_token_text(); return ASM; } 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 919 "c99.l"
{ parse_token_text(); return SIZEOF; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 920 "c99.l"
{ parse_token_text(); return CASE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 921 "c99.l"
{ parse_token_text(); return DEFAULT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 922 "c99.l"
{ parse_token_text(); return IF; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 923 "c99.l"
{ parse_token_text(); return ELSE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 924 "c99.l"
{ parse_token_text(); return SWITCH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 925 "c99.l"
{ parse_token_text(); return WHILE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 926 "c99.l"
{ parse_token_text(); return DO; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 927 "c99.l"
{ parse_token_text(); return FOR; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 928 "c99.l"
{ parse_token_text(); return BREAK; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 929 "c99.l"
{ parse_token_text(); return CONTINUE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 930 "c99.l"
{ parse_token_text(); return GOTO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 931 "c99.l"
{ parse_token_text(); return RETURN; }
	YY_BREAK
/* GNU Extensions */
case 88:
YY_RULE_SETUP
#line 959 "c99.l"
{ parse_token_text(); return BUILTIN_VA_ARG; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 960 "c99.l"
{ parse_token_text(); return BUILTIN_OFFSETOF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 962 "c99.l"
{ parse_token_text(); return BUILTIN_CHOOSE_EXPR; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 963 "c99.l"
{ parse_token_text(); return BUILTIN_TYPES_COMPATIBLE_P; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 965 "c99.l"
{ parse_token_text(); return EXTENSION; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 966 "c99.l"
{ parse_token_text(); return ALIGNOF; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 967 "c99.l"
{ parse_token_text(); return ALIGNOF; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 968 "c99.l"
{ parse_token_text(); return ALIGNOF; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 969 "c99.l"
{ parse_token_text(); return REAL; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 970 "c99.l"
{ parse_token_text(); return REAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 971 "c99.l"
{ parse_token_text(); return IMAG; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 972 "c99.l"
{ parse_token_text(); return LABEL; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 973 "c99.l"
{ parse_token_text(); return COMPLEX; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 974 "c99.l"
{ parse_token_text(); return COMPLEX; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 975 "c99.l"
{ parse_token_text(); return COMPLEX; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 977 "c99.l"
{ parse_token_text(); return IMAGINARY; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 979 "c99.l"
{ parse_token_text(); return TYPEOF; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 980 "c99.l"
{ parse_token_text(); return TYPEOF; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 981 "c99.l"
{ parse_token_text(); return TYPEOF; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 982 "c99.l"
{ parse_token_text(); return RESTRICT; /* This should be only for C99 but we will be lax here */ }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 983 "c99.l"
{ parse_token_text(); return RESTRICT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 984 "c99.l"
{ parse_token_text(); return RESTRICT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 985 "c99.l"
{ parse_token_text(); return TOKEN_CONST; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 986 "c99.l"
{ parse_token_text(); return TOKEN_CONST; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 987 "c99.l"
{ parse_token_text(); return ATTRIBUTE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 988 "c99.l"
{ parse_token_text(); return ATTRIBUTE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 989 "c99.l"
{ parse_token_text(); return THREAD; } 
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 990 "c99.l"
{ parse_token_text(); return INLINE; } 
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 991 "c99.l"
{ parse_token_text(); return INLINE; } 
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 992 "c99.l"
{ parse_token_text(); return TOKEN_VOLATILE; } 
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 993 "c99.l"
{ parse_token_text(); return TOKEN_VOLATILE; } 
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 994 "c99.l"
{ parse_token_text(); return ASM; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 995 "c99.l"
{ parse_token_text(); return ASM; }
	YY_BREAK
/* XL Compiler extensions */
case 121:
YY_RULE_SETUP
#line 997 "c99.l"
{ parse_token_text(); return XL_BUILTIN_SPEC; }
	YY_BREAK
/* UPC Extensions */
case 122:
#line 1025 "c99.l"
case 123:
#line 1026 "c99.l"
case 124:
#line 1027 "c99.l"
case 125:
#line 1028 "c99.l"
case 126:
#line 1029 "c99.l"
case 127:
#line 1030 "c99.l"
case 128:
#line 1031 "c99.l"
case 129:
#line 1032 "c99.l"
case 130:
#line 1033 "c99.l"
case 131:
#line 1034 "c99.l"
case 132:
YY_RULE_SETUP
#line 1034 "c99.l"
{
    return lookup_keyword_in_table(upc_keywords, mc99text, CURRENT_CONFIGURATION->enable_upc);
}
	YY_BREAK
/* CUDA keywords */
case 133:
#line 1041 "c99.l"
case 134:
#line 1042 "c99.l"
case 135:
#line 1043 "c99.l"
case 136:
#line 1044 "c99.l"
case 137:
YY_RULE_SETUP
#line 1044 "c99.l"
{
    return lookup_keyword_in_table(cuda_keywords, mc99text, CURRENT_CONFIGURATION->enable_cuda);
}
	YY_BREAK
/* mcxx extensions */
case 138:
YY_RULE_SETUP
#line 1049 "c99.l"
{ parse_token_text(); return CONSTRUCT; }
	YY_BREAK
/* Special tokens for subparsing */
case 139:
YY_RULE_SETUP
#line 1052 "c99.l"
{ parse_token_text(); return SUBPARSE_EXPRESSION; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1053 "c99.l"
{ parse_token_text(); return SUBPARSE_EXPRESSION_LIST; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1054 "c99.l"
{ parse_token_text(); return SUBPARSE_STATEMENT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1055 "c99.l"
{ parse_token_text(); return SUBPARSE_DECLARATION; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1056 "c99.l"
{ parse_token_text(); return SUBPARSE_TYPE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1057 "c99.l"
{ parse_token_text(); return SUBPARSE_TYPE_LIST; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1058 "c99.l"
{ parse_token_text(); return SUBPARSE_ID_EXPRESSION; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1059 "c99.l"
{ parse_token_text(); return SUBPARSE_OMP_OPERATOR_NAME; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1060 "c99.l"
{ parse_token_text(); return SUBPARSE_OMP_UDR_DECLARE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1061 "c99.l"
{ parse_token_text(); return SUBPARSE_OMP_UDR_DECLARE_2; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1062 "c99.l"
{ parse_token_text(); return SUBPARSE_OMP_UDR_IDENTITY; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1063 "c99.l"
{ parse_token_text(); return OMP_UDR_CONSTRUCTOR; }
	YY_BREAK
/* Special tokens for prettyprinted comments and preprocessor elements */
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1068 "c99.l"
{ parse_token_text(); return PP_COMMENT; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1069 "c99.l"
{ parse_token_text(); return PP_TOKEN; }
	YY_BREAK
/* Special tokens for placeholders */
case 153:
YY_RULE_SETUP
#line 1071 "c99.l"
{ parse_token_text(); return STATEMENT_PLACEHOLDER; }
	YY_BREAK
/* Special tokens for parsing superscalar related things */
case 154:
YY_RULE_SETUP
#line 1073 "c99.l"
{ parse_token_text(); return SUBPARSE_SUPERSCALAR_DECLARATOR; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1074 "c99.l"
{ parse_token_text(); return SUBPARSE_SUPERSCALAR_DECLARATOR_LIST; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1075 "c99.l"
{ parse_token_text(); return SUBPARSE_SUPERSCALAR_EXPRESSION; }
	YY_BREAK
/* A plain identifier */
case 157:
YY_RULE_SETUP
#line 1078 "c99.l"
{parse_token_text(); return IDENTIFIER; }
	YY_BREAK
/* A.2.17 */
case 158:
YY_RULE_SETUP
#line 1081 "c99.l"
{ parse_token_text(); return DECIMAL_LITERAL; }
	YY_BREAK
/* A.2.18 */
case 159:
YY_RULE_SETUP
#line 1084 "c99.l"
{ parse_token_text(); return OCTAL_LITERAL; }
	YY_BREAK
/* A.2.19 */
case 160:
YY_RULE_SETUP
#line 1087 "c99.l"
{ parse_token_text(); return HEXADECIMAL_LITERAL; }
	YY_BREAK
/* A.2.26 */
case 161:
YY_RULE_SETUP
#line 1090 "c99.l"
{ parse_token_text(); return CHARACTER_LITERAL; }
	YY_BREAK
/* A.2.33 */
case 162:
YY_RULE_SETUP
#line 1093 "c99.l"
{ parse_token_text();
return FLOATING_LITERAL; }
	YY_BREAK
/* C99 additional */
case 163:
YY_RULE_SETUP
#line 1097 "c99.l"
{ 
    parse_token_text(); 
    return HEXADECIMAL_FLOAT; 
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1102 "c99.l"
{ 
    parse_token_text(); 
    return HEXADECIMAL_FLOAT; 
}
	YY_BREAK
/* A.2.39 */
case 165:
YY_RULE_SETUP
#line 1108 "c99.l"
{ parse_token_text(); return STRING_LITERAL; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1111 "c99.l"
{ parse_token_text(); return '['; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1112 "c99.l"
{ parse_token_text(); return ']'; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1113 "c99.l"
{ parse_token_text(); return ')'; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1114 "c99.l"
{ parse_token_text(); return '('; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1115 "c99.l"
{ parse_token_text(); return PTR_OP; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1119 "c99.l"
{ parse_token_text(); return PLUSPLUS; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1120 "c99.l"
{ parse_token_text(); return MINUSMINUS; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1121 "c99.l"
{ parse_token_text(); return '+'; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1122 "c99.l"
{ parse_token_text(); return '-'; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1123 "c99.l"
{ parse_token_text(); return '~'; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1124 "c99.l"
{ parse_token_text(); return '!'; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1125 "c99.l"
{ parse_token_text(); return '/'; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1126 "c99.l"
{ parse_token_text(); return '%'; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1127 "c99.l"
{ parse_token_text(); return LEFT; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1128 "c99.l"
{ 
     if (CURRENT_CONFIGURATION->enable_cuda)
     {
         parse_token_text();
         return CUDA_KERNEL_LEFT;
     }
     REJECT;
}
	YY_BREAK
/* There is no '>>' token in C++ but AB1 followed by '>', see below */
case 181:
YY_RULE_SETUP
#line 1138 "c99.l"
{ parse_token_text(); return RIGHT; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1139 "c99.l"
{ 
    if (CURRENT_CONFIGURATION->enable_cuda)
    {
        parse_token_text();
        return CUDA_KERNEL_RIGHT;
    }
    REJECT;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1148 "c99.l"
{ parse_token_text(); return LESS_OR_EQUAL; }
	YY_BREAK
/* There is no '>=' token in C++ but AB2 followed by '=', see below */
case 184:
YY_RULE_SETUP
#line 1151 "c99.l"
{ parse_token_text(); return GREATER_OR_EQUAL; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1153 "c99.l"
{ parse_token_text(); return EQUAL; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1154 "c99.l"
{ parse_token_text(); return NOT_EQUAL; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1155 "c99.l"
{ parse_token_text(); return '^'; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1156 "c99.l"
{ parse_token_text(); return '|'; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1157 "c99.l"
{ parse_token_text(); return ANDAND; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1158 "c99.l"
{ parse_token_text(); return OROR; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1159 "c99.l"
{ parse_token_text(); return '='; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1160 "c99.l"
{ parse_token_text(); return MUL_ASSIGN; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1161 "c99.l"
{ parse_token_text(); return DIV_ASSIGN; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1162 "c99.l"
{ parse_token_text(); return MOD_ASSIGN; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1163 "c99.l"
{ parse_token_text(); return ADD_ASSIGN; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1164 "c99.l"
{ parse_token_text(); return SUB_ASSIGN; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1165 "c99.l"
{ parse_token_text(); return LEFT_ASSIGN; }
	YY_BREAK
/* There is no '>>=' in C++ but AB1 followed by 'AB2' and '=', see below */
case 198:
YY_RULE_SETUP
#line 1168 "c99.l"
{ parse_token_text(); return RIGHT_ASSIGN; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1170 "c99.l"
{ parse_token_text(); return AND_ASSIGN; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1171 "c99.l"
{ parse_token_text(); return XOR_ASSIGN; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1172 "c99.l"
{ parse_token_text(); return OR_ASSIGN; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1176 "c99.l"
{ parse_token_text(); return ';'; } 
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1177 "c99.l"
{ parse_token_text(); return ':'; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1178 "c99.l"
{ parse_token_text(); return '.'; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1179 "c99.l"
{ parse_token_text(); return ','; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1180 "c99.l"
{ parse_token_text(); return '?'; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1181 "c99.l"
{ parse_token_text(); return '{'; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1182 "c99.l"
{ parse_token_text(); return '}'; } 
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1183 "c99.l"
{ parse_token_text(); return '<'; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1192 "c99.l"
{ parse_token_text(); return '>'; } 
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1194 "c99.l"
{ parse_token_text(); return '&'; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1195 "c99.l"
{ parse_token_text(); return '*'; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1196 "c99.l"
{ parse_token_text(); return '"'; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1200 "c99.l"
{ parse_token_text(); return ELLIPSIS; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1202 "c99.l"
{ parse_token_text(); return TWO_DOTS; }
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 1204 "c99.l"
{ scanning_now.line_number++; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1205 "c99.l"
{  }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1206 "c99.l"
{ 
    /* ignore bad characters */ 
    if (isgraph(*mc99text))
    {
        fprintf(stderr, "%s:%d: warning: unknown character '%c' (%#x). Ignoring it.\n", 
				scanning_now.current_filename, scanning_now.line_number,
                *mc99text, *mc99text);
    }
    else
    {
        fprintf(stderr, "%s:%d: warning: unknown character %#x. Ignoring it.\n", 
				scanning_now.current_filename, scanning_now.line_number,
                *mc99text);
    }
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1223 "c99.l"
ECHO;
	YY_BREAK
#line 4876 "c99-scanner.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(longcomment):
			case YY_STATE_EOF(linecomment):
			case YY_STATE_EOF(preprocess):
			case YY_STATE_EOF(pragma_line):
			case YY_STATE_EOF(inline_pragma):
			case YY_STATE_EOF(unknown_pragma):
			case YY_STATE_EOF(pragma_custom_directive):
			case YY_STATE_EOF(pragma_custom_clause):
			case YY_STATE_EOF(pragma_custom_clause_first):
			case YY_STATE_EOF(pragma_custom_var_list):
			case YY_STATE_EOF(verbatim_text):
			case YY_STATE_EOF(verbatim_clauses):
			case YY_STATE_EOF(verbatim_clauses_args):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed mc99in at a new source and called
			 * mc99lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = mc99in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( mc99wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * mc99text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of mc99lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mc99restart(mc99in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mc99realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1416 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1416 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1415);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up mc99text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update mc99lineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mc99restart(mc99in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mc99wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve mc99text */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and mc99lineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void mc99restart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        mc99ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            mc99_create_buffer(mc99in,YY_BUF_SIZE );
	}

	mc99_init_buffer(YY_CURRENT_BUFFER,input_file );
	mc99_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void mc99_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mc99pop_buffer_state();
	 *		mc99push_buffer_state(new_buffer);
     */
	mc99ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mc99_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (mc99wrap()) processing, but the only time this flag
	 * is looked at is after mc99wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void mc99_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	mc99in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE mc99_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mc99alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mc99_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mc99alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mc99_create_buffer()" );

	b->yy_is_our_buffer = 1;

	mc99_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mc99_create_buffer()
 * 
 */
/* %if-c-only */
    void mc99_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mc99free((void *) b->yy_ch_buf  );

	mc99free((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mc99restart() or at EOF.
 */
/* %if-c-only */
    static void mc99_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	mc99_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then mc99_init_buffer was _probably_
     * called from mc99restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void mc99_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mc99_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void mc99push_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	mc99ensure_buffer_stack();

	/* This block is copied from mc99_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mc99_switch_to_buffer. */
	mc99_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void mc99pop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	mc99_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		mc99_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void mc99ensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)mc99alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mc99ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)mc99realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mc99ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mc99_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mc99alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mc99_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mc99_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to mc99lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mc99_scan_bytes() instead.
 */
YY_BUFFER_STATE mc99_scan_string (yyconst char * yystr )
{
    
	return mc99_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to mc99lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mc99_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mc99alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mc99_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mc99_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mc99_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mc99text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		mc99text[mc99leng] = (yy_hold_char); \
		(yy_c_buf_p) = mc99text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		mc99leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int mc99get_lineno  (void)
{
        
    return mc99lineno;
}

/** Get the input stream.
 * 
 */
FILE *mc99get_in  (void)
{
        return mc99in;
}

/** Get the output stream.
 * 
 */
FILE *mc99get_out  (void)
{
        return mc99out;
}

/** Get the length of the current token.
 * 
 */
int mc99get_leng  (void)
{
        return mc99leng;
}

/** Get the current token.
 * 
 */

char *mc99get_text  (void)
{
        return mc99text;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void mc99set_lineno (int  line_number )
{
    
    mc99lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see mc99_switch_to_buffer
 */
void mc99set_in (FILE *  in_str )
{
        mc99in = in_str ;
}

void mc99set_out (FILE *  out_str )
{
        mc99out = out_str ;
}

int mc99get_debug  (void)
{
        return mc99_flex_debug;
}

void mc99set_debug (int  bdebug )
{
        mc99_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mc99lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    mc99in = stdin;
    mc99out = stdout;
#else
    mc99in = (FILE *) 0;
    mc99out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mc99lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* mc99lex_destroy is for both reentrant and non-reentrant scanners. */
int mc99lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mc99_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mc99pop_buffer_state();
	}

	/* Destroy the stack itself. */
	mc99free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    mc99free ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mc99lex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mc99alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *mc99realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mc99free (void * ptr )
{
	free( (char *) ptr );	/* see mc99realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 1223 "c99.l"



static int mc99wrap(void)
{
    return 1;
}





#define FLEX_LVAL mc99lval


static void parse_token_text(void)
{
    FLEX_LVAL.token_atrib.token_line = scanning_now.line_number;
    FLEX_LVAL.token_atrib.token_file = uniquestr(scanning_now.current_filename);
    FLEX_LVAL.token_atrib.token_text = uniquestr(mc99text);
}

static void parse_token_text_str(const char* c)
{
    FLEX_LVAL.token_atrib.token_line = scanning_now.line_number;
    FLEX_LVAL.token_atrib.token_file = uniquestr(scanning_now.current_filename);
    FLEX_LVAL.token_atrib.token_text = uniquestr(c);
}








#define OPEN_FILE_FOR_SCANNING mc99_open_file_for_scanning
#define PREPARE_STRING_FOR_SCANNING mc99_prepare_string_for_scanning
#define TL_SOURCE_STRING mc99_tl_source_string


char* TL_SOURCE_STRING = "(tl-source-string)";

int PREPARE_STRING_FOR_SCANNING(const char* str)
{
    static int num_string = 0;
	DEBUG_CODE()
	{
		fprintf(stderr, "Going to parse string '%s'\n", str);
	}
	memset(&scanning_now, 0, sizeof(scanning_now));
	scanning_now.line_number = 1;

	const char* current_filename = CURRENT_COMPILED_FILE->input_filename;

    char c[256];
    sprintf(c, "%s%s-%d", TL_SOURCE_STRING, current_filename, num_string);
    c[255] = '\0';
    scanning_now.filename = uniquestr(c);

    scanning_now.current_filename = scanning_now.filename;

    num_string++;

	scanning_now.scanning_buffer = mc99_scan_string(str);

	// mc99_flush_buffer(YY_CURRENT_BUFFER);
	mc99_switch_to_buffer(scanning_now.scanning_buffer);

	return 0;
}

int OPEN_FILE_FOR_SCANNING(const char* scanned_filename, const char* input_filename)
{
	FILE* file;

	file = fopen(scanned_filename, "r");

	if (file == NULL)
	{
		running_error("error: cannot open file '%s' (%s)", scanned_filename, strerror(errno));
	}

	memset(&scanning_now, 0, sizeof(scanning_now));
	scanning_now.filename = uniquestr(scanned_filename);
	scanning_now.file_descriptor = file;
	scanning_now.line_number = 1;

	main_input_filename = uniquestr(input_filename);
    scanning_now.current_filename = main_input_filename;

	scanning_now.scanning_buffer = mc99_create_buffer(file,YY_BUF_SIZE);

	// mc99_flush_buffer(YY_CURRENT_BUFFER);
	mc99_switch_to_buffer(scanning_now.scanning_buffer);

	return 0;
}



void close_scanned_file(void)
{
    if (scanning_now.file_descriptor != NULL)
    {
        fclose(scanning_now.file_descriptor);
    }
}

static pragma_directive_kind_t lookup_pragma_directive_inner(pragma_directive_set_t* pragma_directive_set, 
        const char *directive)
{
    int j;
    for (j = 0; j < pragma_directive_set->num_directives; j++)
    {
        if (strcmp(pragma_directive_set->directive_names[j], directive) == 0)
        {
            return pragma_directive_set->directive_kinds[j];
        }
    }

    return PDK_NONE;
}

pragma_directive_kind_t lookup_pragma_directive(const char* prefix, const char* directive)
{
    int i;
    for (i = 0; i < CURRENT_CONFIGURATION->num_pragma_custom_prefix; i++)
    {
        if (strcmp(CURRENT_CONFIGURATION->pragma_custom_prefix[i], prefix) == 0)
        {
            pragma_directive_set_t* pragma_directive_set = CURRENT_CONFIGURATION->pragma_custom_prefix_info[i];
            return lookup_pragma_directive_inner(pragma_directive_set, directive);
        }
    }

    return PDK_NONE;
}

static void register_new_directive_inner(pragma_directive_set_t* pragma_directive_set,
        const char* directive, pragma_directive_kind_t kind)
{
    int num_directives = pragma_directive_set->num_directives;
    P_LIST_ADD(pragma_directive_set->directive_names,
            num_directives,
            uniquestr(directive));
    P_LIST_ADD(pragma_directive_set->directive_kinds,
            pragma_directive_set->num_directives,
            kind);
}

void register_new_directive(const char* prefix, const char* directive, char is_construct, char bound_to_single_stmt)
{
    pragma_directive_kind_t kind = (is_construct ? PDK_CONSTRUCT : PDK_DIRECTIVE);

    if (kind == PDK_CONSTRUCT 
            && bound_to_single_stmt)
    {
        kind = PDK_CONSTRUCT_NOEND;
    }

    int i;
    for (i = 0; i < CURRENT_CONFIGURATION->num_pragma_custom_prefix; i++)
    {
        if (strcmp(CURRENT_CONFIGURATION->pragma_custom_prefix[i], prefix) == 0)
        {
            pragma_directive_set_t* pragma_directive_set = CURRENT_CONFIGURATION->pragma_custom_prefix_info[i];

            int j;
            for (j = 0; j < pragma_directive_set->num_directives; j++)
            {
                if (strcmp(pragma_directive_set->directive_names[j], directive) == 0)
                {
                    fprintf(stderr, "Warning, directive or construct "
                            "'%s' already registered for pragma '%s'"
                            ", ignoring additional registrations\n",
                            directive, prefix);
                    return;
                }
            }

            register_new_directive_inner(pragma_directive_set, directive, kind);
        }
    }
}


static char* _verbatim_buffer = NULL;
static int _verbatim_buffer_length = 0;
static int _verbatim_buffer_capacity = 0;

#define BUFF_SIZE 512

static void verbatim_buffer_append(const char* c)
{
    const char* p = c;

    // This may be regarded a bit inefficient but it is safer this way
    while (*p != '\0')
    {
        ERROR_CONDITION((_verbatim_buffer_length > _verbatim_buffer_capacity), 
                "Verbatim buffer overflow", 0);

        if (_verbatim_buffer_length == _verbatim_buffer_capacity)
        {
            // Enlarge verbatim buffer
            _verbatim_buffer_capacity += BUFF_SIZE;
            _verbatim_buffer = realloc(_verbatim_buffer, sizeof(char) * _verbatim_buffer_capacity);
            int i;
            for (i = _verbatim_buffer_length; i < _verbatim_buffer_capacity; i++)
            {
                _verbatim_buffer[i] = '\0';
            }
        }

        ERROR_CONDITION(!(_verbatim_buffer_length < _verbatim_buffer_capacity),
                "Wrong logic in verbatim buffer handling", 0);

        _verbatim_buffer[_verbatim_buffer_length] = *p;
        _verbatim_buffer_length++;

        p++;
    }
}

static void verbatim_buffer_free(void)
{
    free(_verbatim_buffer);
    _verbatim_buffer = NULL;
    _verbatim_buffer_length = 0;
    _verbatim_buffer_capacity = 0;
}

static const char* verbatim_buffer_get(void)
{
    return _verbatim_buffer;
}

// I hate that this is not C90
static char is_blank(char c)
{
    return (c == ' ') || (c == '\t');
}

static int compute_length_match(const char* lexed_directive,
        const char* available_directive,
        const char **discard_source)
{
    int num_matches = 0;
    {
    char* lexed = strdup(lexed_directive);
    char* available = strdup(available_directive);

    char *next_lexed_info = NULL;
    char *next_lexed = strtok_r(lexed, " ", &next_lexed_info);
    char *next_available_info = NULL;
    char *next_available = strtok_r(available, "|", &next_available_info);

    while (next_lexed != NULL
            && next_available != NULL)
    {
        if (strcmp(next_lexed, next_available) == 0)
        {
            num_matches++;
            next_lexed = strtok_r(NULL, " ", &next_lexed_info);
            next_available = strtok_r(NULL, "|", &next_available_info);
        }
        else
        {
            // Failing one match is enough to discard all of it so we favour
            // the longest match and discard all partial matches
            num_matches = 0;
            break;
        }
    }

    free(available);
    free(lexed);
    }

    // Compute the length of the discards
    const char* p = lexed_directive;

    *discard_source = NULL;
    if (num_matches != 0)
    {
        ERROR_CONDITION((*p == ' ') || (*p == '\t'), 
                "Invalid lexing, there should not be a leading blank", 0);

        // Skip first match
        while (*p != '\0' 
                && !is_blank(*p))
        {
            p++;
        }

        int n = num_matches - 1;
        while ((n > 0)
                && (*p != '\0'))
        {
            // Now advance blanks
            while ((*p != '\0')
                    && is_blank(*p))
            {
                p++;
            }
            // And now, non-blanks
            while ((*p != '\0')
                    && !is_blank(*p))
            {
                p++;
            }
            n--;
        }

        if (*p != '\0')
        {
            *discard_source = p;
        }
    }

    return num_matches;
}

static const char* return_pragma_prefix_longest_match_inner(pragma_directive_set_t* pragma_directive_set,
        const char* lexed_directive,
        const char **discard_source,
        pragma_directive_kind_t* directive_kind)
{
    const char* longest_match_so_far = NULL;
    int length_match = 0;

    int j;
    for (j = 0; j < pragma_directive_set->num_directives; j++)
    {
        const char * current_discard_source = NULL;

        int current_match = compute_length_match(lexed_directive, pragma_directive_set->directive_names[j], 
                &current_discard_source);

        if (current_match > length_match)
        {
            length_match = current_match;
            longest_match_so_far = pragma_directive_set->directive_names[j];
            *discard_source = current_discard_source;
            *directive_kind = pragma_directive_set->directive_kinds[j];
        }
    }

    return longest_match_so_far;
}

static const char* return_pragma_prefix_longest_match(const char* prefix, 
        const char* lexed_directive,
        pragma_directive_kind_t* kind)
{
    const char* longest_match = NULL;
    const char* discard_source = NULL;

    int i;
    for (i = 0; i < CURRENT_CONFIGURATION->num_pragma_custom_prefix; i++)
    {
        if (strcmp(CURRENT_CONFIGURATION->pragma_custom_prefix[i], prefix) == 0)
        {
            pragma_directive_set_t* pragma_directive_set = CURRENT_CONFIGURATION->pragma_custom_prefix_info[i];
            longest_match = return_pragma_prefix_longest_match_inner(pragma_directive_set, lexed_directive, 
                    &discard_source, kind);
        }
    }

    if (discard_source != NULL
            && strlen(discard_source) > 0)
    {
        // Discard the characters "too much lexed"
        const char* end = discard_source;

        while (*end != '\0')
            end++;

        end--;

        while (end != discard_source)
        {
            unput(*end);
            end--;
        }
    }

    return longest_match;
}

static int lookup_keyword_in_table(lexer_keyword_t *keyword_table, const char* keyword, char predicate)
{
    if (!predicate)
    {
        parse_token_text();
        return IDENTIFIER;
    }

    int i = 0;
    while (keyword_table[i].keyword != NULL)
    {
        if (strcmp(keyword_table[i].keyword, keyword) == 0)
        {
            parse_token_text();
            return keyword_table[i].token;
        }
        i++;
    }

    internal_error("%s:%d: error: unhandled lookup token '%s'", 
            scanning_now.filename,
            scanning_now.line_number,
            keyword);
}

// Shut up the compiler
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    UNUSED_PARAMETER static int yyinput (void);
#else
    UNUSED_PARAMETER static int input  (void);
#endif
#endif


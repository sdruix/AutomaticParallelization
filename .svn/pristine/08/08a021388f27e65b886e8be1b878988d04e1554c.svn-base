#line 2 "cxx-scanner.c"

#line 4 "cxx-scanner.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer mcxx_create_buffer
#define yy_delete_buffer mcxx_delete_buffer
#define yy_flex_debug mcxx_flex_debug
#define yy_init_buffer mcxx_init_buffer
#define yy_flush_buffer mcxx_flush_buffer
#define yy_load_buffer_state mcxx_load_buffer_state
#define yy_switch_to_buffer mcxx_switch_to_buffer
#define yyin mcxxin
#define yyleng mcxxleng
#define yylex mcxxlex
#define yylineno mcxxlineno
#define yyout mcxxout
#define yyrestart mcxxrestart
#define yytext mcxxtext
#define yywrap mcxxwrap
#define yyalloc mcxxalloc
#define yyrealloc mcxxrealloc
#define yyfree mcxxfree

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mcxxrestart(mcxxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int mcxxleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *mcxxin, *mcxxout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mcxxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up mcxxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mcxxrestart()), so that the user can continue scanning by
	 * just pointing mcxxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when mcxxtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int mcxxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow mcxxwrap()'s to do buffer switches
 * instead of setting up a fresh mcxxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void mcxxrestart (FILE *input_file  );
void mcxx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE mcxx_create_buffer (FILE *file,int size  );
void mcxx_delete_buffer (YY_BUFFER_STATE b  );
void mcxx_flush_buffer (YY_BUFFER_STATE b  );
void mcxxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void mcxxpop_buffer_state (void );

static void mcxxensure_buffer_stack (void );
static void mcxx_load_buffer_state (void );
static void mcxx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER mcxx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE mcxx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE mcxx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE mcxx_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *mcxxalloc (yy_size_t  );
void *mcxxrealloc (void *,yy_size_t  );
void mcxxfree (void *  );

#define yy_new_buffer mcxx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mcxxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mcxx_create_buffer(mcxxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mcxxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mcxx_create_buffer(mcxxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] mcxxtext/mcxxin/mcxxout/yy_state_type/mcxxlineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *mcxxin = (FILE *) 0, *mcxxout = (FILE *) 0;

typedef int yy_state_type;

extern int mcxxlineno;

int mcxxlineno = 1;

extern char *mcxxtext;
#define yytext_ptr mcxxtext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up mcxxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle mcxxtext and mcxxleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	mcxxleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to mcxxtext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 269
#define YY_END_OF_BUFFER 270
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1570] =
    {   0,
      208,  208,   18,   18,  270,  268,  269,  267,  268,  269,
      266,  269,  226,  268,  269,  262,  268,  269,    1,  268,
      269,  228,  268,  269,  260,  268,  269,  268,  269,  218,
      268,  269,  217,  268,  269,  261,  268,  269,  223,  268,
      269,  251,  268,  269,  224,  268,  269,  250,  268,  269,
      227,  268,  269,  208,  211,  268,  269,  207,  208,  211,
      268,  269,  207,  211,  268,  269,  249,  268,  269,  248,
      268,  269,  255,  268,  269,  238,  268,  269,  259,  268,
      269,  252,  268,  269,  268,  269,  206,  268,  269,  206,
      208,  268,  269,  206,  208,  268,  269,  215,  268,  269,

      268,  269,  216,  268,  269,  234,  268,  269,  206,  268,
      269,  206,  268,  269,  206,  268,  269,  206,  268,  269,
      206,  268,  269,  206,  268,  269,  206,  268,  269,  206,
      268,  269,  206,  208,  268,  269,  206,  208,  268,  269,
      206,  208,  268,  269,  206,  268,  269,  206,  268,  269,
      206,  268,  269,  206,  268,  269,  206,  268,  269,  206,
      268,  269,  206,  268,  269,  206,  208,  268,  269,  206,
      268,  269,  206,  268,  269,  206,  268,  269,  253,  268,
      269,  235,  268,  269,  254,  268,  269,  225,  268,  269,
       49,  268,  269,   48,  269,   49,  268,  269,   45,  268,

      269,   46,  269,   45,  268,  269,   37,  268,  269,   38,
      269,   37,  268,  269,   37,  268,  269,   37,  268,  269,
      269,   17,  268,  269,  268,  269,   17,  268,  269,   17,
      268,  269,   42,  268,  269,   40,   42,  268,  269,   41,
       42,  268,  269,   18,  268,  269,   21,  268,  269,   20,
      269,   19,  268,  269,  268,  269,   19,  268,  269,   28,
      268,  269,   26,  269,   27,  268,  269,  268,  269,   27,
      268,  269,   24,  268,  269,   22,  269,   25,  268,  269,
       23,  268,  269,  268,  269,   23,  268,  269,   34,  268,
      269,   31,   34,  268,  269,   33,  269,   29,   34,  268,

      269,   30,   34,  268,  269,   32,   34,  268,  269,   34,
      268,  269,   32,   34,  268,  269,   14,  268,  269,   15,
      269,   14,  268,  269,    5,  268,  269,    6,  269,  268,
      269,    9,  268,  269,   11,  269,    7,  268,  269,    8,
      268,  269,   10,  268,  269,   10,  268,  269,  268,  269,
       10,  268,  269,   10,  268,  269,  233,  214,  241,  118,
      236,  245,  210,  239,  221,  242,  222,  243,  219,  265,
      211,   47,   43,  240,  211,  208,  211,  208,  211,  211,
      211,  208,  211,  208,  208,  211,  207,  208,  211,  207,
      211,  207,  208,  211,  207,  208,  207,  208,  211,  207,

      211,  207,  207,  211,  263,  120,  117,  119,  229,  231,
      232,  258,  257,  256,  206,  206,  206,  208,  206,  208,
      206,  208,  206,  208,  206,  208,  206,  208,  246,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  109,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  208,  206,  208,  105,
      206,  206,  206,  208,  206,  206,  206,  206,  206,  206,
      123,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  247,  237,   50,   44,   17,   17,   17,   17,   18,

       19,   19,   19,   27,   27,   27,   23,   23,   23,   31,
       32,   32,   32,   10,   10,   10,   10,   10,  220,  264,
      211,  211,  211,  208,  208,  208,  211,  208,  208,  209,
      208,  211,  208,  207,  208,  207,  208,  207,  208,  211,
      207,  208,  207,  208,  207,  208,  211,  207,  208,  207,
      207,  207,  211,  207,  207,  207,  211,  207,  230,  244,
      206,  206,  208,  206,  208,  206,  208,  206,  208,  206,
      208,  206,  208,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      121,  206,   75,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  110,  206,  206,  206,  206,
      208,  206,  208,  206,  208,  206,  208,  206,   55,  206,
      206,  206,  206,   83,  206,  130,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  100,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  124,  206,
       17,   17,   17,   17,   19,   19,   19,   19,   27,   27,
       23,   23,   32,   32,   10,   10,   10,   10,  208,  208,
      208,  208,  208,  208,  209,  209,  209,  209,  208,  208,

      208,  207,  208,  207,  208,  207,  208,  207,  208,  207,
      208,  207,  208,  207,  208,  207,  208,  207,  208,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  206,  206,
      208,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,   67,  206,  206,  206,
       53,  206,  206,  103,  206,  206,   51,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  106,  206,   65,
      206,  206,  206,  206,  206,  206,  206,  113,  206,  206,
      208,  206,   56,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   94,  206,  206,  116,  206,  206,  206,
      206,  206,  206,  206,   63,  206,  206,  206,  206,  206,
       17,   17,   19,   19,   19,   19,   19,   27,   27,   23,
       23,   32,   32,    4,   10,   10,   10,   10,  208,  209,
      209,  209,  213,  209,  209,  209,  209,  208,  207,  208,
      207,  208,  207,  207,  206,  206,  206,  206,  206,  206,
      160,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  122,  206,  111,  206,  101,  206,

       87,  206,  125,  206,   72,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  115,  206,   61,  206,  206,
      206,  206,  206,  206,  206,  128,  206,  206,  206,  206,
      206,  206,  206,  206,   54,  206,  206,  206,  206,  206,
      206,  206,   81,  206,  206,  206,  206,  206,  206,   74,
      206,  206,   92,  206,  206,  206,  206,  108,  206,  206,
       17,   17,   19,   19,   19,   19,   27,   27,   23,   23,
       32,   32,   10,   10,   10,   10,  212,  209,  209,  213,
      213,  209,  209,  209,  209,  209,  209,  191,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  138,  206,  206,  206,  206,  206,
      206,  206,  127,  206,  126,  206,  206,  206,  206,  206,
       84,  206,   62,  206,  206,  206,   86,  206,   70,  206,
       89,  206,   71,  206,  206,  206,  131,  206,  206,  206,
      206,   80,  206,  206,  206,  206,  114,  206,   57,  206,
      102,  206,   69,  206,   66,  206,  107,  206,  206,  206,
       99,  206,  206,  145,  206,  206,  206,  206,  206,  129,
      206,   36,   35,   17,   17,   19,   19,   19,   19,   27,
       27,   23,   23,   32,   32,   10,   10,   10,   10,  212,

      212,  213,  209,  209,  206,  206,  206,   39,  206,  206,
      206,  161,  206,  206,  206,  206,  151,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  104,  206,  206,  206,
       90,  206,  206,  206,   78,  206,  206,  206,  206,  206,
      206,  206,   64,  206,  206,  206,   91,  206,  206,   52,
      206,   36,   35,   35,   35,    2,   17,   19,   19,   19,
       27,   23,   32,   10,   10,   10,  212,  199,  162,  206,
      144,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  183,  206,  140,  206,
      156,  206,  206,  206,  206,  206,  206,  206,  178,  206,
      206,  206,  206,  139,  206,  206,  206,   58,  206,  155,
      206,  146,  206,  206,  206,  112,  206,   76,  206,  206,
       77,  206,  206,   82,  206,  206,   68,  206,  206,  148,
      206,  206,  206,   88,  206,   85,  206,   60,  206,   73,
      206,   35,   19,   19,   10,   10,  206,  135,  206,  206,
      206,  142,  206,  152,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  177,
      206,  206,  206,  141,  206,  206,  206,  206,  206,  206,

      206,  206,   93,  206,   79,  206,  206,  206,  206,   35,
       35,   35,   19,   10,   10,  206,  206,  206,  206,  206,
      206,  206,  181,  206,  206,  182,  206,  206,  206,  206,
      157,  206,  206,  206,  174,  206,  206,  176,  206,  206,
      180,  206,  149,  206,  185,  206,   59,  206,  147,  206,
      158,  206,   98,  206,  206,  206,  206,  206,   35,   35,
       35,   10,   10,  200,  201,  189,  192,  137,  206,  136,
      206,  153,  206,  206,  206,  143,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,   96,  206,   35,   35,   35,   10,   10,  187,

      206,  206,  206,  184,  206,  206,  206,  206,  206,  206,
      206,  173,  206,  206,  206,  150,  206,  159,  206,   95,
      206,  206,  206,   35,   10,   10,  190,  154,  206,  206,
      206,  186,  206,  134,  206,  206,  206,  206,  172,  206,
      206,  206,  206,  163,  206,   10,   10,   10,  206,  206,
      206,  206,  206,  206,  206,  206,   12,   10,  193,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
       10,  206,  132,  206,  206,  206,  206,  206,  206,  206,
      206,  179,  206,   97,  206,   10,  188,  195,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,   10,  197,

      133,  206,  206,  206,  166,  206,  206,  206,  169,  206,
      206,  206,  206,    3,   10,  194,  196,  202,  206,  206,
      206,  206,  206,  206,  175,  206,    3,   10,  164,  206,
      206,  167,  206,  206,  206,  206,   10,  198,  206,  206,
      206,  206,   10,  206,  206,  206,  206,   10,  206,  206,
      206,  206,   10,  203,  205,  206,  206,  170,  206,  171,
      206,   10,  165,  206,  168,  206,   16,   13,  204
    } ;

static yyconst flex_int16_t yy_accept[1653] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        8,   11,   13,   16,   19,   22,   25,   28,   30,   33,
       36,   39,   42,   45,   48,   51,   54,   58,   63,   67,
       70,   73,   76,   79,   82,   85,   87,   90,   94,   98,
      101,  103,  106,  109,  112,  115,  118,  121,  124,  127,
      130,  133,  137,  141,  145,  148,  151,  154,  157,  160,
      163,  166,  170,  173,  176,  179,  182,  185,  188,  191,
      194,  196,  199,  202,  204,  207,  210,  212,  215,  218,

      221,  222,  225,  227,  230,  233,  236,  240,  244,  247,
      250,  252,  255,  257,  260,  263,  265,  268,  270,  273,
      276,  278,  281,  284,  286,  289,  292,  296,  298,  302,
      306,  310,  313,  317,  320,  322,  325,  328,  330,  332,
      335,  337,  340,  343,  346,  349,  351,  354,  357,  358,
      358,  359,  359,  360,  361,  362,  363,  363,  364,  364,
      365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
      375,  375,  376,  378,  380,  381,  381,  382,  384,  385,
      385,  387,  390,  392,  395,  397,  400,  402,  403,  405,
      406,  407,  408,  409,  410,  411,  412,  413,  414,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  416,  416,
      417,  417,  417,  419,  421,  423,  425,  427,  429,  429,
      429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      439,  440,  441,  442,  443,  444,  445,  447,  448,  449,
      450,  451,  452,  453,  454,  455,  456,  458,  460,  462,
      463,  465,  466,  467,  468,  469,  470,  471,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
      495,  495,  496,  496,  496,  496,  496,  496,  496,  497,
      497,  498,  498,  498,  499,  500,  501,  501,  502,  502,

      503,  503,  503,  504,  505,  505,  506,  506,  506,  507,
      508,  508,  509,  509,  509,  510,  511,  512,  512,  513,
      513,  513,  514,  514,  514,  515,  515,  516,  517,  517,
      517,  518,  519,  519,  519,  519,  519,  519,  519,  520,
      521,  522,  522,  522,  523,  524,  525,  526,  528,  529,
      530,  530,  531,  533,  534,  536,  538,  541,  543,  545,
      548,  550,  551,  552,  554,  555,  556,  558,  559,  560,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  562,  564,  566,  568,  570,  572,  574,
      574,  574,  575,  576,  577,  578,  579,  580,  581,  582,

      583,  584,  585,  586,  587,  588,  589,  590,  591,  593,
      595,  596,  597,  598,  599,  600,  601,  602,  603,  604,
      605,  606,  607,  608,  609,  610,  611,  612,  613,  614,
      615,  616,  618,  619,  620,  622,  624,  626,  628,  629,
      631,  632,  633,  634,  636,  638,  639,  640,  641,  642,
      643,  644,  645,  646,  647,  648,  649,  650,  651,  652,
      653,  654,  655,  656,  657,  659,  660,  661,  662,  663,
      664,  665,  666,  667,  668,  669,  671,  671,  671,  671,
      671,  671,  671,  672,  672,  672,  673,  674,  675,  676,
      676,  677,  677,  677,  678,  678,  678,  679,  679,  679,

      680,  680,  680,  681,  681,  681,  682,  682,  682,  683,
      683,  683,  684,  684,  684,  685,  685,  685,  685,  685,
      686,  687,  687,  687,  688,  689,  689,  689,  689,  689,
      689,  689,  690,  691,  692,  693,  694,  695,  695,  695,
      696,  697,  697,  698,  699,  700,  701,  702,  704,  706,
      708,  710,  712,  714,  716,  718,  720,  721,  722,  723,
      724,  725,  726,  727,  728,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  730,  732,
      732,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,

      751,  752,  753,  754,  755,  756,  757,  759,  760,  761,
      763,  764,  766,  767,  769,  770,  771,  772,  773,  774,
      775,  776,  777,  778,  780,  782,  783,  784,  785,  786,
      787,  788,  790,  792,  793,  795,  796,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  808,  809,
      810,  811,  812,  813,  814,  816,  817,  819,  820,  821,
      822,  823,  824,  825,  827,  828,  829,  830,  831,  831,
      831,  831,  831,  831,  832,  832,  832,  832,  833,  834,
      834,  835,  835,  835,  836,  836,  836,  837,  837,  837,
      838,  838,  838,  839,  839,  839,  840,  840,  840,  841,

      841,  841,  842,  842,  842,  843,  843,  843,  844,  844,
      845,  845,  845,  846,  847,  847,  847,  848,  849,  849,
      849,  850,  850,  851,  852,  853,  853,  854,  855,  856,
      857,  858,  859,  861,  863,  864,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  866,
      866,  866,  867,  868,  869,  870,  871,  873,  874,  875,
      876,  877,  878,  879,  880,  881,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      897,  899,  901,  903,  905,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  918,  920,  921,  922,  923,

      924,  925,  926,  928,  929,  930,  931,  932,  933,  934,
      935,  937,  938,  939,  940,  941,  942,  943,  945,  946,
      947,  948,  949,  950,  952,  953,  955,  956,  957,  958,
      960,  961,  961,  961,  961,  961,  961,  962,  962,  962,
      962,  963,  963,  963,  964,  964,  964,  965,  965,  965,
      966,  966,  966,  967,  967,  967,  968,  968,  968,  969,
      969,  969,  970,  970,  970,  971,  971,  971,  972,  972,
      972,  973,  973,  973,  973,  974,  975,  975,  975,  976,
      977,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  989,  989,  989,  990,
      990,  991,  992,  993,  994,  995,  996,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033,
     1035, 1036, 1037, 1039, 1041, 1043, 1045, 1046, 1047, 1049,
     1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1061, 1063,
     1065, 1067, 1069, 1070, 1071, 1073, 1074, 1076, 1077, 1078,
     1079, 1080, 1082, 1083, 1084, 1084, 1084, 1084, 1085, 1085,
     1086, 1086, 1086, 1086, 1087, 1087, 1087, 1088, 1088, 1088,

     1089, 1089, 1090, 1090, 1090, 1091, 1091, 1092, 1092, 1092,
     1093, 1093, 1094, 1094, 1094, 1095, 1095, 1096, 1096, 1096,
     1096, 1097, 1098, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1106, 1106, 1107, 1108, 1110, 1111, 1112,
     1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
     1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1146, 1147, 1149, 1150, 1151, 1153, 1154, 1155, 1157,
     1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1169,

     1170, 1172, 1173, 1174, 1175, 1176, 1177, 1177, 1178, 1178,
     1178, 1178, 1178, 1179, 1179, 1179, 1180, 1180, 1181, 1181,
     1181, 1182, 1182, 1182, 1183, 1183, 1183, 1184, 1184, 1184,
     1184, 1185, 1186, 1186, 1187, 1188, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1191,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1209, 1211, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1227,
     1228, 1230, 1232, 1234, 1235, 1236, 1238, 1240, 1241, 1243,
     1244, 1246, 1247, 1249, 1250, 1252, 1253, 1254, 1256, 1258,

     1260, 1262, 1263, 1263, 1263, 1263, 1263, 1263, 1264, 1264,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1266, 1266, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1268, 1270, 1271, 1272,
     1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
     1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1296,
     1297, 1298, 1299, 1300, 1301, 1302, 1303, 1305, 1307, 1308,
     1309, 1310, 1311, 1312, 1313, 1313, 1313, 1313, 1313, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1315, 1315, 1316, 1316, 1316, 1316, 1316, 1316, 1316,

     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1325, 1326, 1328, 1329, 1330, 1331,
     1333, 1334, 1335, 1337, 1338, 1340, 1341, 1343, 1345, 1347,
     1349, 1351, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1363, 1364, 1365, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1367, 1367, 1368, 1370, 1372, 1374, 1375,
     1376, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397,
     1398, 1398, 1398, 1398, 1398, 1398, 1399, 1400, 1400, 1400,

     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402, 1403,
     1404, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1414, 1415,
     1416, 1418, 1420, 1422, 1423, 1424, 1425, 1425, 1425, 1425,
     1426, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1430, 1431, 1432, 1434, 1436, 1437, 1438, 1439, 1441,
     1442, 1443, 1444, 1446, 1446, 1446, 1447, 1447, 1448, 1448,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1457, 1457,
     1458, 1458, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,

     1469, 1470, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1473, 1475, 1476, 1477, 1478,
     1479, 1480, 1481, 1482, 1484, 1486, 1486, 1486, 1486, 1487,
     1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1490,
     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1499,
     1499, 1499, 1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501,
     1503, 1504, 1505, 1507, 1508, 1509, 1511, 1512, 1513, 1514,
     1515, 1515, 1515, 1516, 1517, 1517, 1518, 1519, 1519, 1519,
     1520, 1521, 1522, 1523, 1524, 1525, 1527, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1531, 1532, 1534, 1535, 1536, 1537,

     1537, 1537, 1538, 1539, 1539, 1539, 1540, 1541, 1542, 1543,
     1543, 1543, 1544, 1544, 1544, 1545, 1546, 1547, 1548, 1548,
     1548, 1549, 1549, 1549, 1550, 1551, 1552, 1553, 1553, 1553,
     1554, 1555, 1555, 1556, 1557, 1558, 1560, 1562, 1562, 1562,
     1563, 1563, 1565, 1567, 1568, 1568, 1569, 1569, 1569, 1569,
     1570, 1570
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       21,   21,   21,   21,   21,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   41,   42,   43,   44,   45,
       40,   46,   47,   48,   49,   40,   40,   50,   51,   40,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[87] =
    {   0,
        1,    2,    3,    1,    2,    1,    4,    1,    1,    1,
        5,    1,    1,    1,    1,    1,    1,    6,    1,    7,
        7,    7,    8,    1,    1,    1,    1,    1,    5,    1,
        9,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       11,   10,   10,   10,   12,   10,   10,   10,   11,   10,
       10,    1,   13,    1,    1,   10,   14,   14,    9,    9,
       14,   14,   10,   10,   11,   11,   10,   11,   10,   15,
       10,   12,   10,   15,   10,   15,   11,   15,   10,   15,
       10,   10,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1938] =
    {   0,
        0,    0,   84,   85,   86,   87,   88,   89,  161,    0,
       92,   94, 4596, 4595,  247,    0,  333,    0,  419,    0,
      505,    0,   93,  100,  590,  594,  670,    0, 4589, 6912,
     6912, 6912, 4561,   93, 6912,   82,   92,  100, 6912, 6912,
     4560,   97, 6912,   98,  100,  584,  739,  802,  862,   89,
     6912,  105, 4559,  100, 6912,  583,   77,  762,  567, 6912,
       67, 6912, 4558,  583,  549,  576,   81,  581,  587,  710,
      592,  744,  741,  824,   82,  715,  757,  773,  718,  780,
      835,  866,  783,  841,  764, 6912,  567, 6912, 6912, 6912,
     6912,  585, 6912, 6912, 4581, 6912, 6912,  924, 4516, 4506,

     6912,  755,  572,  799,  816, 6912, 6912, 6912,    0, 6912,
     6912,  908,  721,  912, 6912, 6912,  789,  797,  849, 6912,
     6912, 6912,  809,  804,  889, 6912,  131, 6912, 6912, 6912,
      838,  829,  896, 6912, 6912, 4507, 6912, 6912, 4497, 6912,
     6912, 6912, 6912,  880,  885,  873,  899,  900, 6912,  603,
     6912,  947, 6912, 6912, 6912, 6912,  590, 6912,  959, 6912,
     6912, 6912, 6912, 6912, 4559, 4554,  979, 6912, 6912, 6912,
     4568,  987,  716,  936, 1038, 1009,   76, 1001,  922, 4552,
      957,    0,    0, 1016,  970, 1034, 1048, 1022, 1069, 6912,
     6912, 6912, 6912,  121, 6912, 6912, 6912, 6912, 6912,  110,

     4530, 4514, 4529, 4527, 4515,  102, 4505,  887,  926, 1009,
      606,  595, 1042, 1056, 1071, 1064, 1074, 1085,    0,    0,
     6912,  907,  941, 1024, 1132,  944, 1059, 1090, 1079, 1081,
     1104, 1094,  960, 1097, 1091, 1152, 1082, 1124, 1111, 1122,
     1126, 1151, 1159, 1160, 1162, 1164, 1182, 1180, 1165, 1179,
     1185, 1190, 1192, 1196, 1193, 1199, 1205, 1208, 1218, 1221,
     1225, 1210, 1231, 1240, 1238, 1243, 1251, 1246, 1233, 1254,
     1268, 1269, 1258, 1271, 1273, 1276, 1277, 6912, 6912, 6912,
     4552, 6912, 1272, 1337, 4489, 4475, 4478, 4490, 1285,  956,
     1296,    0,    0, 1308, 1299,    0, 1363, 1364,  994, 1369,

        0,    0, 1370, 1303, 1015, 1324,    0,    0, 1317, 1325,
     1096, 1331,    0,    0, 1329,  607, 1326, 1270, 1333,    0,
        0, 1334, 4472, 4466, 1336, 1342, 1356, 1359,    0,    0,
     1347, 1354,  930, 1422, 4484,  612, 1428, 4483, 6912, 6912,
     1389, 1032, 1432, 1438, 6912, 1407,  699, 1350, 1397,  772,
        0, 1446, 1428,  910, 1417,  806, 1421, 1451, 1364, 1452,
     1439, 1459, 1117, 1422, 1469, 1445, 1481, 1447, 6912, 6912,
     4518, 4517, 4499, 4481, 4469, 4482, 4478, 4491, 4475, 4427,
        0,    0, 1425, 1344, 1432, 1468, 1473, 1475, 1491,    0,
        0, 1488, 1487, 1489, 1490, 1495, 1480, 1498, 1501, 1502,

     1508, 1520, 1530, 1527, 1533, 1537, 1534, 1535, 1536, 1540,
     1550, 1563, 1555, 1565, 1572, 1571, 1573, 1566, 1582, 1576,
     1578, 1603, 1584, 1604, 1611, 1605, 1614, 1616, 1617, 1621,
     1618, 1612, 1624, 1626, 1623, 1633, 1646, 1649, 1639, 1653,
     1655, 1654, 1659, 1656, 1666, 1660, 1668, 1661, 1671, 1672,
     1688, 1674, 1682, 1675, 1689, 1697, 1693, 1702, 1703, 1707,
     1704, 1711, 1716, 1736, 1708, 1729, 1715, 1738, 1743, 1724,
     1722, 1747, 1757, 1759, 1749, 1765,  868,  600, 4410, 4407,
        0,    0, 1758,    0,    0, 1766, 1750, 1772, 1826, 1532,
     1835,    0,    0, 1836,    0,    0, 1842,    0,    0, 1786,

        0,    0, 1795,    0,    0, 1792,    0,    0, 1798,    0,
        0, 1793,    0,    0, 1801, 4412, 4394,    0,    0, 1800,
     1820,    0,    0, 1813, 1808, 1884, 1931, 4327, 1887, 1983,
     4312, 1755, 6912, 6912, 1159, 6912, 1792, 1829, 1839, 1930,
     1879, 1901, 1861, 1892, 1819, 6912, 1846, 1833, 6912, 6912,
     1402, 6912, 1874, 1881, 6912, 1891, 1897, 6912, 6912, 1530,
     6912, 1893, 1900, 6912, 1902, 4253, 4252, 4239, 4233, 4243,
     4245, 4220, 4225, 4237, 4236,    0,    0, 1878, 1809,    0,
        0, 1904, 1948, 1920, 1946, 1947, 1957, 1955, 1974, 1960,
     1969, 1982, 1985, 1934, 1975, 1996, 1995, 2001, 2002, 2008,

     2011, 2013, 2017, 2021, 2018, 2028, 1840, 2022, 2027, 2029,
     2043, 2031, 2047, 2044, 2050, 2049, 2054, 2063, 2056, 2059,
     2061, 2066, 2070, 2065, 2069, 2076, 2082, 2091, 2096, 2095,
     2092, 2097, 2098, 2107, 2099, 2105, 2108, 2117, 2133, 2114,
     2135, 2128, 2142, 2126, 2140, 2144, 2149, 2151, 2145, 2143,
     2160, 2156, 2171, 2176, 2158, 2178, 2179, 2181, 2185, 2190,
     2186, 2187, 2189, 2192, 2194, 2201, 2212, 2215,    0, 4263,
     4196,    0,    0, 2224,    0,    0, 1359, 2208, 2278, 1901,
     2282,    0,    0, 2286,    0,    0, 2291,    0,    0, 2292,
        0,    0, 2233,    0,    0, 2221,    0,    0, 2246,    0,

        0, 2247,    0,    0, 2249,    0,    0, 2251, 4201, 6912,
        0,    0, 2252, 2265,    0,    0, 2260, 2259, 2363, 2415,
     6912, 2356, 2315, 1573, 2038, 2294, 2391, 2281, 2266, 2333,
     2270, 6912, 6912, 6912, 6912, 6912, 4233, 4231, 4226, 4217,
     4151, 4161, 1827, 4154, 4105,  965,    0,    0, 2266,    0,
        0, 2312, 2338, 2298, 2356, 2354, 2352, 2279, 2351, 2386,
     2365, 2390, 2401, 2407, 2408, 2413, 2416, 2417, 2438, 2427,
     2430, 2447, 2428, 2439, 2450, 2453, 2455, 2448, 2460, 2464,
     2465, 2466, 2469, 2473, 2475, 2481, 2476, 2486, 2483, 2487,
     2482, 2496, 2485, 2512, 2503, 2513, 2514, 2515, 2516, 2522,

     2524, 2519, 2525, 2528, 2526, 2547, 2533, 2554, 2555, 2558,
     2535, 2561, 2560, 2564, 2563, 2565, 2573, 2566, 2572, 2591,
     2595, 2583, 2581, 2593, 2594, 2600, 2602, 2601, 2609, 2603,
     2610, 4137, 2668, 4086,    0,    0, 2621,    0,    0, 4080,
     2604,    0,    0, 2680,    0,    0, 2692,    0,    0, 2694,
        0,    0, 2698,    0,    0, 2631,    0,    0, 2616,    0,
        0, 2639,    0,    0, 2648,    0,    0, 2649,    0,    0,
     2651, 4071,    0,    0, 2653, 2654,    0,    0, 2657, 2658,
     2697, 2717, 6912, 6912, 1815, 2688, 2089, 6912, 2286, 2313,
     6912, 2319, 4103, 4084, 4063, 4051, 4019, 4011, 4012, 4010,

     4004, 3986, 3927, 3914, 3919, 6912,    0,    0, 2659,    0,
     2688, 2689, 2699, 2710, 2719, 2711, 2717, 2721, 2724, 2725,
     2727, 2731, 2736, 2738, 2744, 2754, 2756, 2746, 2766, 2772,
     2764, 2775, 2765, 2781, 2785, 2794, 2786, 2793, 2795, 2802,
     2804, 2808, 2811, 2812, 2814, 2813, 2815, 2821, 2816, 2823,
     2824, 2829, 2825, 2827, 2833, 2842, 2846, 2852, 2843, 2850,
     2855, 2858, 2859, 2861, 2865, 2871, 2860, 2864, 2872, 2875,
     2873, 2880, 2887, 2891, 2890, 2892, 2893, 2894, 2898, 2905,
     2901, 2903,    0, 2967, 3950,    0,    0, 2906,    0, 2907,
     3781,    0,    0, 2960,    0,    0, 2974,    0,    0, 2989,

        0, 2990,    0,    0, 2921,    0, 2928,    0,    0, 2932,
        0, 2933,    0,    0, 2943,    0, 2944, 3788,    0,    0,
     2946, 2947,    0, 2948, 2949, 2134, 2970, 6912, 6912, 6912,
     3811, 3794, 3806, 3788, 3787, 3797, 3791, 3759, 3765, 3765,
     3749,    0, 2951,    0, 2959, 2954, 2962, 2991, 2969, 2977,
     2992, 2988, 2994, 3003, 2996, 2999, 3010, 3008, 3009, 3005,
     3019, 3028, 3036, 3035, 3039, 3038, 3041, 3045, 3046, 3066,
     3055, 3047, 3048, 3056, 3075, 3076, 3077, 3078, 3074, 3085,
     3088, 3095, 3091, 3104, 3093, 3097, 3105, 3106, 3108, 3110,
     3114, 3120, 3113, 3141, 3125, 3122, 3140, 3143, 3131, 3151,

     3142,    0,    0,  967, 3201, 3782,    0, 3152,    0, 3728,
        0,    0, 3174,    0,    0, 3205,    0, 3209,    0,    0,
     3156,    0,    0, 3160,    0,    0, 3162,    0, 3780,    0,
     3163, 3172,    0, 3173, 6912, 3726, 3687, 3672, 3655, 3643,
     6912, 3631, 3620, 3632, 3643, 3626,    0,    0, 3177, 3178,
     3199, 3179, 3189, 3190, 3191, 3208, 3200, 3192, 3219, 3225,
     3227, 3212, 3226, 3210, 3204, 3220, 3239, 3241, 3245, 3246,
     3247, 3252, 3261, 3254, 3255, 3256, 3257, 3258, 3284, 3286,
     3288, 3273, 3292, 3287, 3293, 3294, 3296, 3298, 3299, 3301,
     3300, 3306, 3303, 3305, 3307, 3314, 3328, 3319, 3321, 3333,

     3334, 1169,    0,    0, 3615,    0,    0, 3388,    0, 3390,
        0,    0,    0,    0,    0,    0,    0,    0,  786,    0,
     3341,    0, 3344, 3647, 3645, 3622, 3595, 3581, 3553, 3368,
     3530, 3535, 3521,    0,    0, 3350, 3356, 3355, 3360, 3367,
     3351, 3362, 3371, 3369, 3376, 3389, 3387, 3381, 3373, 3399,
     3383, 3415, 3403, 3408, 3409, 3410, 3419, 3421, 3417, 3424,
     3426, 3428, 3446, 3436, 3430, 3451, 3440, 3442, 3457, 3456,
     3461, 1929,    0, 3532,    0,    0, 3489,    0, 3510,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3478,    0,
     3463,    0, 3471, 3500, 3481, 3431, 3430, 3407, 3387, 3375,

     3382, 3354, 2553, 3288, 3285,    0, 3469, 3473, 3474, 3489,
     3491, 3502, 3506, 3468, 3479, 3504, 3518, 3509, 3511, 3519,
     3520, 3527, 3522, 3547, 3538, 3548, 3550, 3558, 3552, 3554,
     3556, 3560, 3564, 3565, 3567, 3569, 3573, 2014, 3631, 3665,
        0, 3247,    0,    0,    0,    0,    0,    0, 1355,    0,
     3579, 3583, 6912, 6912, 3258, 2729, 3254, 3230, 3216, 3214,
     3203, 3189, 6912, 3131, 6912, 3570, 3581, 3592, 3604, 3606,
     3612, 3614, 3615, 3626, 3637, 3652, 3653, 3654, 3640, 3658,
     3642, 3680, 3684, 3662, 3688, 3668, 3627, 3742, 3789, 3065,
     3038,    0,    0, 3101, 3022, 3690, 3675, 3063, 3049, 6912,

     3020, 2987, 2971, 2975, 2971, 2965, 2937, 3694, 3698, 3700,
     3693, 3713, 3720, 3695, 3715, 3725, 3705, 3726, 3736, 3727,
     3731, 3738, 3741, 3775, 3753,    0, 2910,    0, 2274, 3763,
     3852, 6912, 2798, 2787, 2771, 2778, 2780, 2757, 2768, 2323,
     3754, 3761, 3886, 3764, 3766, 3888, 3889, 3893, 3887, 3894,
     3895, 3897, 3898, 1179, 2700, 3928, 2687, 3905, 3908, 3909,
     2701, 2713, 2678, 2669, 2668, 2670, 2652, 2640, 2617, 3926,
     3914, 3936, 3937, 3939, 3930, 3947, 3903, 2522, 2513, 6912,
     2506, 3953, 2485, 6912, 2456, 2437, 2409, 2393, 2414, 2397,
     2355, 3949, 3956, 3957, 3951, 3962, 3958, 3970, 3983, 3985,

     3968, 3964, 2304, 2262, 2202, 3931, 2206, 2138, 2080, 1024,
     2026, 2322, 2028, 1940, 3990, 3989, 3995, 3999, 3998, 4010,
     4002, 4006, 3997, 4001, 4011, 1906, 1919, 1907, 4031, 6912,
     1904, 1877, 6912, 1870, 1837,    0, 1792, 1770, 4032, 4033,
     4036, 4037, 4038, 4042, 4043, 4046, 4049, 4051, 1697, 1686,
     1659, 4044, 1614, 1592, 1598, 6912, 1544, 1514, 1450, 4052,
     4053, 4059, 4054, 4079, 4081, 4084, 4085, 4086, 4093, 1485,
     1411, 1375, 4095, 6912, 1380, 6912, 6912, 1389, 1348, 4096,
     4094, 4097, 4101, 4092, 4099, 4100, 1304, 1237, 1215, 4102,
     1186, 1139, 1133, 4127, 4128, 4129, 4130, 4131, 4132, 1089,

     1007, 4133, 6912, 1028,  860, 4134, 4135, 4150, 4160,  930,
      803, 4142,  803,  759, 4164, 4167, 4144, 4145,  729,  722,
     4172, 2415,  747, 4176, 4177, 4165, 4181,  698,  594, 4182,
     6912,  620, 6912, 4192, 4193, 4146, 4185, 1175, 2378, 4207,
      615, 4197, 4198, 6912, 2161, 6912,  599,  566,  107, 6912,
     6912, 4284, 4299, 4314, 4329, 4344, 4359, 4374, 4389, 4404,
     4419, 4428, 4437, 4452, 4466, 4475, 4484, 4493, 4502, 4514,
     4526, 4536, 4544, 4552, 4560, 4568, 4581, 4595, 4604, 4612,
     4620, 4629, 4637, 4645, 4654, 4662, 4670, 4679, 4687, 4695,
     4704, 4712, 4726, 4735, 4749, 4758, 4766, 4775, 4783, 4791,

     4799, 4808, 4816, 4824, 4832, 4840, 4849, 4857, 4870, 4879,
     4887, 4900, 4909, 4917, 4925, 4933, 4941, 4950, 4958, 4966,
     4974, 4982, 4991, 4999, 5007, 5015, 5023, 5032, 5040, 5048,
     5056, 5064, 5073, 5081, 5095, 5110, 5119, 5128, 5136, 5144,
     5152, 5161, 5169, 5183, 5192, 5200, 5208, 5217, 5225, 5238,
     5247, 5255, 5263, 5271, 5284, 5293, 5301, 5309, 5317, 5325,
     5334, 5342, 5350, 5358, 5366, 5375, 5383, 5391, 5399, 5407,
     5416, 5424, 5432, 5440, 5448, 5457, 5465, 5479, 5494, 5509,
     5524, 5533, 5541, 5549, 5558, 5566, 5580, 5589, 5597, 5605,
     5614, 5622, 5630, 5638, 5651, 5660, 5668, 5676, 5684, 5697,

     5706, 5714, 5722, 5730, 5738, 5747, 5755, 5763, 5771, 5779,
     5788, 5796, 5804, 5812, 5820, 5829, 5837, 5845, 5853, 5861,
     5870, 5878, 5892, 5907, 5916, 5924, 5932, 5941, 5955, 5970,
     5979, 5987, 5995, 6004, 6012, 6020, 6033, 6042, 6050, 6058,
     6066, 6079, 6088, 6096, 6104, 6112, 6121, 6129, 6137, 6145,
     6154, 6162, 6170, 6178, 6187, 6195, 6203, 6211, 6220, 6228,
     6236, 6245, 6259, 6274, 6283, 6291, 6300, 6308, 6316, 6329,
     6338, 6346, 6354, 6367, 6376, 6384, 6392, 6401, 6409, 6417,
     6426, 6434, 6442, 6451, 6459, 6467, 6476, 6484, 6492, 6500,
     6515, 6524, 6532, 6540, 6548, 6561, 6570, 6578, 6586, 6594,

     6602, 6610, 6618, 6626, 6634, 6642, 6650, 6658, 6666, 6680,
     6689, 6697, 6705, 6713, 6721, 6729, 6737, 6745, 6753, 6761,
     6769, 6777, 6785, 6793, 6801, 6809, 6817, 6825, 6833, 6841,
     6849, 6857, 6865, 6873, 6881, 6889, 6897
    } ;

static yyconst flex_int16_t yy_def[1938] =
    {   0,
     1651,    1, 1652, 1652, 1653, 1653, 1654, 1654, 1651,    9,
     1655, 1655, 1656, 1656, 1651,   15, 1651,   17, 1651,   19,
     1651,   21, 1657, 1657, 1658, 1658, 1651,   27, 1651, 1651,
     1651, 1651, 1651, 1659, 1651, 1651, 1651, 1660, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1661, 1651, 1651, 1662, 1662, 1662, 1651,
     1651, 1651, 1651, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1651, 1663, 1651, 1663, 1663, 1651, 1651, 1651, 1664, 1651,
     1651, 1665, 1651, 1665, 1651, 1651, 1666, 1651, 1666, 1651,
     1651, 1651, 1667, 1651, 1667, 1651, 1651, 1651, 1651, 1651,
     1668, 1651, 1668, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1669, 1669, 1651, 1669, 1669, 1651, 1659,
     1651, 1670, 1651, 1651, 1651, 1651, 1660, 1651, 1671, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651,   47,   47, 1651, 1651, 1651, 1651, 1651, 1672,
     1651,   48,   49, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1662, 1651, 1662,
     1659, 1660, 1662, 1662, 1662, 1662, 1662, 1662, 1673, 1674,
     1651, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1663, 1651,
     1663, 1675, 1676, 1663, 1663, 1664, 1677, 1678, 1651, 1678,

     1679, 1680, 1678, 1681, 1651, 1681, 1682, 1683, 1681, 1684,
     1651, 1684, 1685, 1686, 1684, 1651, 1687, 1651, 1687, 1688,
     1689, 1687, 1651, 1651, 1690, 1651, 1690, 1690, 1691, 1692,
     1690, 1690, 1693, 1693, 1694, 1695, 1695, 1696, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1697, 1698, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1699, 1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1702,
     1703, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,

     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1651, 1651, 1651, 1651,
     1704, 1705, 1706, 1707, 1708, 1706, 1706, 1706, 1709, 1651,
     1709, 1710, 1711, 1712, 1713, 1714, 1712, 1715, 1716, 1717,

     1718, 1719, 1717, 1720, 1721, 1722, 1723, 1724, 1722, 1725,
     1726, 1727, 1728, 1729, 1727, 1651, 1651, 1730, 1731, 1732,
     1732, 1733, 1734, 1732, 1732, 1735, 1735, 1651, 1736, 1736,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1737, 1737, 1738,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1739, 1740, 1741, 1741, 1742,
     1743, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,

     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1744, 1651,
     1651, 1745, 1746, 1747, 1748, 1749, 1651, 1747, 1750, 1651,
     1750, 1751, 1752, 1750, 1753, 1754, 1755, 1756, 1757, 1755,
     1758, 1759, 1760, 1761, 1762, 1760, 1763, 1764, 1765, 1766,

     1767, 1765, 1768, 1769, 1770, 1771, 1772, 1770, 1651, 1651,
     1773, 1774, 1775, 1775, 1776, 1777, 1775, 1775, 1778, 1779,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1780, 1781, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1782, 1783, 1784, 1785,
     1786, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1787, 1651, 1651, 1788, 1789, 1790, 1791, 1792, 1651,
     1790, 1793, 1794, 1795, 1796, 1797, 1795, 1798, 1799, 1800,
     1801, 1802, 1800, 1803, 1804, 1805, 1806, 1807, 1805, 1808,
     1809, 1810, 1811, 1812, 1810, 1813, 1814, 1815, 1816, 1817,
     1815, 1651, 1818, 1819, 1820, 1820, 1821, 1822, 1820, 1820,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1823, 1651, 1824, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1825, 1826, 1827, 1828,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1829, 1830, 1651, 1831, 1832, 1833, 1834, 1833,
     1651, 1835, 1836, 1837, 1838, 1839, 1837, 1840, 1841, 1842,

     1843, 1842, 1844, 1845, 1846, 1847, 1846, 1848, 1849, 1850,
     1851, 1850, 1852, 1853, 1854, 1855, 1854, 1651, 1856, 1857,
     1858, 1858, 1859, 1858, 1858, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1860, 1861, 1862, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,

     1861, 1863, 1864, 1864, 1864, 1651, 1865, 1866, 1867, 1651,
     1868, 1869, 1870, 1871, 1872, 1870, 1873, 1874, 1875, 1876,
     1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1651, 1885,
     1886, 1886, 1887, 1886, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1888, 1889, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,

     1890, 1891, 1892, 1893, 1651, 1894, 1895, 1896, 1897, 1896,
     1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1651, 1906,
     1886, 1907, 1886, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1908, 1909, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1891, 1910, 1910, 1911, 1912, 1651, 1913, 1896, 1914,
     1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1651, 1923,
     1886, 1924, 1886, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1925, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1891, 1891, 1910,
     1926, 1651, 1927, 1928, 1929, 1930, 1931, 1932, 1651, 1933,
     1886, 1886, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1891, 1891, 1910,
     1651, 1934, 1935, 1651, 1651, 1886, 1886, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1389, 1651, 1936, 1651, 1886,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1651, 1651, 1886, 1651, 1886, 1651, 1886,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1651, 1651, 1651,
     1651, 1886, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,

     1890, 1890, 1651, 1651, 1651, 1886, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1651, 1651, 1651, 1886, 1651,
     1651, 1651, 1651, 1651, 1651, 1937, 1651, 1651, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1651, 1651,
     1651, 1886, 1651, 1651, 1651, 1651, 1937, 1651, 1651, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1651,
     1651, 1651, 1886, 1651, 1651, 1651, 1651, 1651, 1651, 1890,
     1890, 1890, 1890, 1890, 1890, 1890, 1651, 1651, 1651, 1886,
     1651, 1651, 1651, 1890, 1890, 1890, 1890, 1890, 1890, 1651,

     1651, 1886, 1651, 1651, 1651, 1890, 1890, 1890, 1890, 1651,
     1651, 1886, 1651, 1651, 1890, 1890, 1890, 1890, 1651, 1651,
     1886, 1651, 1651, 1890, 1890, 1890, 1890, 1651, 1651, 1886,
     1651, 1651, 1651, 1890, 1890, 1890, 1890, 1651, 1651, 1886,
     1651, 1890, 1890, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
        0, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651
    } ;

static yyconst flex_int16_t yy_nxt[6999] =
    {   0,
       30,   31,   32,   31,   31,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       58,   57,   57,   57,   57,   57,   57,   57,   59,   57,
       57,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   57,   72,   73,   57,   74,   75,   76,
       77,   78,   57,   79,   80,   81,   82,   83,   84,   85,
       57,   57,   86,   87,   88,   89,   91,   91,   94,   94,
       97,   97,   98,   98,  101,  135,  101,   92,   92,  151,

      136,  155,  135,  107,  108,  107,  108,  136,  153,  154,
      158,  161,  190,  192,  163,  219,  191,  166,  156,  167,
      167,  167,  167,  162,  164,  165,  198,  199,  193,  209,
      194,  195,  316,  209,  209,  316, 1650,  232,   95,   95,
      345,  345,  371,  220,  233,  152,  369,  370,  234,  378,
      379,  235,  159,  210,  372,   99,   99,  210,  253,  100,
      100,   30,   30,  101,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,   30,  103,   30,   30,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  104,
      102,  102,  102,  102,  102,  102,  102,  105,  102,  102,
      102,  102,  102,   30,   30,   30,   30,   30,  110,  111,
       30,  110,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   30,  113,

       30,   30,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  114,  112,  112,  112,  112,  112,   30,
       30,   30,   30,   30,  115,  116,   30,  115,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   30,  118,   30,   30,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  119,
      117,  117,  117,  117,  117,   30,   30,   30,   30,   30,
      120,  121,   30,  120,   30,   30,   30,   30,   30,   30,
      122,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
       30,  124,   30,   30,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  125,  123,  123,  123,  123,

      123,   30,   30,   30,   30,  126,  127,  128,  126,  127,
      126,  126,  126,  126,  126,  126,  129,  130,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  126,  132,  126,  126,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  133,  131,  131,  131,  131,  131,  126,  126,  126,
      126,  137,  138,  278,  137,  137,  138,  168,  137,  200,

      158,  209,  169,  280,  478,  158,  669,  217,  316,  151,
      170,  316,  151, 1649,  222,  223,  201,  202,  226,  209,
      292,  203,  158,  227,  204,  228,  205,  224,  209,  206,
      207,  218,  218,  209,  217,  209,  171,  281,  225,  209,
      229,  236,  159,  210,  209, 1648,  230,  159,  293,  231,
      279,  237,  210, 1647,  239,  152,  240,  210,  152,  210,
     1641,  238,  246,  210,  159,  139,  241, 1639,  210,  139,
       30,  140,  141,   30,  140,   30,   30,   30,   30,   30,
       30,  142,  143,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

      144,  145,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,   30,  146,   30,   30,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  147,  144,  148,  144,  144,  144,
      144,  144,   30,   30,   30,   30,  172, 1638,  173,  174,
      174,  175,  209,  533,  533, 1651,  242,  209,  211,  301,
      209,  254,  212,  176,  177,  255, 1633,  243,  261,  178,
      244,  247, 1629,  245,  247,  256,  210,  179,  180,  248,
     1219,  210,  248,  209,  210, 1651,  209,  302, 1628,  176,

      177, 1623,  213,  181,  181,  249,  178,  290,  247,  209,
      214,  247,  537,  250,  209,  179,  209,  251,  180,  172,
      251,  182,  182,  182,  183,  209,  215,  215,  257,  213,
      258,  291,  209,  210,  277,  209,  176,  177,  216,  537,
      210,  305,  184,  262,  263,  307,  259,  273, 1622,  260,
      185,  290,  313,  274, 1289,  264,  210,  294,  265,  210,
     1620,  311,  176,  177,  213,  306,  186,  186,  290,  184,
      549,  549,  214,  308,  295,  291,  209,  320,  185,  172,
      314,  183,  183,  183,  183,  312,  280,  209,  215,  215,
      318,  213,  291,  209,  252,  266,  176,  177,  267,  275,

      216,  305,  187, 1614,  276,  321,  217,  309,  268,  297,
      188,  210,  297,  297,  319,  269,  297,  210,  209,  328,
      281,  329,  176,  177,  270,  306,  189,  189,  283,  187,
      218,  218,  326,  217, 1610,  271,  151,  326,  188,  209,
      272,  311,  210,  284,  284,  284,  284,  315,  318,  330,
      547,  326,  326,  333,  322,  174,  327,  331,  332,  209,
      299,  327,  349,  210,  299,  312,  334,  334,  334,  336,
      303, 1104,  319, 1202,  381,  327,  327,  547,  337,  337,
      337,  905,  152,  392,  300, 1651,  350,  350,  300,  349,
     1619,  285,  345,  209,  906,  286,  209,  353,  167,  167,

      167,  167,  382,  409,  481,  354,  167,  167,  167,  167,
      358,  393,  209,  176,  177, 1651,  417,  210,  345,  177,
      210,  176,  177,  343,  353,  343,  335,  177,  344,  344,
      344,  344,  482,  354,  359,  359,  210,  358,  338,  176,
      177,  346,  492,  341,  341,  168,  177,  176,  177,  347,
      169,  341,  341, 1533,  177,  172,  355,  175,  175,  175,
      175,  209,  365,  498,  356,  348,  348,  383,  346,  345,
      493, 1613,  176,  177,  360, 1611,  209,  347,  177, 1534,
      357,  357,  361,  355,  171,  210,  366,  366,  362,  365,
      214,  499,  356, 1610,  209,  345,  363,  394,  176,  177,

      210,  360,  341,  341,  345,  177,  215,  215,  209,  367,
      361,  209,  364,  364,  387,  362,  209,  368,  216,  385,
      384,  384,  383,  209,  363,  389,  209,  410,  384,  384,
      345,  209,  210,  209,  209,  210,  367,  209,  388,  388,
      210,  387,  209,  209,  504,  368,  209,  386,  383,  209,
      210,  413,  389,  418,  412,  210,  209,  210,  424,  419,
      420,  210,  395,  209,  414,  411,  210,  210,  415,  416,
      210, 1605,  505,  210,  209, 1273,  209, 1644,  209, 1645,
      210,  558,  558, 1454,  209,  426, 1604,  210,  396,  397,
      398,  399,  400,  425,  401,  402,  403,  428,  427,  404,

      210,  429,  210,  209,  209,  405,  406,  407,  210,  408,
      421,  209,  209,  422,  209, 1603,  209,  209,  430,  423,
      438, 1274,  435,  536,  536,  438,  433,  210,  210,  431,
      436,  209,  209,  432,  209,  210,  210,  209,  210,  434,
      210,  210,  209,  383,  209,  209,  439,  438,  209,  435,
      383,  209,  438, 1478,  440,  210,  210,  209,  437,  441,
      209,  210,  209,  447,  443,  446,  210,  442,  210,  210,
      209,  444,  210,  209,  445,  210,  283,  209,  450,  383,
      455,  210,  448,  209,  210,  209,  210,  451,  449,  452,
      209, 1601,  209,  456,  210,  209,  458,  210,  209,  453,

      454,  210,  460,  209,  466, 1600,  209,  210, 1587,  210,
      209,  461,  457,  459,  210,  462,  210,  467,  510,  210,
      209,  209,  464,  209,  463,  209,  465,  210,  209,  209,
      210,  471,  468,  470,  210,  472,  474,  290,  473,  285,
      475,  478,  469,  286,  210,  210,  511,  210,  290,  210,
      476,  290,  210,  210,  483,  305,  284,  284,  284,  284,
      290,  291,  488,  677,  297,  297,  486,  297,  297,  305,
      297,  297,  291,  297,  297,  291,  305,  311,  318,  306,
      503,  311,  500,  311,  291,  318,  318,  487,  326,  506,
      518,  512,  509,  306, 1593,  521,  209,  515,  534,  326,

      306,  312,  319,  524,  553,  312,  326,  312,  326,  319,
      319,  326,  327, 1394,  520,  490,  299,  525,  519, 1592,
      210,  299,  299,  327,  345, 1591,  534,  494,  151,  345,
      327,  553,  327,  497, 1395,  327,  840,  535,  158,  491,
      300,  526,  526,  526, 1589,  300,  300,  529,  529,  529,
      345,  344,  344,  344,  344,  347,  345,  344,  344,  344,
      344,  536,  536,  539,  535,  356,  552,  552,  545,  550,
      559,  532,  532,  177,  152, 1588,  546,  209,  177,  556,
      159,  548,  548,  347,  209,  562,  541,  565,  578, 1587,
      542,  551,  554,  356,  543,  545, 1579,  550,  559,  177,

      555,  210,  341,  341,  546,  177,  556,  363,  210,  560,
      544,  544,  562,  541,  565,  552,  552,  542,  551,  554,
      209,  563,  543,  557,  557,  209,  383,  209,  555,  564,
      585,  579,  209,  561,  561,  363,  560,  388,  388,  209,
      209,  209,  209,  209,  210,  584,  383,  209,  563,  210,
      209,  210,  582,  209,  209,  583,  589,  564,  579, 1578,
      209,  591,  586,  210,  210,  210,  210,  210,  590,  587,
      588,  210,  209, 1577,  210,  593,  594,  210,  210,  209,
      682,  592,  209,  599,  210,  209,  209,  209,  209,  209,
      595,  606,  209,  600,  561,  561,  210,  603,  596,  597,

      601,  602,  209,  210,  598,  605,  210,  209,  683,  210,
      210,  210,  210,  210,  604,  209,  210,  209,  209,  608,
      607,  611,  610,  209,  209,  209,  210, 1576,  209,  613,
      209,  210,  612,  609,  209, 1575,  209,  883,  883,  210,
      615,  210,  210, 1574,  621,  619,  614,  210,  210,  210,
      617,  618,  210,  616,  210,  209,  209,  209,  210,  620,
      210,  622,  383,  209,  209,  624,  209,  623,  209,  209,
      209,  436,  383,  209,  630,  209,  209,  628,  209,  210,
      210,  210,  625,  626,  631,  209,  627,  210,  210,  633,
      210,  209,  210,  210,  210,  629,  632,  210,  209,  437,

      210,  209,  210,  634,  383,  209,  209,  209,  209,  210,
      636,  209,  209,  209, 1572,  210,  633,  635,  209,  637,
      209,  638,  210,  209,  209,  210,  209,  209,  640,  210,
      210,  210,  210,  639,  209,  210,  210,  210,  641,  643,
      209,  209,  210,  645,  210,  209,  642,  210,  210,  209,
      210,  647,  644,  650,  209,  209,  209,  646,  210,  209,
      209, 1571,  648,  209,  210,  210,  649,  209,  209,  210,
      677,  659, 1570,  210,  209,  654,  209,  651,  210,  652,
      210,  209,  653,  210,  210,  655,  656,  210,  209,  658,
      209,  210,  210,  662,  383,  209,  657,  663,  210,  209,

      210,  209,  290,  534, 1559,  210,  664,  661,  660,  209,
      290,  209,  210,  665,  210,  666,  667,  209,  290,  210,
      668,  674, 1558,  210,  290,  210,  291,  297,  678,  486,
      297,  534,  721,  210,  291,  210,  297,  297,  305,  297,
      297,  210,  291,  297,  311,  318,  297,  305,  291,  693,
      311,  696,  326,  318,  702,  699,  705,  708,  714,  721,
      326,  209,  306,  713,  718,  326, 1556,  546,  312,  319,
      901,  306,  326,  722,  312,  902,  327,  319,  680, 1028,
     1028,  550,  717,  722,  327,  210,  732,  680,  299,  327,
      151, 1555,  209,  684,  299,  546,  327,  158,  690,  687,

      722,  728,  681,  333,  333,  333,  336,  336,  336,  550,
      722,  681,  300,  732,  733,  726,  210,  726,  300,  723,
      727,  727,  727,  727, 1554,  729,  729,  724,  728,  555,
      209,  734,  730,  735,  749, 1273,  152,  151, 1553,  159,
      731,  733,  736,  725,  725,  559,  723,  351,  564,  842,
      719,  719,  719,  719,  210,  724,  209,  555,  734,  730,
      735,  719,  719,  719,  719,  719,  719, 1551,  731,  736,
      541,  752,  209,  559,  542, 1550,  564,  843,  543, 1549,
      210, 1274,  754,  152,  755, 1538,  209,  719,  719,  719,
      719,  719,  719,  158,  544,  544,  210,  541,  209,  209,

      209,  542,  720,  720,  720,  720,  543,  209,  765,  209,
      210,  756,  209,  720,  720,  720,  720,  720,  720,  753,
     1273,  209,  210,  210,  210,  757,  209,  209,  760,  761,
      758,  210,  383,  210,  209,  159,  210,  209,  759,  720,
      720,  720,  720,  720,  720,  210,  762,  209,  209,  766,
      210,  210,  767,  209,  209,  764,  769,  763,  210,  770,
      209,  210,  768,  209,  771,  209, 1274,  773, 1537,  209,
      209,  210,  210,  209,  209,  774, 1535,  210,  210,  209,
      209,  209,  772,  209,  210,  777,  884,  210,  778,  210,
      775,  779,  776,  210,  210,  209,  209,  210,  210,  209,

      780,  209,  209,  210,  210,  210,  209,  210,  209,  781,
      782,  209, 1532,  209,  884,  209,  784,  209,  209,  210,
      210,  209,  209,  210,  783,  210,  210,  786,  209,  785,
      210,  787,  210,  790,  209,  788,  789,  210,  791,  210,
      792,  210,  210,  209,  209,  210,  210,  209,  209,  209,
      209,  209,  210,  888,  888,  793,  795,  209,  210,  209,
      209,  797,  799, 1644,  794, 1645,  209,  210,  210,  209,
      796,  210,  210,  210,  210,  210,  798,  801,  209, 1531,
      209,  210,  800,  210,  210,  209,  803,  209,  805,  802,
      210,  804,  209,  210,  209,  209,  209,  209, 1135, 1135,

      807,  209,  210,  209,  210,  812,  806,  383,  209,  210,
      209,  210,  209,  813,  815,  808,  210,  809,  210,  210,
      210,  210,  810,  209,  814,  210,  811,  210,  209,  816,
      209,  209,  210,  209,  210, 1530,  210,  209,  209,  209,
      819,  209,  209,  817,  209,  820,  209,  210,  825,  826,
      821,  822,  210,  209,  210,  210,  818,  210,  823,  824,
      290,  210,  210,  210,  209,  827,  210,  209,  210,  828,
      210, 1528,  830,  305,  829,  831,  290,  210, 1429,  297,
      837,  841,  297,  297,  291,  305,  297,  297,  210,  856,
      297,  210,  297,  297,  859,  297,  297,  306,  311,  311,

      291,  318,  862,  318,  326,  868,  889,  876,  875,  306,
      892,  326,  326,  727,  727,  727,  727,  326,  209, 1527,
      865,  887,  312,  312,  871,  319, 1029,  319,  327,  879,
      680,  209,  880,  889,  680,  327,  327,  892,  680,  909,
      844,  327,  210,  299,  299,  888,  888,  850,  887,  847,
      209, 1455,  918, 1029,  681,  210, 1468, 1469,  681, 1030,
     1526,  891,  681,  724,  209,  853,  914,  300,  300,  151,
      881, 1536,  881,  890,  210,  882,  882,  882,  882,  725,
      725,  891,  719,  719,  719,  719, 1030,  912,  210,  891,
      209,  724,  915,  719,  719,  719,  719,  719,  719, 1514,

      890, 1536, 1646,  209,  209,  913,  209,  917,  209,  891,
      727,  727,  727,  727,  210,  152,  916,  209,  919,  719,
      719,  719,  719,  719,  719,  158,  885,  210,  210, 1513,
      210,  885,  210, 1512,  720,  720,  720,  720,  209,  921,
     1511,  210,  209, 1510, 1631,  720,  720,  720,  720,  720,
      720, 1639,  885,  209,  922,  886,  886,  920,  885,  209,
      209,  923,  210,  925,  924,  209,  210,  159,  209,  209,
     1632,  720,  720,  720,  720,  720,  720,  210,  927,  209,
      209,  928,  209,  210,  210, 1509, 1508,  935,  926,  210,
      209,  209,  210,  210,  929,  930,  931,  936,  932,  209,

      209,  938,  209,  210,  210,  209,  210,  209,  939,  933,
      940,  942,  209,  941,  934,  210,  209,  209,  209,  944,
      943,  209,  937,  210,  210,  209,  210,  209,  209,  210,
      945,  210, 1507,  209,  209,  209,  210,  209,  209,  209,
      210,  210,  210,  949,  383,  210,  951,  950,  209,  210,
      946,  210,  210,  948,  952,  209,  947,  210,  210,  210,
      953,  210,  210,  210,  209,  209,  209,  209,  209, 1362,
     1505,  209,  210,  955,  209,  956,  209,  209,  209,  210,
      209,  954, 1363,  957,  962,  209, 1504,  209,  210,  210,
      210,  210,  210,  958,  960,  210,  959, 1503,  210,  209,

      210,  210,  210,  961,  210,  963,  209,  209,  964,  210,
      209,  210,  209,  209,  965,  209,  209,  209,  209,  966,
      968,  969,  970,  210,  209,  209,  578,  967,  972,  973,
      210,  210,  974,  209,  210,  209,  210,  210,  971,  210,
      210,  210,  210,  209,  977,  209,  209,  209,  210,  210,
      975,  976,  209,  209,  209,  209,  290,  210,  979,  210,
      383,  209,  209,  978,  981,  980, 1491,  210,  305,  210,
      210,  210,  833,  290, 1490, 1489,  210,  210,  210,  210,
      291,  297,  982,  305,  297,  210,  210,  984,  984,  984,
      984,  311,  306,  297,  988,  297,  297,  291,  297,  297,

      311,  318,  297,  318, 1005,  326,  326,  306, 1488,  326,
      326,  209, 1010, 1487, 1486,  312,  882,  882,  882,  882,
     1485, 1025, 1015, 1028,  312,  319, 1021,  319, 1028,  327,
      327, 1022,  680,  327,  327,  210,  882,  882,  882,  882,
      209,  209, 1484,  994,  680, 1399,  299, 1483,  997, 1028,
      299,  209, 1026, 1045, 1481, 1028,  681, 1026, 1400, 1046,
     1479, 1048,  209,  209,  210,  210, 1047, 1000,  681,  209,
      300,  209, 1050,  209,  300,  210,  209,  209, 1026,  209,
     1049, 1027, 1027,  209, 1026, 1051,  210,  210,  209, 1055,
      209, 1467, 1053,  210, 1057,  210,  209,  210,  209, 1052,

      210,  210, 1054,  210, 1466, 1056,  209,  210,  209, 1061,
     1465, 1062,  210, 1058,  210, 1063,  209,  209,  209, 1059,
      210, 1060,  210, 1064,  209, 1464, 1463,  209, 1065, 1462,
      210, 1066,  210,  209, 1067, 1070, 1461,  209,  209,  383,
      210,  210,  210, 1068, 1069,  209,  209,  209,  210, 1073,
     1071,  210, 1072, 1075,  209, 1076,  209,  210, 1077, 1074,
      209,  210,  210,  209,  209,  209,  209,  209,  209,  210,
      210,  210, 1080,  209, 1078,  209,  209,  209,  210,  209,
      210,  209, 1084, 1079,  210,  209, 1082,  210,  210, 1081,
      210,  210,  210, 1085,  209,  209, 1083,  210,  209,  210,

      210,  210,  209,  210,  209,  210, 1086,  209, 1087,  210,
      209,  209,  209,  209, 1454, 1089,  209,  209,  210,  210,
     1088, 1091,  210,  209,  209,  209,  210,  209,  210, 1093,
     1094,  210,  209, 1090,  210,  210,  210,  210, 1092,  209,
      210,  210,  209,  209,  209,  209,  209,  210,  210,  210,
      209,  210, 1096,  209, 1098,  209,  210,  209,  290,  290,
     1097,  297, 1095,  210,  297, 1099,  210,  210,  210,  210,
      210, 1104, 1100,  305,  210,  297, 1101,  210,  297,  210,
      305,  210,  291,  291,  311,  311, 1105, 1105, 1105, 1105,
      297,  297, 1440,  297,  297,  318,  318,  306,  326,  326,

      326,  326, 1439,  209,  306, 1135,  209, 1132,  312,  312,
     1135,  209,  680, 1438,  209, 1437, 1113, 1436, 1134,  319,
      319,  209,  327,  327,  327,  327,  680,  210, 1149,  209,
      210, 1135, 1435, 1150, 1151,  210,  681, 1135,  210, 1152,
      209,  299,  299,  209,  209,  210,  209, 1116,  209, 1153,
      681,  209, 1154,  210, 1155,  209, 1159,  209, 1156, 1157,
      209,  209,  209, 1434,  210,  300,  300,  210,  210, 1164,
      210,  209,  210, 1160, 1165,  210, 1158, 1161, 1162,  210,
      209,  210, 1163, 1166,  210,  210,  210,  209,  209, 1433,
      209,  209, 1432,  209, 1170,  210, 1167,  209,  209,  209,

      209, 1394, 1177, 1178,  210, 1429, 1427,  209,  209, 1168,
     1171,  210,  210, 1169,  210,  210, 1172,  210,  209, 1176,
     1179,  210, 1173,  210,  210, 1174,  209,  209,  209,  209,
      209,  210,  210, 1175, 1180, 1181, 1182,  209, 1184, 1183,
      209, 1185,  210,  209, 1340,  209,  383,  209, 1186,  209,
      210,  210,  210,  210,  210, 1187,  209,  209,  209, 1188,
      209,  210,  209, 1190,  210,  209,  209,  210, 1189,  210,
     1192,  210,  209,  210,  209,  297, 1407,  209,  297, 1191,
      210,  210,  210,  209,  210, 1198,  210, 1193, 1195,  210,
      210, 1194,  209,  209,  209,  209,  210, 1196,  210, 1197,

     1199,  210, 1200,  209,  290, 1104,  297,  210,  305,  297,
      297, 1201,  311,  297,  318,  326,  210,  210,  210,  210,
     1105, 1105, 1105, 1105,  326,  326,  680,  210,  291,  209,
      209,  209,  306, 1406, 1236, 1223,  312, 1405,  319,  327,
     1237,  209,  209,  209,  209, 1221, 1404, 1208,  327,  327,
      681,  209,  209,  210,  210,  210,  209,  680, 1403, 1239,
      209,  299,  209, 1241,  209, 1238,  210,  210, 1243, 1242,
     1240,  209,  209, 1402, 1244,  210,  210,  209,  209,  209,
      210,  681, 1246, 1249,  210,  300,  210, 1247,  210, 1245,
     1248,  209, 1401,  209, 1250,  210,  210,  209,  209,  209,

     1398,  210,  210,  210,  209, 1252,  209,  209,  209,  209,
      209, 1391, 1259,  209, 1365,  210, 1251,  210, 1364,  383,
     1253,  210,  210,  210, 1254,  209, 1258, 1255,  210, 1256,
      210,  210,  210,  210,  210, 1257,  209,  210,  209,  209,
      209, 1261, 1260, 1262,  209,  209,  209, 1263,  209,  210,
      209,  209,  209,  209, 1264,  209, 1266,  209,  209,  209,
      210, 1267,  210,  210,  210, 1268,  209, 1265,  210,  210,
      210,  209,  210,  209,  210,  210,  210,  210, 1269,  210,
      209,  210,  210,  210, 1271,  209,  209, 1361, 1270,  297,
      210,  297,  297,  326,  297,  210,  326,  210, 1291, 1293,

     1300, 1301,  209,  209,  210, 1307, 1302,  209,  209,  210,
      210, 1308,  209,  383,  209, 1310, 1360,  327, 1359,  209,
      327,  209, 1311,  209, 1314,  209,  210,  210,  209, 1313,
     1309,  210,  210,  209, 1358,  209,  210, 1312,  210,  209,
      680,  209,  680,  210, 1316,  210, 1315,  210, 1319,  210,
     1317,  209,  210, 1357, 1320,  209, 1321,  210, 1318,  210,
      209,  209,  209,  210,  681,  210,  681,  209, 1324,  209,
     1322,  209, 1356,  209, 1355,  210,  209, 1323,  209,  210,
      209, 1329,  209, 1330,  210,  210,  210, 1326,  209, 1325,
     1327,  210,  209,  210,  209,  210, 1332,  210,  209, 1328,

      210, 1331,  210,  209,  210, 1333,  210, 1334,  209,  209,
     1354,  297,  210,  209,  297,  326,  210, 1335,  210, 1351,
      209,  209,  210,  326, 1366,  209,  209,  210, 1367, 1353,
     1336,  209,  210,  210, 1368, 1337, 1349,  210, 1338,  327,
     1352,  209, 1272,  209,  210,  210, 1371,  327, 1374,  210,
      210, 1339, 1339, 1339,  209,  210,  209, 1372,  209, 1369,
     1272,  209,  680,  209, 1342,  210, 1370,  210, 1305,  578,
      209,  209,  209, 1376,  209, 1304, 1378, 1303,  210,  209,
      210, 1373,  210, 1299, 1272,  210,  681, 1377, 1272, 1272,
      209, 1375, 1272, 1272,  210,  210,  210, 1379,  210,  209,

      209, 1272,  209,  210,  209, 1272,  209, 1272,  209, 1272,
      209, 1340,  209, 1382,  210, 1383,  209,  209, 1381,  209,
     1380,  209,  209,  210,  210,  209,  210, 1298,  210, 1386,
      210,  326,  210,  209,  210,  326,  210, 1273, 1297, 1384,
      210,  210, 1385,  210,  209,  210,  210, 1408, 1387,  210,
     1388, 1388, 1388, 1397, 1396,  327,  209,  210,  209,  327,
     1296, 1295, 1410, 1294,  209, 1409,  209,  209,  210, 1411,
     1412, 1277, 1233, 1232, 1231, 1230, 1229, 1228,  209,  209,
      210, 1413,  210, 1274, 1389, 1389, 1389, 1389,  210,  209,
      210,  210,  209, 1227,  209, 1389, 1389, 1389, 1389, 1389,

     1389, 1418,  210,  210,  209,  209,  209, 1414, 1415, 1416,
      209,  383, 1417,  210,  209, 1420,  210, 1390,  210, 1226,
      209, 1389, 1389, 1389, 1389, 1389, 1389,  326,  210,  210,
      210, 1225,  209, 1419,  210, 1421,  209, 1423,  210, 1422,
      209, 1425,  326, 1424,  210,  209,  209,  209, 1273, 1441,
      209,  327,  209, 1431, 1430, 1443,  210,  209, 1224, 1442,
      210, 1338, 1338, 1338,  210,  209,  327,  209, 1444,  210,
      210,  210,  209, 1446,  210, 1445,  210,  209,  209,  209,
     1449,  210, 1447,  209, 1219, 1205, 1106, 1146,  209,  210,
      209,  210, 1448,  209, 1274, 1273,  210, 1145, 1451, 1144,

     1450,  210,  210,  210, 1143,  209,  209,  210, 1426, 1426,
     1426, 1426,  210,  209,  210,  326,  209,  210,  209, 1426,
     1426, 1426, 1426, 1426, 1426, 1142, 1141,  209, 1453,  210,
      210, 1456, 1140, 1452, 1139, 1470, 1138,  210, 1137,  327,
      210, 1274,  210, 1136, 1129, 1426, 1426, 1426, 1426, 1426,
     1426,  210, 1457, 1457, 1110, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,

     1458, 1458, 1458, 1457, 1459, 1457, 1457, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1460, 1458,
     1458, 1458, 1458, 1458, 1457, 1457, 1457, 1457,  209,  209,
      209,  209, 1471, 1472, 1473,  209,  209,  209, 1474,  209,
      209, 1475, 1480, 1477, 1106,  209,  518,  326, 1476, 1041,
     1040,  326,  210,  210,  210,  210,  209,  520, 1039,  210,
      210,  210, 1482,  210,  210, 1481, 1482, 1502,  209,  210,
      326,  327,  209,  326,  519,  327, 1492, 1493,  209,  209,
      210,  209, 1494, 1496, 1495, 1497, 1498, 1500, 1499,  209,

     1529,  209,  210,  209,  327,  326,  210,  327,  209,  209,
      209, 1501,  210,  210,  209,  210,  209, 1506, 1516, 1038,
      209, 1518,  209,  210, 1515,  210, 1524,  210, 1520,  327,
     1521, 1517,  210,  210,  210,  209, 1519,  209,  210, 1525,
      210,  209,  209, 1522,  210, 1523,  210,  209, 1037,  209,
      209,  209, 1548,  209,  209, 1036, 1035, 1034,  209,  210,
     1539,  210,  209,  209, 1033,  210,  210, 1032, 1541, 1540,
     1542,  210, 1543,  210,  210,  210, 1546,  210,  210, 1544,
     1547, 1545,  210,  326,  209,  209,  210,  210,  209,  209,
      209, 1552,  896, 1560,  209,  209,  326, 1561,  209, 1573,

     1031,  209, 1564,  209,  209,  209,  209,  327,  210,  210,
     1562,  209,  210,  210,  210, 1580, 1565, 1563,  210,  210,
      327, 1567,  210, 1566, 1568,  210, 1569,  210,  210,  210,
      210,  209,  894,  209, 1581,  210,  209,  209,  209, 1018,
      991, 1582,  985,  983,  209,  209,  209,  326,  209,  209,
      904,  209,  209,  209,  326,  210, 1583,  210, 1584, 1585,
      210,  210,  210, 1586, 1590, 1594, 1596, 1595, 1598,  210,
      210,  327,  210,  210, 1597, 1599,  210,  210, 1602,  209,
      209,  209,  209,  209,  209,  326,  209,  209,  903, 1608,
     1609,  520, 1615, 1616,  326,  900,  209,  209,  209, 1621,

      899, 1612,  209,  210, 1606,  210, 1607,  210,  210,  327,
      210,  210,  209,  578, 1626, 1627,  209,  209,  327,  209,
      210,  210,  210,  578,  326, 1617,  210,  578,  209,  209,
      578, 1646, 1630,  209,  326, 1618,  210,  209, 1636, 1624,
      210,  210, 1625,  210,  209,  209, 1634, 1635,  327,  209,
      209,  898,  210,  210, 1637, 1640,  897,  210,  327,  326,
      896,  210,  894,  872,  834, 1642, 1643,  833,  210,  210,
      746,  745,  744,  210,  210,  743,  742,  741,  740,  739,
     1640,  738,  737,  327,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  150,
      150,  338,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  157,  157,  335,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  296,  296,  710,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  298,  709,  671,
      670,  575,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  317,

      317,  317,  317,  317,  317,  317,  317,  317,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  150,  150,  574,
      150,  573,  572,  571,  570,  569,  150,  150,  150,  157,
      157,  568,  157,  567,  566,  531,  528,  517,  157,  157,
      157,  352,  352,  352,  352,  516,  480,  479,  288,  352,
      390,  390,  390,  287,  477,  380,  377,  390,  391,  391,
      391,  376,  375,  374,  373,  391,  484,  484,  484,  351,
      342,  340,  339,  484,  485,  485,  485,  324,  323,  288,
      287,  485,  489,  282,  221,  196,  160,  149, 1651,  489,
      489,  489,  489,  489,  489,  489,  298,  101,  101, 1651,

     1651,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      495,  495,  495, 1651, 1651, 1651, 1651,  495,  496,  496,
      496, 1651, 1651, 1651, 1651,  496,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  501,  501,  501, 1651, 1651,
     1651, 1651,  501,  502,  502,  502, 1651, 1651, 1651, 1651,
      502,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      507,  507,  507, 1651, 1651, 1651, 1651,  507,  508,  508,
      508, 1651, 1651, 1651, 1651,  508,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  513,  513,  513, 1651, 1651,
     1651, 1651,  513,  514,  514,  514, 1651, 1651, 1651, 1651,

      514,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      522,  522,  522, 1651, 1651, 1651, 1651,  522,  523,  523,
      523, 1651, 1651, 1651, 1651,  523,  150,  150, 1651,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  527,  527,  527, 1651, 1651, 1651,  527,  527,  157,
      157, 1651,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  530,  530,  530, 1651, 1651, 1651,
      530,  530,  538,  538,  538, 1651, 1651, 1651, 1651,  538,
      540,  540,  540,  540, 1651,  540,  540, 1651,  540,  576,
      576,  576, 1651, 1651, 1651, 1651,  576,  577,  577,  577,

     1651, 1651, 1651, 1651,  577,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  580,  580,  580, 1651, 1651, 1651,
     1651,  580,  581,  581,  581, 1651, 1651, 1651, 1651,  581,
      672,  672,  672, 1651, 1651, 1651, 1651,  672,  673,  673,
      673, 1651, 1651, 1651, 1651,  673,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  675,  675,  675, 1651, 1651,
     1651, 1651,  675,  676,  676,  676, 1651, 1651, 1651, 1651,
      676,  679, 1651, 1651, 1651, 1651,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  685,  685,  685, 1651, 1651,
     1651, 1651,  685,  686,  686,  686, 1651, 1651, 1651, 1651,

      686,  298, 1651, 1651, 1651, 1651,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  688,  688,  688, 1651, 1651,
     1651, 1651,  688,  689,  689,  689, 1651, 1651, 1651, 1651,
      689,  691,  691,  691, 1651, 1651, 1651, 1651,  691,  692,
      692,  692, 1651, 1651, 1651, 1651,  692,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  694,  694,  694, 1651,
     1651, 1651, 1651,  694,  695,  695,  695, 1651, 1651, 1651,
     1651,  695,  697,  697,  697, 1651, 1651, 1651, 1651,  697,
      698,  698,  698, 1651, 1651, 1651, 1651,  698,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  700,  700,  700,

     1651, 1651, 1651, 1651,  700,  701,  701,  701, 1651, 1651,
     1651, 1651,  701,  703,  703,  703, 1651, 1651, 1651, 1651,
      703,  704,  704,  704, 1651, 1651, 1651, 1651,  704,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  706,  706,
      706, 1651, 1651, 1651, 1651,  706,  707,  707,  707, 1651,
     1651, 1651, 1651,  707,  711,  711,  711, 1651, 1651, 1651,
     1651,  711,  712,  712,  712, 1651, 1651, 1651, 1651,  712,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  715,
      715,  715, 1651, 1651, 1651, 1651,  715,  716,  716,  716,
     1651, 1651, 1651, 1651,  716,  150,  150, 1651,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      157,  157, 1651,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  538,  538,  538, 1651, 1651,
      538, 1651,  538,  540,  540,  540,  540, 1651,  540,  540,
     1651,  540,  747,  747,  747, 1651, 1651, 1651, 1651,  747,
      748,  748,  748, 1651, 1651, 1651, 1651,  748,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  750,  750,  750,
     1651, 1651, 1651, 1651,  750,  751,  751,  751, 1651, 1651,
     1651, 1651,  751,  832,  832,  832, 1651,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  835,  835,

      835, 1651, 1651, 1651, 1651,  835,  836,  836,  836, 1651,
     1651, 1651, 1651,  836,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  838,  838,  838, 1651, 1651, 1651, 1651,
      838,  839,  839,  839, 1651, 1651, 1651, 1651,  839,  679,
     1651, 1651, 1651, 1651,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  845,  845,  845, 1651, 1651, 1651, 1651,
      845,  846,  846,  846, 1651, 1651, 1651, 1651,  846,  848,
      848,  848, 1651, 1651, 1651, 1651,  848,  849,  849,  849,
     1651, 1651, 1651, 1651,  849,  298, 1651, 1651, 1651, 1651,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  851,

      851,  851, 1651, 1651, 1651, 1651,  851,  852,  852,  852,
     1651, 1651, 1651, 1651,  852,  854,  854,  854, 1651, 1651,
     1651, 1651,  854,  855,  855,  855, 1651, 1651, 1651, 1651,
      855,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      857,  857,  857, 1651, 1651, 1651, 1651,  857,  858,  858,
      858, 1651, 1651, 1651, 1651,  858,  860,  860,  860, 1651,
     1651, 1651, 1651,  860,  861,  861,  861, 1651, 1651, 1651,
     1651,  861,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  863,  863,  863, 1651, 1651, 1651, 1651,  863,  864,
      864,  864, 1651, 1651, 1651, 1651,  864,  866,  866,  866,

     1651, 1651, 1651, 1651,  866,  867,  867,  867, 1651, 1651,
     1651, 1651,  867,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  869,  869,  869, 1651, 1651, 1651, 1651,  869,
      870,  870,  870, 1651, 1651, 1651, 1651,  870,  873,  873,
      873, 1651, 1651, 1651, 1651,  873,  874,  874,  874, 1651,
     1651, 1651, 1651,  874,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  877,  877,  877, 1651, 1651, 1651, 1651,
      877,  878,  878,  878, 1651, 1651, 1651, 1651,  878,  150,
      150, 1651,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  157,  157, 1651,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  907,
      907,  907, 1651, 1651, 1651, 1651,  907,  908,  908,  908,
     1651, 1651, 1651, 1651,  908,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  910,  910,  910, 1651, 1651, 1651,
     1651,  910,  911,  911,  911, 1651, 1651, 1651, 1651,  911,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  986,  986,  986, 1651, 1651,

     1651, 1651,  986,  987,  987,  987, 1651, 1651, 1651, 1651,
      987,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      989,  989,  989, 1651, 1651, 1651, 1651,  989,  990,  990,
      990, 1651, 1651, 1651, 1651,  990,  992,  992,  992, 1651,
     1651, 1651, 1651,  992,  993,  993,  993, 1651, 1651, 1651,
     1651,  993,  679, 1651, 1651, 1651, 1651,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  995,  995,  995, 1651,
     1651, 1651, 1651,  995,  996,  996,  996, 1651, 1651, 1651,
     1651,  996,  998,  998,  998, 1651, 1651, 1651, 1651,  998,
      999,  999,  999, 1651, 1651, 1651, 1651,  999,  298, 1651,

     1651, 1651, 1651,  298,  298,  298,  298,  298,  298,  298,
      298,  298, 1001, 1001, 1001, 1651, 1651, 1651, 1651, 1001,
     1002, 1002, 1002, 1651, 1651, 1651, 1651, 1002, 1003, 1003,
     1003, 1651, 1651, 1651, 1651, 1003, 1004, 1004, 1004, 1651,
     1651, 1651, 1651, 1004,  304,  304,  304,  304,  304,  304,
      304,  304,  304, 1006, 1006, 1006, 1651, 1651, 1651, 1651,
     1006, 1007, 1007, 1007, 1651, 1651, 1651, 1651, 1007, 1008,
     1008, 1008, 1651, 1651, 1651, 1651, 1008, 1009, 1009, 1009,
     1651, 1651, 1651, 1651, 1009,  310,  310,  310,  310,  310,
      310,  310,  310,  310, 1011, 1011, 1011, 1651, 1651, 1651,

     1651, 1011, 1012, 1012, 1012, 1651, 1651, 1651, 1651, 1012,
     1013, 1013, 1013, 1651, 1651, 1651, 1651, 1013, 1014, 1014,
     1014, 1651, 1651, 1651, 1651, 1014,  317,  317,  317,  317,
      317,  317,  317,  317,  317, 1016, 1016, 1016, 1651, 1651,
     1651, 1651, 1016, 1017, 1017, 1017, 1651, 1651, 1651, 1651,
     1017, 1019, 1019, 1019, 1651, 1651, 1651, 1651, 1019, 1020,
     1020, 1020, 1651, 1651, 1651, 1651, 1020,  325,  325,  325,
      325,  325,  325,  325,  325,  325, 1023, 1023, 1023, 1651,
     1651, 1651, 1651, 1023, 1024, 1024, 1024, 1651, 1651, 1651,
     1651, 1024,  893,  893,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895, 1042, 1042, 1042, 1651, 1651, 1651, 1651, 1042,
     1043, 1043, 1043, 1651, 1651, 1651, 1651, 1043,  208,  208,
      208,  208,  208,  208,  208,  208,  208, 1044, 1044, 1044,
     1651, 1651, 1651, 1651, 1044, 1102, 1102, 1651, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1103, 1103, 1651, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1107, 1107, 1107, 1651, 1651,
     1651, 1651, 1107, 1108, 1108, 1108, 1651, 1651, 1651, 1651,

     1108,  289,  289,  289,  289,  289,  289,  289,  289,  289,
     1109, 1109, 1109, 1651, 1651, 1651, 1651, 1109, 1111, 1111,
     1111, 1651, 1651, 1651, 1651, 1111, 1112, 1112, 1112, 1651,
     1651, 1651, 1651, 1112,  679, 1651, 1651, 1651, 1651,  679,
      679,  679,  679,  679,  679,  679,  679,  679, 1114, 1114,
     1114, 1651, 1651, 1651, 1651, 1114, 1115, 1115, 1115, 1651,
     1651, 1651, 1651, 1115, 1117, 1117, 1117, 1651, 1651, 1651,
     1651, 1117, 1118, 1118, 1118, 1651, 1651, 1651, 1651, 1118,
      298, 1651, 1651, 1651, 1651,  298,  298,  298,  298,  298,
      298,  298,  298,  298, 1119, 1119, 1119, 1651, 1651, 1651,

     1651, 1119, 1120, 1120, 1120, 1651, 1651, 1651, 1651, 1120,
     1121, 1121, 1121, 1651, 1651, 1651, 1651, 1121,  304,  304,
      304,  304,  304,  304,  304,  304,  304, 1122, 1122, 1122,
     1651, 1651, 1651, 1651, 1122, 1123, 1123, 1123, 1651, 1651,
     1651, 1651, 1123, 1124, 1124, 1124, 1651, 1651, 1651, 1651,
     1124,  310,  310,  310,  310,  310,  310,  310,  310,  310,
     1125, 1125, 1125, 1651, 1651, 1651, 1651, 1125, 1126, 1126,
     1126, 1651, 1651, 1651, 1651, 1126, 1127, 1127, 1127, 1651,
     1651, 1651, 1651, 1127,  317,  317,  317,  317,  317,  317,
      317,  317,  317, 1128, 1128, 1128, 1651, 1651, 1651, 1651,

     1128, 1130, 1130, 1130, 1651, 1651, 1651, 1651, 1130, 1131,
     1131, 1131, 1651, 1651, 1651, 1651, 1131,  325,  325,  325,
      325,  325,  325,  325,  325,  325, 1133, 1133, 1133, 1651,
     1651, 1651, 1651, 1133, 1147, 1147, 1147, 1651, 1651, 1651,
     1651, 1147,  208,  208,  208,  208,  208,  208,  208,  208,
      208, 1148, 1148, 1148, 1651, 1651, 1651, 1651, 1148, 1102,
     1102, 1651, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1103, 1103, 1651, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1203,
     1203, 1203, 1651, 1651, 1651, 1651, 1203,  289,  289,  289,

      289,  289,  289,  289,  289,  289, 1204, 1204, 1204, 1651,
     1651, 1651, 1651, 1204, 1206, 1206, 1206, 1651, 1651, 1651,
     1651, 1206, 1207, 1207, 1207, 1651, 1651, 1651, 1651, 1207,
      679, 1651, 1651, 1651, 1651,  679,  679,  679,  679,  679,
      679,  679,  679,  679, 1209, 1209, 1209, 1651, 1651, 1651,
     1651, 1209, 1210, 1210, 1210, 1651, 1651, 1651, 1651, 1210,
     1211, 1211, 1211, 1651, 1651, 1651, 1651, 1211,  298, 1651,
     1651, 1651, 1651,  298,  298,  298,  298,  298,  298,  298,
      298,  298, 1212, 1212, 1212, 1651, 1651, 1651, 1651, 1212,
     1213, 1213, 1213, 1651, 1651, 1651, 1651, 1213,  304,  304,

      304,  304,  304,  304,  304,  304,  304, 1214, 1214, 1214,
     1651, 1651, 1651, 1651, 1214, 1215, 1215, 1215, 1651, 1651,
     1651, 1651, 1215,  310,  310,  310,  310,  310,  310,  310,
      310,  310, 1216, 1216, 1216, 1651, 1651, 1651, 1651, 1216,
     1217, 1217, 1217, 1651, 1651, 1651, 1651, 1217,  317,  317,
      317,  317,  317,  317,  317,  317,  317, 1218, 1218, 1218,
     1651, 1651, 1651, 1651, 1218, 1220, 1220, 1220, 1651, 1651,
     1651, 1651, 1220,  325,  325,  325,  325,  325,  325,  325,
      325,  325, 1222, 1222, 1222, 1651, 1651, 1651, 1651, 1222,
     1234, 1234, 1234, 1651, 1651, 1651, 1651, 1234, 1235, 1235,

     1235, 1651, 1651, 1651, 1651, 1235,  208,  208,  208,  208,
      208,  208,  208,  208,  208, 1272, 1272, 1651, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1275, 1275, 1275, 1651, 1651, 1651, 1651, 1275, 1276, 1276,
     1276, 1651, 1651, 1651, 1651, 1276, 1278, 1278, 1278, 1651,
     1651, 1651, 1651, 1278, 1279, 1279, 1279, 1651, 1651, 1651,
     1651, 1279,  679, 1651, 1651, 1651, 1651,  679,  679,  679,
      679,  679,  679,  679,  679,  679, 1280, 1280, 1280, 1651,
     1651, 1651, 1651, 1280, 1281, 1281, 1281, 1651, 1651, 1651,
     1651, 1281, 1282, 1282, 1282, 1651, 1651, 1651, 1651, 1282,

     1283, 1283, 1283, 1651, 1651, 1651, 1651, 1283, 1284, 1284,
     1284, 1651, 1651, 1651, 1651, 1284, 1285, 1285, 1285, 1651,
     1651, 1651, 1651, 1285, 1286, 1286, 1286, 1651, 1651, 1651,
     1651, 1286, 1287, 1287, 1287, 1651, 1651, 1651, 1651, 1287,
     1288, 1288, 1288, 1651, 1651, 1651, 1651, 1288, 1290, 1290,
     1290, 1651, 1651, 1651, 1651, 1290, 1292, 1292, 1292, 1651,
     1651, 1651, 1651, 1292, 1306, 1306, 1306, 1651, 1651, 1651,
     1651, 1306,  911,  911,  911, 1651, 1651, 1651, 1651,  911,
     1103, 1103, 1651, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1341, 1341, 1341, 1651, 1651,

     1651, 1651, 1341,  990,  990,  990, 1651, 1651, 1651, 1651,
      990, 1343, 1343, 1343, 1651, 1651, 1651, 1651, 1343, 1344,
     1344, 1344, 1651, 1651, 1651, 1651, 1344, 1345, 1345, 1345,
     1651, 1651, 1651, 1651, 1345, 1002, 1002, 1002, 1651, 1651,
     1651, 1651, 1002, 1346, 1346, 1346, 1651, 1651, 1651, 1651,
     1346, 1007, 1007, 1007, 1651, 1651, 1651, 1651, 1007, 1347,
     1347, 1347, 1651, 1651, 1651, 1651, 1347, 1012, 1012, 1012,
     1651, 1651, 1651, 1651, 1012, 1348, 1348, 1348, 1651, 1651,
     1651, 1651, 1348, 1017, 1017, 1017, 1651, 1651, 1651, 1651,
     1017, 1350, 1350, 1350, 1651, 1651, 1651, 1651, 1350, 1024,

     1024, 1024, 1651, 1651, 1651, 1651, 1024, 1043, 1043, 1043,
     1651, 1651, 1651, 1651, 1043, 1108, 1108, 1108, 1651, 1651,
     1651, 1651, 1108, 1392, 1392, 1392, 1651, 1651, 1651, 1651,
     1392, 1393, 1393, 1393, 1651, 1651, 1651, 1651, 1393, 1118,
     1118, 1118, 1651, 1651, 1651, 1651, 1118, 1121, 1121, 1121,
     1651, 1651, 1651, 1651, 1121, 1124, 1124, 1124, 1651, 1651,
     1651, 1651, 1124, 1127, 1127, 1127, 1651, 1651, 1651, 1651,
     1127, 1131, 1131, 1131, 1651, 1651, 1651, 1651, 1131, 1428,
     1428, 1428, 1651, 1651, 1651, 1651, 1428, 1210, 1210, 1210,
     1651, 1651, 1651, 1651, 1210, 1279, 1279, 1279, 1651, 1651,

     1651, 1651, 1279, 1557, 1557, 1557, 1651, 1651, 1651, 1651,
     1557,   29, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651

    } ;

static yyconst flex_int16_t yy_chk[6999] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
        7,    8,    7,    8,   11,   23,   12,    3,    4,   34,

       23,   37,   24,   11,   11,   12,   12,   24,   36,   36,
       38,   42,   50,   52,   44,   61,   50,   45,   37,   45,
       45,   45,   45,   42,   44,   44,   54,   54,   52,   57,
       52,   52,  127,   67,   75,  127, 1649,   67,    5,    6,
      177,  177,  200,   61,   67,   34,  194,  194,   67,  206,
      206,   67,   38,   57,  200,    7,    8,   67,   75,    7,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   25,   25,   87,   25,   26,   26,   46,   26,   56,

      157,   65,   46,   92,  478,  212,  478,   59,  316,  150,
       46,  316,  211, 1648,   64,   64,   56,   56,   65,   59,
      103,   56,  336,   65,   56,   65,   56,   64,   66,   56,
       56,   59,   59,   68,   59,   64,   46,   92,   64,   69,
       66,   68,  157,   59,   71, 1647,   66,  212,  103,   66,
       87,   68,   66, 1641,   69,  150,   69,   68,  211,   64,
     1632,   68,   71,   69,  336,   25,   69, 1629,   71,   26,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   47, 1628,   47,   47,
       47,   47,   70,  347,  347,  173,   70,   76,   58,  113,
       79,   76,   58,   47,   47,   76, 1623,   70,   79,   47,
       70,   73, 1620,   70,   72,   76,   70,   47,   47,   73,
     1219,   76,   72,   73,   79,  173,   72,  113, 1619,   47,

       47, 1614,   58,   47,   47,   72,   47,  102,   73,   77,
       58,   72,  350,   72,   58,   47,   85,   73,   47,   48,
       72,   48,   48,   48,   48,   78,   58,   58,   77,   58,
       77,  102,   80,   77,   85,   83,   48,   48,   58,  350,
       85,  117,   48,   80,   80,  118,   78,   83, 1613,   78,
       48,  104,  124,   83, 1219,   80,   80,  104,   80,   83,
     1611,  123,   48,   48,   74,  117,   48,   48,  105,   48,
      356,  356,   74,  118,  105,  104,   74,  132,   48,   49,
      124,   49,   49,   49,   49,  123,  477,   81,   74,   74,
      131,   74,  105,   84,   74,   81,   49,   49,   81,   84,

       74,  119,   49, 1605,   84,  132,   82,  119,   81,  112,
       49,   81,  112,  114,  131,   81,  114,   84,   82,  145,
      477,  146,   49,   49,   82,  119,   49,   49,   98,   49,
       82,   82,  144,   82, 1610,   82,  333,  145,   49,  208,
       82,  125,   82,   98,   98,   98,   98,  125,  133,  146,
      354,  147,  148,  152,  133,  174,  144,  147,  148,  222,
      112,  145,  179,  208,  114,  125,  152,  152,  152,  159,
      114, 1104,  133, 1104,  209,  147,  148,  354,  159,  159,
      159,  746,  333,  222,  112,  174,  179,  179,  114,  179,
     1610,   98,  181,  223,  746,   98,  226,  181,  167,  167,

      167,  167,  209,  226,  290,  181,  172,  172,  172,  172,
      185,  223,  233,  167,  167,  174,  233,  223,  181,  167,
      226,  172,  172,  176,  181,  176,  152,  172,  176,  176,
      176,  176,  290,  181,  185,  185,  233,  185,  159,  167,
      167,  178,  299,  167,  167,  342,  167,  172,  172,  178,
      342,  172,  172, 1510,  172,  175,  184,  175,  175,  175,
      175,  210,  188,  305,  184,  178,  178,  210,  178,  186,
      299, 1604,  175,  175,  186, 1601,  224,  178,  175, 1510,
      184,  184,  186,  184,  342,  210,  188,  188,  187,  188,
      213,  305,  184, 1600,  213,  186,  187,  224,  175,  175,

      224,  186,  175,  175,  189,  175,  213,  213,  214,  189,
      186,  227,  187,  187,  217,  187,  216,  189,  213,  215,
      214,  214,  216,  215,  187,  218,  217,  227,  216,  216,
      189,  229,  214,  230,  237,  227,  189,  218,  217,  217,
      216,  217,  228,  235,  311,  189,  232,  215,  228,  234,
      217,  230,  218,  234,  229,  229,  231,  230,  237,  235,
      235,  218,  225,  239,  231,  228,  228,  235,  232,  232,
      232, 1593,  311,  234,  240, 1202,  238, 1638,  241, 1638,
      231,  363,  363, 1454,  225,  239, 1592,  239,  225,  225,
      225,  225,  225,  238,  225,  225,  225,  241,  240,  225,

      238,  241,  241,  242,  236,  225,  225,  225,  225,  225,
      236,  243,  244,  236,  245, 1591,  246,  249,  242,  236,
      248, 1202,  247,  535,  535,  251,  245,  242,  236,  243,
      247,  250,  248,  244,  247,  243,  244,  251,  245,  246,
      246,  249,  252,  251,  253,  255,  250,  248,  254,  247,
      253,  256,  251, 1454,  250,  250,  248,  257,  247,  252,
      258,  251,  262,  258,  254,  257,  252,  253,  253,  255,
      259,  255,  254,  260,  256,  256,  283,  261,  260,  260,
      262,  257,  259,  263,  258,  269,  262,  261,  259,  261,
      265, 1589,  264,  263,  259,  266,  264,  260,  268,  261,

      261,  261,  265,  267,  269, 1588,  270,  263, 1587,  269,
      273,  266,  263,  264,  265,  267,  264,  270,  318,  266,
      271,  272,  268,  274,  267,  275,  268,  267,  276,  277,
      270,  273,  271,  272,  273,  274,  275,  289,  274,  283,
      276,  284,  271,  283,  271,  272,  318,  274,  291,  275,
      277,  295,  276,  277,  291,  304,  284,  284,  284,  284,
      294,  289,  295,  677,  297,  298,  294,  297,  298,  309,
      300,  303,  291,  300,  303,  295,  306,  310,  317,  304,
      309,  315,  306,  312,  294,  319,  322,  294,  325,  312,
      326,  319,  315,  309, 1579,  328,  384,  322,  348,  331,

      306,  310,  317,  331,  359,  315,  332,  312,  327,  319,
      322,  328,  325, 1349,  327,  297,  298,  332,  326, 1578,
      384,  300,  303,  331,  341, 1575,  348,  300,  334,  341,
      332,  359,  327,  303, 1349,  328,  677,  349,  337,  297,
      298,  334,  334,  334, 1572,  300,  303,  337,  337,  337,
      341,  343,  343,  343,  343,  346,  341,  344,  344,  344,
      344,  349,  349,  352,  349,  355,  551,  551,  353,  357,
      364,  346,  346,  344,  334, 1571,  353,  383,  344,  361,
      337,  355,  355,  346,  385,  366,  352,  368,  383, 1570,
      352,  358,  360,  355,  352,  353, 1559,  357,  364,  344,

      360,  383,  344,  344,  353,  344,  361,  362,  385,  365,
      352,  352,  366,  352,  368,  358,  358,  352,  358,  360,
      386,  367,  352,  362,  362,  387,  386,  388,  360,  367,
      395,  389,  397,  365,  365,  362,  365,  387,  387,  393,
      392,  394,  395,  389,  386,  394,  392,  396,  367,  387,
      398,  388,  392,  399,  400,  393,  397,  367,  389, 1558,
      401,  399,  396,  393,  392,  394,  395,  389,  398,  396,
      396,  396,  402, 1557,  398,  401,  402,  399,  400,  404,
      490,  400,  403,  404,  401,  405,  407,  408,  409,  406,
      402,  409,  410,  405,  560,  560,  402,  407,  403,  403,

      406,  406,  411,  404,  403,  408,  403,  413,  490,  405,
      407,  408,  409,  406,  407,  412,  410,  414,  418,  412,
      411,  414,  413,  416,  415,  417,  411, 1555,  420,  416,
      421,  413,  415,  412,  419, 1554,  423,  724,  724,  412,
      418,  414,  418, 1553,  423,  421,  417,  416,  415,  417,
      420,  420,  420,  419,  421,  422,  424,  426,  419,  422,
      423,  424,  424,  425,  432,  426,  427,  425,  428,  429,
      431,  435,  427,  430,  431,  435,  433,  429,  434,  422,
      424,  426,  427,  428,  433,  436,  428,  425,  432,  438,
      427,  439,  428,  429,  431,  430,  434,  430,  437,  435,

      433,  438,  434,  439,  437,  440,  442,  441,  444,  436,
      442,  443,  446,  448, 1551,  439,  438,  441,  445,  443,
      447,  445,  437,  449,  450,  438,  452,  454,  447,  440,
      442,  441,  444,  446,  453,  443,  446,  448,  448,  450,
      451,  455,  445,  452,  447,  457,  449,  449,  450,  456,
      452,  454,  451,  457,  458,  459,  461,  453,  453,  460,
      465, 1550,  455,  462,  451,  455,  456,  467,  463,  457,
      486,  467, 1549,  456,  471,  461,  470,  458,  458,  459,
      461,  466,  460,  460,  465,  462,  463,  462,  464,  466,
      468,  467,  463,  470,  464,  469,  464,  471,  471,  472,

      470,  475,  487,  532, 1538,  466,  472,  469,  468,  473,
      483,  474,  464,  473,  468,  474,  475,  476,  486,  469,
      476,  483, 1537,  472,  488,  475,  487,  489,  488,  487,
      489,  532,  537,  473,  483,  474,  491,  494,  500,  491,
      494,  476,  486,  497,  506,  512,  497,  503,  488,  500,
      509,  503,  520,  515,  509,  506,  512,  515,  521,  537,
      525,  579,  500,  520,  525,  524, 1535,  545,  506,  512,
      743,  503,  521,  538,  509,  743,  520,  515,  489,  885,
      885,  548,  524,  539,  525,  579,  547,  491,  494,  524,
      526, 1534,  607,  491,  497,  545,  521,  529,  497,  494,

      538,  543,  489,  526,  526,  526,  529,  529,  529,  548,
      539,  491,  494,  547,  553,  542,  607,  542,  497,  541,
      542,  542,  542,  542, 1532,  543,  543,  541,  543,  554,
      578,  556,  544,  562,  578, 1272,  526,  527, 1531,  529,
      544,  553,  565,  541,  541,  557,  541,  540,  563,  680,
      527,  527,  527,  527,  578,  541,  582,  554,  556,  544,
      562,  527,  527,  527,  527,  527,  527, 1528,  544,  565,
      540,  582,  584,  557,  540, 1527,  563,  680,  540, 1526,
      582, 1272,  584,  527,  585, 1514,  594,  527,  527,  527,
      527,  527,  527,  530,  540,  540,  584,  540,  585,  586,

      583,  540,  530,  530,  530,  530,  540,  588,  594,  587,
      594,  586,  590,  530,  530,  530,  530,  530,  530,  583,
     1338,  591,  585,  586,  583,  587,  589,  595,  590,  590,
      588,  588,  589,  587,  592,  530,  590,  593,  589,  530,
      530,  530,  530,  530,  530,  591,  591,  597,  596,  595,
      589,  595,  596,  598,  599,  593,  598,  592,  592,  599,
      600,  593,  597,  601,  600,  602, 1338,  601, 1513,  603,
      605,  597,  596,  604,  608,  602, 1511,  598,  599,  609,
      606,  610,  600,  612,  600,  605,  725,  601,  606,  602,
      603,  608,  604,  603,  605,  611,  614,  604,  608,  613,

      609,  616,  615,  609,  606,  610,  617,  612,  619,  611,
      613,  620, 1509,  621,  725,  618,  616,  624,  622,  611,
      614,  625,  623,  613,  615,  616,  615,  618,  626,  617,
      617,  619,  619,  622,  627,  620,  621,  621,  623,  618,
      626,  624,  622,  628,  631,  625,  623,  630,  629,  632,
      633,  635,  626,  887,  887,  627,  629,  636,  627,  634,
      637,  631,  636, 1645,  628, 1645,  640,  628,  631,  638,
      630,  630,  629,  632,  633,  635,  634,  638,  644, 1508,
      642,  636,  637,  634,  637,  639,  640,  641,  642,  639,
      640,  641,  645,  638,  643,  650,  646,  649, 1026, 1026,

      644,  647,  644,  648,  642,  649,  643,  647,  652,  639,
      655,  641,  651,  650,  652,  645,  645,  646,  643,  650,
      646,  649,  647,  653,  651,  647,  648,  648,  654,  653,
      656,  657,  652,  658,  655, 1507,  651,  659,  661,  662,
      658,  663,  660,  654,  664,  658,  665,  653,  661,  662,
      658,  658,  654,  666,  656,  657,  656,  658,  659,  660,
      678,  659,  661,  662,  667,  663,  660,  668,  664,  665,
      665, 1505,  667,  696,  666,  668,  674,  666, 1429,  679,
      674,  678,  679,  681,  678,  693,  681,  684,  667,  693,
      684,  668,  687,  690,  696,  687,  690,  696,  699,  702,

      674,  705,  699,  708,  713,  705,  729,  714,  713,  693,
      731,  718,  717,  726,  726,  726,  726,  714,  749, 1504,
      702,  728,  699,  702,  708,  705,  889,  708,  713,  717,
      679,  758,  718,  729,  681,  718,  717,  731,  684,  749,
      681,  714,  749,  687,  690,  728,  728,  687,  728,  684,
      754, 1429,  758,  889,  679,  758, 1440, 1440,  681,  892,
     1503,  890,  684,  723,  752,  690,  754,  687,  690,  719,
      722, 1512,  722,  730,  754,  722,  722,  722,  722,  723,
      723,  730,  719,  719,  719,  719,  892,  752,  752,  890,
      753,  723,  755,  719,  719,  719,  719,  719,  719, 1491,

      730, 1512, 1639,  759,  757,  753,  756,  757,  755,  730,
      727,  727,  727,  727,  753,  719,  756,  761,  759,  719,
      719,  719,  719,  719,  719,  720,  727,  759,  757, 1490,
      756,  727,  755, 1489,  720,  720,  720,  720,  760,  761,
     1488,  761,  762, 1487, 1622,  720,  720,  720,  720,  720,
      720, 1639,  727,  763,  762,  727,  727,  760,  727,  764,
      765,  763,  760,  765,  764,  766,  762,  720,  767,  768,
     1622,  720,  720,  720,  720,  720,  720,  763,  767,  770,
      773,  768,  771,  764,  765, 1486, 1485,  770,  766,  766,
      769,  774,  767,  768,  769,  769,  769,  771,  769,  772,

      778,  773,  775,  770,  773,  776,  771,  777,  774,  769,
      775,  777,  779,  776,  769,  774,  780,  781,  782,  779,
      778,  783,  772,  772,  778,  784,  775,  785,  787,  776,
      785,  777, 1483,  786,  791,  789,  779,  793,  788,  790,
      780,  781,  782,  789,  788,  783,  791,  790,  792,  784,
      786,  785,  787,  788,  792,  795,  787,  786,  791,  789,
      793,  793,  788,  790,  794,  796,  797,  798,  799, 1303,
     1481,  802,  792,  797,  800,  798,  801,  803,  805,  795,
      804,  794, 1303,  799,  805,  807, 1479,  811,  794,  796,
      797,  798,  799,  800,  802,  802,  801, 1478,  800,  806,

      801,  803,  805,  804,  804,  806,  808,  809,  807,  807,
      810,  811,  813,  812,  808,  815,  814,  816,  818,  809,
      812,  813,  814,  806,  819,  817,  815,  810,  816,  817,
      808,  809,  819,  823,  810,  822,  813,  812,  815,  815,
      814,  816,  818,  820,  822,  824,  825,  821,  819,  817,
      820,  821,  826,  828,  827,  830,  841,  823,  827,  822,
      827,  829,  831,  825,  829,  828, 1469,  820,  859,  824,
      825,  821,  833,  837, 1468, 1467,  826,  828,  827,  830,
      841,  844,  831,  856,  844,  829,  831,  833,  833,  833,
      833,  862,  859,  847,  837,  850,  847,  837,  850,  853,

      865,  868,  853,  871,  856,  875,  876,  856, 1466,  879,
      880,  909,  862, 1465, 1464,  862,  881,  881,  881,  881,
     1463,  879,  868,  886,  865,  868,  875,  871,  886,  875,
      876,  876,  844,  879,  880,  909,  882,  882,  882,  882,
      911,  912, 1462,  844,  847, 1356,  850, 1461,  847,  886,
      853,  913,  882,  912, 1457,  886,  844,  882, 1356,  913,
     1455,  915,  914,  916,  911,  912,  914,  850,  847,  917,
      850,  915,  917,  918,  853,  913,  919,  920,  882,  921,
      916,  882,  882,  922,  882,  918,  914,  916,  923,  922,
      924, 1439,  920,  917,  924,  915,  925,  918,  928,  919,

      919,  920,  921,  921, 1438,  923,  926,  922,  927,  926,
     1437,  927,  923,  925,  924,  928,  931,  933,  929,  925,
      925,  925,  928,  929,  930, 1436, 1435,  932,  930, 1434,
      926,  931,  927,  934,  931,  933, 1433,  935,  937,  934,
      931,  933,  929,  932,  932,  938,  936,  939,  930,  936,
      934,  932,  935,  938,  940,  939,  941,  934,  940,  937,
      942,  935,  937,  943,  944,  946,  945,  947,  949,  938,
      936,  939,  945,  948,  941,  950,  951,  953,  940,  954,
      941,  952,  951,  942,  942,  955,  947,  943,  944,  946,
      945,  947,  949,  952,  956,  959,  948,  948,  957,  950,

      951,  953,  960,  954,  958,  952,  957,  961,  958,  955,
      962,  963,  967,  964, 1427,  961,  968,  965,  956,  959,
      960,  964,  957,  966,  969,  971,  960,  970,  958,  966,
      970,  961,  972,  962,  962,  963,  967,  964,  965,  973,
      968,  965,  975,  974,  976,  977,  978,  966,  969,  971,
      979,  970,  974,  981,  978,  982,  972,  980,  988,  990,
      976,  994,  973,  973,  994,  979,  975,  974,  976,  977,
      978,  984,  980, 1005,  979,  997,  981,  981,  997,  982,
     1007,  980,  988,  990, 1010, 1012,  984,  984,  984,  984,
     1000, 1002, 1407, 1000, 1002, 1015, 1017, 1005, 1021, 1022,

     1024, 1025, 1406, 1043, 1007, 1027, 1046, 1022, 1010, 1012,
     1027, 1045,  994, 1405, 1047, 1404,  994, 1403, 1025, 1015,
     1017, 1049, 1021, 1022, 1024, 1025,  997, 1043, 1045, 1050,
     1046, 1027, 1402, 1046, 1048, 1045,  994, 1027, 1047, 1049,
     1052, 1000, 1002, 1048, 1051, 1049, 1053,  997, 1055, 1051,
      997, 1056, 1052, 1050, 1053, 1054, 1055, 1060, 1054, 1054,
     1058, 1059, 1057, 1401, 1052, 1000, 1002, 1048, 1051, 1060,
     1053, 1061, 1055, 1056, 1061, 1056, 1054, 1057, 1058, 1054,
     1062, 1060, 1059, 1062, 1058, 1059, 1057, 1064, 1063, 1399,
     1066, 1065, 1398, 1067, 1066, 1061, 1063, 1068, 1069, 1072,

     1073, 1395, 1072, 1073, 1062, 1394, 1391, 1071, 1074, 1064,
     1067, 1064, 1063, 1065, 1066, 1065, 1068, 1067, 1070, 1071,
     1074, 1068, 1069, 1072, 1073, 1070, 1079, 1075, 1076, 1077,
     1078, 1071, 1074, 1070, 1075, 1076, 1077, 1080, 1079, 1078,
     1081, 1080, 1070, 1083, 1390, 1085, 1081, 1082, 1081, 1086,
     1079, 1075, 1076, 1077, 1078, 1082, 1084, 1087, 1088, 1084,
     1089, 1080, 1090, 1087, 1081, 1093, 1091, 1083, 1085, 1085,
     1090, 1082, 1092, 1086, 1096, 1113, 1364, 1095, 1113, 1088,
     1084, 1087, 1088, 1099, 1089, 1095, 1090, 1091, 1093, 1093,
     1091, 1092, 1097, 1094, 1101, 1098, 1092, 1094, 1096, 1094,

     1097, 1095, 1098, 1100, 1108, 1105, 1116, 1099, 1121, 1116,
     1118, 1100, 1124, 1118, 1127, 1131, 1097, 1094, 1101, 1098,
     1105, 1105, 1105, 1105, 1132, 1134, 1113, 1100, 1108, 1149,
     1150, 1152, 1121, 1362, 1151, 1134, 1124, 1361, 1127, 1131,
     1152, 1153, 1154, 1155, 1158, 1132, 1360, 1113, 1132, 1134,
     1113, 1151, 1157, 1149, 1150, 1152, 1165, 1116, 1359, 1154,
     1156, 1118, 1164, 1156, 1162, 1153, 1154, 1155, 1158, 1157,
     1155, 1159, 1166, 1358, 1159, 1151, 1157, 1160, 1163, 1161,
     1165, 1116, 1161, 1164, 1156, 1118, 1164, 1162, 1162, 1160,
     1163, 1167, 1357, 1168, 1167, 1159, 1166, 1169, 1170, 1171,

     1355, 1160, 1163, 1161, 1172, 1169, 1174, 1175, 1176, 1177,
     1178, 1342, 1177, 1173, 1305, 1167, 1168, 1168, 1304, 1173,
     1170, 1169, 1170, 1171, 1171, 1182, 1176, 1172, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1175, 1179, 1173, 1180, 1184,
     1181, 1180, 1179, 1181, 1183, 1185, 1186, 1183, 1187, 1182,
     1188, 1189, 1191, 1190, 1184, 1193, 1188, 1194, 1192, 1195,
     1179, 1190, 1180, 1184, 1181, 1192, 1196, 1185, 1183, 1185,
     1186, 1198, 1187, 1199, 1188, 1189, 1191, 1190, 1194, 1193,
     1197, 1194, 1192, 1195, 1197, 1200, 1201, 1302, 1196, 1208,
     1196, 1210, 1208, 1221, 1210, 1198, 1223, 1199, 1221, 1223,

     1230, 1230, 1236, 1241, 1197, 1236, 1230, 1238, 1237, 1200,
     1201, 1237, 1239, 1238, 1242, 1239, 1301, 1221, 1300, 1240,
     1223, 1244, 1240, 1243, 1244, 1249, 1236, 1241, 1245, 1243,
     1238, 1238, 1237, 1248, 1299, 1251, 1239, 1242, 1242, 1247,
     1208, 1246, 1210, 1240, 1246, 1244, 1245, 1243, 1249, 1249,
     1247, 1250, 1245, 1298, 1250, 1253, 1251, 1248, 1248, 1251,
     1254, 1255, 1256, 1247, 1208, 1246, 1210, 1252, 1254, 1259,
     1252, 1257, 1297, 1258, 1296, 1250, 1260, 1253, 1261, 1253,
     1262, 1261, 1265, 1262, 1254, 1255, 1256, 1257, 1264, 1255,
     1258, 1252, 1267, 1259, 1268, 1257, 1264, 1258, 1263, 1260,

     1260, 1263, 1261, 1266, 1262, 1265, 1265, 1266, 1270, 1269,
     1295, 1279, 1264, 1271, 1279, 1291, 1267, 1269, 1268, 1291,
     1314, 1307, 1263, 1293, 1307, 1308, 1309, 1266, 1308, 1294,
     1270, 1315, 1270, 1269, 1309, 1271, 1289, 1271, 1274, 1291,
     1293, 1310, 1274, 1311, 1314, 1307, 1311, 1293, 1315, 1308,
     1309, 1274, 1274, 1274, 1312, 1315, 1316, 1312, 1313, 1310,
     1274, 1318, 1279, 1319, 1277, 1310, 1310, 1311, 1233, 1313,
     1317, 1320, 1321, 1318, 1323, 1232, 1321, 1231, 1312, 1322,
     1316, 1313, 1313, 1229, 1274, 1318, 1279, 1319, 1274, 1274,
     1325, 1317, 1274, 1274, 1317, 1320, 1321, 1322, 1323, 1324,

     1326, 1274, 1327, 1322, 1329, 1274, 1330, 1274, 1331, 1274,
     1328, 1274, 1332, 1328, 1325, 1332, 1333, 1334, 1326, 1335,
     1324, 1336, 1366, 1324, 1326, 1337, 1327, 1228, 1329, 1336,
     1330, 1351, 1331, 1367, 1328, 1352, 1332, 1339, 1227, 1334,
     1333, 1334, 1335, 1335, 1368, 1336, 1366, 1368, 1337, 1337,
     1339, 1339, 1339, 1352, 1351, 1351, 1369, 1367, 1370, 1352,
     1226, 1225, 1370, 1224, 1371, 1369, 1372, 1373, 1368, 1372,
     1373, 1205, 1146, 1145, 1144, 1143, 1142, 1140, 1374, 1387,
     1369, 1374, 1370, 1339, 1340, 1340, 1340, 1340, 1371, 1375,
     1372, 1373, 1379, 1139, 1381, 1340, 1340, 1340, 1340, 1340,

     1340, 1379, 1374, 1387, 1376, 1377, 1378, 1375, 1376, 1377,
     1380, 1377, 1378, 1375, 1384, 1381, 1379, 1340, 1381, 1138,
     1386, 1340, 1340, 1340, 1340, 1340, 1340, 1397, 1376, 1377,
     1378, 1137, 1382, 1380, 1380, 1382, 1383, 1384, 1384, 1383,
     1385, 1386, 1396, 1385, 1386, 1411, 1408, 1414, 1388, 1408,
     1409, 1397, 1410, 1397, 1396, 1410, 1382, 1417, 1136, 1409,
     1383, 1388, 1388, 1388, 1385, 1412, 1396, 1415, 1412, 1411,
     1408, 1414, 1413, 1414, 1409, 1413, 1410, 1416, 1418, 1420,
     1417, 1417, 1415, 1421, 1129, 1110, 1106, 1041, 1419, 1412,
     1422, 1415, 1416, 1423, 1388, 1389, 1413, 1040, 1420, 1039,

     1419, 1416, 1418, 1420, 1038, 1425, 1441, 1421, 1389, 1389,
     1389, 1389, 1419, 1442, 1422, 1430, 1444, 1423, 1445, 1389,
     1389, 1389, 1389, 1389, 1389, 1037, 1036, 1424, 1425, 1425,
     1441, 1430, 1035, 1424, 1034, 1442, 1033, 1442, 1032, 1430,
     1444, 1389, 1445, 1031, 1018, 1389, 1389, 1389, 1389, 1389,
     1389, 1424, 1431, 1431,  991, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1443, 1449,
     1446, 1447, 1443, 1446, 1447, 1448, 1450, 1451, 1448, 1452,
     1453, 1450, 1456, 1452,  985, 1477, 1459, 1458, 1451,  905,
      904, 1460, 1443, 1449, 1446, 1447, 1471, 1460,  903, 1448,
     1450, 1451, 1458, 1452, 1453, 1459, 1460, 1477, 1470, 1477,
     1456, 1458, 1475, 1506, 1459, 1460, 1470, 1471, 1472, 1473,
     1471, 1474, 1472, 1473, 1472, 1473, 1473, 1475, 1474, 1476,

     1506, 1492, 1470, 1495, 1456, 1482, 1475, 1506, 1493, 1494,
     1497, 1476, 1472, 1473, 1496, 1474, 1502, 1482, 1493,  902,
     1501, 1495, 1498, 1476, 1492, 1492, 1501, 1495, 1497, 1482,
     1498, 1494, 1493, 1494, 1497, 1499, 1496, 1500, 1496, 1502,
     1502, 1516, 1515, 1499, 1501, 1500, 1498, 1517,  901, 1523,
     1519, 1518, 1523, 1524, 1521,  900,  899,  898, 1522, 1499,
     1515, 1500, 1520, 1525,  897, 1516, 1515,  896, 1518, 1517,
     1518, 1517, 1519, 1523, 1519, 1518, 1521, 1524, 1521, 1520,
     1522, 1520, 1522, 1529, 1539, 1540, 1520, 1525, 1541, 1542,
     1543, 1529,  895, 1539, 1544, 1545, 1552, 1540, 1546, 1552,

      894, 1547, 1543, 1548, 1560, 1561, 1563, 1529, 1539, 1540,
     1541, 1562, 1541, 1542, 1543, 1561, 1544, 1542, 1544, 1545,
     1552, 1546, 1546, 1545, 1547, 1547, 1548, 1548, 1560, 1561,
     1563, 1564,  893, 1565, 1562, 1562, 1566, 1567, 1568,  872,
      840, 1564,  834,  832, 1584, 1569, 1581, 1573, 1580, 1582,
      745, 1585, 1586, 1583, 1590, 1564, 1565, 1565, 1567, 1568,
     1566, 1567, 1568, 1569, 1573, 1580, 1582, 1581, 1584, 1569,
     1581, 1573, 1580, 1582, 1583, 1585, 1586, 1583, 1590, 1594,
     1595, 1596, 1597, 1598, 1599, 1602, 1606, 1607,  744, 1598,
     1599, 1602, 1606, 1607, 1612,  742, 1617, 1618, 1636, 1612,

      741, 1602, 1608, 1594, 1595, 1596, 1597, 1598, 1599, 1602,
     1606, 1607, 1609, 1608, 1617, 1618, 1615, 1626, 1612, 1616,
     1617, 1618, 1636, 1609, 1621, 1608, 1608, 1615, 1624, 1625,
     1616, 1640, 1621, 1627, 1630, 1609, 1609, 1637, 1626, 1615,
     1615, 1626, 1616, 1616, 1634, 1635, 1624, 1625, 1621, 1642,
     1643,  740, 1624, 1625, 1627, 1630,  739, 1627, 1630, 1640,
      738, 1637,  737,  709,  671, 1634, 1635,  670, 1634, 1635,
      575,  574,  573, 1642, 1643,  572,  571,  570,  569,  568,
     1640,  567,  566, 1640, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1653,

     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1658, 1658, 1658, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1659,
     1659,  531, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,

     1659, 1659, 1659, 1659, 1660, 1660,  528, 1660, 1660, 1660,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1664, 1664,  517, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1665,  516,  480,
      479,  380, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1668,

     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1670, 1670,  379,
     1670,  378,  377,  376,  375,  374, 1670, 1670, 1670, 1671,
     1671,  373, 1671,  372,  371,  338,  335,  324, 1671, 1671,
     1671, 1672, 1672, 1672, 1672,  323,  288,  287,  286, 1672,
     1673, 1673, 1673,  285,  281,  207,  205, 1673, 1674, 1674,
     1674,  204,  203,  202,  201, 1674, 1675, 1675, 1675,  180,
      171,  166,  165, 1675, 1676, 1676, 1676,  139,  136,  100,
       99, 1676, 1677,   95,   63,   53,   41,   33,   29, 1677,
     1677, 1677, 1677, 1677, 1677, 1677, 1678,   14,   13,    0,

        0, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1679, 1679, 1679,    0,    0,    0,    0, 1679, 1680, 1680,
     1680,    0,    0,    0,    0, 1680, 1681, 1681, 1681, 1681,
     1681, 1681, 1681, 1681, 1681, 1682, 1682, 1682,    0,    0,
        0,    0, 1682, 1683, 1683, 1683,    0,    0,    0,    0,
     1683, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1685, 1685, 1685,    0,    0,    0,    0, 1685, 1686, 1686,
     1686,    0,    0,    0,    0, 1686, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688,    0,    0,
        0,    0, 1688, 1689, 1689, 1689,    0,    0,    0,    0,

     1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1691, 1691, 1691,    0,    0,    0,    0, 1691, 1692, 1692,
     1692,    0,    0,    0,    0, 1692, 1693, 1693,    0, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
     1693, 1694, 1694, 1694,    0,    0,    0, 1694, 1694, 1695,
     1695,    0, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1695, 1695, 1695, 1695, 1696, 1696, 1696,    0,    0,    0,
     1696, 1696, 1697, 1697, 1697,    0,    0,    0,    0, 1697,
     1698, 1698, 1698, 1698,    0, 1698, 1698,    0, 1698, 1699,
     1699, 1699,    0,    0,    0,    0, 1699, 1700, 1700, 1700,

        0,    0,    0,    0, 1700, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1702, 1702, 1702,    0,    0,    0,
        0, 1702, 1703, 1703, 1703,    0,    0,    0,    0, 1703,
     1704, 1704, 1704,    0,    0,    0,    0, 1704, 1705, 1705,
     1705,    0,    0,    0,    0, 1705, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1707, 1707, 1707,    0,    0,
        0,    0, 1707, 1708, 1708, 1708,    0,    0,    0,    0,
     1708, 1709,    0,    0,    0,    0, 1709, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1710, 1710, 1710,    0,    0,
        0,    0, 1710, 1711, 1711, 1711,    0,    0,    0,    0,

     1711, 1712,    0,    0,    0,    0, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1713, 1713, 1713,    0,    0,
        0,    0, 1713, 1714, 1714, 1714,    0,    0,    0,    0,
     1714, 1715, 1715, 1715,    0,    0,    0,    0, 1715, 1716,
     1716, 1716,    0,    0,    0,    0, 1716, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1718, 1718, 1718,    0,
        0,    0,    0, 1718, 1719, 1719, 1719,    0,    0,    0,
        0, 1719, 1720, 1720, 1720,    0,    0,    0,    0, 1720,
     1721, 1721, 1721,    0,    0,    0,    0, 1721, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1723, 1723, 1723,

        0,    0,    0,    0, 1723, 1724, 1724, 1724,    0,    0,
        0,    0, 1724, 1725, 1725, 1725,    0,    0,    0,    0,
     1725, 1726, 1726, 1726,    0,    0,    0,    0, 1726, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1728, 1728,
     1728,    0,    0,    0,    0, 1728, 1729, 1729, 1729,    0,
        0,    0,    0, 1729, 1730, 1730, 1730,    0,    0,    0,
        0, 1730, 1731, 1731, 1731,    0,    0,    0,    0, 1731,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1733,
     1733, 1733,    0,    0,    0,    0, 1733, 1734, 1734, 1734,
        0,    0,    0,    0, 1734, 1735, 1735,    0, 1735, 1735,

     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1736, 1736,    0, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1737, 1737, 1737,    0,    0,
     1737,    0, 1737, 1738, 1738, 1738, 1738,    0, 1738, 1738,
        0, 1738, 1739, 1739, 1739,    0,    0,    0,    0, 1739,
     1740, 1740, 1740,    0,    0,    0,    0, 1740, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1742, 1742, 1742,
        0,    0,    0,    0, 1742, 1743, 1743, 1743,    0,    0,
        0,    0, 1743, 1744, 1744, 1744,    0, 1744, 1744, 1744,
     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1745, 1745,

     1745,    0,    0,    0,    0, 1745, 1746, 1746, 1746,    0,
        0,    0,    0, 1746, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1748, 1748, 1748,    0,    0,    0,    0,
     1748, 1749, 1749, 1749,    0,    0,    0,    0, 1749, 1750,
        0,    0,    0,    0, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1750, 1750, 1751, 1751, 1751,    0,    0,    0,    0,
     1751, 1752, 1752, 1752,    0,    0,    0,    0, 1752, 1753,
     1753, 1753,    0,    0,    0,    0, 1753, 1754, 1754, 1754,
        0,    0,    0,    0, 1754, 1755,    0,    0,    0,    0,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1756,

     1756, 1756,    0,    0,    0,    0, 1756, 1757, 1757, 1757,
        0,    0,    0,    0, 1757, 1758, 1758, 1758,    0,    0,
        0,    0, 1758, 1759, 1759, 1759,    0,    0,    0,    0,
     1759, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1761, 1761, 1761,    0,    0,    0,    0, 1761, 1762, 1762,
     1762,    0,    0,    0,    0, 1762, 1763, 1763, 1763,    0,
        0,    0,    0, 1763, 1764, 1764, 1764,    0,    0,    0,
        0, 1764, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1766, 1766, 1766,    0,    0,    0,    0, 1766, 1767,
     1767, 1767,    0,    0,    0,    0, 1767, 1768, 1768, 1768,

        0,    0,    0,    0, 1768, 1769, 1769, 1769,    0,    0,
        0,    0, 1769, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1771, 1771, 1771,    0,    0,    0,    0, 1771,
     1772, 1772, 1772,    0,    0,    0,    0, 1772, 1773, 1773,
     1773,    0,    0,    0,    0, 1773, 1774, 1774, 1774,    0,
        0,    0,    0, 1774, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1776, 1776, 1776,    0,    0,    0,    0,
     1776, 1777, 1777, 1777,    0,    0,    0,    0, 1777, 1778,
     1778,    0, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1779, 1779,    0, 1779, 1779, 1779,

     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1781, 1781, 1781, 1781, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1782,
     1782, 1782,    0,    0,    0,    0, 1782, 1783, 1783, 1783,
        0,    0,    0,    0, 1783, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1785, 1785, 1785,    0,    0,    0,
        0, 1785, 1786, 1786, 1786,    0,    0,    0,    0, 1786,
     1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1788, 1788, 1788,    0,    0,

        0,    0, 1788, 1789, 1789, 1789,    0,    0,    0,    0,
     1789, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790,
     1791, 1791, 1791,    0,    0,    0,    0, 1791, 1792, 1792,
     1792,    0,    0,    0,    0, 1792, 1793, 1793, 1793,    0,
        0,    0,    0, 1793, 1794, 1794, 1794,    0,    0,    0,
        0, 1794, 1795,    0,    0,    0,    0, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1795, 1795, 1796, 1796, 1796,    0,
        0,    0,    0, 1796, 1797, 1797, 1797,    0,    0,    0,
        0, 1797, 1798, 1798, 1798,    0,    0,    0,    0, 1798,
     1799, 1799, 1799,    0,    0,    0,    0, 1799, 1800,    0,

        0,    0,    0, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1800, 1800, 1801, 1801, 1801,    0,    0,    0,    0, 1801,
     1802, 1802, 1802,    0,    0,    0,    0, 1802, 1803, 1803,
     1803,    0,    0,    0,    0, 1803, 1804, 1804, 1804,    0,
        0,    0,    0, 1804, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1806, 1806, 1806,    0,    0,    0,    0,
     1806, 1807, 1807, 1807,    0,    0,    0,    0, 1807, 1808,
     1808, 1808,    0,    0,    0,    0, 1808, 1809, 1809, 1809,
        0,    0,    0,    0, 1809, 1810, 1810, 1810, 1810, 1810,
     1810, 1810, 1810, 1810, 1811, 1811, 1811,    0,    0,    0,

        0, 1811, 1812, 1812, 1812,    0,    0,    0,    0, 1812,
     1813, 1813, 1813,    0,    0,    0,    0, 1813, 1814, 1814,
     1814,    0,    0,    0,    0, 1814, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1816, 1816, 1816,    0,    0,
        0,    0, 1816, 1817, 1817, 1817,    0,    0,    0,    0,
     1817, 1818, 1818, 1818,    0,    0,    0,    0, 1818, 1819,
     1819, 1819,    0,    0,    0,    0, 1819, 1820, 1820, 1820,
     1820, 1820, 1820, 1820, 1820, 1820, 1821, 1821, 1821,    0,
        0,    0,    0, 1821, 1822, 1822, 1822,    0,    0,    0,
        0, 1822, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823,

     1823, 1823, 1823, 1823, 1823, 1823, 1823, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1825, 1825, 1825,    0,    0,    0,    0, 1825,
     1826, 1826, 1826,    0,    0,    0,    0, 1826, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1828, 1828, 1828,
        0,    0,    0,    0, 1828, 1829, 1829,    0, 1829, 1829,
     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,
     1830, 1830,    0, 1830, 1830, 1830, 1830, 1830, 1830, 1830,
     1830, 1830, 1830, 1830, 1830, 1831, 1831, 1831,    0,    0,
        0,    0, 1831, 1832, 1832, 1832,    0,    0,    0,    0,

     1832, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833,
     1834, 1834, 1834,    0,    0,    0,    0, 1834, 1835, 1835,
     1835,    0,    0,    0,    0, 1835, 1836, 1836, 1836,    0,
        0,    0,    0, 1836, 1837,    0,    0,    0,    0, 1837,
     1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1838, 1838,
     1838,    0,    0,    0,    0, 1838, 1839, 1839, 1839,    0,
        0,    0,    0, 1839, 1840, 1840, 1840,    0,    0,    0,
        0, 1840, 1841, 1841, 1841,    0,    0,    0,    0, 1841,
     1842,    0,    0,    0,    0, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1843, 1843, 1843,    0,    0,    0,

        0, 1843, 1844, 1844, 1844,    0,    0,    0,    0, 1844,
     1845, 1845, 1845,    0,    0,    0,    0, 1845, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1847, 1847, 1847,
        0,    0,    0,    0, 1847, 1848, 1848, 1848,    0,    0,
        0,    0, 1848, 1849, 1849, 1849,    0,    0,    0,    0,
     1849, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1851, 1851, 1851,    0,    0,    0,    0, 1851, 1852, 1852,
     1852,    0,    0,    0,    0, 1852, 1853, 1853, 1853,    0,
        0,    0,    0, 1853, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1855, 1855, 1855,    0,    0,    0,    0,

     1855, 1856, 1856, 1856,    0,    0,    0,    0, 1856, 1857,
     1857, 1857,    0,    0,    0,    0, 1857, 1858, 1858, 1858,
     1858, 1858, 1858, 1858, 1858, 1858, 1859, 1859, 1859,    0,
        0,    0,    0, 1859, 1860, 1860, 1860,    0,    0,    0,
        0, 1860, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
     1861, 1862, 1862, 1862,    0,    0,    0,    0, 1862, 1863,
     1863,    0, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863,
     1863, 1863, 1863, 1863, 1864, 1864,    0, 1864, 1864, 1864,
     1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1865,
     1865, 1865,    0,    0,    0,    0, 1865, 1866, 1866, 1866,

     1866, 1866, 1866, 1866, 1866, 1866, 1867, 1867, 1867,    0,
        0,    0,    0, 1867, 1868, 1868, 1868,    0,    0,    0,
        0, 1868, 1869, 1869, 1869,    0,    0,    0,    0, 1869,
     1870,    0,    0,    0,    0, 1870, 1870, 1870, 1870, 1870,
     1870, 1870, 1870, 1870, 1871, 1871, 1871,    0,    0,    0,
        0, 1871, 1872, 1872, 1872,    0,    0,    0,    0, 1872,
     1873, 1873, 1873,    0,    0,    0,    0, 1873, 1874,    0,
        0,    0,    0, 1874, 1874, 1874, 1874, 1874, 1874, 1874,
     1874, 1874, 1875, 1875, 1875,    0,    0,    0,    0, 1875,
     1876, 1876, 1876,    0,    0,    0,    0, 1876, 1877, 1877,

     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1878, 1878, 1878,
        0,    0,    0,    0, 1878, 1879, 1879, 1879,    0,    0,
        0,    0, 1879, 1880, 1880, 1880, 1880, 1880, 1880, 1880,
     1880, 1880, 1881, 1881, 1881,    0,    0,    0,    0, 1881,
     1882, 1882, 1882,    0,    0,    0,    0, 1882, 1883, 1883,
     1883, 1883, 1883, 1883, 1883, 1883, 1883, 1884, 1884, 1884,
        0,    0,    0,    0, 1884, 1885, 1885, 1885,    0,    0,
        0,    0, 1885, 1886, 1886, 1886, 1886, 1886, 1886, 1886,
     1886, 1886, 1887, 1887, 1887,    0,    0,    0,    0, 1887,
     1888, 1888, 1888,    0,    0,    0,    0, 1888, 1889, 1889,

     1889,    0,    0,    0,    0, 1889, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 1890, 1891, 1891,    0, 1891, 1891,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1892, 1892, 1892,    0,    0,    0,    0, 1892, 1893, 1893,
     1893,    0,    0,    0,    0, 1893, 1894, 1894, 1894,    0,
        0,    0,    0, 1894, 1895, 1895, 1895,    0,    0,    0,
        0, 1895, 1896,    0,    0,    0,    0, 1896, 1896, 1896,
     1896, 1896, 1896, 1896, 1896, 1896, 1897, 1897, 1897,    0,
        0,    0,    0, 1897, 1898, 1898, 1898,    0,    0,    0,
        0, 1898, 1899, 1899, 1899,    0,    0,    0,    0, 1899,

     1900, 1900, 1900,    0,    0,    0,    0, 1900, 1901, 1901,
     1901,    0,    0,    0,    0, 1901, 1902, 1902, 1902,    0,
        0,    0,    0, 1902, 1903, 1903, 1903,    0,    0,    0,
        0, 1903, 1904, 1904, 1904,    0,    0,    0,    0, 1904,
     1905, 1905, 1905,    0,    0,    0,    0, 1905, 1906, 1906,
     1906,    0,    0,    0,    0, 1906, 1907, 1907, 1907,    0,
        0,    0,    0, 1907, 1908, 1908, 1908,    0,    0,    0,
        0, 1908, 1909, 1909, 1909,    0,    0,    0,    0, 1909,
     1910, 1910,    0, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
     1910, 1910, 1910, 1910, 1910, 1911, 1911, 1911,    0,    0,

        0,    0, 1911, 1912, 1912, 1912,    0,    0,    0,    0,
     1912, 1913, 1913, 1913,    0,    0,    0,    0, 1913, 1914,
     1914, 1914,    0,    0,    0,    0, 1914, 1915, 1915, 1915,
        0,    0,    0,    0, 1915, 1916, 1916, 1916,    0,    0,
        0,    0, 1916, 1917, 1917, 1917,    0,    0,    0,    0,
     1917, 1918, 1918, 1918,    0,    0,    0,    0, 1918, 1919,
     1919, 1919,    0,    0,    0,    0, 1919, 1920, 1920, 1920,
        0,    0,    0,    0, 1920, 1921, 1921, 1921,    0,    0,
        0,    0, 1921, 1922, 1922, 1922,    0,    0,    0,    0,
     1922, 1923, 1923, 1923,    0,    0,    0,    0, 1923, 1924,

     1924, 1924,    0,    0,    0,    0, 1924, 1925, 1925, 1925,
        0,    0,    0,    0, 1925, 1926, 1926, 1926,    0,    0,
        0,    0, 1926, 1927, 1927, 1927,    0,    0,    0,    0,
     1927, 1928, 1928, 1928,    0,    0,    0,    0, 1928, 1929,
     1929, 1929,    0,    0,    0,    0, 1929, 1930, 1930, 1930,
        0,    0,    0,    0, 1930, 1931, 1931, 1931,    0,    0,
        0,    0, 1931, 1932, 1932, 1932,    0,    0,    0,    0,
     1932, 1933, 1933, 1933,    0,    0,    0,    0, 1933, 1934,
     1934, 1934,    0,    0,    0,    0, 1934, 1935, 1935, 1935,
        0,    0,    0,    0, 1935, 1936, 1936, 1936,    0,    0,

        0,    0, 1936, 1937, 1937, 1937,    0,    0,    0,    0,
     1937, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651

    } ;

extern int mcxx_flex_debug;
int mcxx_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[269] =
    {   0,
      254,  258,  262,  270,  276,  278,  287,  292,  298,  300,
      305,  307,  308,  315,  319,  324,  336,  390,  400,  451,
      458,  466,  472,  479,  483,  494,  500,  507,  515,  529,
      543,  552,  569,  586,  593,  658,  806,  807,  810,  812,
      816,  824,  833,  839,  840,  841,  845,  849,  850,  851,
      858,  860,  861,  866,  867,  868,  869,  870,  871,  872,
      873,  874,  875,  877,  878,  879,  880,  881,  882,  883,
      884,  885,  886,  887,  888,  891,  892,  893,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,

      916,  919,  920,  921,  922,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  935,  936,  941,  942,  943,  944,
      945,  946,  947,  948,  949,  950,  951,  952,  953,  954,
      955,  959,  960,  965,  966,  967,  968,  969,  970,  971,
      972,  973,  974,  975,  979,  980,  981,  982,  983,  984,
      985,  986,  987,  988,  989,  990,  991,  992,  993,  994,
      995,  997,  999, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
     1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1040, 1041, 1042, 1043, 1044, 1049, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1068,

     1069, 1071, 1073, 1074, 1075, 1078, 1081, 1084, 1087, 1090,
     1093, 1097, 1102, 1108, 1111, 1112, 1113, 1114, 1115, 1117,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1148, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1165, 1170, 1171, 1172, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1189, 1194,
     1195, 1196, 1198, 1200, 1202, 1204, 1205, 1206
    } ;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up mcxxtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *mcxxtext;
#line 1 "cxx03.l"
/*--------------------------------------------------------------------
  (C) Copyright 2006-2011 Barcelona Supercomputing Center 
                          Centro Nacional de Supercomputacion
  
  This file is part of Mercurium C/C++ source-to-source compiler.
  
  See AUTHORS file in the top level directory for information 
  regarding developers and contributors.
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 3 of the License, or (at your option) any later version.
  
  Mercurium C/C++ source-to-source compiler is distributed in the hope
  that it will be useful, but WITHOUT ANY WARRANTY; without even the
  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the GNU Lesser General Public License for more
  details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with Mercurium C/C++ source-to-source compiler; if
  not, write to the Free Software Foundation, Inc., 675 Mass Ave,
  Cambridge, MA 02139, USA.
--------------------------------------------------------------------*/
#line 28 "cxx03.l"
/* 
   This file should be preprocessed with tpp (available in lib)
   in order to produce c99.l and cxx03.l
*/

/*
   Lexer of ISO/IEC 14882:2003 - C++
*/






#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>
#include <libgen.h>
#include "cxx-driver.h"
#include "cxx-utils.h"
#include "cxx-lexer.h"
#include "cxx-ast.h"




#include "cxx-parser-internal.h"


typedef 
struct lexer_keyword_tag
{
    const char* keyword;
    int token;
} lexer_keyword_t;


/* g++ 4.3 extensions */
static lexer_keyword_t gxx_43_keywords[] =
{
    { "__has_nothrow_assign", GXX_HAS_NOTHROW_ASSIGN },
    { "__has_nothrow_constructor", GXX_HAS_NOTHROW_CONSTRUCTOR },
    { "__has_nothrow_copy", GXX_HAS_NOTHROW_COPY },
    { "__has_trivial_assign", GXX_HAS_TRIVIAL_ASSIGN },
    { "__has_trivial_constructor", GXX_HAS_TRIVIAL_CONSTRUCTOR },
    { "__has_trivial_copy", GXX_HAS_TRIVIAL_COPY },
    { "__has_trivial_destructor", GXX_HAS_TRIVIAL_DESTRUCTOR },
    { "__has_virtual_destructor", GXX_HAS_VIRTUAL_DESTRUCTOR },
    { "__is_abstract", GXX_IS_ABSTRACT },
    { "__is_base_of", GXX_IS_BASE_OF },
    { "__is_class", GXX_IS_CLASS },
    { "__is_convertible_to", GXX_IS_CONVERTIBLE_TO },
    { "__is_empty", GXX_IS_EMPTY },
    { "__is_enum", GXX_IS_ENUM },
    { "__is_pod", GXX_IS_POD },
    { "__is_polymorphic", GXX_IS_POLYMORPHIC },
    { "__is_union", GXX_IS_UNION },
    // Sentinel
    { NULL, 0 },
};

























static lexer_keyword_t cuda_keywords[] =
{
    {"__device__" , CUDA_DEVICE},
    {"__global__", CUDA_GLOBAL},
    {"__host__", CUDA_HOST},
    {"__constant__", CUDA_CONSTANT},
    {"__shared__", CUDA_SHARED},
    // Sentinel
    { NULL, 0 }
};

static int mcxxwrap(void);

static void parse_token_text(void);
static void parse_token_text_str(const char*);

static int lookup_keyword_in_table(lexer_keyword_t *keyword_table, const char* keyword, char predicate);

struct scan_file_descriptor scanning_now;

static const char* main_input_filename = NULL;

static int pragma_custom_var_list_parentheses = 0;

static const char *current_pragma_prefix = NULL;

static int num_new_lines(const char* c)
{
    int result = 0;

    while (*c)
    {
        if (*c == '\n') 
            result++;
        c++;
    }

    return result;
}

static int include_counter = 0;

// static int verbatim_buffer_size = 0;
// static const char *verbatim_buffer = NULL;

static void verbatim_buffer_append(const char* c);
static void verbatim_buffer_free(void);
static const char* verbatim_buffer_get(void);

static const char* return_pragma_prefix_longest_match(const char* prefix, 
        const char* lexed_directive,
        pragma_directive_kind_t* kind);


/* Lexical conventions A.2 */
/* A.2.1 */
/* A.2.2 */
/* A.2.12 */
/* A.2.13 */
/* A.2.20 */
/* A.2.21 */
/* A.2.22 */
/* A.2.23 includes GNU extension of long long */
/* GCC is very flexible with suffixes */
/* A.2.24 */
/* A.2.25 */
/* GNU Extension */
/* Complex GNU Extension */
/* A.2.28 */
/* A.2.29 */
/* \e is a GNU extension */
/* A.2.34 */
/* A.2.35 */
/* A.2.38 */
/* GNU extension for complex floating suffix */
/* A.2.40 */
/* C99 additional */
/* Identifier */
/* states */













#line 3132 "cxx-scanner.c"

#define INITIAL 0
#define longcomment 1
#define linecomment 2
#define preprocess 3
#define pragma_line 4
#define inline_pragma 5
#define unknown_pragma 6
#define pragma_custom_directive 7
#define pragma_custom_clause 8
#define pragma_custom_clause_first 9
#define pragma_custom_var_list 10
#define verbatim_text 11
#define verbatim_clauses 12
#define verbatim_clauses_args 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mcxxlex_destroy (void );

int mcxxget_debug (void );

void mcxxset_debug (int debug_flag  );

YY_EXTRA_TYPE mcxxget_extra (void );

void mcxxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *mcxxget_in (void );

void mcxxset_in  (FILE * in_str  );

FILE *mcxxget_out (void );

void mcxxset_out  (FILE * out_str  );

int mcxxget_leng (void );

char *mcxxget_text (void );

int mcxxget_lineno (void );

void mcxxset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mcxxwrap (void );
#else
extern int mcxxwrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( mcxxtext, mcxxleng, 1, mcxxout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( mcxxin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( mcxxin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, mcxxin))==0 && ferror(mcxxin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(mcxxin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int mcxxlex (void);

#define YY_DECL int mcxxlex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after mcxxtext and mcxxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 251 "cxx03.l"

 /* preprocess */

#line 3396 "cxx-scanner.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)mcxxalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in mcxxlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! mcxxin )
/* %if-c-only */
			mcxxin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! mcxxout )
/* %if-c-only */
			mcxxout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			mcxxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				mcxx_create_buffer(mcxxin,YY_BUF_SIZE );
		}

		mcxx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of mcxxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1652 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6912 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for mcxxlineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( mcxx_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 269 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], mcxxtext );
			else if ( yy_act == 269 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         mcxxtext );
			else if ( yy_act == 270 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
YY_RULE_SETUP
#line 254 "cxx03.l"
{ 
    BEGIN(preprocess); 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 258 "cxx03.l"
{
	BEGIN(pragma_line);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 262 "cxx03.l"
{
    BEGIN(verbatim_clauses);
    parse_token_text();
    return VERBATIM_PRAGMA;
}
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 270 "cxx03.l"
{
    parse_token_text();
    BEGIN(verbatim_clauses_args);
    return VERBATIM_TYPE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 276 "cxx03.l"
{ } 
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 278 "cxx03.l"
{
    BEGIN(verbatim_text);
    scanning_now.line_number++;
}
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 287 "cxx03.l"
{
    parse_token_text();
    return '(';
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 292 "cxx03.l"
{
    parse_token_text();
    BEGIN(verbatim_clauses);
    return ')';
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 298 "cxx03.l"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 300 "cxx03.l"
{ 
    parse_token_text();
    return IDENTIFIER;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 305 "cxx03.l"

	YY_BREAK

case 12:
YY_RULE_SETUP
#line 307 "cxx03.l"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 308 "cxx03.l"

	YY_BREAK



case 14:
YY_RULE_SETUP
#line 315 "cxx03.l"
{
    verbatim_buffer_append(mcxxtext);
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 319 "cxx03.l"
{
    verbatim_buffer_append(mcxxtext);
    scanning_now.line_number++;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 324 "cxx03.l"
{
    BEGIN(INITIAL);

    parse_token_text_str(verbatim_buffer_get());
    verbatim_buffer_free();
    
    scanning_now.line_number++;
    return VERBATIM_TEXT;
}
	YY_BREAK

case 17:
YY_RULE_SETUP
#line 336 "cxx03.l"
{
	// Custom pragmas
	int i;
	char found = 0;

	char matched = 0;

	// Ignore gcc and ident
    if (!matched 
            && ((strcasecmp(mcxxtext, "gcc") == 0)
                || (strcasecmp(mcxxtext, "ident") == 0)))
	{
        // All the whole line will be handled as an unknown pragma
		BEGIN(unknown_pragma);
        // current mcxxtext must be included in the "unknown pragma"
		yymore();
		matched = 1;
	}

	if (!matched)
	{
		for (i = 0; i < CURRENT_CONFIGURATION->num_pragma_custom_prefix; i++)
		{
			if (strcmp(mcxxtext, CURRENT_CONFIGURATION->pragma_custom_prefix[i]) == 0)
            {
                found = 1;
                break;
            }
		}

		if (!found)
		{
			fprintf(stderr, "%s:%d: warning: unknown '#pragma %s'\n", 
					scanning_now.current_filename,
					scanning_now.line_number,
					mcxxtext);
			BEGIN(unknown_pragma);
			// Ignore this prefix as an unknown pragma
			yymore();
			matched = 1;
		}
		else
		{
			BEGIN(pragma_custom_directive);
			parse_token_text();
            current_pragma_prefix = CURRENT_CONFIGURATION->pragma_custom_prefix[i];
			return PRAGMA_CUSTOM;
		}
	}
}
	YY_BREAK

/* This will also catch #pragma gcc and #pragma ident */
case 18:
YY_RULE_SETUP
#line 390 "cxx03.l"
{
	parse_token_text();
	BEGIN(preprocess);
	return UNKNOWN_PRAGMA;
}
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 400 "cxx03.l"
{
	BEGIN(pragma_custom_clause_first);

    pragma_directive_kind_t directive_kind = PDK_NONE; 

    // This call will unput appropriately what was lexed too much
    const char* longest_match = return_pragma_prefix_longest_match(
            current_pragma_prefix, mcxxtext, &directive_kind);

    if (directive_kind == PDK_NONE)
    {
        // Give a chance to the empty "directive" since some ill-designed
        // pragmas might need this
        directive_kind = lookup_pragma_directive(current_pragma_prefix, "");
        parse_token_text(); 
    }
    else
    {
        parse_token_text_str(longest_match);
    }


    int token = 0;
    switch (directive_kind)
    {
        case PDK_DIRECTIVE : 
            {
                token = PRAGMA_CUSTOM_DIRECTIVE;
                break;
            }
        case PDK_CONSTRUCT :
            {
                token = PRAGMA_CUSTOM_CONSTRUCT;
                break;
            }
        case PDK_NONE :
            {
                running_error("%s:%d: error: unknown directive '%s' for pragma '%s'. Maybe you forgot to register it?",
                        scanning_now.current_filename, 
                        scanning_now.line_number,
                        mcxxtext,
                        current_pragma_prefix);
            }
        default:
            internal_error("Invalid pragma directive kind kind=%d", directive_kind);
    }

    current_pragma_prefix = NULL;
    return token;
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 451 "cxx03.l"
{
    // This will cause a fail in the parser, but better this way than a silent \n mislexed
    scanning_now.line_number++;
	BEGIN(INITIAL);
	return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 458 "cxx03.l"
{
	// This blank must be eaten and should be mandatory
}
	YY_BREAK


case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 466 "cxx03.l"
{
    scanning_now.line_number++;
	BEGIN(INITIAL);
	return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 472 "cxx03.l"
{
	// Special case for custom clauses
	BEGIN(pragma_custom_var_list);
	parse_token_text(); 
	return PRAGMA_CUSTOM_CLAUSE; 
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 479 "cxx03.l"
{
	// This blank must be eaten
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 483 "cxx03.l"
{
        // Parameter
	pragma_custom_var_list_parentheses = 1;
    BEGIN(pragma_custom_var_list);
    return '(';
}
	YY_BREAK


case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 494 "cxx03.l"
{
    scanning_now.line_number++;
	BEGIN(INITIAL);
	return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 500 "cxx03.l"
{
	// Special case for custom clauses
	BEGIN(pragma_custom_var_list);
	parse_token_text(); 
	return PRAGMA_CUSTOM_CLAUSE; 
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 507 "cxx03.l"
{
	// This blank must be eaten
}
	YY_BREAK


case 29:
YY_RULE_SETUP
#line 515 "cxx03.l"
{
	parse_token_text();
	if (pragma_custom_var_list_parentheses == 0)
    {
        pragma_custom_var_list_parentheses++;
        return '(';
    }
    else
    {
        pragma_custom_var_list_parentheses++;
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 529 "cxx03.l"
{
	parse_token_text();
	pragma_custom_var_list_parentheses--;
	if (pragma_custom_var_list_parentheses == 0)
	{
		BEGIN(pragma_custom_clause);
        return ')';
	}
    else
    {
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 543 "cxx03.l"
{
    // Ignore the blank if we are not yet within any parentheses
	if (pragma_custom_var_list_parentheses > 0)
    {
        parse_token_text();
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 552 "cxx03.l"
{
    if (pragma_custom_var_list_parentheses > 0)
    {
        parse_token_text();
        return PRAGMA_CLAUSE_ARG_TEXT;
    }
    else
    {
        // We are in .
        // #pragma foo bar . doe
        // and 'doe' must be lexed as another custom clause
        BEGIN(pragma_custom_var_list);
        parse_token_text(); 
        return PRAGMA_CUSTOM_CLAUSE; 
    }
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 569 "cxx03.l"
{
    // We found a newline
    if (pragma_custom_var_list_parentheses != 0)
    {
        // Well, we found the newline but parentheses were not 
        // properly nested
        fprintf(stderr, "%s:%d: warning: unended custom clause. Skipping.\n",
                scanning_now.current_filename,
                scanning_now.line_number);
    }
    // Head back to initial state and finish this pragma
    scanning_now.line_number++;
    BEGIN(INITIAL);
    return PRAGMA_CUSTOM_NEWLINE;
}
	YY_BREAK
/* Catch all rule */
case 34:
YY_RULE_SETUP
#line 586 "cxx03.l"
{
    parse_token_text();
    return PRAGMA_CLAUSE_ARG_TEXT;
}
	YY_BREAK

case 35:
YY_RULE_SETUP
#line 593 "cxx03.l"
{
 const char *p = mcxxtext;

 // Jump initial blanks (if any)
 while (*p == ' ')
    p++;

 // Jump "line" string
 p += strlen("line");

 // Jump blanks
 while (*p == ' ')
   p++;

 // Compute line
 int line_num = 0;
 while (*p != ' ' 
         && *p != '\0' // The filename location is optional
         )
 {
     if (isdigit(*p))
     {
         line_num = line_num*10 + ((*p) - '0');
     }
     else
     {
         internal_error("Digit expected here but '%c' (%x) found", *p, *p);
     }
     p++;
 }

   // Update the line number, note that it is line_num - 1 
   // because \n is not handled here, but in another rule
 scanning_now.line_number = (line_num - 1);

 // Jump blanks (if any)
 while (*p == ' ')
   p++;

 // If there is a filename, parse it
 if (*p == '"')
 {
     // Now we are on the quote "
     p++;
 
     char filename[256];
     memset(filename, 0, 256);
 
     char *f = filename;
 
     while (*p != '"')
     {
         if (f < &(filename[255]))
         {
             (*f) = *p;
             f++;
         }
         p++;
     }

     // Update the file 
	scanning_now.current_filename = uniquestr(filename);
 }
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 658 "cxx03.l"
{
	char* directive = mcxxtext;

	// Jump the blank
	directive++;

	int line_num = 0;
	while (*directive != ' ')
	{
		if (isdigit(*directive))
		{
			line_num = line_num*10 + ((*directive) - '0');
		}
		else
		{
			internal_error("Digit expected here but '%c' found", *directive);
		}
		directive++;
	}

	// Now directive is over the blank after the digits. Jump the blank
	directive++;

	// Now we are over the doublequote. Jump it
	directive++;

	char filename[256];
	memset(filename, 0, 256);

	char* p = filename;

	while (*directive != '"')
	{
        if (p < &(filename[255]))
        {
            *p = *directive;
            p++;
        }
		directive++;
	}

	// Now we have the new number line and the new file name

    // Check include flags from GNU cpp and other preprocessors.
    // We are on the the doublequote, jump it.
    directive++;

    // Advance the directive till the next nonblank
    while (*directive == ' ')
    {
        directive++;
    }

    // Get the flags
    char start_of_new_file = 0;
    char return_of_a_file = 0;
    char system_header_file = 0;
    char extern_c_block = 0;
    while (*directive == ' '
            || isdigit(*directive))
    {
        int current_flag = 0;
        while (isdigit(*directive))
        {
            current_flag = current_flag * 10 +  (*directive - '0');
            directive++;
        }

        switch (current_flag)
        {
            case 1:
                {
                    start_of_new_file = 1;
                    break;
                }
            case 2:
                {
                    return_of_a_file = 1;
                    break;
                }
            case 3:
                {
                    system_header_file = 1;
                    break;
                }
            case 4:
                {
                    extern_c_block = 1;
                    break;
                }
            default:
                // Ignore it
                break;
        }

        // Advance the directive till the next nonblank
        while (*directive == ' ')
        {
            directive++;
        }
    }

    if (system_header_file)
    {
        char path[256];
        strncpy(path, filename, 255);

        char *name_without_path = basename(path);
        strncpy(filename, name_without_path, 255);
    }

    if (start_of_new_file 
            || system_header_file)
    {
        if (include_counter == 0)
        {
            top_level_include_t *new_top_level_include = calloc(1, sizeof(*new_top_level_include));

            new_top_level_include->included_file = uniquestr(filename);

            if (system_header_file)
            {
                new_top_level_include->system_include = 1;
            }

            P_LIST_ADD(CURRENT_COMPILED_FILE->top_level_include_list,
                    CURRENT_COMPILED_FILE->num_top_level_includes,
                    new_top_level_include);
        }
    }

    if (start_of_new_file)
    {
        include_counter++;
    }

    if (return_of_a_file)
    {
        include_counter = (include_counter > 0) ? (include_counter - 1) : 0;
    }

    // Update the line number, note that it is line_num - 1 
    // because \n is not handled here, but in another rule
	scanning_now.line_number = (line_num - 1);
    // Update file
	scanning_now.current_filename = uniquestr(filename);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 806 "cxx03.l"
{ /* ignore line */  }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 807 "cxx03.l"
{ scanning_now.line_number++; BEGIN(INITIAL); }
	YY_BREAK
/* _Pragma */
case 39:
YY_RULE_SETUP
#line 810 "cxx03.l"
{ BEGIN(inline_pragma); pragma_custom_var_list_parentheses = 0; }
	YY_BREAK

case 40:
YY_RULE_SETUP
#line 812 "cxx03.l"
{
    pragma_custom_var_list_parentheses++;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 816 "cxx03.l"
{
    pragma_custom_var_list_parentheses--;

    if (pragma_custom_var_list_parentheses == 0)
        BEGIN(INITIAL);
}
	YY_BREAK
/* Ignore it */
case 42:
YY_RULE_SETUP
#line 824 "cxx03.l"
{
}
	YY_BREAK

/* C comments ( 6.4.9 ) */
/* // comments. // can be splitted across different lines */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 833 "cxx03.l"
{ 
    scanning_now.line_number += num_new_lines(mcxxtext); 
    BEGIN(linecomment); 
}
	YY_BREAK
/* escaped new line does not end comment */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 839 "cxx03.l"
{ scanning_now.line_number++; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 840 "cxx03.l"
{ /* ignore comment */  }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 841 "cxx03.l"
{ scanning_now.line_number++; BEGIN(INITIAL); }
	YY_BREAK
/* long C comments. tags can be splitted across diferent lines */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 845 "cxx03.l"
{ 
    scanning_now.line_number += num_new_lines(mcxxtext);
    BEGIN(longcomment); 
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 849 "cxx03.l"
{ scanning_now.line_number++; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 850 "cxx03.l"
{ /* ignore comment */ }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 851 "cxx03.l"
{ 
    scanning_now.line_number += num_new_lines(mcxxtext);
    BEGIN(INITIAL); 
}
	YY_BREAK
/* A.2.11 */
case 51:
YY_RULE_SETUP
#line 858 "cxx03.l"
{ parse_token_text(); return TOKEN_CHAR; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 860 "cxx03.l"
{ parse_token_text(); return TOKEN_WCHAR_T; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 861 "cxx03.l"
{ parse_token_text(); return TOKEN_BOOL; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 866 "cxx03.l"
{ parse_token_text(); return TOKEN_SHORT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 867 "cxx03.l"
{ parse_token_text(); return TOKEN_INT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 868 "cxx03.l"
{ parse_token_text(); return TOKEN_LONG; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 869 "cxx03.l"
{ parse_token_text(); return TOKEN_SIGNED; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 870 "cxx03.l"
{ parse_token_text(); return TOKEN_SIGNED; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 871 "cxx03.l"
{ parse_token_text(); return TOKEN_SIGNED; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 872 "cxx03.l"
{ parse_token_text(); return TOKEN_UNSIGNED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 873 "cxx03.l"
{ parse_token_text(); return TOKEN_FLOAT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 874 "cxx03.l"
{ parse_token_text(); return TOKEN_DOUBLE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 875 "cxx03.l"
{ parse_token_text(); return TOKEN_VOID; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 877 "cxx03.l"
{ parse_token_text(); return TYPEDEF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 878 "cxx03.l"
{ parse_token_text(); return ENUM; } 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 879 "cxx03.l"
{ parse_token_text(); return STRUCT; } 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 880 "cxx03.l"
{ parse_token_text(); return AUTO; } 
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 881 "cxx03.l"
{ parse_token_text(); return REGISTER; } 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 882 "cxx03.l"
{ parse_token_text(); return STATIC; } 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 883 "cxx03.l"
{ parse_token_text(); return EXTERN; } 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 884 "cxx03.l"
{ parse_token_text(); return INLINE; } 
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 885 "cxx03.l"
{ parse_token_text(); return TOKEN_CONST; } 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 886 "cxx03.l"
{ parse_token_text(); return TOKEN_VOLATILE; } 
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 887 "cxx03.l"
{ parse_token_text(); return UNION; } 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 888 "cxx03.l"
{ parse_token_text(); return ASM; } 
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 891 "cxx03.l"
{ parse_token_text(); return DECLTYPE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 892 "cxx03.l"
{ parse_token_text(); return EXPLICIT; } 
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 893 "cxx03.l"
{ parse_token_text(); return PRIVATE; } 
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 894 "cxx03.l"
{ parse_token_text(); return PROTECTED; } 
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 895 "cxx03.l"
{ parse_token_text(); return PUBLIC; } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 896 "cxx03.l"
{ parse_token_text(); return THROW; } 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 897 "cxx03.l"
{ parse_token_text(); return OPERATOR; } 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 898 "cxx03.l"
{ parse_token_text(); return TOKEN_NEW; } 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 899 "cxx03.l"
{ parse_token_text(); return TOKEN_DELETE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 900 "cxx03.l"
{ parse_token_text(); return TYPENAME; } 
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 901 "cxx03.l"
{ parse_token_text(); return EXPORT; } 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 902 "cxx03.l"
{ parse_token_text(); return CLASS; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 903 "cxx03.l"
{ parse_token_text(); return TEMPLATE; } 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 904 "cxx03.l"
{ parse_token_text(); return FRIEND; } 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 905 "cxx03.l"
{ parse_token_text(); return MUTABLE; } 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 906 "cxx03.l"
{ parse_token_text(); return VIRTUAL; } 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 907 "cxx03.l"
{ parse_token_text(); return USING; } 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 908 "cxx03.l"
{ parse_token_text(); return NAMESPACE; } 
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 909 "cxx03.l"
{ parse_token_text(); return TOKEN_THIS; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 910 "cxx03.l"
{ parse_token_text(); return DYNAMIC_CAST; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 911 "cxx03.l"
{ parse_token_text(); return STATIC_CAST; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 912 "cxx03.l"
{ parse_token_text(); return REINTERPRET_CAST; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 913 "cxx03.l"
{ parse_token_text(); return CONST_CAST; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 914 "cxx03.l"
{ parse_token_text(); return TYPEID; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 915 "cxx03.l"
{ parse_token_text(); return TRY; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 916 "cxx03.l"
{ parse_token_text(); return CATCH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 919 "cxx03.l"
{ parse_token_text(); return SIZEOF; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 920 "cxx03.l"
{ parse_token_text(); return CASE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 921 "cxx03.l"
{ parse_token_text(); return DEFAULT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 922 "cxx03.l"
{ parse_token_text(); return IF; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 923 "cxx03.l"
{ parse_token_text(); return ELSE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 924 "cxx03.l"
{ parse_token_text(); return SWITCH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 925 "cxx03.l"
{ parse_token_text(); return WHILE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 926 "cxx03.l"
{ parse_token_text(); return DO; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 927 "cxx03.l"
{ parse_token_text(); return FOR; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 928 "cxx03.l"
{ parse_token_text(); return BREAK; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 929 "cxx03.l"
{ parse_token_text(); return CONTINUE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 930 "cxx03.l"
{ parse_token_text(); return GOTO; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 931 "cxx03.l"
{ parse_token_text(); return RETURN; }
	YY_BREAK
/* A.2.41 */
case 115:
YY_RULE_SETUP
#line 935 "cxx03.l"
{ parse_token_text(); return BOOLEAN_LITERAL; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 936 "cxx03.l"
{ parse_token_text(); return BOOLEAN_LITERAL; }
	YY_BREAK
/* Alternative tokens */
case 117:
YY_RULE_SETUP
#line 941 "cxx03.l"
{ parse_token_text(); return '{'; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 942 "cxx03.l"
{ parse_token_text(); return '}'; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 943 "cxx03.l"
{ parse_token_text(); return '['; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 944 "cxx03.l"
{ parse_token_text(); return ']'; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 945 "cxx03.l"
{ parse_token_text(); return ANDAND; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 946 "cxx03.l"
{ parse_token_text(); return '|'; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 947 "cxx03.l"
{ parse_token_text(); return OROR; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 948 "cxx03.l"
{ parse_token_text(); return '^'; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 949 "cxx03.l"
{ parse_token_text(); return '~'; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 950 "cxx03.l"
{ parse_token_text(); return '&'; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 951 "cxx03.l"
{ parse_token_text(); return AND_ASSIGN; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 952 "cxx03.l"
{ parse_token_text(); return OR_ASSIGN; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 953 "cxx03.l"
{ parse_token_text(); return XOR_ASSIGN; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 954 "cxx03.l"
{ parse_token_text(); return '!'; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 955 "cxx03.l"
{ parse_token_text(); return NOT_EQUAL; }
	YY_BREAK
/* GNU Extensions */
case 132:
YY_RULE_SETUP
#line 959 "cxx03.l"
{ parse_token_text(); return BUILTIN_VA_ARG; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 960 "cxx03.l"
{ parse_token_text(); return BUILTIN_OFFSETOF; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 965 "cxx03.l"
{ parse_token_text(); return EXTENSION; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 966 "cxx03.l"
{ parse_token_text(); return ALIGNOF; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 967 "cxx03.l"
{ parse_token_text(); return ALIGNOF; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 968 "cxx03.l"
{ parse_token_text(); return ALIGNOF; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 969 "cxx03.l"
{ parse_token_text(); return REAL; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 970 "cxx03.l"
{ parse_token_text(); return REAL; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 971 "cxx03.l"
{ parse_token_text(); return IMAG; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 972 "cxx03.l"
{ parse_token_text(); return LABEL; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 973 "cxx03.l"
{ parse_token_text(); return COMPLEX; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 974 "cxx03.l"
{ parse_token_text(); return COMPLEX; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 975 "cxx03.l"
{ parse_token_text(); return COMPLEX; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 979 "cxx03.l"
{ parse_token_text(); return TYPEOF; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 980 "cxx03.l"
{ parse_token_text(); return TYPEOF; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 981 "cxx03.l"
{ parse_token_text(); return TYPEOF; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 982 "cxx03.l"
{ parse_token_text(); return RESTRICT; /* This should be only for C99 but we will be lax here */ }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 983 "cxx03.l"
{ parse_token_text(); return RESTRICT; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 984 "cxx03.l"
{ parse_token_text(); return RESTRICT; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 985 "cxx03.l"
{ parse_token_text(); return TOKEN_CONST; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 986 "cxx03.l"
{ parse_token_text(); return TOKEN_CONST; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 987 "cxx03.l"
{ parse_token_text(); return ATTRIBUTE; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 988 "cxx03.l"
{ parse_token_text(); return ATTRIBUTE; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 989 "cxx03.l"
{ parse_token_text(); return THREAD; } 
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 990 "cxx03.l"
{ parse_token_text(); return INLINE; } 
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 991 "cxx03.l"
{ parse_token_text(); return INLINE; } 
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 992 "cxx03.l"
{ parse_token_text(); return TOKEN_VOLATILE; } 
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 993 "cxx03.l"
{ parse_token_text(); return TOKEN_VOLATILE; } 
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 994 "cxx03.l"
{ parse_token_text(); return ASM; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 995 "cxx03.l"
{ parse_token_text(); return ASM; }
	YY_BREAK
/* XL Compiler extensions */
case 162:
YY_RULE_SETUP
#line 997 "cxx03.l"
{ parse_token_text(); return XL_BUILTIN_SPEC; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 999 "cxx03.l"
{ parse_token_text(); return STATIC_ASSERT; }
	YY_BREAK
/* g++ 4.3 extensions */
case 164:
#line 1002 "cxx03.l"
case 165:
#line 1003 "cxx03.l"
case 166:
#line 1004 "cxx03.l"
case 167:
#line 1005 "cxx03.l"
case 168:
#line 1006 "cxx03.l"
case 169:
#line 1007 "cxx03.l"
case 170:
#line 1008 "cxx03.l"
case 171:
#line 1009 "cxx03.l"
case 172:
#line 1010 "cxx03.l"
case 173:
#line 1011 "cxx03.l"
case 174:
#line 1012 "cxx03.l"
case 175:
#line 1013 "cxx03.l"
case 176:
#line 1014 "cxx03.l"
case 177:
#line 1015 "cxx03.l"
case 178:
#line 1016 "cxx03.l"
case 179:
#line 1017 "cxx03.l"
case 180:
YY_RULE_SETUP
#line 1017 "cxx03.l"
{
    return lookup_keyword_in_table(gxx_43_keywords, mcxxtext, !CURRENT_CONFIGURATION->disable_gxx_type_traits);
}
	YY_BREAK
/* CUDA keywords */
case 181:
#line 1041 "cxx03.l"
case 182:
#line 1042 "cxx03.l"
case 183:
#line 1043 "cxx03.l"
case 184:
#line 1044 "cxx03.l"
case 185:
YY_RULE_SETUP
#line 1044 "cxx03.l"
{
    return lookup_keyword_in_table(cuda_keywords, mcxxtext, CURRENT_CONFIGURATION->enable_cuda);
}
	YY_BREAK
/* mcxx extensions */
case 186:
YY_RULE_SETUP
#line 1049 "cxx03.l"
{ parse_token_text(); return CONSTRUCT; }
	YY_BREAK
/* Special tokens for subparsing */
case 187:
YY_RULE_SETUP
#line 1052 "cxx03.l"
{ parse_token_text(); return SUBPARSE_EXPRESSION; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1053 "cxx03.l"
{ parse_token_text(); return SUBPARSE_EXPRESSION_LIST; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1054 "cxx03.l"
{ parse_token_text(); return SUBPARSE_STATEMENT; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1055 "cxx03.l"
{ parse_token_text(); return SUBPARSE_DECLARATION; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1056 "cxx03.l"
{ parse_token_text(); return SUBPARSE_TYPE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1057 "cxx03.l"
{ parse_token_text(); return SUBPARSE_TYPE_LIST; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1058 "cxx03.l"
{ parse_token_text(); return SUBPARSE_ID_EXPRESSION; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1059 "cxx03.l"
{ parse_token_text(); return SUBPARSE_OMP_OPERATOR_NAME; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1060 "cxx03.l"
{ parse_token_text(); return SUBPARSE_OMP_UDR_DECLARE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1061 "cxx03.l"
{ parse_token_text(); return SUBPARSE_OMP_UDR_DECLARE_2; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1062 "cxx03.l"
{ parse_token_text(); return SUBPARSE_OMP_UDR_IDENTITY; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1063 "cxx03.l"
{ parse_token_text(); return OMP_UDR_CONSTRUCTOR; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1065 "cxx03.l"
{ parse_token_text(); return SUBPARSE_MEMBER; }
	YY_BREAK
/* Special tokens for prettyprinted comments and preprocessor elements */
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1068 "cxx03.l"
{ parse_token_text(); return PP_COMMENT; }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 1069 "cxx03.l"
{ parse_token_text(); return PP_TOKEN; }
	YY_BREAK
/* Special tokens for placeholders */
case 202:
YY_RULE_SETUP
#line 1071 "cxx03.l"
{ parse_token_text(); return STATEMENT_PLACEHOLDER; }
	YY_BREAK
/* Special tokens for parsing superscalar related things */
case 203:
YY_RULE_SETUP
#line 1073 "cxx03.l"
{ parse_token_text(); return SUBPARSE_SUPERSCALAR_DECLARATOR; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1074 "cxx03.l"
{ parse_token_text(); return SUBPARSE_SUPERSCALAR_DECLARATOR_LIST; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1075 "cxx03.l"
{ parse_token_text(); return SUBPARSE_SUPERSCALAR_EXPRESSION; }
	YY_BREAK
/* A plain identifier */
case 206:
YY_RULE_SETUP
#line 1078 "cxx03.l"
{parse_token_text(); return IDENTIFIER; }
	YY_BREAK
/* A.2.17 */
case 207:
YY_RULE_SETUP
#line 1081 "cxx03.l"
{ parse_token_text(); return DECIMAL_LITERAL; }
	YY_BREAK
/* A.2.18 */
case 208:
YY_RULE_SETUP
#line 1084 "cxx03.l"
{ parse_token_text(); return OCTAL_LITERAL; }
	YY_BREAK
/* A.2.19 */
case 209:
YY_RULE_SETUP
#line 1087 "cxx03.l"
{ parse_token_text(); return HEXADECIMAL_LITERAL; }
	YY_BREAK
/* A.2.26 */
case 210:
YY_RULE_SETUP
#line 1090 "cxx03.l"
{ parse_token_text(); return CHARACTER_LITERAL; }
	YY_BREAK
/* A.2.33 */
case 211:
YY_RULE_SETUP
#line 1093 "cxx03.l"
{ parse_token_text();
return FLOATING_LITERAL; }
	YY_BREAK
/* C99 additional */
case 212:
YY_RULE_SETUP
#line 1097 "cxx03.l"
{ 
    parse_token_text(); 
    return HEXADECIMAL_FLOAT; 
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1102 "cxx03.l"
{ 
    parse_token_text(); 
    return HEXADECIMAL_FLOAT; 
}
	YY_BREAK
/* A.2.39 */
case 214:
YY_RULE_SETUP
#line 1108 "cxx03.l"
{ parse_token_text(); return STRING_LITERAL; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1111 "cxx03.l"
{ parse_token_text(); return '['; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1112 "cxx03.l"
{ parse_token_text(); return ']'; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1113 "cxx03.l"
{ parse_token_text(); return ')'; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1114 "cxx03.l"
{ parse_token_text(); return '('; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1115 "cxx03.l"
{ parse_token_text(); return PTR_OP; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1117 "cxx03.l"
{ parse_token_text(); return PTR_OP_MUL; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1119 "cxx03.l"
{ parse_token_text(); return PLUSPLUS; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1120 "cxx03.l"
{ parse_token_text(); return MINUSMINUS; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1121 "cxx03.l"
{ parse_token_text(); return '+'; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1122 "cxx03.l"
{ parse_token_text(); return '-'; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1123 "cxx03.l"
{ parse_token_text(); return '~'; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1124 "cxx03.l"
{ parse_token_text(); return '!'; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1125 "cxx03.l"
{ parse_token_text(); return '/'; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1126 "cxx03.l"
{ parse_token_text(); return '%'; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1127 "cxx03.l"
{ parse_token_text(); return LEFT; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 1128 "cxx03.l"
{ 
     if (CURRENT_CONFIGURATION->enable_cuda)
     {
         parse_token_text();
         return CUDA_KERNEL_LEFT;
     }
     REJECT;
}
	YY_BREAK
/* There is no '>>' token in C++ but AB1 followed by '>', see below */
case 231:
YY_RULE_SETUP
#line 1148 "cxx03.l"
{ parse_token_text(); return LESS_OR_EQUAL; }
	YY_BREAK
/* There is no '>=' token in C++ but AB2 followed by '=', see below */
case 232:
YY_RULE_SETUP
#line 1153 "cxx03.l"
{ parse_token_text(); return EQUAL; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 1154 "cxx03.l"
{ parse_token_text(); return NOT_EQUAL; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 1155 "cxx03.l"
{ parse_token_text(); return '^'; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 1156 "cxx03.l"
{ parse_token_text(); return '|'; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 1157 "cxx03.l"
{ parse_token_text(); return ANDAND; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 1158 "cxx03.l"
{ parse_token_text(); return OROR; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 1159 "cxx03.l"
{ parse_token_text(); return '='; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 1160 "cxx03.l"
{ parse_token_text(); return MUL_ASSIGN; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1161 "cxx03.l"
{ parse_token_text(); return DIV_ASSIGN; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1162 "cxx03.l"
{ parse_token_text(); return MOD_ASSIGN; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1163 "cxx03.l"
{ parse_token_text(); return ADD_ASSIGN; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 1164 "cxx03.l"
{ parse_token_text(); return SUB_ASSIGN; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1165 "cxx03.l"
{ parse_token_text(); return LEFT_ASSIGN; }
	YY_BREAK
/* There is no '>>=' in C++ but AB1 followed by 'AB2' and '=', see below */
case 245:
YY_RULE_SETUP
#line 1170 "cxx03.l"
{ parse_token_text(); return AND_ASSIGN; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1171 "cxx03.l"
{ parse_token_text(); return XOR_ASSIGN; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1172 "cxx03.l"
{ parse_token_text(); return OR_ASSIGN; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1176 "cxx03.l"
{ parse_token_text(); return ';'; } 
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1177 "cxx03.l"
{ parse_token_text(); return ':'; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1178 "cxx03.l"
{ parse_token_text(); return '.'; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1179 "cxx03.l"
{ parse_token_text(); return ','; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1180 "cxx03.l"
{ parse_token_text(); return '?'; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1181 "cxx03.l"
{ parse_token_text(); return '{'; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1182 "cxx03.l"
{ parse_token_text(); return '}'; } 
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1183 "cxx03.l"
{ parse_token_text(); return '<'; }
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up mcxxtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up mcxxtext again */
YY_RULE_SETUP
#line 1185 "cxx03.l"
{ parse_token_text(); return AB1; }
	YY_BREAK
case 257:
*yy_cp = (yy_hold_char); /* undo effects of setting up mcxxtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up mcxxtext again */
YY_RULE_SETUP
#line 1186 "cxx03.l"
{ parse_token_text(); return AB2; }
	YY_BREAK
case 258:
/* rule 258 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up mcxxtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up mcxxtext again */
YY_RULE_SETUP
#line 1187 "cxx03.l"
{ parse_token_text(); return '>'; }
	YY_BREAK
/* Pathological case (EOF and such) */
case 259:
YY_RULE_SETUP
#line 1189 "cxx03.l"
{ parse_token_text(); return '>'; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1194 "cxx03.l"
{ parse_token_text(); return '&'; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1195 "cxx03.l"
{ parse_token_text(); return '*'; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1196 "cxx03.l"
{ parse_token_text(); return '"'; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1198 "cxx03.l"
{ parse_token_text(); return TWO_COLONS; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1200 "cxx03.l"
{ parse_token_text(); return ELLIPSIS; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1202 "cxx03.l"
{ parse_token_text(); return TWO_DOTS; }
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 1204 "cxx03.l"
{ scanning_now.line_number++; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1205 "cxx03.l"
{  }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 1206 "cxx03.l"
{ 
    /* ignore bad characters */ 
    if (isgraph(*mcxxtext))
    {
        fprintf(stderr, "%s:%d: warning: unknown character '%c' (%#x). Ignoring it.\n", 
				scanning_now.current_filename, scanning_now.line_number,
                *mcxxtext, *mcxxtext);
    }
    else
    {
        fprintf(stderr, "%s:%d: warning: unknown character %#x. Ignoring it.\n", 
				scanning_now.current_filename, scanning_now.line_number,
                *mcxxtext);
    }
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 1223 "cxx03.l"
ECHO;
	YY_BREAK
#line 5386 "cxx-scanner.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(longcomment):
			case YY_STATE_EOF(linecomment):
			case YY_STATE_EOF(preprocess):
			case YY_STATE_EOF(pragma_line):
			case YY_STATE_EOF(inline_pragma):
			case YY_STATE_EOF(unknown_pragma):
			case YY_STATE_EOF(pragma_custom_directive):
			case YY_STATE_EOF(pragma_custom_clause):
			case YY_STATE_EOF(pragma_custom_clause_first):
			case YY_STATE_EOF(pragma_custom_var_list):
			case YY_STATE_EOF(verbatim_text):
			case YY_STATE_EOF(verbatim_clauses):
			case YY_STATE_EOF(verbatim_clauses_args):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed mcxxin at a new source and called
			 * mcxxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = mcxxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( mcxxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * mcxxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of mcxxlex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mcxxrestart(mcxxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mcxxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1652 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1652 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1651);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up mcxxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update mcxxlineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mcxxrestart(mcxxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mcxxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve mcxxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and mcxxlineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void mcxxrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        mcxxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            mcxx_create_buffer(mcxxin,YY_BUF_SIZE );
	}

	mcxx_init_buffer(YY_CURRENT_BUFFER,input_file );
	mcxx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void mcxx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mcxxpop_buffer_state();
	 *		mcxxpush_buffer_state(new_buffer);
     */
	mcxxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mcxx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (mcxxwrap()) processing, but the only time this flag
	 * is looked at is after mcxxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void mcxx_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	mcxxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE mcxx_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mcxxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mcxx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mcxxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mcxx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	mcxx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mcxx_create_buffer()
 * 
 */
/* %if-c-only */
    void mcxx_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mcxxfree((void *) b->yy_ch_buf  );

	mcxxfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mcxxrestart() or at EOF.
 */
/* %if-c-only */
    static void mcxx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	mcxx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then mcxx_init_buffer was _probably_
     * called from mcxxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void mcxx_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mcxx_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void mcxxpush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	mcxxensure_buffer_stack();

	/* This block is copied from mcxx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mcxx_switch_to_buffer. */
	mcxx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void mcxxpop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	mcxx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		mcxx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void mcxxensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)mcxxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mcxxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)mcxxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mcxxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mcxx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mcxxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mcxx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mcxx_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to mcxxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mcxx_scan_bytes() instead.
 */
YY_BUFFER_STATE mcxx_scan_string (yyconst char * yystr )
{
    
	return mcxx_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to mcxxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mcxx_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mcxxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mcxx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mcxx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mcxx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mcxxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		mcxxtext[mcxxleng] = (yy_hold_char); \
		(yy_c_buf_p) = mcxxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		mcxxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int mcxxget_lineno  (void)
{
        
    return mcxxlineno;
}

/** Get the input stream.
 * 
 */
FILE *mcxxget_in  (void)
{
        return mcxxin;
}

/** Get the output stream.
 * 
 */
FILE *mcxxget_out  (void)
{
        return mcxxout;
}

/** Get the length of the current token.
 * 
 */
int mcxxget_leng  (void)
{
        return mcxxleng;
}

/** Get the current token.
 * 
 */

char *mcxxget_text  (void)
{
        return mcxxtext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void mcxxset_lineno (int  line_number )
{
    
    mcxxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see mcxx_switch_to_buffer
 */
void mcxxset_in (FILE *  in_str )
{
        mcxxin = in_str ;
}

void mcxxset_out (FILE *  out_str )
{
        mcxxout = out_str ;
}

int mcxxget_debug  (void)
{
        return mcxx_flex_debug;
}

void mcxxset_debug (int  bdebug )
{
        mcxx_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mcxxlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    mcxxin = stdin;
    mcxxout = stdout;
#else
    mcxxin = (FILE *) 0;
    mcxxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mcxxlex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* mcxxlex_destroy is for both reentrant and non-reentrant scanners. */
int mcxxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mcxx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mcxxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	mcxxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    mcxxfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mcxxlex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mcxxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *mcxxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mcxxfree (void * ptr )
{
	free( (char *) ptr );	/* see mcxxrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 1223 "cxx03.l"



static int mcxxwrap(void)
{
    return 1;
}


#define FLEX_LVAL mcxxlval





static void parse_token_text(void)
{
    FLEX_LVAL.token_atrib.token_line = scanning_now.line_number;
    FLEX_LVAL.token_atrib.token_file = uniquestr(scanning_now.current_filename);
    FLEX_LVAL.token_atrib.token_text = uniquestr(mcxxtext);
}

static void parse_token_text_str(const char* c)
{
    FLEX_LVAL.token_atrib.token_line = scanning_now.line_number;
    FLEX_LVAL.token_atrib.token_file = uniquestr(scanning_now.current_filename);
    FLEX_LVAL.token_atrib.token_text = uniquestr(c);
}



#define OPEN_FILE_FOR_SCANNING mcxx_open_file_for_scanning
#define PREPARE_STRING_FOR_SCANNING mcxx_prepare_string_for_scanning
#define TL_SOURCE_STRING mcxx_tl_source_string







char* TL_SOURCE_STRING = "(tl-source-string)";

int PREPARE_STRING_FOR_SCANNING(const char* str)
{
    static int num_string = 0;
	DEBUG_CODE()
	{
		fprintf(stderr, "Going to parse string '%s'\n", str);
	}
	memset(&scanning_now, 0, sizeof(scanning_now));
	scanning_now.line_number = 1;

	const char* current_filename = CURRENT_COMPILED_FILE->input_filename;

    char c[256];
    sprintf(c, "%s%s-%d", TL_SOURCE_STRING, current_filename, num_string);
    c[255] = '\0';
    scanning_now.filename = uniquestr(c);

    scanning_now.current_filename = scanning_now.filename;

    num_string++;

	scanning_now.scanning_buffer = mcxx_scan_string(str);

	// mcxx_flush_buffer(YY_CURRENT_BUFFER);
	mcxx_switch_to_buffer(scanning_now.scanning_buffer);

	return 0;
}

int OPEN_FILE_FOR_SCANNING(const char* scanned_filename, const char* input_filename)
{
	FILE* file;

	file = fopen(scanned_filename, "r");

	if (file == NULL)
	{
		running_error("error: cannot open file '%s' (%s)", scanned_filename, strerror(errno));
	}

	memset(&scanning_now, 0, sizeof(scanning_now));
	scanning_now.filename = uniquestr(scanned_filename);
	scanning_now.file_descriptor = file;
	scanning_now.line_number = 1;

	main_input_filename = uniquestr(input_filename);
    scanning_now.current_filename = main_input_filename;

	scanning_now.scanning_buffer = mcxx_create_buffer(file,YY_BUF_SIZE);

	// mcxx_flush_buffer(YY_CURRENT_BUFFER);
	mcxx_switch_to_buffer(scanning_now.scanning_buffer);

	return 0;
}

























































































static char* _verbatim_buffer = NULL;
static int _verbatim_buffer_length = 0;
static int _verbatim_buffer_capacity = 0;

#define BUFF_SIZE 512

static void verbatim_buffer_append(const char* c)
{
    const char* p = c;

    // This may be regarded a bit inefficient but it is safer this way
    while (*p != '\0')
    {
        ERROR_CONDITION((_verbatim_buffer_length > _verbatim_buffer_capacity), 
                "Verbatim buffer overflow", 0);

        if (_verbatim_buffer_length == _verbatim_buffer_capacity)
        {
            // Enlarge verbatim buffer
            _verbatim_buffer_capacity += BUFF_SIZE;
            _verbatim_buffer = realloc(_verbatim_buffer, sizeof(char) * _verbatim_buffer_capacity);
            int i;
            for (i = _verbatim_buffer_length; i < _verbatim_buffer_capacity; i++)
            {
                _verbatim_buffer[i] = '\0';
            }
        }

        ERROR_CONDITION(!(_verbatim_buffer_length < _verbatim_buffer_capacity),
                "Wrong logic in verbatim buffer handling", 0);

        _verbatim_buffer[_verbatim_buffer_length] = *p;
        _verbatim_buffer_length++;

        p++;
    }
}

static void verbatim_buffer_free(void)
{
    free(_verbatim_buffer);
    _verbatim_buffer = NULL;
    _verbatim_buffer_length = 0;
    _verbatim_buffer_capacity = 0;
}

static const char* verbatim_buffer_get(void)
{
    return _verbatim_buffer;
}

// I hate that this is not C90
static char is_blank(char c)
{
    return (c == ' ') || (c == '\t');
}

static int compute_length_match(const char* lexed_directive,
        const char* available_directive,
        const char **discard_source)
{
    int num_matches = 0;
    {
    char* lexed = strdup(lexed_directive);
    char* available = strdup(available_directive);

    char *next_lexed_info = NULL;
    char *next_lexed = strtok_r(lexed, " ", &next_lexed_info);
    char *next_available_info = NULL;
    char *next_available = strtok_r(available, "|", &next_available_info);

    while (next_lexed != NULL
            && next_available != NULL)
    {
        if (strcmp(next_lexed, next_available) == 0)
        {
            num_matches++;
            next_lexed = strtok_r(NULL, " ", &next_lexed_info);
            next_available = strtok_r(NULL, "|", &next_available_info);
        }
        else
        {
            // Failing one match is enough to discard all of it so we favour
            // the longest match and discard all partial matches
            num_matches = 0;
            break;
        }
    }

    free(available);
    free(lexed);
    }

    // Compute the length of the discards
    const char* p = lexed_directive;

    *discard_source = NULL;
    if (num_matches != 0)
    {
        ERROR_CONDITION((*p == ' ') || (*p == '\t'), 
                "Invalid lexing, there should not be a leading blank", 0);

        // Skip first match
        while (*p != '\0' 
                && !is_blank(*p))
        {
            p++;
        }

        int n = num_matches - 1;
        while ((n > 0)
                && (*p != '\0'))
        {
            // Now advance blanks
            while ((*p != '\0')
                    && is_blank(*p))
            {
                p++;
            }
            // And now, non-blanks
            while ((*p != '\0')
                    && !is_blank(*p))
            {
                p++;
            }
            n--;
        }

        if (*p != '\0')
        {
            *discard_source = p;
        }
    }

    return num_matches;
}

static const char* return_pragma_prefix_longest_match_inner(pragma_directive_set_t* pragma_directive_set,
        const char* lexed_directive,
        const char **discard_source,
        pragma_directive_kind_t* directive_kind)
{
    const char* longest_match_so_far = NULL;
    int length_match = 0;

    int j;
    for (j = 0; j < pragma_directive_set->num_directives; j++)
    {
        const char * current_discard_source = NULL;

        int current_match = compute_length_match(lexed_directive, pragma_directive_set->directive_names[j], 
                &current_discard_source);

        if (current_match > length_match)
        {
            length_match = current_match;
            longest_match_so_far = pragma_directive_set->directive_names[j];
            *discard_source = current_discard_source;
            *directive_kind = pragma_directive_set->directive_kinds[j];
        }
    }

    return longest_match_so_far;
}

static const char* return_pragma_prefix_longest_match(const char* prefix, 
        const char* lexed_directive,
        pragma_directive_kind_t* kind)
{
    const char* longest_match = NULL;
    const char* discard_source = NULL;

    int i;
    for (i = 0; i < CURRENT_CONFIGURATION->num_pragma_custom_prefix; i++)
    {
        if (strcmp(CURRENT_CONFIGURATION->pragma_custom_prefix[i], prefix) == 0)
        {
            pragma_directive_set_t* pragma_directive_set = CURRENT_CONFIGURATION->pragma_custom_prefix_info[i];
            longest_match = return_pragma_prefix_longest_match_inner(pragma_directive_set, lexed_directive, 
                    &discard_source, kind);
        }
    }

    if (discard_source != NULL
            && strlen(discard_source) > 0)
    {
        // Discard the characters "too much lexed"
        const char* end = discard_source;

        while (*end != '\0')
            end++;

        end--;

        while (end != discard_source)
        {
            unput(*end);
            end--;
        }
    }

    return longest_match;
}

static int lookup_keyword_in_table(lexer_keyword_t *keyword_table, const char* keyword, char predicate)
{
    if (!predicate)
    {
        parse_token_text();
        return IDENTIFIER;
    }

    int i = 0;
    while (keyword_table[i].keyword != NULL)
    {
        if (strcmp(keyword_table[i].keyword, keyword) == 0)
        {
            parse_token_text();
            return keyword_table[i].token;
        }
        i++;
    }

    internal_error("%s:%d: error: unhandled lookup token '%s'", 
            scanning_now.filename,
            scanning_now.line_number,
            keyword);
}

// Shut up the compiler
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    UNUSED_PARAMETER static int yyinput (void);
#else
    UNUSED_PARAMETER static int input  (void);
#endif
#endif


/*--------------------------------------------------------------------
  (C) Copyright 2006-2011 Barcelona Supercomputing Center 
                          Centro Nacional de Supercomputacion
  
  This file is part of Mercurium C/C++ source-to-source compiler.
  
  See AUTHORS file in the top level directory for information 
  regarding developers and contributors.
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 3 of the License, or (at your option) any later version.
  
  Mercurium C/C++ source-to-source compiler is distributed in the hope
  that it will be useful, but WITHOUT ANY WARRANTY; without even the
  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the GNU Lesser General Public License for more
  details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with Mercurium C/C++ source-to-source compiler; if
  not, write to the Free Software Foundation, Inc., 675 Mass Ave,
  Cambridge, MA 02139, USA.
--------------------------------------------------------------------*/

%{
#include <stdlib.h>
#include <string.h>
#include "cxx-driver.h"
#include "cxx-utils.h"

#define DEBUG_OPTION_REF(x) (offsetof(struct debug_options_tag, x))
%}

struct debug_flags_list_t;
%%
"abort_on_ice", DEBUG_OPTION_REF(abort_on_ice), "When an error condition is detected, compiler will raise SIGABRT signal. This is useful for debugging"
"print_scope", DEBUG_OPTION_REF(print_scope), "Prints scope of the translation unit"
"enable_debug_code", DEBUG_OPTION_REF(enable_debug_code), "Enable debug code, in general these are debug messages"
"debug_lexer", DEBUG_OPTION_REF(debug_lexer), "Enables lexer debug"
"debug_parser", DEBUG_OPTION_REF(debug_parser), "Enables parser debug"
"print_ast", DEBUG_OPTION_REF(print_ast_graphviz), "Prints ast in graphviz format (alias for 'print_ast_graphviz')"
"print_ast_graphviz", DEBUG_OPTION_REF(print_ast_graphviz), "Prints ast in graphviz format"
"print_ast_html", DEBUG_OPTION_REF(print_ast_html), "Prints ast in HTML format (requires Javascript-enabled browser)"
"memory_report", DEBUG_OPTION_REF(print_memory_report), "Prints a memory report at the end"
"memory_report_in_bytes", DEBUG_OPTION_REF(print_memory_report_in_bytes), "The memory report is written in bytes"
"debug_sizeof", DEBUG_OPTION_REF(debug_sizeof), "Enables special debug messages for sizeof"
"do_not_run_gdb", DEBUG_OPTION_REF(do_not_run_gdb), "Disables the output of a backtrace using 'gdb' debugger when a signal handler is called"
%%

static int cmpstringp(const void *p1, const void *p2)
{
    struct debug_flags_list_t** df1 = (struct debug_flags_list_t**) p1;
    struct debug_flags_list_t** df2 = (struct debug_flags_list_t**) p2;

    return strcmp((*df1)->name, (*df2)->name);
}



struct debug_flags_list_t** list_of_debug_flags(void)
{
    struct debug_flags_list_t** result = NULL;

    int i = 0;
    int j = 0;
    while (i < TOTAL_KEYWORDS)
    {
        const char* keyword = debugflags_list[j].name;

        if (keyword != NULL && *keyword != '\0')
        {
            P_LIST_ADD(result, i, &(debugflags_list[j]));
        }

        j++;
    }

    P_LIST_ADD(result, i, NULL);

    qsort(result, i-1, sizeof(struct debug_flags_list_t *), cmpstringp);

    return result;
}

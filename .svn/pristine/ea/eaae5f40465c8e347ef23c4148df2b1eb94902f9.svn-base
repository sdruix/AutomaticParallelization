const char *__nanos_family __attribute__((weak))  = "trunk";
int __nanos_version __attribute__((weak))  = 4203;
int __mcc_trunk __attribute__((weak))  = 4203;
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
__extension__
typedef long long int int64_t;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
__extension__
typedef unsigned long long int uint64_t;
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
__extension__
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
__extension__
typedef unsigned long long int uint_least64_t;
typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
typedef int intptr_t;
typedef unsigned int uintptr_t;
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
typedef unsigned long nth_word_t;
typedef long nth_sword_t;
typedef unsigned long nth_uword_t;
typedef unsigned short nth_half_t;
typedef short nth_shalf_t;
typedef unsigned short nth_uhalf_t;
typedef long nth_int32_t;
typedef long nth_sint32_t;
typedef unsigned long nth_uint32_t;
typedef short nth_int16_t;
typedef short nth_sint16_t;
typedef unsigned short nth_uint16_t;
typedef char nth_byte_t;
typedef char nth_sbyte_t;
typedef unsigned char nth_ubyte_t;
typedef char nth_char_t;
typedef char nth_schar_t;
typedef unsigned char nth_uchar_t;
void nth_qt_start(void);
typedef char l1cacheline[0x40];
typedef char l2cacheline[0X00];
typedef char l3cacheline[0X00];
typedef struct nth_queue_t
{
        struct nth_queue_t *next;
        void *addr;
} nth_queue_t;
void nth_queue_init(nth_queue_t **q);
void nth_queue_put(nth_queue_t **q, void *addr);
nth_word_t nth_queue_get(nth_queue_t **q, void **addr);
typedef volatile nth_word_t nth_spin_t;
void nth_spin_init(nth_spin_t *spin_var);
void nth_spin_lock(nth_spin_t *spin_var);
nth_word_t nth_spin_try_lock(nth_spin_t *spin_var);
void nth_spin_unlock(nth_spin_t *spin_var);
typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;
typedef struct nth_qt_t
{
        nth_byte_t dummy;
} nth_qt_t;
typedef void *(nth_qt_userf_t)(nth_word_t arg0, ...);
typedef void (nth_qt_cleanup_t)(void *pt);
typedef void *(nth_qt_helper_t)(nth_qt_t *old, void *a0, void *a1);
typedef void *(nth_qt_block_t)(nth_qt_helper_t *helper, void *a0, void *a1, nth_qt_t *newthread);
void nth_qt_null(void);
void nth_qt_error(void);
nth_qt_t *nth_qt_args(nth_qt_t *sp, nth_word_t nbytes, va_list vargs, void *pt, nth_qt_userf_t *userf, nth_qt_cleanup_t *cleanup);
typedef enum 
{
    NTH_CI_NONE = 0, 
    NTH_CI_REFS = 1, 
    NTH_CI_VALS = 2, 
    NTH_CI_ALL = 3
} nth_ci_t;
nth_qt_t *nth_qt_args_va(nth_qt_t *sp, nth_ci_t ci, void **sfl[], nth_word_t nar, nth_word_t nav, va_list vargs, void *pt, nth_qt_userf_t userf, nth_qt_cleanup_t *cleanup);
void *nth_qt_abort(nth_qt_helper_t *h, void *a0, void *a1, nth_qt_t *newthread);
void *nth_qt_block(nth_qt_helper_t *h, void *a0, void *a1, nth_qt_t *newthread);
void *nth_qt_blocki(nth_qt_helper_t *h, void *a0, void *a1, nth_qt_t *newthread);
void nth_qt_start(void);
struct nth_desc_t;
struct nth_player_t;
typedef struct 
{
        struct nth_desc_t *first;
        struct nth_desc_t *last;
        nth_word_t nths;
} nth_desc_dlist_t;
typedef struct 
{
        struct nth_desc_t *first;
        struct nth_desc_t *last;
        nth_word_t nths;
        nth_spin_t mutex;
} nth_desc_edlist_t;
typedef struct 
{
        struct nth_desc_t *first;
        struct nth_desc_t *last;
        nth_word_t nths;
        nth_spin_t mutex;
} nth_desc_eslist_t;
typedef nth_desc_edlist_t nth_desc_q_t;
void nth_desc_eslist_init(nth_desc_eslist_t *l);
void nth_desc_eslist_push_front(nth_desc_eslist_t *l, struct nth_desc_t *node);
void nth_desc_eslist_push_back(nth_desc_eslist_t *l, struct nth_desc_t *node);
struct nth_desc_t *nth_desc_eslist_pop_front(nth_desc_eslist_t *l);
struct nth_desc_t *nth_desc_eslist_pop_back(nth_desc_eslist_t *l);
void nth_desc_dlist_init(nth_desc_dlist_t *l);
void nth_desc_dlist_push_front(nth_desc_dlist_t *l, struct nth_desc_t *node);
void nth_desc_dlist_push_back(nth_desc_dlist_t *l, struct nth_desc_t *node);
struct nth_desc_t *nth_desc_dlist_pop_front(nth_desc_dlist_t *l);
struct nth_desc_t *nth_desc_dlist_pop_back(nth_desc_dlist_t *l);
struct nth_desc_t *nth_desc_dlist_remove(struct nth_desc_t *node);
void nth_desc_edlist_init(nth_desc_edlist_t *l);
void nth_desc_edlist_push_front(nth_desc_edlist_t *l, struct nth_desc_t *node);
void nth_desc_edlist_push_back(nth_desc_edlist_t *l, struct nth_desc_t *node);
struct nth_desc_t *nth_desc_edlist_pop_front(nth_desc_edlist_t *l);
struct nth_desc_t *nth_desc_edlist_pop_back(nth_desc_edlist_t *l);
struct nth_desc_t *nth_desc_edlist_remove(struct nth_desc_t *node, nth_desc_edlist_t *l);
struct nth_desc_t *nth_desc_edlist_get_front(nth_desc_edlist_t *l, int state, struct nth_desc_t *from);
struct nth_desc_t *nth_desc_edlist_get_back(nth_desc_edlist_t *l, int state, struct nth_desc_t *from);
typedef uint64_t nth_time_t;
static inline nth_time_t get_hwtime()
{
    uint32_t lo, hi;
    __asm__ __volatile__("rdtsc": "=a" (lo), "=d" (hi): );
    return (((uint64_t) hi) << 32) | lo;
}
typedef struct 
{
        union 
        {
                struct 
                {
                        int active;
                        nth_time_t partial_time;
                        nth_time_t level_time;
                        nth_time_t total_time;
                        int estimate;
                } d;
                l2cacheline dummy[3];
        } p;
        union 
        {
                struct 
                {
                        nth_spin_t lock;
                        nth_time_t tree_time;
                } d;
                l2cacheline dummy;
        } s;
} nth_profile_data_t;
void nth_init_profile(nth_profile_data_t *);
struct nth_task_ctx_t;
struct nth_desc_t;
void profile_init();
void profile_cleanup();
void profile_activate(char *mode);
int profile_exectime_start(struct nth_task_ctx_t *desc);
int profile_exectime_stop(struct nth_task_ctx_t *desc);
void profile_exectime_sample(struct nth_task_ctx_t *desc);
void profile_task_finished(struct nth_task_ctx_t *desc);
void profile_task_enter_level(struct nth_task_ctx_t *desc);
void profile_task_exit_level(struct nth_task_ctx_t *desc);
void profile_estime_task_size(int level, nth_time_t *);
int profile_estimate_success_rate(int level);
typedef void (*profile_level_hook)(int level);
void profile_set_close_level_hook(profile_level_hook hook);
typedef struct nth_instrumentation_ctx nth_instrumentation_ctx;
struct nth_instrumentation_ctx
{
        struct nth_instrumentation_ctx *parent;
        int ufunction_value;
};
void nth_instrument_push_ctx(nth_instrumentation_ctx *ctx, char *file, int line, char *name);
void nth_instrument_pop_ctx();
struct nth_indep;
struct nth_desc_t;
struct nth_task_ctx_t;
struct nth_taskdeps;
typedef enum 
{
    NTH_IN_DEP = 1, 
    NTH_OUT_DEP = 2, 
    NTH_INOUT_DEP = 3
} nth_dep_kind_t;
struct nth_datadep
{
        nth_dep_kind_t kind;
        void *addr;
        intptr_t adjustment;
        int size;
        void **data_ptr;
        volatile int shadowed;
        volatile int ready;
        int allocated : 1;
        struct nth_task_ctx_t *task;
        struct nth_datadep *connected_to;
        struct nth_datadep *next_in_scope;
        struct nth_datadep *prev_in_scope;
        struct nth_datadep *next_in_task;
        struct nth_datadep *first_connect;
        struct nth_datadep *next_in_connlist;
        struct nth_taskdeps *scope;
        nth_spin_t lock;
};
typedef struct nth_datadep nth_datadep_t;
typedef struct nth_datadep nth_indep_t;
typedef struct nth_datadep nth_outdep_t;
struct nth_taskdeps
{
        nth_spin_t lock;
        nth_datadep_t *scope;
        nth_datadep_t *first_dep;
};
typedef struct nth_taskdeps nth_taskdeps_t;
void nth_task_deps_init(nth_taskdeps_t *deps);
nth_outdep_t *nth_find_output_dep_in_scope(struct nth_task_ctx_t *ctx, void *addr);
nth_outdep_t *nth_add_output_to_task(struct nth_task_ctx_t *scope, struct nth_task_ctx_t *task, nth_outdep_t *outdep, void *addr, int size, intptr_t adj, void **data_ptr);
nth_indep_t *nth_add_input_to_task(struct nth_task_ctx_t *scope, struct nth_task_ctx_t *task, nth_indep_t *indep, nth_outdep_t *connect, void *addr, int size, intptr_t adj, void **data_ptr);
void nth_shadow_output_dep(struct nth_task_ctx_t *scope, void *addr);
void nth_satisfy_input_dep(struct nth_task_ctx_t *scope, struct nth_task_ctx_t *task, nth_indep_t *indep, nth_outdep_t *connect, void *addr, int size, intptr_t adj);
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
__extension__
typedef signed long long int __int64_t;
__extension__
typedef unsigned long long int __uint64_t;
__extension__
typedef long long int __quad_t;
__extension__
typedef unsigned long long int __u_quad_t;
__extension__
typedef __u_quad_t __dev_t;
__extension__
typedef unsigned int __uid_t;
__extension__
typedef unsigned int __gid_t;
__extension__
typedef unsigned long int __ino_t;
__extension__
typedef __u_quad_t __ino64_t;
__extension__
typedef unsigned int __mode_t;
__extension__
typedef unsigned int __nlink_t;
__extension__
typedef long int __off_t;
__extension__
typedef __quad_t __off64_t;
__extension__
typedef int __pid_t;
__extension__
typedef struct 
{
        int __val[2];
} __fsid_t;
__extension__
typedef long int __clock_t;
__extension__
typedef unsigned long int __rlim_t;
__extension__
typedef __u_quad_t __rlim64_t;
__extension__
typedef unsigned int __id_t;
__extension__
typedef long int __time_t;
__extension__
typedef unsigned int __useconds_t;
__extension__
typedef long int __suseconds_t;
__extension__
typedef int __daddr_t;
__extension__
typedef long int __swblk_t;
__extension__
typedef int __key_t;
__extension__
typedef int __clockid_t;
__extension__
typedef void *__timer_t;
__extension__
typedef long int __blksize_t;
__extension__
typedef long int __blkcnt_t;
__extension__
typedef __quad_t __blkcnt64_t;
__extension__
typedef unsigned long int __fsblkcnt_t;
__extension__
typedef __u_quad_t __fsblkcnt64_t;
__extension__
typedef unsigned long int __fsfilcnt_t;
__extension__
typedef __u_quad_t __fsfilcnt64_t;
__extension__
typedef int __ssize_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
__extension__
typedef int __intptr_t;
__extension__
typedef unsigned int __socklen_t;
typedef unsigned int size_t;
typedef __time_t time_t;
struct timespec
{
        __time_t tv_sec;
        long int tv_nsec;
};
typedef __pid_t pid_t;
struct sched_param
{
        int __sched_priority;
};
extern int clone(int (*__fn)(void *__arg), void *__child_stack, int __flags, void *__arg, ...) __attribute__((__nothrow__));
extern int unshare(int __flags) __attribute__((__nothrow__));
extern int sched_getcpu(void) __attribute__((__nothrow__));
struct __sched_param
{
        int __sched_priority;
};
typedef unsigned long int __cpu_mask;
typedef struct 
{
        __cpu_mask __bits[1024 / (8 * sizeof(__cpu_mask))];
} cpu_set_t;
extern int __sched_cpucount(size_t __setsize, const cpu_set_t *__setp) __attribute__((__nothrow__));
extern cpu_set_t *__sched_cpualloc(size_t __count) __attribute__((__nothrow__));
extern void __sched_cpufree(cpu_set_t *__set) __attribute__((__nothrow__));
extern int sched_setparam(__pid_t __pid, __const struct sched_param *__param) __attribute__((__nothrow__));
extern int sched_getparam(__pid_t __pid, struct sched_param *__param) __attribute__((__nothrow__));
extern int sched_setscheduler(__pid_t __pid, int __policy, __const struct sched_param *__param) __attribute__((__nothrow__));
extern int sched_getscheduler(__pid_t __pid) __attribute__((__nothrow__));
extern int sched_yield(void) __attribute__((__nothrow__));
extern int sched_get_priority_max(int __algorithm) __attribute__((__nothrow__));
extern int sched_get_priority_min(int __algorithm) __attribute__((__nothrow__));
extern int sched_rr_get_interval(__pid_t __pid, struct timespec *__t) __attribute__((__nothrow__));
typedef __clock_t clock_t;
typedef __clockid_t clockid_t;
typedef __timer_t timer_t;
struct tm
{
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        long int tm_gmtoff;
        __const char *tm_zone;
};
struct itimerspec
{
        struct timespec it_interval;
        struct timespec it_value;
};
struct sigevent;
extern clock_t clock(void) __attribute__((__nothrow__));
extern time_t time(time_t *__timer) __attribute__((__nothrow__));
extern double difftime(time_t __time1, time_t __time0) __attribute__((__nothrow__)) __attribute__((__const__));
extern time_t mktime(struct tm *__tp) __attribute__((__nothrow__));
extern size_t strftime(char *__restrict __s, size_t __maxsize, __const char *__restrict __format, __const struct tm *__restrict __tp) __attribute__((__nothrow__));
typedef struct __locale_struct
{
        struct __locale_data *__locales[13];
        const unsigned short int *__ctype_b;
        const int *__ctype_tolower;
        const int *__ctype_toupper;
        const char *__names[13];
} *__locale_t;
typedef __locale_t locale_t;
extern size_t strftime_l(char *__restrict __s, size_t __maxsize, __const char *__restrict __format, __const struct tm *__restrict __tp, __locale_t __loc) __attribute__((__nothrow__));
extern struct tm *gmtime(__const time_t *__timer) __attribute__((__nothrow__));
extern struct tm *localtime(__const time_t *__timer) __attribute__((__nothrow__));
extern struct tm *gmtime_r(__const time_t *__restrict __timer, struct tm *__restrict __tp) __attribute__((__nothrow__));
extern struct tm *localtime_r(__const time_t *__restrict __timer, struct tm *__restrict __tp) __attribute__((__nothrow__));
extern char *asctime(__const struct tm *__tp) __attribute__((__nothrow__));
extern char *ctime(__const time_t *__timer) __attribute__((__nothrow__));
extern char *asctime_r(__const struct tm *__restrict __tp, char *__restrict __buf) __attribute__((__nothrow__));
extern char *ctime_r(__const time_t *__restrict __timer, char *__restrict __buf) __attribute__((__nothrow__));
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;
extern char *tzname[2];
extern void tzset(void) __attribute__((__nothrow__));
extern int daylight;
extern long int timezone;
extern int stime(__const time_t *__when) __attribute__((__nothrow__));
extern time_t timegm(struct tm *__tp) __attribute__((__nothrow__));
extern time_t timelocal(struct tm *__tp) __attribute__((__nothrow__));
extern int dysize(int __year) __attribute__((__nothrow__)) __attribute__((__const__));
extern int nanosleep(__const struct timespec *__requested_time, struct timespec *__remaining);
extern int clock_getres(clockid_t __clock_id, struct timespec *__res) __attribute__((__nothrow__));
extern int clock_gettime(clockid_t __clock_id, struct timespec *__tp) __attribute__((__nothrow__));
extern int clock_settime(clockid_t __clock_id, __const struct timespec *__tp) __attribute__((__nothrow__));
extern int clock_nanosleep(clockid_t __clock_id, int __flags, __const struct timespec *__req, struct timespec *__rem);
extern int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id) __attribute__((__nothrow__));
extern int timer_create(clockid_t __clock_id, struct sigevent *__restrict __evp, timer_t *__restrict __timerid) __attribute__((__nothrow__));
extern int timer_delete(timer_t __timerid) __attribute__((__nothrow__));
extern int timer_settime(timer_t __timerid, int __flags, __const struct itimerspec *__restrict __value, struct itimerspec *__restrict __ovalue) __attribute__((__nothrow__));
extern int timer_gettime(timer_t __timerid, struct itimerspec *__value) __attribute__((__nothrow__));
extern int timer_getoverrun(timer_t __timerid) __attribute__((__nothrow__));
typedef unsigned long int pthread_t;
typedef union 
{
        char __size[36];
        long int __align;
} pthread_attr_t;
typedef struct __pthread_internal_slist
{
        struct __pthread_internal_slist *__next;
} __pthread_slist_t;
typedef union 
{
        struct __pthread_mutex_s
        {
                int __lock;
                unsigned int __count;
                int __owner;
                int __kind;
                unsigned int __nusers;
                __extension__
                union 
                {
                        int __spins;
                        __pthread_slist_t __list;
                };
        } __data;
        char __size[24];
        long int __align;
} pthread_mutex_t;
typedef union 
{
        char __size[4];
        int __align;
} pthread_mutexattr_t;
typedef union 
{
        struct 
        {
                int __lock;
                unsigned int __futex;
                __extension__
                unsigned long long int __total_seq;
                __extension__
                unsigned long long int __wakeup_seq;
                __extension__
                unsigned long long int __woken_seq;
                void *__mutex;
                unsigned int __nwaiters;
                unsigned int __broadcast_seq;
        } __data;
        char __size[48];
        __extension__
        long long int __align;
} pthread_cond_t;
typedef union 
{
        char __size[4];
        int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union 
{
        struct 
        {
                int __lock;
                unsigned int __nr_readers;
                unsigned int __readers_wakeup;
                unsigned int __writer_wakeup;
                unsigned int __nr_readers_queued;
                unsigned int __nr_writers_queued;
                unsigned char __flags;
                unsigned char __shared;
                unsigned char __pad1;
                unsigned char __pad2;
                int __writer;
        } __data;
        char __size[32];
        long int __align;
} pthread_rwlock_t;
typedef union 
{
        char __size[8];
        long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union 
{
        char __size[20];
        long int __align;
} pthread_barrier_t;
typedef union 
{
        char __size[4];
        int __align;
} pthread_barrierattr_t;
typedef int __jmp_buf[6];
enum 
{
    PTHREAD_CREATE_JOINABLE, 
    PTHREAD_CREATE_DETACHED
};
enum 
{
    PTHREAD_MUTEX_TIMED_NP, 
    PTHREAD_MUTEX_RECURSIVE_NP, 
    PTHREAD_MUTEX_ERRORCHECK_NP, 
    PTHREAD_MUTEX_ADAPTIVE_NP, 
    PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
    PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP, 
    PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP, 
    PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL
};
enum 
{
    PTHREAD_MUTEX_STALLED, 
    PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED, 
    PTHREAD_MUTEX_ROBUST, 
    PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};
enum 
{
    PTHREAD_RWLOCK_PREFER_READER_NP, 
    PTHREAD_RWLOCK_PREFER_WRITER_NP, 
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
    PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
enum 
{
    PTHREAD_INHERIT_SCHED, 
    PTHREAD_EXPLICIT_SCHED
};
enum 
{
    PTHREAD_SCOPE_SYSTEM, 
    PTHREAD_SCOPE_PROCESS
};
enum 
{
    PTHREAD_PROCESS_PRIVATE, 
    PTHREAD_PROCESS_SHARED
};
struct _pthread_cleanup_buffer
{
        void (*__routine)(void *);
        void *__arg;
        int __canceltype;
        struct _pthread_cleanup_buffer *__prev;
};
enum 
{
    PTHREAD_CANCEL_ENABLE, 
    PTHREAD_CANCEL_DISABLE
};
enum 
{
    PTHREAD_CANCEL_DEFERRED, 
    PTHREAD_CANCEL_ASYNCHRONOUS
};
extern int pthread_create(pthread_t *__restrict __newthread, __const pthread_attr_t *__restrict __attr, void *(*__start_routine)(void *), void *__restrict __arg) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 3)));
extern void pthread_exit(void *__retval) __attribute__((__noreturn__));
extern int pthread_join(pthread_t __th, void **__thread_return);
extern int pthread_detach(pthread_t __th) __attribute__((__nothrow__));
extern pthread_t pthread_self(void) __attribute__((__nothrow__)) __attribute__((__const__));
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) __attribute__((__nothrow__));
extern int pthread_attr_init(pthread_attr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_destroy(pthread_attr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getdetachstate(__const pthread_attr_t *__attr, int *__detachstate) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setdetachstate(pthread_attr_t *__attr, int __detachstate) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getguardsize(__const pthread_attr_t *__attr, size_t *__guardsize) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setguardsize(pthread_attr_t *__attr, size_t __guardsize) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getschedparam(__const pthread_attr_t *__restrict __attr, struct sched_param *__restrict __param) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict __attr, __const struct sched_param *__restrict __param) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_getschedpolicy(__const pthread_attr_t *__restrict __attr, int *__restrict __policy) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setschedpolicy(pthread_attr_t *__attr, int __policy) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getinheritsched(__const pthread_attr_t *__restrict __attr, int *__restrict __inherit) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setinheritsched(pthread_attr_t *__attr, int __inherit) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getscope(__const pthread_attr_t *__restrict __attr, int *__restrict __scope) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setscope(pthread_attr_t *__attr, int __scope) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getstackaddr(__const pthread_attr_t *__restrict __attr, void **__restrict __stackaddr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2))) __attribute__((__deprecated__));
extern int pthread_attr_setstackaddr(pthread_attr_t *__attr, void *__stackaddr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1))) __attribute__((__deprecated__));
extern int pthread_attr_getstacksize(__const pthread_attr_t *__restrict __attr, size_t *__restrict __stacksize) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setstacksize(pthread_attr_t *__attr, size_t __stacksize) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_attr_getstack(__const pthread_attr_t *__restrict __attr, void **__restrict __stackaddr, size_t *__restrict __stacksize) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2, 3)));
extern int pthread_attr_setstack(pthread_attr_t *__attr, void *__stackaddr, size_t __stacksize) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, __const struct sched_param *__param) __attribute__((__nothrow__)) __attribute__((__nonnull__(3)));
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict __policy, struct sched_param *__restrict __param) __attribute__((__nothrow__)) __attribute__((__nonnull__(2, 3)));
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) __attribute__((__nothrow__));
extern int pthread_once(pthread_once_t *__once_control, void (*__init_routine)(void)) __attribute__((__nonnull__(1, 2)));
extern int pthread_setcancelstate(int __state, int *__oldstate);
extern int pthread_setcanceltype(int __type, int *__oldtype);
extern int pthread_cancel(pthread_t __th);
extern void pthread_testcancel(void);
typedef struct 
{
        struct 
        {
                __jmp_buf __cancel_jmp_buf;
                int __mask_was_saved;
        } __cancel_jmp_buf[1];
        void *__pad[4];
} __pthread_unwind_buf_t __attribute__((__aligned__));
struct __pthread_cleanup_frame
{
        void (*__cancel_routine)(void *);
        void *__cancel_arg;
        int __do_it;
        int __cancel_type;
};
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf) __attribute__((__regparm__(1)));
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf) __attribute__((__regparm__(1)));
extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf) __attribute__((__regparm__(1))) __attribute__((__noreturn__)) __attribute__((__weak__));
struct __jmp_buf_tag;
extern int __sigsetjmp(struct __jmp_buf_tag *__env, int __savemask) __attribute__((__nothrow__));
extern int pthread_mutex_init(pthread_mutex_t *__mutex, __const pthread_mutexattr_t *__mutexattr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutex_destroy(pthread_mutex_t *__mutex) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutex_trylock(pthread_mutex_t *__mutex) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutex_lock(pthread_mutex_t *__mutex) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict __mutex, __const struct timespec *__restrict __abstime) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutex_unlock(pthread_mutex_t *__mutex) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutex_getprioceiling(__const pthread_mutex_t *__restrict __mutex, int *__restrict __prioceiling) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict __mutex, int __prioceiling, int *__restrict __old_ceiling) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 3)));
extern int pthread_mutex_consistent(pthread_mutex_t *__mutex) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_init(pthread_mutexattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_destroy(pthread_mutexattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getpshared(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t *__attr, int __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_gettype(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __kind) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_settype(pthread_mutexattr_t *__attr, int __kind) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getprotocol(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __protocol) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t *__attr, int __protocol) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getprioceiling(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __prioceiling) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *__attr, int __prioceiling) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getrobust(__const pthread_mutexattr_t *__attr, int *__robustness) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t *__attr, int __robustness) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict __rwlock, __const pthread_rwlockattr_t *__restrict __attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_destroy(pthread_rwlock_t *__rwlock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_rdlock(pthread_rwlock_t *__rwlock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t *__rwlock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict __rwlock, __const struct timespec *__restrict __abstime) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlock_wrlock(pthread_rwlock_t *__rwlock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_trywrlock(pthread_rwlock_t *__rwlock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict __rwlock, __const struct timespec *__restrict __abstime) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlock_unlock(pthread_rwlock_t *__rwlock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_init(pthread_rwlockattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_getpshared(__const pthread_rwlockattr_t *__restrict __attr, int *__restrict __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *__attr, int __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_getkind_np(__const pthread_rwlockattr_t *__restrict __attr, int *__restrict __pref) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *__attr, int __pref) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_cond_init(pthread_cond_t *__restrict __cond, __const pthread_condattr_t *__restrict __cond_attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_cond_destroy(pthread_cond_t *__cond) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_cond_signal(pthread_cond_t *__cond) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_cond_broadcast(pthread_cond_t *__cond) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_cond_wait(pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex) __attribute__((__nonnull__(1, 2)));
extern int pthread_cond_timedwait(pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex, __const struct timespec *__restrict __abstime) __attribute__((__nonnull__(1, 2, 3)));
extern int pthread_condattr_init(pthread_condattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_condattr_destroy(pthread_condattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_condattr_getpshared(__const pthread_condattr_t *__restrict __attr, int *__restrict __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_condattr_setpshared(pthread_condattr_t *__attr, int __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_condattr_getclock(__const pthread_condattr_t *__restrict __attr, __clockid_t *__restrict __clock_id) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_condattr_setclock(pthread_condattr_t *__attr, __clockid_t __clock_id) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_spin_init(pthread_spinlock_t *__lock, int __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_spin_destroy(pthread_spinlock_t *__lock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_spin_lock(pthread_spinlock_t *__lock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_spin_trylock(pthread_spinlock_t *__lock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_spin_unlock(pthread_spinlock_t *__lock) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_barrier_init(pthread_barrier_t *__restrict __barrier, __const pthread_barrierattr_t *__restrict __attr, unsigned int __count) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_barrier_destroy(pthread_barrier_t *__barrier) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_barrier_wait(pthread_barrier_t *__barrier) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_barrierattr_init(pthread_barrierattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_barrierattr_destroy(pthread_barrierattr_t *__attr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_barrierattr_getpshared(__const pthread_barrierattr_t *__restrict __attr, int *__restrict __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t *__attr, int __pshared) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_key_create(pthread_key_t *__key, void (*__destr_function)(void *)) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int pthread_key_delete(pthread_key_t __key) __attribute__((__nothrow__));
extern void *pthread_getspecific(pthread_key_t __key) __attribute__((__nothrow__));
extern int pthread_setspecific(pthread_key_t __key, __const void *__pointer) __attribute__((__nothrow__));
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t *__clock_id) __attribute__((__nothrow__)) __attribute__((__nonnull__(2)));
extern int pthread_atfork(void (*__prepare)(void), void (*__parent)(void), void (*__child)(void)) __attribute__((__nothrow__));
enum 
{
    NTH_DTYPE_GLOBAL, 
    NTH_DTYPE_TEAM, 
    NTH_DTYPE_GLOBAL_DO_TEAM, 
    NTH_DTYPE_LOCAL, 
    NTH_DTYPE_GLOBAL_DO_LOCAL, 
    NTH_DTYPE_TEAM_DO_LOCAL
};
struct nth_loop_desc_t;
struct nth_dep_t;
struct nth_desc_t;
typedef struct nth_loop_desc_t
{
        nth_spin_t mutex;
        nth_word_t init;
        nth_word_t shared;
        nth_word_t nreached;
        nth_int32_t start;
        nth_int32_t end;
        nth_int32_t step;
        nth_int32_t chunk;
        nth_word_t schedule;
        nth_word_t ordered;
        nth_word_t nplayers;
        nth_word_t step_abs;
        nth_int32_t step_sign;
        nth_word_t chunk_real;
        nth_word_t chunk_remainder;
        nth_word_t next_iter;
} nth_loop_desc_t;
typedef struct nth_dep_t
{
        void *desc;
        void *succ;
        struct nth_dep_t *next;
        struct nth_dep_t *previous;
        nth_word_t ndep;
} nth_dep_t;
typedef struct nth_task_ctx_t
{
        struct nth_desc_t *nthread;
        struct nth_task_ctx_t *parent_ctx;
        volatile nth_word_t my_ntasks;
        int level;
        int immediate : 1;
        int final : 1;
        int created_task : 1;
        nth_time_t enter_time;
        nth_instrumentation_ctx *instrument;
        nth_profile_data_t *active_profile;
        nth_profile_data_t profile;
        nth_taskdeps_t deps;
} nth_task_ctx_t;
struct nth_player_t;
typedef struct nth_team_t
{
        union 
        {
                struct 
                {
                        volatile nth_word_t ntasks;
                        nth_desc_edlist_t queue;
                        nth_spin_t mutex;
                } d;
                l2cacheline dummy;
        } rw;
        union 
        {
                struct 
                {
                        nth_word_t nplayers;
                        nth_word_t nplayers_id;
                        struct nth_desc_t *master;
                        void *udata;
                        struct nth_player_t *inherit_from;
                } d;
                l2cacheline dummy;
        } ro;
        int sem;
        int sem_flag;
        volatile nth_word_t barrier[128];
        nth_loop_desc_t loop[128];
} nth_team_t;
typedef struct nth_player_t
{
        struct nth_player_t *parent;
        nth_byte_t id;
        nth_team_t *team;
        nth_byte_t barrier_id;
        nth_byte_t loop_id;
        nth_loop_desc_t loop_local;
        nth_loop_desc_t *loop_current;
        nth_word_t n_team_players;
} nth_player_t;
typedef struct nth_desc_t
{
        volatile nth_word_t my_ntasks;
        nth_qt_t *sp;
        nth_uint16_t type;
        int global : 1;
        int tie : 1;
        int is_task : 1;
        int tied : 1;
        volatile int idle;
        volatile nth_uint16_t state;
        nth_uint16_t idle_state;
        nth_uint16_t prio;
        nth_uint16_t vp;
        nth_word_t ndep;
        nth_word_t stack_addr;
        nth_word_t stack_size;
        struct nth_task_ctx_t *creator_ctx;
        struct nth_desc_t *creator;
        struct nth_desc_t *next;
        struct nth_desc_t *prev;
        volatile nth_desc_edlist_t *myqueue;
        struct nth_queue_t *succ;
        nth_word_t deep_level;
        nth_word_t real_level;
        nth_team_t myteam;
        nth_player_t myplayer;
        nth_player_t *player;
        int id;
        nth_task_ctx_t top_ctx;
        nth_task_ctx_t *task_ctx;
        int executed;
        nth_time_t prediction;
} nth_desc_t;
nth_desc_t *nth_desc_get(void);
nth_desc_t *nth_get_idle(nth_player_t *player);
void nth_desc_init(nth_desc_t *desc);
void nth_desc_depadd(nth_desc_t *desc, nth_word_t ndep);
nth_word_t nth_desc_depsub(nth_desc_t *desc, nth_word_t ndep);
void nth_desc_succadd(nth_desc_t *desc, nth_desc_t *succ);
void nth_desc_succflush(nth_desc_t *desc);
nth_desc_t *nth_desc_scheduler(nth_desc_t *from_desc);
void nth_desc_q_init(nth_desc_edlist_t *q);
void nth_desc_q_put(nth_desc_edlist_t *q, nth_desc_edlist_t *d);
nth_desc_t *nth_desc_q_get(nth_desc_edlist_t *q);
nth_desc_t *nth_desc_q_get_ready(nth_desc_edlist_t *q, int vp);
nth_dep_t *nth_dep_get(void);
void nth_dep_q_put(nth_dep_t *d);
nth_dep_t *nth_dep_q_get(void);
extern nth_desc_t *NTH_CREATE_NTHREAD_ERROR;
extern nth_desc_t *NTH_CANNOT_ALLOCATE_TASK;
typedef nth_word_t nth_argdesc_t;
typedef struct nth_desc_t nth_desc;
typedef nth_argdesc_t nth_argdesc;
nth_desc_t *nth_create(void *userf, int *type, int *ndep, int *vp, nth_desc_t **succ, char *file, int line, char *fname, void ***va, int *nar, int *nav, ...);
nth_desc *nthf_create_(void *userf, int *type, int *ndep, int *vp, nth_desc_t **succ, char *file, int line, char *fname, void ***va, int *nar, int *nav, ...);
nth_word_t nth_tas(nth_word_t addr, nth_word_t value);
nth_word_t nth_atm_add(nth_word_t addr, nth_word_t value);
nth_desc *nth_self(void);
int nth_cpus_actual(void);
nth_desc *nthf_create_1s_(void *userf, int *ndep, nth_desc **succ, nth_argdesc *mask_desc, int *argc, ...);
nth_desc *nthf_create_1s_vp_(void *userf, int *ndep, int *vp, nth_desc **succ, nth_argdesc *mask_desc, int *argc, ...);
nth_desc_t *nth_create_new(void *userf, int *type, int *ndep, int *vp, nth_desc_t **succ, void ***va, int *nar, int *nav, ...);
nth_desc_t *nth_create_task(void *userf, int *type, int *ndep, int *vp, nth_desc_t **succ, void ***va, int *nar, int *nav, ...);
nth_desc_t *nthf_create_task(void *userf, int *type, int *ndep, int *vp, nth_desc_t **succ, void ***va, int *nar, int *nav, ...);
nth_desc_t *nth_create_task_ci(void *userf, int *type, int *ndep, int *vp, nth_desc_t **succ, nth_ci_t ci, void ***va, int *nar, int *nav, ...);
void nth_submit(nth_desc_t *nth);
void nthf_submit(nth_desc_t *nth);
void nthf_depadd_(nth_desc **desc, int *ndep);
int nthf_depsub_(nth_desc **desc, int *ndep);
nth_desc *nthf_self_(void);
void nthf_block_(void);
int nthf_cpus_actual_(void);
void nth_depadd(nth_desc_t **desc, int *ndep);
int nth_depsub(nth_desc_t **desc, int *ndep);
void nth_push_taskgroup_scope(void);
void nthf_push_taskgroup_scope_(void);
void nth_pop_taskgroup_scope(void);
void nthf_pop_taskgroup_scope_(void);
void nth_block(void);
void nth_yield(void);
int nth_init_player(nth_player_t *player);
int nth_end_player(nth_player_t *player);
int nth_get_player_id(void);
void nth_finalize(nth_desc_t *desc);
int nth_init_team(nth_team_t *team, int team_size, nth_desc_t *master, void *data);
int nth_end_team(nth_team_t *team);
void *nth_get_team_udata(void);
int nth_enter_team(nth_team_t *team, nth_player_t *player, int sync);
int nth_leave_team(int sync);
nth_team_t *nth_current_team(void);
int nth_rejoin_team(nth_team_t *team);
int nth_get_num_team_players(void);
void nth_team_set_nplayers(int *nplayers);
void nthf_team_set_nplayers_(int *nplayers);
void nth_task_block(void);
void nthf_task_block_(void);
void nth_taskgroup_block(void);
nth_desc_t *nth_myself(void);
int nth_getncpus(void);
int nth_get_cpu_num(void);
void nth_push_task_ctx(nth_task_ctx_t *ctx);
void nth_pop_task_ctx();
void synchronize(void);
void nth_spin_lock(nth_spin_t *spin);
void nth_spin_unlock(nth_spin_t *spin);
void nthf_spin_lock_(nth_spin_t *spin);
void nthf_spin_unlock_(nth_spin_t *spin);
typedef enum 
{
    INTONE_SCH_DEFAULT = 0, 
    INTONE_SCH_STATIC = 1, 
    INTONE_SCH_DYNAMIC = 2, 
    INTONE_SCH_GUIDED = 4, 
    INTONE_SCH_RUNTIME = 8, 
    INTONE_ORDERED = 16
} intone_sched_t;
void in__tone_begin_for(int *__intone_start, int *__intone_end, int *__intone_step, int *__intone_chunk, int *__intone_schedule);
void in__tone_begin_for_(int *__intone_start, int *__intone_end, int *__intone_step, int *__intone_chunk, int *__intone_schedule);
int in__tone_next_iters(int *__intone_lstart, int *__intone_lend, int *__intone_last);
int in__tone_next_iters_(int *__intone_lstart, int *__intone_lend, int *__intone_last);
void in__tone_end_for(int *__intone_barrier_needed);
void in__tone_end_for_(int *__intone_barrier_needed);
void in__tone_barrier(void);
void in__tone_barrier_(void);
int in__tone_thread_id(void);
int in__tone_thread_id_(void);
int in__tone_is_master(void);
int in__tone_is_master_(void);
void in__tone_enter_ordered_(int *__intone_iter);
void in__tone_leave_ordered_(int *__intone_iter);
enum __rlimit_resource
{
    RLIMIT_CPU = 0, 
    RLIMIT_FSIZE = 1, 
    RLIMIT_DATA = 2, 
    RLIMIT_STACK = 3, 
    RLIMIT_CORE = 4, 
    __RLIMIT_RSS = 5, 
    RLIMIT_NOFILE = 7, 
    __RLIMIT_OFILE = RLIMIT_NOFILE, 
    RLIMIT_AS = 9, 
    __RLIMIT_NPROC = 6, 
    __RLIMIT_MEMLOCK = 8, 
    __RLIMIT_LOCKS = 10, 
    __RLIMIT_SIGPENDING = 11, 
    __RLIMIT_MSGQUEUE = 12, 
    __RLIMIT_NICE = 13, 
    __RLIMIT_RTPRIO = 14, 
    __RLIMIT_NLIMITS = 15, 
    __RLIM_NLIMITS = __RLIMIT_NLIMITS
};
typedef __rlim_t rlim_t;
struct rlimit
{
        rlim_t rlim_cur;
        rlim_t rlim_max;
};
enum __rusage_who
{
    RUSAGE_SELF = 0, 
    RUSAGE_CHILDREN = -1
};
struct timeval
{
        __time_t tv_sec;
        __suseconds_t tv_usec;
};
struct rusage
{
        struct timeval ru_utime;
        struct timeval ru_stime;
        long int ru_maxrss;
        long int ru_ixrss;
        long int ru_idrss;
        long int ru_isrss;
        long int ru_minflt;
        long int ru_majflt;
        long int ru_nswap;
        long int ru_inblock;
        long int ru_oublock;
        long int ru_msgsnd;
        long int ru_msgrcv;
        long int ru_nsignals;
        long int ru_nvcsw;
        long int ru_nivcsw;
};
enum __priority_which
{
    PRIO_PROCESS = 0, 
    PRIO_PGRP = 1, 
    PRIO_USER = 2
};
typedef __id_t id_t;
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;
extern int getrlimit(__rlimit_resource_t __resource, struct rlimit *__rlimits) __attribute__((__nothrow__));
extern int setrlimit(__rlimit_resource_t __resource, __const struct rlimit *__rlimits) __attribute__((__nothrow__));
extern int getrusage(__rusage_who_t __who, struct rusage *__usage) __attribute__((__nothrow__));
extern int getpriority(__priority_which_t __which, id_t __who) __attribute__((__nothrow__));
extern int setpriority(__priority_which_t __which, id_t __who, int __prio) __attribute__((__nothrow__));
struct tms
{
        clock_t tms_utime;
        clock_t tms_stime;
        clock_t tms_cutime;
        clock_t tms_cstime;
};
extern clock_t times(struct tms *__buffer) __attribute__((__nothrow__));
typedef struct nth_data_t
{
        int argc;
        char **argv;
        char **envp;
        int nth_arg;
        pthread_t *thread_ids;
        pthread_attr_t thread_attr;
        struct rusage r_usage_init;
        struct rusage r_usage_fini;
        struct tms tms_init;
        struct tms tms_fini;
        clock_t times_init;
        clock_t times_fini;
        clock_t times_it;
        nth_uint16_t ncpus;
        nth_uint16_t nkths;
        nth_uint16_t rusage;
        nth_uint16_t times;
        nth_uint16_t statistics;
        nth_uint16_t profile;
        nth_uint16_t help;
        nth_uint16_t version;
        nth_uint16_t setup;
        nth_uint16_t exit;
        nth_word_t main_layout_base;
        nth_word_t main_stack_size;
        nth_word_t main_guard_size;
        nth_word_t main_desc_size;
        nth_word_t stack_size;
        nth_word_t guard_size;
        nth_word_t desc_size;
        nth_word_t page_size;
        nth_word_t page_size_mask;
        nth_word_t num_nthreads;
        nth_word_t num_tasks;
        nth_word_t max_num_nthreads;
        nth_word_t max_deep_level;
        nth_word_t runtime_sched;
        nth_word_t runtime_chunk;
        nth_word_t tasks_type;
        void *mem_addr;
        nth_spin_t mem_mutex;
        nth_desc_eslist_t fdq;
        nth_desc_q_t rq;
        nth_desc_q_t *lrqs;
        nth_desc_dlist_t *plrqs;
        nth_dep_t *free_dep_q;
        nth_desc_t **kth_myself;
        nth_word_t max_tasks;
        nth_word_t total_tasks[20];
        nth_word_t total_predictions;
        nth_word_t ok_predictions;
        nth_word_t good_tasks[20];
        nth_word_t id;
} nth_data_t;
extern nth_data_t nth_data;
extern __thread nth_desc_t *NTH_MYSELF;
extern __thread nth_word_t NTH_KTH;
typedef int wchar_t;
union wait
{
        int w_status;
        struct 
        {
                unsigned int __w_termsig : 7;
                unsigned int __w_coredump : 1;
                unsigned int __w_retcode : 8;
                unsigned int : 16;
        } __wait_terminated;
        struct 
        {
                unsigned int __w_stopval : 8;
                unsigned int __w_stopsig : 8;
                unsigned int : 16;
        } __wait_stopped;
};
typedef union 
{
        union wait *__uptr;
        int *__iptr;
} __WAIT_STATUS __attribute__((__transparent_union__));
typedef struct 
{
        int quot;
        int rem;
} div_t;
typedef struct 
{
        long int quot;
        long int rem;
} ldiv_t;
__extension__
typedef struct 
{
        long long int quot;
        long long int rem;
} lldiv_t;
extern size_t __ctype_get_mb_cur_max(void) __attribute__((__nothrow__));
extern double atof(__const char *__nptr) __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__nonnull__(1)));
extern int atoi(__const char *__nptr) __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__nonnull__(1)));
extern long int atol(__const char *__nptr) __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__nonnull__(1)));
__extension__
extern long long int atoll(__const char *__nptr) __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__nonnull__(1)));
extern double strtod(__const char *__restrict __nptr, char **__restrict __endptr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern float strtof(__const char *__restrict __nptr, char **__restrict __endptr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern long double strtold(__const char *__restrict __nptr, char **__restrict __endptr) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern long int strtol(__const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern unsigned long int strtoul(__const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
__extension__
extern long long int strtoq(__const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
__extension__
extern unsigned long long int strtouq(__const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
__extension__
extern long long int strtoll(__const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
__extension__
extern unsigned long long int strtoull(__const char *__restrict __nptr, char **__restrict __endptr, int __base) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern char *l64a(long int __n) __attribute__((__nothrow__));
extern long int a64l(__const char *__s) __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__nonnull__(1)));
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
typedef __loff_t loff_t;
typedef __ino_t ino_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __off_t off_t;
typedef __ssize_t ssize_t;
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
typedef __key_t key_t;
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
typedef unsigned int u_int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int u_int16_t __attribute__((__mode__(__HI__)));
typedef unsigned int u_int32_t __attribute__((__mode__(__SI__)));
typedef unsigned int u_int64_t __attribute__((__mode__(__DI__)));
typedef int register_t __attribute__((__mode__(__word__)));
typedef int __sig_atomic_t;
typedef struct 
{
        unsigned long int __val[(1024 / (8 * sizeof(unsigned long int)))];
} __sigset_t;
typedef __sigset_t sigset_t;
typedef __suseconds_t suseconds_t;
typedef long int __fd_mask;
typedef struct 
{
        __fd_mask __fds_bits[1024 / (8 * (int) sizeof(__fd_mask))];
} fd_set;
typedef __fd_mask fd_mask;
extern int select(int __nfds, fd_set *__restrict __readfds, fd_set *__restrict __writefds, fd_set *__restrict __exceptfds, struct timeval *__restrict __timeout);
extern int pselect(int __nfds, fd_set *__restrict __readfds, fd_set *__restrict __writefds, fd_set *__restrict __exceptfds, const struct timespec *__restrict __timeout, const __sigset_t *__restrict __sigmask);
__extension__
extern unsigned int gnu_dev_major(unsigned long long int __dev) __attribute__((__nothrow__));
__extension__
extern unsigned int gnu_dev_minor(unsigned long long int __dev) __attribute__((__nothrow__));
__extension__
extern unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor) __attribute__((__nothrow__));
typedef __blksize_t blksize_t;
typedef __blkcnt_t blkcnt_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
extern long int random(void) __attribute__((__nothrow__));
extern void srandom(unsigned int __seed) __attribute__((__nothrow__));
extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen) __attribute__((__nothrow__)) __attribute__((__nonnull__(2)));
extern char *setstate(char *__statebuf) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
struct random_data
{
        int32_t *fptr;
        int32_t *rptr;
        int32_t *state;
        int rand_type;
        int rand_deg;
        int rand_sep;
        int32_t *end_ptr;
};
extern int random_r(struct random_data *__restrict __buf, int32_t *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int srandom_r(unsigned int __seed, struct random_data *__buf) __attribute__((__nothrow__)) __attribute__((__nonnull__(2)));
extern int initstate_r(unsigned int __seed, char *__restrict __statebuf, size_t __statelen, struct random_data *__restrict __buf) __attribute__((__nothrow__)) __attribute__((__nonnull__(2, 4)));
extern int setstate_r(char *__restrict __statebuf, struct random_data *__restrict __buf) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int rand(void) __attribute__((__nothrow__));
extern void srand(unsigned int __seed) __attribute__((__nothrow__));
extern int rand_r(unsigned int *__seed) __attribute__((__nothrow__));
extern double drand48(void) __attribute__((__nothrow__));
extern double erand48(unsigned short int __xsubi[3]) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern long int lrand48(void) __attribute__((__nothrow__));
extern long int nrand48(unsigned short int __xsubi[3]) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern long int mrand48(void) __attribute__((__nothrow__));
extern long int jrand48(unsigned short int __xsubi[3]) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern void srand48(long int __seedval) __attribute__((__nothrow__));
extern unsigned short int *seed48(unsigned short int __seed16v[3]) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern void lcong48(unsigned short int __param[7]) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
struct drand48_data
{
        unsigned short int __x[3];
        unsigned short int __old_x[3];
        unsigned short int __c;
        unsigned short int __init;
        unsigned long long int __a;
};
extern int drand48_r(struct drand48_data *__restrict __buffer, double *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__restrict __buffer, double *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int lrand48_r(struct drand48_data *__restrict __buffer, long int *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__restrict __buffer, long int *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int mrand48_r(struct drand48_data *__restrict __buffer, long int *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__restrict __buffer, long int *__restrict __result) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int srand48_r(long int __seedval, struct drand48_data *__buffer) __attribute__((__nothrow__)) __attribute__((__nonnull__(2)));
extern int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
extern void *malloc(size_t __size) __attribute__((__nothrow__)) __attribute__((__malloc__));
extern void *calloc(size_t __nmemb, size_t __size) __attribute__((__nothrow__)) __attribute__((__malloc__));
extern void *realloc(void *__ptr, size_t __size) __attribute__((__nothrow__)) __attribute__((__warn_unused_result__));
extern void free(void *__ptr) __attribute__((__nothrow__));
extern void cfree(void *__ptr) __attribute__((__nothrow__));
extern void *alloca(size_t __size) __attribute__((__nothrow__));
extern void *valloc(size_t __size) __attribute__((__nothrow__)) __attribute__((__malloc__));
extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern void abort(void) __attribute__((__nothrow__)) __attribute__((__noreturn__));
extern int atexit(void (*__func)(void)) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int on_exit(void (*__func)(int __status, void *__arg), void *__arg) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern void exit(int __status) __attribute__((__nothrow__)) __attribute__((__noreturn__));
extern void _Exit(int __status) __attribute__((__nothrow__)) __attribute__((__noreturn__));
extern char *getenv(__const char *__name) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern char *__secure_getenv(__const char *__name) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int putenv(char *__string) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int setenv(__const char *__name, __const char *__value, int __replace) __attribute__((__nothrow__)) __attribute__((__nonnull__(2)));
extern int unsetenv(__const char *__name) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int clearenv(void) __attribute__((__nothrow__));
extern char *mktemp(char *__template) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int mkstemp(char *__template) __attribute__((__nonnull__(1)));
extern int mkstemps(char *__template, int __suffixlen) __attribute__((__nonnull__(1)));
extern char *mkdtemp(char *__template) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int system(__const char *__command);
extern char *realpath(__const char *__restrict __name, char *__restrict __resolved) __attribute__((__nothrow__));
typedef int (*__compar_fn_t)(__const void *, __const void *);
extern void *bsearch(__const void *__key, __const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar) __attribute__((__nonnull__(1, 2, 5)));
extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar) __attribute__((__nonnull__(1, 4)));
extern int abs(int __x) __attribute__((__nothrow__)) __attribute__((__const__));
extern long int labs(long int __x) __attribute__((__nothrow__)) __attribute__((__const__));
__extension__
extern long long int llabs(long long int __x) __attribute__((__nothrow__)) __attribute__((__const__));
extern div_t div(int __numer, int __denom) __attribute__((__nothrow__)) __attribute__((__const__));
extern ldiv_t ldiv(long int __numer, long int __denom) __attribute__((__nothrow__)) __attribute__((__const__));
__extension__
extern lldiv_t lldiv(long long int __numer, long long int __denom) __attribute__((__nothrow__)) __attribute__((__const__));
extern char *ecvt(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4)));
extern char *fcvt(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4)));
extern char *gcvt(double __value, int __ndigit, char *__buf) __attribute__((__nothrow__)) __attribute__((__nonnull__(3)));
extern char *qecvt(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4)));
extern char *qfcvt(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4)));
extern char *qgcvt(long double __value, int __ndigit, char *__buf) __attribute__((__nothrow__)) __attribute__((__nonnull__(3)));
extern int ecvt_r(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, size_t __len) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4, 5)));
extern int fcvt_r(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, size_t __len) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4, 5)));
extern int qecvt_r(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, size_t __len) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4, 5)));
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, size_t __len) __attribute__((__nothrow__)) __attribute__((__nonnull__(3, 4, 5)));
extern int mblen(__const char *__s, size_t __n) __attribute__((__nothrow__));
extern int mbtowc(wchar_t *__restrict __pwc, __const char *__restrict __s, size_t __n) __attribute__((__nothrow__));
extern int wctomb(char *__s, wchar_t __wchar) __attribute__((__nothrow__));
extern size_t mbstowcs(wchar_t *__restrict __pwcs, __const char *__restrict __s, size_t __n) __attribute__((__nothrow__));
extern size_t wcstombs(char *__restrict __s, __const wchar_t *__restrict __pwcs, size_t __n) __attribute__((__nothrow__));
extern int rpmatch(__const char *__response) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
extern int getsubopt(char **__restrict __optionp, char *__const *__restrict __tokens, char **__restrict __valuep) __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2, 3)));
extern int getloadavg(double __loadavg[], int __nelem) __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef struct _IO_FILE __FILE;
typedef struct 
{
        int __count;
        union 
        {
                unsigned int __wch;
                char __wchb[4];
        } __value;
} __mbstate_t;
typedef struct 
{
        __off_t __pos;
        __mbstate_t __state;
} _G_fpos_t;
typedef struct 
{
        __off64_t __pos;
        __mbstate_t __state;
} _G_fpos64_t;
typedef int _G_int16_t __attribute__((__mode__(__HI__)));
typedef int _G_int32_t __attribute__((__mode__(__SI__)));
typedef unsigned int _G_uint16_t __attribute__((__mode__(__HI__)));
typedef unsigned int _G_uint32_t __attribute__((__mode__(__SI__)));
struct _IO_jump_t;
struct _IO_FILE;
typedef void _IO_lock_t;
struct _IO_marker
{
        struct _IO_marker *_next;
        struct _IO_FILE *_sbuf;
        int _pos;
};
enum __codecvt_result
{
    __codecvt_ok, 
    __codecvt_partial, 
    __codecvt_error, 
    __codecvt_noconv
};
struct _IO_FILE
{
        int _flags;
        char *_IO_read_ptr;
        char *_IO_read_end;
        char *_IO_read_base;
        char *_IO_write_base;
        char *_IO_write_ptr;
        char *_IO_write_end;
        char *_IO_buf_base;
        char *_IO_buf_end;
        char *_IO_save_base;
        char *_IO_backup_base;
        char *_IO_save_end;
        struct _IO_marker *_markers;
        struct _IO_FILE *_chain;
        int _fileno;
        int _flags2;
        __off_t _old_offset;
        unsigned short _cur_column;
        signed char _vtable_offset;
        char _shortbuf[1];
        _IO_lock_t *_lock;
        __off64_t _offset;
        void *__pad1;
        void *__pad2;
        void *__pad3;
        void *__pad4;
        size_t __pad5;
        int _mode;
        char _unused2[15 * sizeof(int) - 4 * sizeof(void *) - sizeof(size_t)];
};
typedef struct _IO_FILE _IO_FILE;
struct _IO_FILE_plus;
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);
typedef __ssize_t __io_write_fn(void *__cookie, __const char *__buf, size_t __n);
typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);
typedef int __io_close_fn(void *__cookie);
extern int __underflow(_IO_FILE *);
extern int __uflow(_IO_FILE *);
extern int __overflow(_IO_FILE *, int);
extern int _IO_getc(_IO_FILE *__fp);
extern int _IO_putc(int __c, _IO_FILE *__fp);
extern int _IO_feof(_IO_FILE *__fp) __attribute__((__nothrow__));
extern int _IO_ferror(_IO_FILE *__fp) __attribute__((__nothrow__));
extern int _IO_peekc_locked(_IO_FILE *__fp);
extern void _IO_flockfile(_IO_FILE *) __attribute__((__nothrow__));
extern void _IO_funlockfile(_IO_FILE *) __attribute__((__nothrow__));
extern int _IO_ftrylockfile(_IO_FILE *) __attribute__((__nothrow__));
extern int _IO_vfscanf(_IO_FILE *__restrict , const char *__restrict , __gnuc_va_list, int *__restrict );
extern int _IO_vfprintf(_IO_FILE *__restrict , const char *__restrict , __gnuc_va_list);
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
extern void _IO_free_backup_area(_IO_FILE *) __attribute__((__nothrow__));
typedef _G_fpos_t fpos_t;
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
extern int remove(__const char *__filename) __attribute__((__nothrow__));
extern int rename(__const char *__old, __const char *__new) __attribute__((__nothrow__));
extern int renameat(int __oldfd, __const char *__old, int __newfd, __const char *__new) __attribute__((__nothrow__));
extern FILE *tmpfile(void);
extern char *tmpnam(char *__s) __attribute__((__nothrow__));
extern char *tmpnam_r(char *__s) __attribute__((__nothrow__));
extern char *tempnam(__const char *__dir, __const char *__pfx) __attribute__((__nothrow__)) __attribute__((__malloc__));
extern int fclose(FILE *__stream);
extern int fflush(FILE *__stream);
extern int fflush_unlocked(FILE *__stream);
extern FILE *fopen(__const char *__restrict __filename, __const char *__restrict __modes);
extern FILE *freopen(__const char *__restrict __filename, __const char *__restrict __modes, FILE *__restrict __stream);
extern FILE *fdopen(int __fd, __const char *__modes) __attribute__((__nothrow__));
extern FILE *fmemopen(void *__s, size_t __len, __const char *__modes) __attribute__((__nothrow__));
extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc) __attribute__((__nothrow__));
extern void setbuf(FILE *__restrict __stream, char *__restrict __buf) __attribute__((__nothrow__));
extern int setvbuf(FILE *__restrict __stream, char *__restrict __buf, int __modes, size_t __n) __attribute__((__nothrow__));
extern void setbuffer(FILE *__restrict __stream, char *__restrict __buf, size_t __size) __attribute__((__nothrow__));
extern void setlinebuf(FILE *__stream) __attribute__((__nothrow__));
extern int fprintf(FILE *__restrict __stream, __const char *__restrict __format, ...);
extern int printf(__const char *__restrict __format, ...);
extern int sprintf(char *__restrict __s, __const char *__restrict __format, ...) __attribute__((__nothrow__));
extern int vfprintf(FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg);
extern int vprintf(__const char *__restrict __format, __gnuc_va_list __arg);
extern int vsprintf(char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__nothrow__));
extern int snprintf(char *__restrict __s, size_t __maxlen, __const char *__restrict __format, ...) __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 3, 4)));
extern int vsnprintf(char *__restrict __s, size_t __maxlen, __const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 3, 0)));
extern int vdprintf(int __fd, __const char *__restrict __fmt, __gnuc_va_list __arg) __attribute__((__format__(__printf__, 2, 0)));
extern int dprintf(int __fd, __const char *__restrict __fmt, ...) __attribute__((__format__(__printf__, 2, 3)));
extern int fscanf(FILE *__restrict __stream, __const char *__restrict __format, ...);
extern int scanf(__const char *__restrict __format, ...);
extern int sscanf(__const char *__restrict __s, __const char *__restrict __format, ...) __attribute__((__nothrow__));
extern int fscanf(FILE *__restrict __stream, __const char *__restrict __format, ...) __asm__ ("""__isoc99_fscanf");
extern int scanf(__const char *__restrict __format, ...) __asm__ ("""__isoc99_scanf");
extern int sscanf(__const char *__restrict __s, __const char *__restrict __format, ...) __asm__ ("""__isoc99_sscanf") __attribute__((__nothrow__));
extern int vfscanf(FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__format__(__scanf__, 2, 0)));
extern int vscanf(__const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__format__(__scanf__, 1, 0)));
extern int vsscanf(__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__nothrow__)) __attribute__((__format__(__scanf__, 2, 0)));
extern int vfscanf(FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("""__isoc99_vfscanf") __attribute__((__format__(__scanf__, 2, 0)));
extern int vscanf(__const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("""__isoc99_vscanf") __attribute__((__format__(__scanf__, 1, 0)));
extern int vsscanf(__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("""__isoc99_vsscanf") __attribute__((__nothrow__)) __attribute__((__format__(__scanf__, 2, 0)));
extern int fgetc(FILE *__stream);
extern int getc(FILE *__stream);
extern int getchar(void);
extern int getc_unlocked(FILE *__stream);
extern int getchar_unlocked(void);
extern int fgetc_unlocked(FILE *__stream);
extern int fputc(int __c, FILE *__stream);
extern int putc(int __c, FILE *__stream);
extern int putchar(int __c);
extern int fputc_unlocked(int __c, FILE *__stream);
extern int putc_unlocked(int __c, FILE *__stream);
extern int putchar_unlocked(int __c);
extern int getw(FILE *__stream);
extern int putw(int __w, FILE *__stream);
extern char *fgets(char *__restrict __s, int __n, FILE *__restrict __stream);
extern char *gets(char *__s);
extern __ssize_t __getdelim(char **__restrict __lineptr, size_t *__restrict __n, int __delimiter, FILE *__restrict __stream);
extern __ssize_t getdelim(char **__restrict __lineptr, size_t *__restrict __n, int __delimiter, FILE *__restrict __stream);
extern __ssize_t getline(char **__restrict __lineptr, size_t *__restrict __n, FILE *__restrict __stream);
extern int fputs(__const char *__restrict __s, FILE *__restrict __stream);
extern int puts(__const char *__s);
extern int ungetc(int __c, FILE *__stream);
extern size_t fread(void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream);
extern size_t fwrite(__const void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __s);
extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream);
extern size_t fwrite_unlocked(__const void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream);
extern int fseek(FILE *__stream, long int __off, int __whence);
extern long int ftell(FILE *__stream);
extern void rewind(FILE *__stream);
extern int fseeko(FILE *__stream, __off_t __off, int __whence);
extern __off_t ftello(FILE *__stream);
extern int fgetpos(FILE *__restrict __stream, fpos_t *__restrict __pos);
extern int fsetpos(FILE *__stream, __const fpos_t *__pos);
extern void clearerr(FILE *__stream) __attribute__((__nothrow__));
extern int feof(FILE *__stream) __attribute__((__nothrow__));
extern int ferror(FILE *__stream) __attribute__((__nothrow__));
extern void clearerr_unlocked(FILE *__stream) __attribute__((__nothrow__));
extern int feof_unlocked(FILE *__stream) __attribute__((__nothrow__));
extern int ferror_unlocked(FILE *__stream) __attribute__((__nothrow__));
extern void perror(__const char *__s);
extern int sys_nerr;
extern __const char *__const sys_errlist[];
extern int fileno(FILE *__stream) __attribute__((__nothrow__));
extern int fileno_unlocked(FILE *__stream) __attribute__((__nothrow__));
extern FILE *popen(__const char *__command, __const char *__modes);
extern int pclose(FILE *__stream);
extern char *ctermid(char *__s) __attribute__((__nothrow__));
extern void flockfile(FILE *__stream) __attribute__((__nothrow__));
extern int ftrylockfile(FILE *__stream) __attribute__((__nothrow__));
extern void funlockfile(FILE *__stream) __attribute__((__nothrow__));
nth_word_t nth_tas(nth_word_t addr, nth_word_t value);
typedef struct schedule_desc schedule_desc_t;
struct schedule_desc
{
        char *name;
        void (*init)(void);
        nth_desc_t *(*creation_sp)(nth_desc_t *creator, nth_desc_t *new_nth_desc);
        nth_desc_t *(*finish_sp)(nth_desc_t *desc);
        nth_desc_t *(*block_sp)(nth_desc_t *desc);
        nth_desc_t *(*yield_sp)(nth_desc_t *desc);
        nth_desc_t *(*idle_sp)(nth_desc_t *desc);
        nth_desc_t *(*wakeup_sp)(nth_desc_t *current, nth_desc_t *desc, int *requeue);
        nth_desc_t *(*generic_sp)(nth_desc_t *desc);
        void (*enqueue_desc)(nth_desc_t *desc);
        void (*parse_option)(char *opt, char *value);
        int (*num_ready)(void);
};
extern schedule_desc_t *nth_schedule;
extern schedule_desc_t default_schedule;
extern schedule_desc_t wf_schedule;
extern schedule_desc_t cilk_schedule;
extern schedule_desc_t dwf_schedule;
extern schedule_desc_t lb_schedule;
void nth_sch_switch_to(nth_desc_t *to);
void nth_sch_exit_to(nth_desc_t *to);
void nth_sch_block_on_cond(nth_uint16_t block_state, volatile nth_word_t *var, nth_word_t val);
void nth_sch_wakeup(nth_desc_t *desc);
void nth_sch_newnth(nth_desc_t *newnth);
void nth_sch_exitnth(void);
void nth_sch_yield(void);
void nth_sch_enqueue(nth_desc_t *desc);
void nth_sch_print_info(void);
void nth_sch_environment_options(void);
void nth_sch_init(void);
int nth_sch_generic_num_ready(void);
typedef enum 
{
    NTH_CUTOFF_CREATE = 0, 
    NTH_CUTOFF_IMMEDIATE, 
    NTH_CUTOFF_SERIALIZE, 
    NTH_CUTOFF_GROUPN
} nth_cutoff_res_t;
typedef struct 
{
        char *name;
        nth_cutoff_res_t (*create)(int *out1);
        void (*config)(char *value);
        void (*init)(void);
        void (*print_info)(void);
} nth_cutoff_t;
extern nth_cutoff_t *nth_curr_cutoff;
extern nth_cutoff_t nth_maxlevel_cutoff;
extern nth_cutoff_t nth_maxnths_cutoff;
extern nth_cutoff_t nth_maxtasks_cutoff;
extern nth_cutoff_t nth_null_cutoff;
extern nth_cutoff_t nth_serial_cutoff;
extern nth_cutoff_t nth_numready_cutoff;
extern nth_cutoff_t nth_idle_cutoff;
extern nth_cutoff_t lb_cutoff;
extern nth_cutoff_t sr_cutoff;
extern nth_cutoff_t nth_groupn_cutoff;
nth_cutoff_res_t nth_cutoff_create(int *out1);
void nth_cutoff_set(nth_cutoff_t *cutoff, char *config);
void nth_cuttof_print_info(void);
void nth_cutoff_init(void);
static inline int nth_sch_get_idle_kths()
{
    int i, idles = 0;
    for (i = 0;
        i < nth_data.nkths;
        i++)
    {
        if (!nth_data.kth_myself[i] || nth_data.kth_myself[i]->idle)
        {
            idles++;
        }
    }
    return idles;
}
extern nth_word_t nth_sch_num_ready[20 + 1];
static inline nth_word_t nth_sch_get_numready_level(nth_word_t level)
{
    return nth_sch_num_ready[((level) < (20) ? (level) : (20))];
}
int a;
void f(int b)
{
    int c;
    a = 3;
    b = 4;
    c = 5;
}
void main();
void _ol_0_main(void)
{
    int ba = 0;
    int bc = 2;
    int bb = 10;
}
void main()
{
#pragma hlt outline 
    {
        int ba = 0;
        int bc = 2;
        int bb = 10;
    }
    f();
}

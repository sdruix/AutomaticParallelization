
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison GLR parsers in C
   
      Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C GLR parser skeleton written by Paul Hilfinger.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0


/* Substitute the variable and function names.  */
#define yyparse mc99parse
#define yylex   mc99lex
#define yyerror mc99error
#define yylval  mc99lval
#define yychar  mc99char
#define yydebug mc99debug
#define yynerrs mc99nerrs
#define yylloc  mc99lloc

/* Copy the first part of user declarations.  */

/* Line 172 of glr.c  */
#line 27 "c99.y"

/*
   Parser of ISO/IEC 9899:1999 - C

   It parses a superset of the language.

   Must be compiled with rofi-bison-2.1. 
   Ask for it at <rferrer@ac.upc.edu>
 */

#include "c99-parser.h"
#include "cxx-ast.h"
#include "cxx-lexer.h"
#include "cxx-utils.h"

#define YYDEBUG 1
#define YYERROR_VERBOSE 1
// Sometimes we need lots of memory
#define YYMAXDEPTH (10000000)



/* Line 172 of glr.c  */
#line 90 "c99-parser.c"



#include "c99-parser-internal.h"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

/* Default (constant) value used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default value of $$ to a zeroed-out value.
   Since the default value is undefined, this behavior is
   technically correct.  */
static YYSTYPE yyval_default;

/* Copy the second part of user declarations.  */

/* Line 243 of glr.c  */
#line 64 "c99.y"

extern int yylex(void);
static AST ambiguityHandler (YYSTYPE x0, YYSTYPE x1);
void yyerror(AST* parsed_tree UNUSED_PARAMETER, const char* c);

/* Line 243 of glr.c  */
#line 485 "c99.y"

    static AST* decode_placeholder(const char *);


/* Line 243 of glr.c  */
#line 137 "c99-parser.c"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#ifndef YYFREE
# define YYFREE free
#endif
#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif

#define YYSIZEMAX ((size_t) -1)

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
#  define __attribute__(Spec) /* empty */
# endif
#endif


#ifdef __cplusplus
# define YYOPTIONAL_LOC(Name) /* empty */
#else
# define YYOPTIONAL_LOC(Name) Name __attribute__ ((__unused__))
#endif

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  305
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8564

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  164
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  184
/* YYNRULES -- Number of rules.  */
#define YYNRULES  567
/* YYNRULES -- Number of states.  */
#define YYNSTATES  967
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
#define YYMAXRHS 12
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule.  */
#define YYMAXLEFT 0

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   394

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    72,     2,     2,     2,    73,    74,     2,
      75,    76,    77,    78,    79,    80,    81,    82,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    83,    84,
      85,    86,    87,    88,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    89,     2,    90,    91,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    92,    93,    94,    95,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     6,     8,    11,    13,    15,    17,
      19,    21,    23,    25,    27,    30,    32,    34,    36,    40,
      42,    46,    49,    51,    58,    64,    66,    70,    72,    74,
      79,    86,    95,   106,   119,   120,   122,   124,   125,   127,
     131,   136,   144,   146,   148,   150,   154,   157,   160,   164,
     168,   171,   174,   176,   178,   180,   183,   187,   190,   193,
     195,   197,   201,   204,   207,   209,   211,   215,   218,   221,
     223,   225,   228,   230,   233,   235,   237,   239,   241,   243,
     245,   247,   249,   251,   253,   255,   257,   259,   261,   263,
     265,   267,   269,   271,   273,   275,   277,   279,   281,   285,
     288,   291,   293,   295,   299,   302,   305,   307,   309,   311,
     313,   318,   323,   325,   327,   329,   331,   333,   335,   337,
     339,   341,   343,   345,   348,   351,   355,   359,   361,   365,
     367,   370,   373,   376,   380,   384,   388,   393,   398,   400,
     403,   406,   410,   412,   415,   417,   420,   423,   427,   429,
     433,   434,   436,   438,   439,   441,   443,   444,   446,   448,
     453,   458,   462,   464,   468,   470,   473,   475,   477,   479,
     481,   485,   490,   495,   500,   507,   514,   518,   520,   526,
     531,   536,   540,   547,   553,   559,   564,   566,   569,   573,
     575,   577,   581,   583,   586,   588,   591,   593,   596,   600,
     603,   607,   611,   616,   619,   623,   627,   633,   639,   644,
     651,   658,   660,   662,   666,   668,   672,   674,   678,   681,
     683,   686,   690,   694,   697,   699,   703,   708,   711,   713,
     717,   720,   725,   729,   735,   738,   740,   743,   747,   750,
     754,   759,   762,   766,   769,   771,   774,   776,   781,   785,
     787,   790,   793,   797,   799,   801,   803,   806,   810,   813,
     815,   817,   820,   822,   826,   828,   831,   834,   838,   841,
     845,   850,   854,   857,   859,   861,   863,   865,   867,   869,
     871,   873,   875,   877,   881,   886,   890,   897,   900,   902,
     904,   908,   911,   913,   916,   922,   930,   932,   934,   940,
     942,   947,   954,   960,   966,   972,   980,   989,   991,   992,
     994,   995,   997,   999,  1002,  1005,  1008,  1012,  1016,  1021,
    1023,  1027,  1029,  1033,  1040,  1047,  1056,  1063,  1066,  1068,
    1070,  1072,  1074,  1079,  1083,  1088,  1092,  1096,  1099,  1102,
    1109,  1117,  1119,  1123,  1125,  1128,  1131,  1134,  1137,  1142,
    1145,  1148,  1153,  1156,  1159,  1162,  1164,  1166,  1168,  1170,
    1172,  1174,  1176,  1181,  1183,  1187,  1191,  1195,  1197,  1201,
    1205,  1207,  1211,  1215,  1217,  1221,  1225,  1229,  1233,  1235,
    1239,  1243,  1245,  1249,  1251,  1255,  1257,  1261,  1263,  1267,
    1269,  1273,  1275,  1281,  1286,  1288,  1292,  1294,  1298,  1300,
    1302,  1304,  1306,  1308,  1310,  1312,  1314,  1316,  1318,  1320,
    1322,  1324,  1326,  1328,  1330,  1332,  1334,  1336,  1338,  1340,
    1342,  1345,  1347,  1350,  1353,  1355,  1358,  1361,  1363,  1366,
    1369,  1372,  1375,  1377,  1381,  1388,  1395,  1397,  1402,  1405,
    1408,  1410,  1414,  1416,  1418,  1420,  1422,  1424,  1426,  1428,
    1431,  1435,  1439,  1443,  1447,  1454,  1456,  1460,  1467,  1468,
    1470,  1472,  1476,  1479,  1484,  1488,  1490,  1492,  1494,  1497,
    1499,  1501,  1508,  1511,  1513,  1515,  1517,  1520,  1524,  1527,
    1529,  1533,  1537,  1541,  1547,  1549,  1551,  1555,  1557,  1559,
    1561,  1563,  1565,  1569,  1571,  1573,  1575,  1577,  1579,  1581,
    1583,  1585,  1587,  1589,  1592,  1595,  1598,  1601,  1603,  1607,
    1610,  1614,  1617,  1622,  1624,  1629,  1630,  1632,  1634,  1637,
    1640,  1644,  1650,  1656,  1659,  1664,  1667,  1672,  1675,  1680,
    1682,  1684,  1686,  1689,  1691,  1693,  1695,  1698,  1701,  1705,
    1709,  1711,  1715,  1719,  1723,  1726,  1728,  1729,  1740,  1742,
    1743,  1745,  1747,  1749,  1751,  1753,  1755,  1757,  1759,  1761,
    1766,  1772,  1776,  1784,  1790,  1794,  1796,  1798
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const short int yyrhs[] =
{
     165,     0,    -1,   166,    -1,    -1,   167,    -1,   166,   167,
      -1,   168,    -1,   240,    -1,   182,    -1,   170,    -1,   183,
      -1,   170,    -1,   177,    -1,   171,    -1,   101,   168,    -1,
     293,    -1,    70,    -1,    71,    -1,   104,   172,    84,    -1,
      32,    -1,   172,    79,    32,    -1,   173,   174,    -1,   174,
      -1,   109,    75,    75,   175,    76,    76,    -1,   109,    75,
      75,    76,    76,    -1,   176,    -1,   175,    79,   176,    -1,
      32,    -1,    14,    -1,    32,    75,   273,    76,    -1,     6,
     178,    75,   294,    76,    84,    -1,     6,   178,    75,   294,
      83,   179,    76,    84,    -1,     6,   178,    75,   294,    83,
     179,    83,   179,    76,    84,    -1,     6,   178,    75,   294,
      83,   179,    83,   179,    83,   179,    76,    84,    -1,    -1,
      66,    -1,   180,    -1,    -1,   181,    -1,   180,    79,   181,
      -1,   294,    75,   289,    76,    -1,    89,    32,    90,   294,
      75,   289,    76,    -1,   294,    -1,   183,    -1,    84,    -1,
     187,   204,    84,    -1,   189,    84,    -1,   204,    84,    -1,
     185,   204,    84,    -1,   186,   196,   190,    -1,   186,   196,
      -1,   196,   190,    -1,   196,    -1,   186,    -1,   193,    -1,
     186,   193,    -1,   190,   196,   191,    -1,   190,   196,    -1,
     196,   191,    -1,   196,    -1,   191,    -1,   190,   196,   190,
      -1,   190,   196,    -1,   196,   190,    -1,   196,    -1,   190,
      -1,   190,   197,   190,    -1,   190,   197,    -1,   197,   190,
      -1,   197,    -1,   192,    -1,   190,   192,    -1,   193,    -1,
     190,   193,    -1,   193,    -1,   174,    -1,   194,    -1,   195,
      -1,    62,    -1,   219,    -1,    54,    -1,    64,    -1,    39,
      -1,    53,    -1,   105,    -1,   106,    -1,     7,    -1,    49,
      -1,    56,    -1,    24,    -1,   110,    -1,    34,    -1,   197,
      -1,   200,    -1,   105,    -1,   243,    -1,   222,    -1,   203,
      -1,   190,   196,   191,    -1,   190,   196,    -1,   196,   191,
      -1,   196,    -1,   191,    -1,   190,   196,   190,    -1,   190,
     196,    -1,   196,   190,    -1,   196,    -1,   190,    -1,   201,
      -1,   202,    -1,   107,    75,   289,    76,    -1,   107,    75,
     226,    76,    -1,    32,    -1,    12,    -1,     8,    -1,    53,
      -1,    35,    -1,    39,    -1,    54,    -1,    64,    -1,    25,
      -1,    20,    -1,    65,    -1,   245,    32,    -1,    22,    32,
      -1,   245,   173,    32,    -1,    22,   173,    32,    -1,   205,
      -1,   204,    79,   205,    -1,   207,    -1,   207,   234,    -1,
     207,   206,    -1,   207,   173,    -1,   207,   206,   173,    -1,
     207,   206,   234,    -1,   207,   173,   234,    -1,   207,   206,
     173,   234,    -1,     6,    75,   294,    76,    -1,   220,    -1,
     208,   207,    -1,   173,   220,    -1,   173,   208,   207,    -1,
      77,    -1,    77,   218,    -1,   210,    -1,   208,   209,    -1,
     173,   210,    -1,   173,   208,   209,    -1,   216,    -1,    75,
     209,    76,    -1,    -1,   212,    -1,   218,    -1,    -1,   214,
      -1,    56,    -1,    -1,    77,    -1,   288,    -1,   217,    75,
     231,    76,    -1,   217,    75,   229,    76,    -1,   217,    75,
      76,    -1,   221,    -1,    75,   217,    76,    -1,   219,    -1,
     218,   219,    -1,    14,    -1,    66,    -1,   108,    -1,   221,
      -1,   220,    75,    76,    -1,   220,    75,   229,    76,    -1,
     220,    75,   231,    76,    -1,   220,    89,   215,    90,    -1,
     220,    89,   212,   213,   215,    90,    -1,   220,    89,   214,
     211,   215,    90,    -1,    75,   207,    76,    -1,   270,    -1,
      22,    32,    92,   223,    94,    -1,    22,    92,   223,    94,
      -1,    22,    32,    92,    94,    -1,    22,    92,    94,    -1,
      22,   173,    32,    92,   223,    94,    -1,    22,   173,    92,
     223,    94,    -1,    22,   173,    32,    92,    94,    -1,    22,
     173,    92,    94,    -1,   224,    -1,   224,    79,    -1,   224,
      79,   225,    -1,   225,    -1,    32,    -1,    32,    86,   291,
      -1,   199,    -1,   198,   227,    -1,   208,    -1,   208,   227,
      -1,   228,    -1,   173,   208,    -1,   173,   208,   227,    -1,
     173,   228,    -1,    75,   227,    76,    -1,    75,   231,    76,
      -1,   228,    75,   231,    76,    -1,    75,    76,    -1,   228,
      75,    76,    -1,    89,   215,    90,    -1,    89,   212,   213,
     215,    90,    -1,    89,   214,   211,   215,    90,    -1,   228,
      89,   215,    90,    -1,   228,    89,   212,   213,   215,    90,
      -1,   228,    89,   214,   211,   215,    90,    -1,   230,    -1,
      32,    -1,   230,    79,    32,    -1,   232,    -1,   232,    79,
      61,    -1,   233,    -1,   232,    79,   233,    -1,   187,   207,
      -1,   188,    -1,   187,   227,    -1,   187,   207,   173,    -1,
     187,   227,   173,    -1,    86,   235,    -1,   288,    -1,    92,
     236,    94,    -1,    92,   236,    79,    94,    -1,    92,    94,
      -1,   235,    -1,   236,    79,   235,    -1,   237,   235,    -1,
     236,    79,   237,   235,    -1,    32,    83,   235,    -1,   236,
      79,    32,    83,   235,    -1,   238,    86,    -1,   239,    -1,
     238,   239,    -1,    89,   291,    90,    -1,    81,    32,    -1,
     187,   209,   242,    -1,   187,   209,   241,   242,    -1,   209,
     242,    -1,   209,   241,   242,    -1,   101,   240,    -1,   184,
      -1,   241,   184,    -1,   256,    -1,   244,    92,   246,    94,
      -1,   244,    92,    94,    -1,   245,    -1,   245,    32,    -1,
     245,   173,    -1,   245,   173,    32,    -1,    58,    -1,    63,
      -1,   247,    -1,   246,   247,    -1,   187,   248,    84,    -1,
     189,    84,    -1,   293,    -1,    84,    -1,   101,   247,    -1,
     249,    -1,   248,    79,   249,    -1,   207,    -1,   207,   250,
      -1,    83,   291,    -1,    32,    83,   291,    -1,   207,   173,
      -1,   207,   173,   250,    -1,    32,   173,    83,   291,    -1,
     173,    83,   291,    -1,    86,   291,    -1,   252,    -1,   258,
      -1,   259,    -1,   253,    -1,   254,    -1,   256,    -1,   261,
      -1,   263,    -1,   267,    -1,   255,    -1,    32,    83,   251,
      -1,    11,   291,    83,   251,    -1,    17,    83,   251,    -1,
      11,   291,    61,   291,    83,   251,    -1,   289,    84,    -1,
      84,    -1,   169,    -1,    92,   257,    94,    -1,    92,    94,
      -1,   251,    -1,   257,   251,    -1,    33,    75,   262,    76,
     251,    -1,    33,    75,   262,    76,   260,    21,   251,    -1,
     252,    -1,   259,    -1,    60,    75,   262,    76,   251,    -1,
     289,    -1,   198,   207,    86,   288,    -1,   198,   207,   206,
     173,    86,   288,    -1,   198,   207,   173,    86,   288,    -1,
     198,   207,   206,    86,   288,    -1,    67,    75,   262,    76,
     251,    -1,    19,   251,    67,    75,   289,    76,    84,    -1,
      28,    75,   266,   265,    84,   264,    76,   251,    -1,   289,
      -1,    -1,   262,    -1,    -1,   254,    -1,   183,    -1,    10,
      84,    -1,    15,    84,    -1,    50,    84,    -1,    50,   289,
      84,    -1,    29,    32,    84,    -1,    29,    77,   289,    84,
      -1,   292,    -1,    75,   289,    76,    -1,   270,    -1,    75,
     256,    76,    -1,    96,    75,   288,    79,   226,    76,    -1,
      97,    75,   226,    79,   269,    76,    -1,    98,    75,   288,
      79,   288,    79,   288,    76,    -1,    99,    75,   226,    79,
     226,    76,    -1,    32,   238,    -1,    32,    -1,   271,    -1,
      32,    -1,   268,    -1,   272,    89,   289,    90,    -1,   272,
      75,    76,    -1,   272,    75,   273,    76,    -1,   272,    81,
     270,    -1,   272,    48,   270,    -1,   272,    47,    -1,   272,
      40,    -1,    75,   226,    76,    92,   236,    94,    -1,    75,
     226,    76,    92,   236,    79,    94,    -1,   288,    -1,   273,
      79,   288,    -1,   272,    -1,    47,   274,    -1,    40,   274,
      -1,   275,   276,    -1,    55,   274,    -1,    55,    75,   226,
      76,    -1,   101,   276,    -1,   100,   274,    -1,   100,    75,
     226,    76,    -1,   102,   276,    -1,   103,   276,    -1,     4,
      32,    -1,    77,    -1,    74,    -1,    78,    -1,    80,    -1,
      72,    -1,    95,    -1,   274,    -1,    75,   226,    76,   276,
      -1,   276,    -1,   277,    77,   276,    -1,   277,    82,   276,
      -1,   277,    73,   276,    -1,   277,    -1,   278,    78,   277,
      -1,   278,    80,   277,    -1,   278,    -1,   279,    36,   278,
      -1,   279,    51,   278,    -1,   279,    -1,   280,    85,   279,
      -1,   280,    87,   279,    -1,   280,    30,   279,    -1,   280,
      38,   279,    -1,   280,    -1,   281,    23,   280,    -1,   281,
      43,   280,    -1,   281,    -1,   282,    74,   281,    -1,   282,
      -1,   283,    91,   282,    -1,   283,    -1,   284,    93,   283,
      -1,   284,    -1,   285,     4,   284,    -1,   285,    -1,   286,
      46,   285,    -1,   286,    -1,   286,    88,   289,    83,   288,
      -1,   286,    88,    83,   288,    -1,   287,    -1,   286,   290,
     288,    -1,   288,    -1,   289,    79,   288,    -1,    86,    -1,
      42,    -1,    18,    -1,     3,    -1,    59,    -1,    37,    -1,
      52,    -1,     5,    -1,    45,    -1,    68,    -1,    41,    -1,
     287,    -1,    16,    -1,    44,    -1,    31,    -1,    27,    -1,
      26,    -1,     9,    -1,    13,    -1,   294,    -1,    69,    -1,
      57,    -1,   294,    57,    -1,   295,    -1,   111,   289,    -1,
     113,   257,    -1,   113,    -1,   115,   246,    -1,   114,   166,
      -1,   114,    -1,   116,   226,    -1,   117,   296,    -1,   112,
     273,    -1,   118,   270,    -1,   198,    -1,   296,    79,   198,
      -1,   272,    89,   286,    83,   286,    90,    -1,   272,    89,
     286,    84,   286,    90,    -1,   274,    -1,    75,   226,    76,
     276,    -1,   298,   297,    -1,   298,   299,    -1,   299,    -1,
      89,   289,    90,    -1,   119,    -1,   303,    -1,   300,    -1,
     301,    -1,   300,    -1,   302,    -1,   300,    -1,   124,   304,
      -1,   124,   305,   167,    -1,   124,   305,   247,    -1,   124,
     305,   251,    -1,   126,   306,   125,    -1,   126,    75,   309,
      76,   306,   125,    -1,   125,    -1,   127,   306,   125,    -1,
     127,    75,   309,    76,   306,   125,    -1,    -1,   307,    -1,
     308,    -1,   307,    79,   308,    -1,   307,   308,    -1,   130,
      75,   309,    76,    -1,   130,    75,    76,    -1,   130,    -1,
     310,    -1,   311,    -1,   310,   311,    -1,   312,    -1,   131,
      -1,   120,   122,    75,    32,    76,   123,    -1,   120,   123,
      -1,   313,    -1,   313,    -1,   314,    -1,   315,   251,    -1,
     132,    32,   316,    -1,   132,    32,    -1,   317,    -1,   316,
      79,   317,    -1,    32,    83,   289,    -1,   325,    83,   320,
      -1,   322,    83,   321,    83,   323,    -1,   226,    -1,   226,
      -1,   321,    79,   226,    -1,    32,    -1,   327,    -1,   289,
      -1,   322,    -1,   326,    -1,   325,    79,   326,    -1,   270,
      -1,    78,    -1,    80,    -1,    77,    -1,    82,    -1,    74,
      -1,    93,    -1,    91,    -1,     4,    -1,    46,    -1,   133,
     318,    -1,   134,   319,    -1,   135,   328,    -1,   137,   324,
      -1,   235,    -1,   139,   330,   331,    -1,   140,   329,    -1,
     141,   289,   331,    -1,   330,   331,    -1,   329,    79,   330,
     331,    -1,   221,    -1,   330,    89,   288,    90,    -1,    -1,
     332,    -1,   333,    -1,   332,   333,    -1,    92,    94,    -1,
      92,   289,    94,    -1,    92,   289,   138,   289,    94,    -1,
      92,   289,    83,   289,    94,    -1,   152,   274,    -1,   152,
      75,   226,    76,    -1,   148,   274,    -1,   148,    75,   226,
      76,    -1,   149,   274,    -1,   149,    75,   226,    76,    -1,
     334,    -1,   335,    -1,   144,    -1,   144,   336,    -1,   143,
      -1,   145,    -1,   337,    -1,   336,   337,    -1,    89,    90,
      -1,    89,   291,    90,    -1,    89,    77,    90,    -1,   338,
      -1,   154,   339,    84,    -1,   155,   339,    84,    -1,   147,
     339,    84,    -1,   150,    84,    -1,   289,    -1,    -1,   151,
      75,   266,   339,    84,   339,    84,   340,    76,   251,    -1,
     341,    -1,    -1,   289,    -1,    15,    -1,   342,    -1,   343,
      -1,   156,    -1,   157,    -1,   158,    -1,   159,    -1,   160,
      -1,   272,   344,    75,    76,    -1,   272,   344,    75,   273,
      76,    -1,   346,   345,   347,    -1,   288,    79,   288,    79,
     288,    79,   288,    -1,   288,    79,   288,    79,   288,    -1,
     288,    79,   288,    -1,   161,    -1,   162,    -1,   163,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,  1561,  1561,  1566,  1575,  1579,  1585,  1589,  1595,  1599,
    1605,  1609,  1615,  1620,  1624,  1629,  1634,  1639,  1646,  1652,
    1657,  1666,  1670,  1676,  1680,  1686,  1690,  1697,  1703,  1709,
    1718,  1723,  1729,  1735,  1744,  1747,  1753,  1758,  1764,  1768,
    1774,  1778,  1784,  1792,  1796,  1803,  1807,  1811,  1817,  1823,
    1827,  1831,  1835,  1839,  1846,  1850,  1856,  1860,  1864,  1868,
    1872,  1878,  1882,  1886,  1890,  1894,  1906,  1910,  1914,  1918,
    1924,  1928,  1934,  1938,  1944,  1948,  1953,  1957,  1961,  1966,
    1971,  1975,  1979,  1983,  1988,  1992,  1998,  2002,  2006,  2010,
    2015,  2021,  2027,  2030,  2035,  2041,  2045,  2049,  2055,  2059,
    2063,  2067,  2071,  2077,  2081,  2085,  2089,  2093,  2099,  2103,
    2108,  2112,  2119,  2125,  2129,  2133,  2137,  2141,  2145,  2149,
    2153,  2157,  2161,  2167,  2173,  2180,  2186,  2197,  2201,  2207,
    2211,  2216,  2220,  2224,  2228,  2232,  2236,  2243,  2250,  2254,
    2259,  2263,  2269,  2273,  2283,  2287,  2292,  2296,  2302,  2306,
    2314,  2317,  2323,  2331,  2334,  2339,  2347,  2350,  2354,  2360,
    2364,  2368,  2377,  2382,  2388,  2392,  2398,  2402,  2407,  2413,
    2417,  2423,  2427,  2431,  2435,  2439,  2443,  2449,  2456,  2462,
    2466,  2472,  2477,  2483,  2487,  2493,  2500,  2506,  2511,  2515,
    2521,  2527,  2535,  2539,  2545,  2549,  2553,  2558,  2562,  2566,
    2572,  2576,  2580,  2584,  2590,  2596,  2600,  2604,  2608,  2612,
    2616,  2622,  2627,  2633,  2641,  2645,  2652,  2656,  2662,  2666,
    2670,  2675,  2679,  2685,  2691,  2695,  2699,  2703,  2709,  2713,
    2717,  2723,  2730,  2738,  2748,  2754,  2758,  2764,  2768,  2776,
    2780,  2785,  2789,  2794,  2800,  2804,  2810,  2820,  2824,  2830,
    2834,  2841,  2845,  2853,  2857,  2863,  2867,  2873,  2877,  2881,
    2886,  2891,  2897,  2901,  2907,  2911,  2915,  2919,  2927,  2931,
    2935,  2941,  2947,  2957,  2961,  2965,  2971,  2975,  2979,  2983,
    2987,  2991,  2995,  3002,  3008,  3012,  3017,  3023,  3027,  3034,
    3040,  3044,  3050,  3054,  3062,  3069,  3076,  3080,  3086,  3092,
    3096,  3101,  3107,  3113,  3121,  3125,  3129,  3136,  3141,  3146,
    3151,  3157,  3161,  3167,  3171,  3175,  3179,  3183,  3190,  3200,
    3204,  3208,  3222,  3226,  3230,  3234,  3238,  3251,  3257,  3265,
    3271,  3277,  3281,  3285,  3289,  3293,  3297,  3301,  3305,  3310,
    3314,  3320,  3325,  3332,  3336,  3340,  3344,  3348,  3352,  3357,
    3361,  3365,  3369,  3373,  3377,  3385,  3389,  3393,  3397,  3401,
    3405,  3411,  3415,  3421,  3425,  3429,  3433,  3439,  3443,  3447,
    3453,  3457,  3461,  3467,  3471,  3475,  3479,  3483,  3489,  3493,
    3497,  3503,  3507,  3513,  3517,  3523,  3527,  3533,  3537,  3543,
    3547,  3553,  3557,  3562,  3568,  3572,  3578,  3582,  3590,  3594,
    3598,  3602,  3606,  3610,  3614,  3618,  3622,  3626,  3630,  3636,
    3646,  3650,  3654,  3658,  3662,  3666,  3670,  3674,  3680,  3686,
    3690,  3727,  3733,  3737,  3741,  3745,  3749,  3753,  3757,  3761,
    3765,  3769,  3796,  3800,  3818,  3822,  3829,  3833,  3839,  3845,
    3849,  3855,  3873,  3969,  3973,  3979,  3983,  3989,  3993,  4018,
    4025,  4031,  4037,  4098,  4102,  4106,  4113,  4117,  4124,  4127,
    4133,  4137,  4141,  4147,  4151,  4155,  4161,  4169,  4173,  4179,
    4185,  4193,  4199,  4205,  4211,  4230,  4238,  4243,  4247,  4253,
    4257,  4263,  4307,  4320,  4327,  4345,  4349,  4355,  4359,  4394,
    4400,  4426,  4430,  4436,  4452,  4456,  4460,  4464,  4468,  4472,
    4476,  4480,  4484,  4490,  4496,  4502,  4508,  4514,  4563,  4567,
    4571,  4577,  4582,  4589,  4593,  4601,  4604,  4607,  4611,  4617,
    4621,  4625,  4629,  4664,  4668,  4672,  4676,  4680,  4684,  4690,
    4694,  4700,  4704,  4710,  4714,  4721,  4725,  4731,  4735,  4739,
    4747,  4753,  4757,  4761,  4765,  4771,  4776,  4781,  4790,  4795,
    4799,  4803,  4830,  4836,  4842,  4846,  4850,  4854,  4858,  4864,
    4868,  4874,  4880,  4884,  4888,  4894,  4901,  4923
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "\"+=\"", "\"&&\"", "\"&=\"",
  "\"__asm__\"", "\"auto\"", "\"_Bool\"", "\"boolean-literal\"",
  "\"break\"", "\"case\"", "\"char\"", "\"character-literal\"",
  "\"const\"", "\"continue\"", "\"decimal-literal\"", "\"default\"",
  "\"/=\"", "\"do\"", "\"double\"", "\"else\"", "\"enum\"", "\"==\"",
  "\"extern\"", "\"float\"", "\"floating-literal\"",
  "\"hexadecimal-floating-literal\"", "\"for\"", "\"goto\"", "\">=\"",
  "\"hexadecimal-integer-literal\"", "\"identifier\"", "\"if\"",
  "\"inline\"", "\"int\"", "\"<<\"", "\"<<=\"", "\"<=\"", "\"long\"",
  "\"--\"", "\"%=\"", "\"*=\"", "\"!=\"", "\"octal-integer-literal\"",
  "\"|=\"", "\"||\"", "\"++\"", "\"->\"", "\"register\"", "\"return\"",
  "\">>\"", "\">>=\"", "\"short\"", "\"signed\"", "\"sizeof\"",
  "\"static\"", "\"string-literal\"", "\"struct\"", "\"-=\"", "\"switch\"",
  "\"...\"", "\"typedef\"", "\"union\"", "\"unsigned\"", "\"void\"",
  "\"volatile\"", "\"while\"", "\"^=\"", "\"<unknown-pragma>\"",
  "\"<preprocessor-comment>\"", "\"<preprocessor-token>\"", "'!'", "'%'",
  "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'",
  "';'", "'<'", "'='", "'>'", "'?'", "'['", "']'", "'^'", "'{'", "'|'",
  "'}'", "'~'", "\"__builtin_va_arg\"", "\"__builtin_offsetof\"",
  "\"__builtin_choose_expr\"", "\"__builtin_types_compatible_p\"",
  "\"__alignof__\"", "\"__extension__\"", "\"__real__\"", "\"__imag__\"",
  "\"__label__\"", "\"__complex__\"", "\"__imaginary__\"",
  "\"__typeof__\"", "\"restrict\"", "\"__attribute__\"", "\"__thread\"",
  "\"<subparse-expression>\"", "\"<subparse-expression-list>\"",
  "\"<subparse-statement>\"", "\"<subparse-declaration>\"",
  "\"<subparse-member>\"", "\"<subparse-type>\"",
  "\"<subparse-type-list>\"", "\"<subparse-id-expression>\"",
  "\"<statement-placeholder>\"", "\"<verbatim pragma>\"",
  "\"<verbatim construct>\"", "\"<verbatim type clause>\"",
  "\"<verbatim text>\"", "\"<pragma-custom>\"",
  "\"<pragma-custom-newline>\"", "\"<pragma-custom-directive>\"",
  "\"<pragma-custom-construct>\"", "\"<pragma-custom-construct-noend>\"",
  "\"<pragma-custom-end-construct>\"", "\"<pragma-custom-clause>\"",
  "\"<pragma-clause-argument-text>\"", "\"__construct__\"",
  "\"<subparse-omp-udr-declare>\"", "\"<subparse-omp-udr-declare-2>\"",
  "\"<subparse-omp-udr-identity>\"", "\"constructor\"",
  "\"<subparse_omp_operator_name>\"", "\"..\"",
  "\"<subparse-superscalar-declarator>\"",
  "\"<subparse-superscalar-declarator-list>\"",
  "\"<subparse-superscalar-expression>\"", "\"MYTHREAD (UPC)\"",
  "\"relaxed (UPC)\"", "\"shared (UPC)\"", "\"strict (UPC)\"",
  "\"THREADS (UPC)\"", "\"upc_barrier\"", "\"upc_blocksizeof\"",
  "\"upc_elemsizeof\"", "\"upc_fence\"", "\"upc_forall\"",
  "\"upc_localsizeof\"", "\"UPC_MAX_BLOCKSIZE\"", "\"upc_notify\"",
  "\"upc_wait\"", "\"__device__\"", "\"__global__\"", "\"__host__\"",
  "\"__constant__\"", "\"__shared__\"", "\"<<<\"", "\">>>\"",
  "\"_Builtin\"", "$accept", "translation_unit", "declaration_sequence",
  "declaration", "block_declaration", "non_empty_block_declaration",
  "common_block_declaration", "label_declaration", "label_declarator_seq",
  "attributes", "attribute", "attribute_list", "attribute_value",
  "asm_definition", "volatile_optional", "asm_operand_list",
  "asm_operand_list_nonempty", "asm_operand", "simple_declaration",
  "non_empty_simple_declaration", "old_style_parameter",
  "old_style_decl_specifier_seq",
  "nontype_specifier_without_attribute_seq", "decl_specifier_seq",
  "decl_specifier_seq_may_end_with_declarator", "decl_specifier_alone_seq",
  "nontype_specifier_seq", "nontype_specifier_no_end_attrib_seq",
  "nontype_specifier", "nontype_specifier_without_attribute",
  "storage_class_specifier", "function_specifier", "type_specifier",
  "type_specifier_alone", "type_specifier_seq",
  "type_specifier_seq_may_end_with_attribute", "simple_type_specifier",
  "type_name", "builtin_types", "elaborated_type_specifier",
  "init_declarator_list", "init_declarator", "asm_specification",
  "declarator", "ptr_operator", "functional_declarator",
  "functional_direct_declarator", "optional_array_cv_qualifier_seq",
  "array_cv_qualifier_seq", "optional_array_static_qualif",
  "array_static_qualif", "optional_array_expression",
  "functional_declarator_id", "final_declarator_id", "cv_qualifier_seq",
  "cv_qualifier", "direct_declarator", "declarator_id", "enum_specifier",
  "enumeration_list", "enumeration_list_proper", "enumeration_definition",
  "type_id", "abstract_declarator", "abstract_direct_declarator",
  "identifier_list", "identifier_list_kr", "parameter_type_list",
  "parameter_declaration_list", "parameter_declaration", "initializer",
  "initializer_clause", "initializer_list", "designation",
  "designator_list", "designator", "function_definition",
  "old_style_parameter_list", "function_body", "class_specifier",
  "class_head", "class_key", "member_specification_seq",
  "member_declaration", "member_declarator_list", "member_declarator",
  "constant_initializer", "statement", "no_if_statement",
  "labeled_statement", "expression_statement", "declaration_statement",
  "compound_statement", "statement_seq", "if_statement",
  "if_else_statement", "if_else_eligible_statements",
  "selection_statement", "condition", "iteration_statement",
  "expression_opt", "condition_opt", "for_init_statement",
  "jump_statement", "primary_expression", "offsetof_member_designator",
  "id_expression", "unqualified_id", "postfix_expression",
  "expression_list", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression", "equality_expression",
  "and_expression", "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "expression",
  "assignment_operator", "constant_expression", "literal",
  "unknown_pragma", "string_literal", "subparsing", "subparse_type_list",
  "noshape_cast_expression", "shape_seq", "shape",
  "pragma_custom_directive", "pragma_custom_construct_declaration",
  "pragma_custom_construct_member_declaration",
  "pragma_custom_construct_statement", "pragma_custom_line_directive",
  "pragma_custom_line_construct", "pragma_custom_clause_opt_seq",
  "pragma_custom_clause_seq", "pragma_custom_clause",
  "pragma_clause_arg_list", "pragma_clause_arg", "pragma_clause_arg_item",
  "pragma_clause_arg_text", "verbatim_construct",
  "custom_construct_statement", "custom_construct_header",
  "custom_construct_parameters_seq", "custom_construct_parameter",
  "omp_udr_declare_arg", "omp_udr_declare_arg_2", "omp_udr_type_specifier",
  "omp_udr_type_specifier_2", "omp_udr_unqualified_operator",
  "omp_udr_expression", "omp_udr_operator_2", "omp_udr_operator_list",
  "omp_udr_operator", "omp_udr_builtin_op", "omp_udr_identity",
  "superscalar_declarator_list", "superscalar_declarator",
  "opt_superscalar_region_spec_list", "superscalar_region_spec_list",
  "superscalar_region_spec", "upc_shared_type_qualifier",
  "upc_reference_type_qualifier", "upc_layout_qualifier",
  "upc_layout_qualifier_element", "upc_synchronization_statement",
  "upc_expression_opt", "upc_affinity_opt", "upc_affinity",
  "cuda_specifiers", "cuda_kernel_call", "cuda_kernel_arguments",
  "cuda_kernel_config_list", "cuda_kernel_config_left",
  "cuda_kernel_config_right", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   164,   165,   165,   166,   166,   167,   167,   168,   168,
     169,   169,   170,   170,   170,   170,   170,   170,   171,   172,
     172,   173,   173,   174,   174,   175,   175,   176,   176,   176,
     177,   177,   177,   177,   178,   178,   179,   179,   180,   180,
     181,   181,   181,   182,   182,   183,   183,   183,   184,   185,
     185,   185,   185,   185,   186,   186,   187,   187,   187,   187,
     187,   188,   188,   188,   188,   188,   189,   189,   189,   189,
     190,   190,   191,   191,   192,   192,   193,   193,   193,   193,
     193,   193,   193,   193,   193,   193,   194,   194,   194,   194,
     194,   195,   196,   196,   196,   197,   197,   197,   198,   198,
     198,   198,   198,   199,   199,   199,   199,   199,   200,   200,
     200,   200,   201,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   203,   203,   203,   203,   204,   204,   205,
     205,   205,   205,   205,   205,   205,   205,   206,   207,   207,
     207,   207,   208,   208,   209,   209,   209,   209,   210,   210,
     211,   211,   212,   213,   213,   214,   215,   215,   215,   216,
     216,   216,   217,   217,   218,   218,   219,   219,   219,   220,
     220,   220,   220,   220,   220,   220,   220,   221,   222,   222,
     222,   222,   222,   222,   222,   222,   223,   223,   224,   224,
     225,   225,   226,   226,   227,   227,   227,   227,   227,   227,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   229,   230,   230,   231,   231,   232,   232,   233,   233,
     233,   233,   233,   234,   235,   235,   235,   235,   236,   236,
     236,   236,   236,   236,   237,   238,   238,   239,   239,   240,
     240,   240,   240,   240,   241,   241,   242,   243,   243,   244,
     244,   244,   244,   245,   245,   246,   246,   247,   247,   247,
     247,   247,   248,   248,   249,   249,   249,   249,   249,   249,
     249,   249,   250,   251,   251,   251,   252,   252,   252,   252,
     252,   252,   252,   253,   253,   253,   253,   254,   254,   255,
     256,   256,   257,   257,   258,   259,   260,   260,   261,   262,
     262,   262,   262,   262,   263,   263,   263,   264,   264,   265,
     265,   266,   266,   267,   267,   267,   267,   267,   267,   268,
     268,   268,   268,   268,   268,   268,   268,   269,   269,   270,
     271,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   273,   273,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   275,   275,   275,   275,   275,
     275,   276,   276,   277,   277,   277,   277,   278,   278,   278,
     279,   279,   279,   280,   280,   280,   280,   280,   281,   281,
     281,   282,   282,   283,   283,   284,   284,   285,   285,   286,
     286,   287,   287,   287,   288,   288,   289,   289,   290,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   291,
     292,   292,   292,   292,   292,   292,   292,   292,   293,   294,
     294,   165,   295,   295,   295,   295,   295,   295,   295,   295,
     295,   295,   296,   296,   272,   272,   297,   297,   276,   298,
     298,   299,   251,   252,   252,   167,   167,   247,   247,   300,
     301,   302,   303,   304,   304,   304,   305,   305,   306,   306,
     307,   307,   307,   308,   308,   308,   309,   310,   310,   311,
     312,   313,   313,   170,   247,   251,   314,   315,   315,   316,
     316,   317,   318,   319,   320,   321,   321,   322,   322,   323,
     324,   325,   325,   326,   327,   327,   327,   327,   327,   327,
     327,   327,   327,   295,   295,   295,   295,   328,   295,   295,
     295,   329,   329,   330,   330,   331,   331,   332,   332,   333,
     333,   333,   333,   274,   274,   274,   274,   274,   274,   219,
     219,   334,   334,   335,   335,   336,   336,   337,   337,   337,
     252,   338,   338,   338,   338,   339,   339,   263,   340,   340,
     341,   341,   193,   272,   342,   342,   342,   342,   342,   343,
     343,   344,   345,   345,   345,   346,   347,   193
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     0,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     1,
       3,     2,     1,     6,     5,     1,     3,     1,     1,     4,
       6,     8,    10,    12,     0,     1,     1,     0,     1,     3,
       4,     7,     1,     1,     1,     3,     2,     2,     3,     3,
       2,     2,     1,     1,     1,     2,     3,     2,     2,     1,
       1,     3,     2,     2,     1,     1,     3,     2,     2,     1,
       1,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       2,     1,     1,     3,     2,     2,     1,     1,     1,     1,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     3,     1,     3,     1,
       2,     2,     2,     3,     3,     3,     4,     4,     1,     2,
       2,     3,     1,     2,     1,     2,     2,     3,     1,     3,
       0,     1,     1,     0,     1,     1,     0,     1,     1,     4,
       4,     3,     1,     3,     1,     2,     1,     1,     1,     1,
       3,     4,     4,     4,     6,     6,     3,     1,     5,     4,
       4,     3,     6,     5,     5,     4,     1,     2,     3,     1,
       1,     3,     1,     2,     1,     2,     1,     2,     3,     2,
       3,     3,     4,     2,     3,     3,     5,     5,     4,     6,
       6,     1,     1,     3,     1,     3,     1,     3,     2,     1,
       2,     3,     3,     2,     1,     3,     4,     2,     1,     3,
       2,     4,     3,     5,     2,     1,     2,     3,     2,     3,
       4,     2,     3,     2,     1,     2,     1,     4,     3,     1,
       2,     2,     3,     1,     1,     1,     2,     3,     2,     1,
       1,     2,     1,     3,     1,     2,     2,     3,     2,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     4,     3,     6,     2,     1,     1,
       3,     2,     1,     2,     5,     7,     1,     1,     5,     1,
       4,     6,     5,     5,     5,     7,     8,     1,     0,     1,
       0,     1,     1,     2,     2,     2,     3,     3,     4,     1,
       3,     1,     3,     6,     6,     8,     6,     2,     1,     1,
       1,     1,     4,     3,     4,     3,     3,     2,     2,     6,
       7,     1,     3,     1,     2,     2,     2,     2,     4,     2,
       2,     4,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     5,     4,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     2,     2,     1,     2,     2,     1,     2,     2,
       2,     2,     1,     3,     6,     6,     1,     4,     2,     2,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     3,     3,     3,     6,     1,     3,     6,     0,     1,
       1,     3,     2,     4,     3,     1,     1,     1,     2,     1,
       1,     6,     2,     1,     1,     1,     2,     3,     2,     1,
       3,     3,     3,     5,     1,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     1,     3,     2,
       3,     2,     4,     1,     4,     0,     1,     1,     2,     2,
       3,     5,     5,     2,     4,     2,     4,     2,     4,     1,
       1,     1,     2,     1,     1,     1,     2,     2,     3,     3,
       1,     3,     3,     3,     2,     1,     0,    10,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       5,     3,     7,     5,     3,     1,     1,     1
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     1,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       1,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     1,
       1,     1,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     1,     0,
       1,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     1,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short int yydefact[] =
{
       3,    34,    86,   114,   113,   166,   121,     0,    89,   120,
     330,    91,   116,    82,    87,    83,    80,    88,   253,    78,
     254,    81,   122,   167,   418,    16,    17,     0,   142,    44,
       0,     0,    84,    85,     0,   168,     0,    90,     0,     0,
     424,   427,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   533,   531,   534,   554,   555,
     556,   557,   558,   567,     0,     2,     4,     6,     9,    13,
       0,    75,    12,     8,    43,     0,     0,     0,    60,    70,
      74,    76,    77,    59,    92,    93,   108,   109,    97,     0,
     127,   129,     0,     0,   144,   148,     0,    79,   138,   169,
      96,     7,    95,     0,   249,   177,   329,    15,   421,   446,
     445,   473,   529,   530,   552,    35,     0,   124,     0,     0,
      22,   330,     0,     0,     0,   143,   164,    14,   243,    19,
       0,     0,     0,     0,   415,   416,   410,   414,   413,   412,
       0,   411,     0,     0,   419,   359,   356,     0,   355,   357,
     358,     0,   360,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   321,   343,   361,     0,   363,
     367,   370,   373,   378,   381,   383,   385,   387,   389,   391,
     394,   396,   422,   319,   417,     0,   440,   553,   430,   341,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,     0,   355,   288,     0,     0,   442,     0,     0,
     546,     0,     0,   546,   546,   289,    11,     0,    10,     0,
       0,   169,   292,   273,   276,   277,   282,   278,   423,   274,
     275,   279,   280,   281,   321,     0,   444,   443,   475,     0,
     540,   426,   112,   260,     0,     0,    75,     0,     0,   425,
     255,   259,   448,   447,   474,   107,   102,   106,    92,     0,
     192,   428,     0,   101,   432,   429,   431,     0,   472,   455,
     458,   458,   449,     0,   493,   503,     0,   491,   501,   487,
     502,   498,   496,   494,   495,   497,   500,   499,   504,     0,
     488,     0,   507,   224,   505,   490,   506,   513,   515,   509,
     515,   515,     0,   532,   535,     1,     5,    21,     0,   146,
     140,     0,     0,    46,    71,    74,    57,    92,    82,    83,
      80,    81,    84,     0,    58,    68,    74,     0,    47,     0,
       0,   132,   131,   130,   139,   145,   244,     0,    53,    54,
      52,     0,   241,   246,     0,     0,   156,     0,   123,   251,
       0,     0,   190,   181,     0,   186,   189,   126,     0,   176,
     149,   163,   165,     0,    18,     0,     0,     0,   354,     0,
     345,   344,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   350,   349,   352,   353,     0,   525,     0,
     527,     0,   523,   338,   337,     0,     0,     0,     0,   565,
       0,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     401,   405,   400,   403,   408,   399,   406,     0,   404,   402,
     407,   398,     0,     0,     0,   420,     0,   436,   438,   439,
       0,   313,   391,   409,     0,   314,     0,     0,     0,     0,
       0,     0,     0,   315,     0,     0,     0,   291,     0,     0,
     478,   545,     0,   544,     0,     0,     0,     0,     0,   293,
     287,   476,   261,     0,   330,     0,     0,   264,     0,   262,
     258,   256,   104,   105,   100,     0,   156,     0,   194,   193,
     196,    99,     0,     0,     0,   465,     0,   459,   460,     0,
       0,   450,     0,     0,     0,   330,     0,     0,   227,   228,
       0,     0,     0,   235,     0,     0,   508,   516,   517,     0,
     511,   510,   355,   537,     0,   536,   141,   147,    45,     0,
     239,    56,    66,   128,     0,   223,   135,   133,   134,     0,
      55,    50,    51,   245,   242,   112,   161,     0,   219,    65,
      59,     0,   211,     0,   214,   216,   170,     0,     0,   155,
     355,   153,   150,     0,   152,   158,   248,     0,   125,     0,
     180,     0,     0,   179,   187,     0,   185,     0,    20,   111,
     110,    28,    27,     0,     0,    25,     0,     0,     0,   322,
     320,   441,     0,     0,     0,     0,     0,     0,     0,     0,
     336,   333,     0,   335,   391,     0,     0,     0,     0,   366,
     364,   365,   368,   369,   371,   372,   376,   377,   374,   375,
     379,   380,   382,   384,   386,   388,   390,     0,     0,   395,
     397,     0,   342,     0,     0,   285,     0,   312,   311,   310,
     317,     0,   283,     0,     0,   299,   316,     0,     0,   290,
     452,     0,   477,   479,   543,   546,   541,   542,   451,     0,
       0,   266,     0,     0,   268,   265,     0,   257,   103,    98,
     203,     0,     0,   153,   150,     0,   197,   199,   195,     0,
     156,   433,     0,   470,     0,   466,   467,   469,     0,   453,
       0,   462,     0,   456,   492,   484,   482,   485,     0,     0,
     238,   394,     0,     0,   225,   230,   234,     0,   236,     0,
     519,     0,   518,   515,   539,   538,   240,     0,   136,    48,
      49,     0,     0,   218,   194,   220,    57,    63,   160,     0,
     159,     0,   171,   172,   156,   154,   156,   151,   173,   247,
       0,    37,   178,   191,   188,   184,     0,   183,     0,    24,
       0,     0,     0,   348,     0,   362,     0,     0,     0,     0,
     351,   526,   528,   524,   334,     0,     0,   332,   559,     0,
       0,   566,   561,   393,     0,     0,     0,   284,     0,   309,
       0,   318,     0,     0,     0,     0,     0,     0,     0,   267,
       0,   271,   272,   269,   263,   200,   201,   156,   156,   205,
     198,   204,     0,   153,   150,     0,     0,   458,   468,   464,
       0,   461,   458,     0,     0,   232,   237,   330,   226,   229,
       0,   514,     0,   520,     0,   512,   137,   197,   221,   222,
      61,   213,   215,   217,     0,     0,    30,     0,     0,    36,
      38,    42,   182,     0,    23,    26,     0,     0,   328,     0,
       0,     0,     0,     0,   560,   564,   392,   437,     0,     0,
     308,     0,     0,     0,   294,   273,   275,     0,   298,   304,
     481,   480,   546,   270,     0,     0,   202,   156,   156,   208,
     471,     0,   463,     0,   486,   489,   483,     0,   231,     0,
       0,   174,   175,     0,     0,    37,     0,     0,    29,     0,
     339,   323,   327,   324,     0,   326,   434,   435,     0,   286,
       0,     0,   307,   300,     0,     0,     0,     0,     0,   206,
     207,     0,     0,   454,   457,   233,   522,   521,     0,    31,
       0,    39,     0,   340,     0,   563,   305,     0,   302,   303,
       0,   295,   549,   209,   210,     0,     0,    37,    40,   325,
       0,   306,   301,   551,   550,     0,   548,     0,    32,     0,
     562,     0,     0,     0,   547,    41,    33
};

/* YYPDEFGOTO[NTERM-NUM].  */
static const short int yydefgoto[] =
{
      -1,    64,    65,    66,    67,   215,   216,    69,   130,   217,
     246,   584,   585,    72,   116,   838,   839,   840,    73,   218,
     336,   337,   338,   219,   548,    76,    77,    78,    79,    80,
      81,    82,    83,   258,   259,   260,    85,    86,    87,    88,
      89,    90,   332,    91,   220,    93,    94,   736,   737,   734,
     735,   563,    95,    96,   564,    97,    98,   221,   100,   354,
     355,   356,   374,   671,   490,   551,   552,   672,   554,   555,
     333,   509,   510,   511,   512,   513,   101,   341,   342,   102,
     103,   104,   249,   250,   478,   479,   665,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   867,   231,   644,   232,
     911,   780,   639,   233,   164,   849,   165,   106,   166,   188,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   235,   433,   702,   183,   107,
     184,   108,   265,   438,   185,   186,   236,   110,   253,   237,
     272,   273,   496,   497,   498,   684,   685,   686,   687,   111,
     238,   239,   652,   653,   275,   288,   696,   698,   289,   886,
     296,   276,   277,   290,   294,   299,   298,   516,   517,   518,
     112,   113,   303,   304,   240,   462,   955,   956,   114,   187,
     400,   608,   401,   772
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -822
static const short int yypact[] =
{
    3420,    14,  -822,  -822,  -822,  -822,  -822,    44,  -822,  -822,
    4924,  -822,  -822,  1495,  -822,  1656,  1772,  -822,  -822,  -822,
    -822,  1887,  -822,  -822,  -822,  -822,  -822,    91,    35,  -822,
    3693,   105,  2002,  -822,    98,  -822,   110,  -822,  7612,  7612,
    2476,  3578,  3986,  4687,  4687,   175,   411,   543,   175,   993,
    6712,   993,   175,   175,  7612,  -822,   374,  -822,  -822,  -822,
    -822,  -822,  -822,  -822,   236,  3578,  -822,  -822,  -822,  -822,
      91,    20,  -822,  -822,  -822,    91,   180,  4687,  -822,  -822,
     806,  -822,  -822,  5577,  5450,  -822,  -822,  -822,  -822,   305,
    -822,    65,    91,  4749,  -822,  -822,   243,  -822,   108,   479,
    -822,  -822,  -822,   335,    24,  -822,  -822,  -822,  -822,  -822,
    -822,  -822,  -822,  -822,  -822,  -822,   395,   386,    37,   166,
    -822,  -822,   416,   433,   497,    35,  -822,  -822,  -822,  -822,
     350,  3262,   425,   486,  -822,  -822,  -822,  -822,  -822,  -822,
    7912,  -822,  7912,  8012,  -822,  -822,  -822,  2791,  -822,  -822,
    -822,  7612,  -822,   484,   505,   513,   529,  8112,  7612,  7612,
    7612,  8212,  8312,  8412,  -822,  -822,   329,  -822,  7612,  -822,
     355,   509,   226,   183,   297,   561,   523,   555,   648,  1915,
    -822,  -822,   580,  -822,   608,  7712,  -822,  -822,   595,  -822,
     591,  7612,   596,   602,  2476,   604,   205,  5039,   611,  6812,
     616,   617,  2948,    79,  -822,  2160,  2634,  -822,   543,   656,
    7612,   610,   620,  7612,  7612,  -822,  -822,   248,  -822,   248,
     248,  -822,  -822,  -822,  -822,  -822,  -822,  -822,  2476,  -822,
    -822,  -822,  -822,  -822,   625,   357,  -822,  -822,  -822,  2476,
    -822,  3578,  -822,  -822,  3986,   543,  -822,   169,   612,  3986,
    -822,  -822,  -822,  -822,  -822,  4687,  -822,  5101,  -822,   574,
    -822,  -822,  4687,  5641,  -822,   623,  -822,   624,  -822,  -822,
     -13,    27,  -822,  3578,  -822,  -822,   401,  -822,  -822,  -822,
    -822,  -822,  -822,  -822,  -822,  -822,  -822,  -822,  -822,   627,
    -822,  6312,  -822,  -822,  -822,  -822,  -822,  -822,   227,   628,
     227,   332,  6912,   614,  -822,  -822,  -822,  -822,    91,  -822,
     108,   363,  4749,  -822,  -822,   822,  5704,  5514,  -822,  -822,
    -822,  -822,  -822,  5768,  -822,  5768,  -822,   248,  -822,   633,
    6712,    95,    95,  -822,  -822,  -822,  -822,   248,  4864,  -822,
    5831,  4749,  -822,  -822,  4331,  4394,  6206,  3808,   626,    32,
     658,    54,   630,  -822,   632,   640,  -822,   635,    71,  -822,
    -822,  -822,  -822,   688,  -822,   653,   337,    52,  -822,  2791,
    -822,  -822,  2791,  -822,   655,   657,   377,   302,  7612,  4687,
    7612,  4687,  2791,  -822,  -822,  -822,  -822,  2791,  -822,  2791,
    -822,  2791,  -822,  -822,  -822,   175,  7012,   175,  7612,  -822,
     661,  7612,  -822,  7612,  7612,  7612,  7612,  7612,  7612,  7612,
    7612,  7612,  7612,  7612,  7612,  7612,  7612,  7612,  7612,  7612,
    -822,  -822,  -822,  -822,  -822,  -822,  -822,  7612,  -822,  -822,
    -822,  -822,  7112,  7612,  7612,  -822,  2791,  -822,  -822,  -822,
    7612,  -822,   147,  -822,    16,  -822,  2476,   665,  3105,   659,
    7612,  2476,  3262,  -822,   387,  3262,  3262,  -822,  2318,  2476,
     707,   580,   660,  -822,  3105,   668,   670,   248,   248,  -822,
    -822,  -822,  -822,  3986,   -24,  7612,   310,   181,   424,  -822,
    -822,  -822,  5213,  5768,  -822,  4101,  6206,   574,   574,  -822,
     235,  5895,  4687,   708,   631,   666,   634,    97,  -822,   631,
     636,  -822,   175,  4687,  4687,   662,   724,  7612,  -822,  -822,
     -11,  6712,   371,  -822,  7612,  7212,  -822,   672,  -822,   175,
    -822,  -822,   675,  -822,   676,  -822,  -822,  -822,  -822,  4749,
    -822,  -822,  5768,  -822,   658,  -822,  -822,    95,  -822,   440,
    -822,  5958,  6022,  -822,  -822,   450,  -822,    31,  -822,  4687,
    5275,   692,   690,   695,   693,  -822,  -822,   697,   700,  -822,
     689,   722,    35,   691,    35,  -822,  -822,  3923,   694,   120,
    -822,   686,  7612,  -822,   755,    73,  -822,   696,  -822,  -822,
    -822,  -822,   713,   715,   462,  -822,   717,   718,  7312,  -822,
    -822,  -822,   720,   721,   725,   728,   727,   734,   736,   737,
    -822,  -822,   488,  -822,  1800,   327,  7412,   735,   639,  -822,
    -822,  -822,   362,   372,   532,   564,   226,   226,   226,   226,
     183,   183,   297,   723,   523,   555,   815,  7612,   432,  -822,
    -822,   745,  -822,  7612,  2476,  -822,   748,  -822,  -822,  3262,
    -822,   446,  -822,   248,   750,   580,  -822,   758,   760,  -822,
    -822,   757,   763,  -822,  -822,  7612,  -822,  -822,  -822,  7612,
      -2,  -822,  7612,  7612,   181,  -822,   169,  -822,  5768,  -822,
    -822,   767,   769,   722,    35,   761,   574,   235,  -822,  4509,
    6206,  -822,   771,  -822,   776,   631,  -822,  -822,    39,  -822,
     726,  -822,   779,  -822,  -822,  -822,  -822,  -822,   449,  6712,
    -822,   774,   775,  6412,  -822,  -822,  -822,  7612,  -822,   777,
    -822,   212,  -822,   227,  -822,  -822,  -822,   269,  -822,  -822,
    6085,  4216,    31,   752,   311,   752,  5387,  5768,  -822,   825,
    -822,  4572,  -822,  -822,  7812,  -822,  7812,  -822,  -822,  -822,
     782,   154,  -822,  -822,  -822,  -822,   778,  -822,  7612,  -822,
     793,   247,   784,   790,  6612,  -822,  4687,   838,  7612,  4687,
     794,   795,   796,   798,  -822,  7612,  7612,  -822,  -822,   489,
    7612,  -822,  -822,  -822,  7612,  7312,   791,  -822,  7612,  -822,
     807,  -822,    66,  2476,  2476,  2476,  7612,   861,   810,  -822,
    7612,  -822,  -822,  -822,  -822,  -822,  -822,  7812,  7812,  -822,
    -822,  -822,   820,   722,    35,   812,   785,   726,  -822,  -822,
     831,  -822,   726,  4687,  7612,  -822,  -822,   826,  -822,  -822,
    6712,  -822,  7612,  -822,  7612,  -822,  -822,   528,   752,   752,
    5768,  -822,  -822,  -822,   823,   824,  -822,   878,   189,   839,
    -822,   287,  -822,   540,  -822,  -822,   284,   844,   320,   847,
     848,   850,    72,   109,  -822,   849,  -822,  -822,  2476,   542,
    7612,  7612,   200,   219,  -822,   911,   913,   914,  -822,  -822,
     863,  -822,  7612,  -822,   856,   858,  -822,  7812,  7812,  -822,
    -822,   833,  -822,   835,  -822,   580,  -822,  6712,  -822,   285,
     318,  -822,  -822,   866,   880,   154,   154,  7612,  -822,  6512,
    -822,  -822,   320,  -822,  7612,  -822,  -822,  -822,  7612,  -822,
     882,   897,   580,  -822,  7612,  7612,   229,  2476,   884,  -822,
    -822,   885,   886,  -822,  -822,  -822,  -822,  -822,   658,  -822,
     307,  -822,   550,  -822,   898,   900,  -822,  2476,  -822,  -822,
    7612,  -822,  7512,  -822,  -822,   299,   893,   154,  -822,  -822,
    7612,  -822,  -822,  -822,   580,   905,  -822,  7612,  -822,   910,
    -822,  2476,   557,   904,  -822,  -822,  -822
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -822,  -822,   954,   -59,    23,  -822,    57,  -822,  -822,   516,
       0,  -822,   245,  -822,  -822,  -821,  -822,   104,  -822,   130,
    -297,  -822,  -822,   929,  -822,   -18,   985,  1084,   -22,   613,
    -822,  -822,   906,    48,   -30,  -822,  -822,  -822,  -822,  -822,
     -56,   678,   221,    46,   536,     4,   936,  -620,  -328,  -613,
    -325,    62,  -822,   980,     9,     7,   -68,   892,  -822,  -315,
    -822,   434,   -21,  -243,  -472,   671,  -822,  -306,  -822,   279,
    -286,   -46,   259,  -669,   167,  -495,   987,   710,  -280,  -822,
    -822,  -822,   673,  -202,  -822,   353,   366,  -112,   249,  -822,
     -89,  -822,   600,   821,  -822,   250,  -822,  -822,  -405,  -822,
    -822,  -822,   563,  -822,  -822,  -822,    94,  -822,  -822,  -368,
     917,  -822,  -148,   191,   230,   338,   241,   618,   621,   622,
     629,   619,  -190,   -77,   244,   448,  -822,  -158,  -822,    25,
    -345,  -822,  -822,  -822,  -822,   859,   150,  -822,  -822,  -822,
    -822,   -36,  -268,  -822,  -474,  -470,  -822,   358,  -822,    58,
    -822,  -822,  -822,   258,  -822,  -822,  -822,  -822,   984,  -822,
    -822,  -822,   545,  -822,  -822,  -822,   -40,  -275,  -822,   533,
    -822,  -822,  -822,   746,  -822,  -205,  -822,  -822,  -822,  -822,
    -822,  -822,  -822,  -822
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -395
static const short int yytable[] =
{
      71,   442,   310,   500,   292,   569,   306,   120,   465,   466,
     384,   385,   386,   300,   264,   677,   489,   708,   561,   311,
     402,   562,   261,   691,   248,   520,   521,   120,   602,   692,
      71,   123,   530,   444,   820,   126,   571,   125,   553,   558,
      71,    71,   472,   577,   543,   536,   538,   481,    84,     5,
     647,   648,   -22,   127,   798,   314,   348,    68,   384,   659,
     797,   544,   494,   121,   568,    71,   581,   251,   703,   352,
     307,   329,   329,   122,   930,   120,   117,   633,    84,   312,
     115,   790,   447,   704,   582,    36,   352,    68,    84,    84,
      84,   120,   120,     5,   105,   -22,   335,   -22,    68,   634,
     254,    23,   499,   352,   120,   352,   721,    36,    28,   -22,
     365,  -142,   442,    84,   443,   809,   469,   495,   427,   307,
     486,   105,    68,   121,   105,   317,   959,   471,   583,   -22,
      74,   353,   362,    36,   234,   105,   118,   129,   334,   266,
      36,    36,   274,    35,   524,    23,   105,   105,   570,   310,
     109,   330,   861,    36,  -142,   427,  -142,   495,   673,   105,
      74,   674,   906,   311,   105,   576,    27,   745,    28,   105,
     683,    74,   459,   131,    36,    36,   690,   435,    55,    56,
      57,   330,   306,   345,   878,   132,   105,    35,  -142,   717,
     877,   109,   252,   427,    71,    74,   740,   346,   357,   907,
      36,   474,    71,   741,    36,    71,    71,   121,   604,   473,
     126,   144,   125,   410,   501,   109,   811,   307,   810,   120,
     120,   411,    55,    56,    57,   443,   248,   495,    71,   127,
     820,   248,   543,   314,   779,   432,   305,   449,   769,    71,
     314,    71,    84,   837,   467,   678,    28,   120,   122,   716,
     677,   718,   475,    84,    84,   609,   610,   611,   358,   120,
     746,   581,   408,    68,   313,   894,   334,   663,   412,   251,
     413,   658,   895,    71,   251,    36,    84,   409,    36,   582,
     121,   539,   450,   189,   535,   442,   914,    84,   234,    84,
      36,   434,    84,   477,   293,   822,   234,    84,    68,   234,
     234,   314,   254,   314,   725,   915,   823,   254,   120,    36,
     679,   105,   527,   105,   105,   940,   514,   661,   344,   515,
     414,    84,   234,   467,   680,    28,   435,   120,    36,   248,
      68,   307,   120,   234,   635,   105,    74,   120,    36,   642,
     415,   105,   121,   121,   435,   826,   469,   650,   586,   307,
     824,   587,   803,   126,   526,   804,   435,    36,   593,   638,
     595,   596,   897,   899,   434,   481,   597,   105,   598,   393,
     599,    74,   251,   802,   957,   638,   394,   395,   900,   926,
     843,   434,   442,   946,   327,   467,   721,    28,    28,   328,
     947,   109,   591,   662,   252,    84,   841,   434,   443,   252,
     486,   506,   105,    74,   396,   254,   434,   708,   310,   707,
     397,   434,   927,   580,   743,   631,   434,   767,   398,    36,
      36,   105,   643,   109,   515,   643,   643,   347,   403,   363,
     701,   105,   404,   800,   364,   403,   434,   405,   825,   404,
     755,   470,   327,   442,   405,   403,    71,   528,    71,   404,
     788,    71,   506,   590,   405,   248,   434,   706,    71,    71,
     707,   314,   681,   302,    71,   705,   434,   120,   120,   442,
     350,   646,   442,   442,   120,   776,   307,   120,   351,   713,
     502,   678,   695,   697,   503,    71,   182,   307,   120,   600,
     399,   603,   359,   126,    84,   443,    84,   252,   251,    84,
     367,   789,   301,   666,   791,   792,    84,    84,   667,   360,
     314,   434,    84,   122,   526,   774,    70,   442,   368,   327,
     314,    84,   777,   119,   719,   434,  -112,   314,   813,  -112,
     781,   254,   814,   267,   268,   293,    92,   307,   750,   881,
     234,   751,   234,    70,   883,   234,    70,   120,   675,   248,
     841,   841,   234,   234,  -162,  -162,   443,    70,   234,   378,
     121,   105,   105,    92,   764,   854,    92,   440,   440,   126,
     105,   362,   344,   361,   293,   852,   853,    92,   637,   366,
     379,    70,   443,   945,   800,   443,   443,   406,   380,   407,
     565,    70,   251,   723,   637,   376,   274,   612,   613,   377,
     442,    92,   841,   721,   381,    28,   308,   331,    70,   643,
     406,    92,   407,   105,   417,    84,   898,   486,   910,   440,
     349,   434,   592,   252,   594,   254,   948,   857,    92,   434,
     443,  -177,   873,   965,    71,   416,   434,    36,   614,   615,
     189,   105,   406,   120,   407,   607,   314,   454,   418,   485,
     376,    28,   419,   815,   310,   620,   621,   819,   461,   434,
     307,   461,   461,   486,   307,   435,   120,   918,   269,   270,
     271,   864,   868,   869,   440,   441,   120,   629,   630,   448,
     445,   126,    84,    36,   632,   446,   452,   126,   460,   782,
     315,   455,   456,   343,   463,   464,   480,   326,   314,   493,
    -177,  -177,   492,   302,  -177,   314,   339,   519,   534,  -177,
     504,  -177,   477,   443,  -177,   144,   572,   252,  -250,   574,
     578,    71,   307,   120,   120,   120,   573,   575,   234,   579,
     565,   588,   636,   589,  -177,   847,   606,   105,   851,   651,
     682,   688,   805,   640,   654,   699,   909,   375,   616,   617,
     618,   619,   656,   468,   657,   293,   700,    70,   709,   689,
     105,   693,   683,   476,   515,   714,   715,   122,   728,   729,
     334,   730,   731,   732,   888,   487,   733,    92,   559,  -157,
     742,   738,   120,    71,    71,    71,  -252,   352,   748,    70,
     747,   749,   884,   752,   753,   488,   834,   416,   835,   756,
     757,   771,   375,   760,   758,   941,   -72,   759,   314,    92,
     761,   126,   762,   763,   770,   105,   105,   376,   105,   419,
     376,   775,   -73,   778,    70,   951,   783,   120,   307,   307,
     376,    84,    84,    84,   784,   376,   785,   376,   -72,   376,
     786,   925,   787,   795,    92,   796,   605,   806,   537,   964,
     189,   799,   807,   819,   -73,   812,   495,   831,    71,   874,
     875,    36,   307,   120,  -394,   816,   836,   821,   315,   844,
     848,   773,   842,   526,   858,   315,   754,   234,   234,   234,
     628,   -72,   754,   -72,   376,   -72,   754,   754,   754,   -72,
     754,   860,    99,   651,   872,   -72,   876,   -73,   641,   -73,
     645,   -73,   879,   645,   645,   -73,    84,   882,   880,   887,
     893,   -73,   343,   891,   892,   -72,   307,    71,   896,    99,
     901,   105,    99,   903,   565,   339,   905,   904,   908,    75,
     326,   -73,  -273,    99,  -275,   917,   315,    71,   326,   921,
     922,   343,   434,   293,   297,   297,   919,   293,   920,   257,
     263,   540,   234,   326,   339,   377,   928,    99,   923,    75,
     924,    71,    99,   711,   929,    84,   936,    99,   942,   375,
      75,   247,   375,   937,   949,   943,   944,   958,   565,   950,
     565,   961,   375,   316,    99,    84,   963,   375,   966,   375,
     660,   375,   189,   664,    75,   241,   845,   278,   293,   340,
     931,   487,   850,   863,   487,   533,   309,   124,   744,    84,
     833,   234,   468,   846,   855,   902,   557,   128,   856,   794,
     567,   488,   529,   676,   488,   279,   458,   655,   255,   262,
     793,   234,   865,   866,   622,   295,   375,   257,   623,   280,
     624,   565,   565,   808,   439,   871,   626,   694,   625,   525,
     712,     0,     0,   257,     0,   234,     0,   370,     0,   371,
     373,     0,     0,   722,   293,     0,     0,   281,   323,   325,
     282,   283,     0,   284,   383,   285,     0,     0,   388,   390,
     392,     0,     0,   724,   286,     0,   287,   645,     0,     0,
       0,     0,     0,     0,     0,     0,   315,     0,     0,     0,
       0,     0,   437,   461,     0,   913,     0,     0,   257,     0,
       0,     0,     0,     0,     0,     0,   255,     0,     0,     0,
       0,   565,   565,     0,     0,     0,     0,   256,   256,   343,
       0,   293,   255,    99,     0,     0,     0,     0,     0,     0,
       0,     0,   339,   293,     0,   326,     0,     0,   934,     0,
       0,     0,   935,     0,   326,   326,     0,     0,   938,   939,
       0,   482,   315,     0,     0,    99,     0,   324,   491,     0,
      75,     0,     0,   247,     0,     0,     0,     0,   247,     0,
       0,     0,   476,     0,   952,     0,     0,   255,     0,     0,
       0,     0,   487,     0,   960,     0,     0,     0,     0,     0,
      99,     0,    75,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   488,     0,     0,   256,     0,     0,   340,     0,
       0,     0,     0,     0,     0,     0,   859,     0,     0,     0,
       0,   256,     0,     0,   870,     0,     0,   722,     0,   828,
     722,   829,   483,     0,   541,     0,     0,   340,   323,     0,
     550,   550,     0,     0,     0,     0,     0,   724,   827,     0,
     724,     0,   885,     0,     0,     0,     0,     0,     0,     0,
     889,     0,   890,   547,   547,   257,   247,     0,   257,     0,
       0,   315,     0,     0,     0,   257,   256,   257,   257,     0,
       0,     0,     0,   257,     0,   257,     0,   257,   862,     0,
       0,   323,   532,     0,     0,     0,     0,     0,   912,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     461,     0,     0,     0,     0,   542,     0,     0,     0,   549,
     549,     0,     0,   326,     0,     0,     0,     0,     0,     0,
     315,   484,   257,   722,     0,   932,     0,   484,     0,     0,
       0,     0,     0,     0,   255,     0,     0,   255,   263,     0,
       0,   263,   263,   724,   255,     0,   255,   255,     0,     0,
       0,     0,   255,     0,   255,     0,   255,     0,     0,   916,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     954,   550,     0,     0,     0,     0,     0,     0,   263,     0,
     531,     0,   247,     0,     0,   962,     0,     0,     0,   257,
     257,   297,     0,     0,   547,     0,     0,     0,     0,     0,
       0,   255,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   340,     0,   262,     0,     0,
     262,   262,     0,   315,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,   726,   256,     0,     0,     0,
       0,     0,     0,   256,     0,   256,   256,   668,     0,     0,
     549,   256,     0,   256,     0,   256,   323,   262,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   255,   255,
       0,     0,     0,     0,     0,   -82,   247,     0,     0,     0,
       0,     0,   -82,     0,     0,     0,     0,     0,     0,   -82,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -82,
     256,     0,     0,     0,     0,     0,   720,   -82,     0,   -82,
       0,     0,     0,     0,   -82,   727,   256,     0,     0,   256,
     256,     0,     0,     0,   -82,   263,     0,     0,   -82,   -82,
       0,   -82,     0,     0,     0,     0,     0,   -82,     0,   -82,
       0,   -82,     0,     0,     0,     0,   669,     0,     0,     0,
     -82,   -82,   -82,     0,   -82,   669,   256,     0,   -82,     0,
       0,     0,     0,     0,   -82,   550,     0,   256,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -82,   -82,     0,   -82,   -82,   -82,     0,     0,   547,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,   550,     0,     0,
       0,     0,     0,     0,   324,     0,     0,   550,   -82,   -82,
     -82,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     547,   -82,   -82,   -82,   -82,   -82,   -83,     0,   -82,     0,
     547,     0,   257,   -83,   549,   257,     0,     0,     0,     0,
     -83,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -83,     0,     0,     0,     0,     0,     0,     0,   -83,     0,
     -83,     0,     0,     0,     0,   -83,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -83,   549,     0,     0,   -83,
     -83,   830,   -83,     0,     0,     0,   549,     0,   -83,   257,
     -83,     0,   -83,   256,     0,     0,     0,     0,     0,     0,
       0,   -83,   -83,   -83,     0,   -83,     0,     0,     0,   -83,
       0,   255,     0,     0,   255,   -83,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -83,   -83,     0,   -83,   -83,   -83,     0,     0,     0,
       0,     0,   -80,     0,     0,     0,     0,     0,     0,   -80,
       0,     0,     0,     0,     0,     0,   -80,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -80,     0,   255,   -83,
     -83,   -83,     0,   420,   -80,   421,   -80,     0,     0,     0,
     531,   -80,   -83,   -83,   -83,   -83,   -83,     0,   422,   -83,
       0,   -80,     0,     0,     0,   -80,   -80,     0,   -80,     0,
       0,     0,     0,     0,   -80,     0,   -80,   423,   -80,     0,
     256,   424,   425,   256,     0,   426,   427,   -80,   -80,   -80,
       0,   -80,   428,     0,     0,   -80,     0,     0,     0,   429,
       0,   -80,     0,     0,     0,     0,     0,     0,   430,     0,
       0,     0,     0,     0,     0,     0,     0,   -80,   -80,     0,
     -80,   -80,   -80,   765,   766,     0,   431,   -81,   432,     0,
       0,     0,     0,     0,   -81,     0,     0,   256,     0,     0,
       0,   -81,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -81,     0,     0,     0,   -80,   -80,   -80,   420,   -81,
     421,   -81,     0,     0,     0,     0,   -81,     0,   -80,   -80,
     -80,   -80,   -80,   422,     0,   -80,   -81,     0,     0,     0,
     -81,   -81,     0,   -81,     0,     0,     0,     0,     0,   -81,
       0,   -81,   423,   -81,     0,     0,   424,   425,     0,     0,
     426,   427,   -81,   -81,   -81,     0,   -81,   428,     0,     0,
     -81,     0,     0,     0,   429,     0,   -81,     0,     0,     0,
       0,     0,     0,   430,     0,     0,     0,     0,     0,     0,
       0,     0,   -81,   -81,     0,   -81,   -81,   -81,     0,     0,
       0,   431,   -84,   432,     0,     0,     0,     0,     0,   -84,
       0,     0,     0,     0,     0,     0,   -84,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -84,     0,     0,     0,
     -81,   -81,   -81,     0,   -84,     0,   -84,     0,     0,     0,
       0,   -84,     0,   -81,   -81,   -81,   -81,   -81,     0,     0,
     -81,   -84,     0,     0,     0,   -84,   -84,     0,   -84,     0,
       0,     0,     0,     0,   -84,     0,   -84,     0,   -84,     0,
       0,     0,     0,     0,     0,     0,     0,   -84,   -84,   -84,
       0,   -84,     0,     0,     0,   -84,     0,     0,     0,     0,
       0,   -84,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -84,   -84,     0,
     -84,   -84,   -84,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -84,   -84,   -84,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -84,   -84,
     -84,   -84,   -84,     0,   133,   -84,     1,     2,     3,   134,
     190,   191,     4,   135,     5,   192,   136,   193,     0,   194,
       6,     0,     7,     0,     8,     9,   137,   138,   195,   196,
       0,   139,   197,   198,    11,    12,     0,     0,     0,    13,
     140,     0,     0,     0,   141,     0,     0,   142,     0,    14,
     199,     0,     0,    15,    16,   143,    17,   144,    18,     0,
     200,     0,    19,    20,    21,    22,    23,   201,     0,    24,
      25,    26,   145,     0,   146,   202,     0,   203,   149,     0,
     150,     0,     0,     0,   204,     0,     0,     0,     0,   151,
       0,     0,   205,     0,   457,   152,   153,   154,   155,   156,
     157,   206,   159,   160,    31,    32,    33,    34,    35,    36,
      37,     0,     0,     0,     0,     0,     0,     0,     0,   207,
      46,     0,     0,     0,   208,     0,     0,     0,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    55,    56,    57,     0,   210,   161,   162,
     211,   212,   163,     0,   213,   214,    58,    59,    60,    61,
      62,     0,   133,    63,     1,     2,     3,   134,   190,   191,
       4,   135,     5,   192,   136,   193,     0,   194,     6,     0,
       7,     0,     8,     9,   137,   138,   195,   196,     0,   139,
     197,   198,    11,    12,     0,     0,     0,    13,   140,     0,
       0,     0,   141,     0,     0,   142,     0,    14,   199,     0,
       0,    15,    16,   143,    17,   144,    18,     0,   200,     0,
      19,    20,    21,    22,    23,   201,     0,    24,    25,    26,
     145,     0,   146,   202,     0,   203,   149,     0,   150,     0,
       0,     0,   204,     0,     0,     0,     0,   151,     0,     0,
     205,     0,   649,   152,   153,   154,   155,   156,   157,   206,
     159,   160,    31,    32,    33,    34,    35,    36,    37,     0,
       0,     0,     0,     0,     0,     0,     0,   207,    46,     0,
       0,     0,   208,     0,     0,     0,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    55,    56,    57,     0,   210,   161,   162,   211,   212,
     163,     0,   213,   214,    58,    59,    60,    61,    62,     0,
     133,    63,     1,     2,     3,   134,   190,   191,     4,   135,
       5,   192,   136,   193,     0,   194,     6,     0,     7,     0,
       8,     9,   137,   138,   195,   196,     0,   139,   197,   198,
      11,    12,     0,     0,     0,    13,   140,     0,     0,     0,
     141,     0,     0,   142,     0,    14,   199,     0,     0,    15,
      16,   143,    17,   144,    18,     0,   200,     0,    19,    20,
      21,    22,    23,   201,     0,    24,    25,    26,   145,     0,
     146,   202,     0,   203,   149,     0,   150,     0,     0,     0,
     204,     0,     0,     0,     0,   151,     0,     0,   205,     0,
       0,   152,   153,   154,   155,   156,   157,   206,   159,   160,
      31,    32,    33,    34,    35,    36,    37,     0,     0,     0,
       0,     0,     0,     0,     0,   207,    46,     0,     0,     0,
     208,     0,     0,     0,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
      56,    57,     0,   210,   161,   162,   211,   212,   163,     0,
     213,   214,    58,    59,    60,    61,    62,     0,   133,    63,
       1,     2,     3,   134,     0,     0,     4,   135,     5,     0,
     136,     0,     0,     0,     6,     0,     7,     0,     8,     9,
     137,   138,     0,     0,     0,   139,    10,     0,    11,    12,
       0,     0,     0,    13,   140,     0,     0,     0,   141,     0,
       0,   142,     0,    14,     0,     0,     0,    15,    16,   143,
      17,   144,    18,     0,     0,     0,    19,    20,    21,    22,
      23,     0,     0,    24,    25,    26,   145,     0,   146,   202,
       0,   203,   149,     0,   150,     0,     0,     0,    29,     0,
       0,     0,     0,   151,     0,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   206,   159,   160,    31,    32,
      33,    34,    35,    36,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
       0,     0,   161,   162,     0,     0,   163,     0,     0,     0,
      58,    59,    60,    61,    62,   133,     0,    63,     2,     3,
     134,     0,     0,     4,   135,     5,     0,   136,     0,     0,
       0,     6,     0,     7,     0,     8,     9,   137,   138,     0,
       0,     0,   139,    10,     0,    11,    12,     0,     0,     0,
      13,   140,     0,     0,     0,   141,     0,     0,   142,     0,
      14,     0,     0,     0,    15,    16,   143,    17,   144,    18,
       0,     0,     0,    19,    20,    21,    22,    23,     0,     0,
       0,     0,     0,   145,     0,   146,   147,     0,   148,   149,
       0,   150,     0,     0,     0,     0,     0,     0,     0,     0,
     151,     0,     0,   205,     0,     0,   152,   153,   154,   155,
     156,   157,   158,   159,   160,     0,    32,    33,    34,    35,
      36,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    55,    56,    57,     0,     0,   161,
     162,     0,     0,   163,     0,     0,     0,    58,    59,    60,
      61,    62,   133,     0,    63,     2,     3,   134,     0,     0,
       4,   135,     5,     0,   136,     0,     0,     0,     6,     0,
       7,     0,     8,     9,   137,   138,     0,     0,     0,   139,
      10,     0,    11,    12,     0,     0,     0,    13,   140,     0,
       0,     0,   141,     0,     0,   142,     0,    14,     0,     0,
       0,    15,    16,   143,    17,   144,    18,     0,     0,     0,
      19,    20,    21,    22,    23,     0,     0,     0,     0,     0,
     145,     0,   146,   202,     0,   203,   149,     0,   150,     0,
       0,     0,     0,     0,     0,     0,     0,   151,     0,     0,
     205,     0,     0,   152,   153,   154,   155,   156,   157,   158,
     159,   160,     0,    32,    33,    34,    35,    36,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    55,    56,    57,     0,     0,   161,   162,     0,     0,
     163,     0,     0,     0,    58,    59,    60,    61,    62,   133,
       0,    63,     2,     3,   134,     0,     0,     4,   135,     5,
       0,   136,     0,     0,     0,     6,     0,     7,     0,     8,
       9,   137,   138,     0,     0,     0,   139,    10,     0,    11,
      12,     0,     0,     0,    13,   140,     0,     0,     0,   141,
       0,     0,   142,     0,    14,     0,     0,     0,    15,    16,
     143,    17,   144,    18,     0,     0,     0,    19,    20,    21,
      22,    23,     0,     0,     0,     0,     0,   145,     0,   146,
     202,     0,   203,   149,     0,   150,     0,     0,     0,   204,
       0,     0,     0,     0,   151,     0,     0,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   158,   159,   160,     0,
      32,    33,    34,    35,    36,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
      57,     0,     0,   161,   162,     0,     0,   163,     0,     0,
       0,    58,    59,    60,    61,    62,   133,     0,    63,     2,
       3,   134,     0,     0,     4,   135,     5,     0,   136,     0,
       0,     0,     6,     0,     7,     0,     8,     9,   137,   138,
       0,     0,     0,   139,    10,     0,    11,    12,     0,     0,
       0,    13,   140,     0,     0,     0,   141,     0,     0,   142,
       0,    14,     0,     0,     0,    15,    16,   143,    17,   144,
      18,     0,     0,     0,    19,    20,    21,    22,    23,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,    32,    33,    34,
      35,    36,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    55,    56,    57,     0,     0,
     161,   162,     0,     0,   163,     0,     0,     0,    58,    59,
      60,    61,    62,     0,     0,    63,     1,     2,     3,     0,
       0,     0,     4,     0,     5,     0,     0,     0,     0,     0,
       6,     0,     7,     0,     8,     9,     0,     0,     0,     0,
       0,     0,    10,     0,    11,    12,     0,     0,     0,    13,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    14,
       0,     0,     0,    15,    16,     0,    17,     0,    18,     0,
       0,     0,    19,    20,    21,    22,    23,     0,     0,    24,
      25,    26,     0,     0,     0,    27,     0,    28,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
      46,     0,     0,     0,    47,     0,     0,     0,     0,     0,
       0,     0,     0,    48,    49,    50,     0,    51,     0,    52,
      53,    54,     0,    55,    56,    57,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    58,    59,    60,    61,
      62,     0,     0,    63,     1,     2,     3,     0,     0,     0,
       4,     0,     5,     0,     0,     0,     0,     0,     6,     0,
       7,     0,     8,     9,     0,     0,     0,     0,     0,     0,
      10,     0,    11,    12,     0,     0,     0,    13,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    14,     0,     0,
       0,    15,    16,     0,    17,     0,    18,     0,     0,     0,
      19,    20,    21,    22,    23,     0,     0,    24,    25,    26,
       0,     0,     0,    27,     0,    28,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,    31,    32,    33,    34,    35,    36,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,     1,
       2,     3,    47,     0,     0,     4,     0,     5,     0,     0,
       0,     0,     0,     6,     0,     7,     0,     8,     9,     0,
       0,    55,    56,    57,     0,    10,     0,    11,    12,     0,
       0,     0,    13,     0,    58,    59,    60,    61,    62,     0,
       0,    63,    14,     0,     0,     0,    15,    16,     0,    17,
       0,    18,     0,     0,     0,    19,    20,    21,    22,    23,
       0,     0,    24,    25,    26,     0,     0,     0,    27,     0,
      28,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,    31,    32,    33,
      34,    35,    36,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,     2,     3,     0,     0,     0,
       4,     0,     5,     0,     0,     0,     0,     0,     6,     0,
       7,     0,     8,     9,     0,     0,    55,    56,    57,     0,
     242,     0,    11,    12,     0,     0,     0,    13,     0,    58,
      59,    60,    61,    62,     0,     0,    63,    14,     0,     0,
       0,    15,    16,     0,    17,     0,    18,     0,     0,     0,
      19,    20,    21,    22,    23,     0,     0,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   243,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   566,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,    32,    33,    34,    35,    36,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,     0,
       2,     3,   245,     0,     0,     4,     0,     5,     0,     0,
       0,     0,     0,     6,     0,     7,     0,     8,     9,     0,
       0,    55,    56,    57,     0,   242,     0,    11,    12,     0,
       0,     0,    13,     0,    58,    59,    60,    61,    62,     0,
       0,    63,    14,     0,     0,     0,    15,    16,     0,    17,
       0,    18,     0,     0,     0,    19,    20,    21,    22,    23,
       0,     0,    24,     2,     3,     0,     0,     0,     4,     0,
       5,     0,     0,     0,     0,     0,     6,   243,     7,     0,
       8,     9,     0,     0,     0,     0,     0,   739,   242,     0,
      11,    12,     0,     0,   244,    13,     0,     0,    32,    33,
      34,    35,    36,    37,     0,    14,     0,     0,     0,    15,
      16,     0,    17,    46,    18,     0,     0,   245,    19,    20,
      21,    22,    23,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,    56,    57,     0,
     243,     0,     0,     0,     0,     0,     0,     0,     0,    58,
      59,    60,    61,    62,     0,     0,    63,   244,     0,     0,
       0,    32,    33,    34,    35,    36,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,     2,     3,
     245,     0,     0,     4,     0,     5,     0,     0,     0,     0,
       0,     6,     0,     7,     0,     8,     9,     0,     0,    55,
      56,    57,     0,   242,     0,    11,    12,     0,     0,     0,
      13,     0,    58,    59,    60,    61,    62,     0,     0,    63,
      14,     0,     0,     0,    15,    16,     0,    17,     0,    18,
       0,     0,     0,    19,    20,    21,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,   485,   670,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     486,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    32,    33,    34,    35,
      36,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     3,     0,     0,     0,     4,     0,
       5,     0,     0,     0,     0,     0,     6,     0,     7,     0,
       8,     9,     0,     0,    55,    56,    57,     0,    10,     0,
      11,    12,     0,     0,     0,    13,     0,    58,    59,    60,
      61,    62,     0,     0,    63,    14,     0,     0,     0,    15,
      16,     0,    17,     0,    18,     0,     0,     0,    19,    20,
      21,    22,    23,     0,     0,     0,     0,     0,     0,     0,
       0,   721,   670,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   486,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,    33,    34,    35,    36,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     3,
       0,     0,     0,     4,     0,     5,     0,     0,     0,     0,
       0,     6,     0,     7,     0,     8,     9,     0,     0,    55,
      56,    57,     0,   545,     0,    11,    12,     0,     0,     0,
      13,     0,    58,    59,    60,    61,    62,     0,     0,    63,
      14,     0,     0,     0,    15,    16,     0,    17,     0,    18,
       0,     0,     0,    19,    20,    21,    22,    23,     0,     0,
       0,     2,     3,     0,     0,     0,     4,   546,     5,     0,
       0,     0,     0,     0,     6,     0,     7,     0,     8,     9,
       0,     0,     0,     0,     0,     0,   545,     0,    11,    12,
       0,     0,     0,    13,     0,     0,    32,    33,    34,    35,
      36,    37,     0,    14,     0,     0,     0,    15,    16,     0,
      17,     0,    18,     0,     0,     0,    19,    20,    21,    22,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     556,     0,     0,     0,    55,    56,    57,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    58,    59,    60,
      61,    62,     0,     0,    63,     0,     0,     0,     0,    32,
      33,    34,    35,    36,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     3,     0,     0,
       0,     4,     0,     5,     0,     0,     0,     0,     0,     6,
       0,     7,     0,     8,     9,     0,     0,    55,    56,    57,
       0,   242,     0,    11,    12,     0,     0,     0,    13,     0,
      58,    59,    60,    61,    62,     0,     0,    63,    14,     0,
       0,     0,    15,    16,     0,    17,     0,    18,     0,     0,
       0,    19,    20,    21,    22,    23,     0,     0,     0,     2,
       3,     0,     0,     0,     4,   801,     5,     0,     0,     0,
       0,     0,     6,     0,     7,     0,     8,     9,     0,     0,
       0,     0,     0,     0,   242,     0,    11,    12,     0,     0,
       0,    13,     0,     0,    32,    33,    34,    35,    36,    37,
       0,    14,     0,     0,     0,    15,    16,     0,    17,     0,
      18,     0,     0,   832,    19,    20,    21,    22,    23,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,    56,    57,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    58,    59,    60,    61,    62,
       0,     0,    63,     0,     0,     0,     0,    32,    33,    34,
      35,    36,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     3,     0,     0,     0,     4,
       0,     5,     0,     0,     0,     0,     0,     6,     0,     7,
       0,     8,     9,     0,     0,    55,    56,    57,     0,   242,
       0,    11,    12,     0,     0,     0,    13,     0,    58,    59,
      60,    61,    62,     0,     0,    63,    14,     0,     0,     0,
      15,    16,     0,    17,     0,    18,     0,     0,     0,    19,
      20,    21,    22,    23,     0,     0,     2,     3,     0,     0,
       0,     4,     0,     5,     0,     0,     0,     0,     0,     6,
       0,     7,     0,     8,     9,     0,     0,     0,     0,     0,
       0,   242,     0,    11,    12,     0,     0,     0,    13,     0,
       0,     0,    32,    33,    34,    35,    36,    37,    14,     0,
       0,     0,    15,    16,     0,    17,     0,    18,     0,     0,
       0,    19,    20,    21,    22,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      55,    56,    57,     0,     0,     0,     0,     0,     0,     0,
       0,   205,     0,    58,    59,    60,    61,    62,     0,     0,
      63,     0,     0,     0,    32,    33,    34,    35,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     3,     0,     0,     0,     4,     0,     5,     0,
       0,     0,     0,     0,     6,     0,     7,     0,     8,     9,
       0,     0,    55,    56,    57,     0,   242,     0,    11,    12,
       0,     0,     0,    13,     0,    58,    59,    60,    61,    62,
       0,     0,    63,    14,     0,     0,     0,    15,    16,     0,
      17,     0,    18,     0,     0,     0,    19,    20,    21,    22,
      23,  -112,     0,     0,     0,     0,     0,     0,  -112,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -112,     0,
       0,     0,     0,     0,     0,     0,  -112,     0,  -112,     0,
       0,     0,     0,  -112,     0,     0,     0,     0,     0,    32,
      33,    34,    35,  -112,    37,     0,     0,  -112,  -112,     0,
    -112,     0,     0,     0,     0,     0,  -112,     0,  -112,     0,
    -112,     0,     0,     0,     0,     0,     0,     0,     0,  -112,
    -112,  -112,     0,  -112,     0,     0,     0,    55,    56,    57,
       0,     0,     0,  -112,     0,     0,     0,     0,     0,     0,
      58,    59,    60,    61,    62,     0,     0,    63,     0,  -112,
    -112,     0,  -112,  -112,  -112,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -112,     0,     0,     0,
       0,     0,     0,  -112,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -112,     0,     0,     0,  -112,  -112,  -112,
       0,  -112,     0,  -112,     0,     0,     0,     0,  -112,     0,
    -112,  -112,  -112,  -112,  -112,     0,     0,  -112,  -112,     0,
       0,     0,  -112,  -112,     0,  -112,     0,     0,     0,     0,
       0,  -112,     0,  -112,     0,  -112,     0,     0,     2,     0,
       0,     0,     0,     0,  -112,     5,  -112,     0,     0,     0,
       0,     0,   451,     0,     0,     8,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,     0,     0,
     318,     0,     0,     0,  -112,  -112,     0,  -112,  -112,  -112,
      14,     0,     0,     0,   319,   320,     0,    17,     0,     0,
       0,     0,     0,    19,     0,   321,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,  -101,     0,  -101,     0,
       0,     0,  -112,  -112,  -112,     0,     0,     0,     0,     0,
    -101,     0,     0,     0,     0,  -112,  -112,  -112,  -112,  -112,
       0,     0,  -112,     0,     0,     0,   322,    33,     0,    35,
      36,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     5,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     8,     0,     0,
       0,     0,     0,     0,    55,    56,    57,    11,     0,     0,
       0,     0,   318,     0,     0,     0,     0,    58,    59,    60,
      61,    62,    14,     0,    63,     0,   319,   320,     0,    17,
       0,     0,     0,     0,     0,    19,     0,   321,     0,    23,
       0,     0,     2,     0,     0,     0,     0,     0,   -99,     5,
     -99,     0,     0,     0,     0,     0,     0,     0,     0,     8,
       0,     0,   -99,     0,     0,     0,     0,     0,     0,    11,
       0,     0,     0,     0,   318,     0,     0,     0,   322,    33,
       0,    35,    36,    37,    14,     0,     0,     0,   319,   320,
       0,    17,     0,     0,     0,     0,     0,    19,     0,   321,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -64,     0,     0,   -64,     0,    55,    56,    57,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    58,
      59,    60,    61,    62,     0,     0,    63,     0,     0,     0,
     322,    33,     0,    35,    36,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     5,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,     0,     0,    55,    56,
      57,    11,     0,     0,     0,     0,   318,     0,     0,     0,
       0,    58,    59,    60,    61,    62,    14,     0,    63,     0,
     319,   320,     0,    17,     0,     0,     0,     0,     0,    19,
       0,   321,     0,    23,     0,     0,     0,     2,     0,     0,
       0,     0,     0,   -62,     5,     0,   -62,     0,     0,     0,
       0,     0,     0,     0,     8,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    11,     0,     0,     0,     0,   318,
       0,     0,   322,    33,     0,    35,    36,    37,     0,    14,
       0,     0,     0,   319,   320,     0,    17,     0,     0,     0,
       0,     0,    19,     0,   321,     0,    23,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     5,     0,
      55,    56,    57,     0,   -69,     0,     0,     0,     8,     0,
       0,     0,     0,    58,    59,    60,    61,    62,    11,     0,
      63,     0,     0,   318,     0,   322,    33,     0,    35,    36,
      37,     0,     0,    14,     0,     0,     0,   319,   320,     0,
      17,     0,     0,     0,     0,     0,    19,     0,   321,     0,
      23,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     5,     0,    55,    56,    57,     0,     0,   -67,     0,
       0,     8,     0,     0,     0,     0,    58,    59,    60,    61,
      62,    11,     0,    63,     0,     0,   318,     0,     0,   322,
      33,     0,    35,    36,    37,     0,    14,     0,     0,     0,
     319,   320,     0,    17,     0,     0,     0,     0,     0,    19,
       0,   321,     0,    23,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     5,     0,    55,    56,    57,
       0,     0,     0,     0,     0,     8,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    11,     0,    63,     0,     0,
     318,     0,   322,    33,     0,    35,    36,    37,     0,     0,
      14,     0,     0,     0,   319,   320,     0,    17,     0,     0,
       0,     0,     0,    19,     0,   321,     0,    23,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     5,     0,
      55,    56,    57,     0,     0,     0,     0,     0,     8,     0,
       0,     0,     0,    58,    59,    60,    61,    62,    11,     0,
      63,     0,     0,   318,     0,     0,   322,    33,     0,    35,
      36,    37,     0,    14,     0,     0,     0,   319,   320,     0,
      17,     0,     0,     0,     0,     0,    19,     0,   321,     0,
      23,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     5,     0,    55,    56,    57,     0,     0,     0,
       0,     0,     8,     0,     0,     0,     0,    58,    59,    60,
      61,    62,    11,     0,    63,     0,     0,   318,     0,   322,
      33,     0,    35,    36,    37,     0,     0,    14,     0,     0,
       0,   319,   320,     0,    17,     0,     0,     0,     0,     0,
      19,     0,   321,     0,    23,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     5,     0,    55,    56,    57,
       0,     0,     0,     0,     0,     8,     0,     0,     0,     0,
      58,    59,    60,    61,    62,    11,     0,    63,     0,     0,
     318,     0,     0,   322,    33,     0,    35,    36,    37,     0,
      14,     0,     0,     0,   319,   320,     0,    17,     0,     0,
       0,     0,     0,    19,     0,   321,     0,    23,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     5,
       0,    55,    56,    57,     0,     0,     0,     0,     0,     8,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    11,
       0,    63,     0,     0,   318,     0,   322,    33,     0,    35,
      36,    37,     0,     0,    14,     0,     0,     0,   319,   320,
       0,    17,     0,     0,     0,     0,     0,    19,     0,   321,
       0,    23,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     5,     0,    55,    56,    57,     0,     0,     0,
       0,     0,     8,     0,     0,     0,     0,    58,    59,    60,
      61,    62,    11,     0,    63,     0,     0,   318,     0,     0,
     322,    33,     0,    35,    36,    37,     0,    14,     0,     0,
       0,   319,   320,     0,    17,     0,     0,     0,     0,     0,
      19,     0,   321,     0,    23,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     5,     0,    55,    56,
      57,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       0,    58,    59,    60,    61,    62,    11,     0,    63,     0,
       0,   318,     0,   322,    33,     0,    35,    36,    37,     0,
       0,    14,     0,     0,     0,   319,   320,     0,    17,     0,
       0,     0,     0,     0,    19,     0,   321,     0,    23,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     5,
       0,    55,    56,    57,     0,     0,     0,     0,     0,     8,
       0,     0,     0,     0,    58,    59,    60,    61,    62,    11,
       0,    63,     0,     0,   318,     0,     0,   322,    33,     0,
      35,    36,    37,     0,    14,     0,     0,     0,   319,   320,
       0,    17,     0,     0,     0,     0,     0,    19,     0,   321,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    55,    56,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    58,    59,
      60,    61,    62,     0,     0,    63,     0,     0,     0,     0,
     322,    33,     0,    35,    36,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     133,     0,     0,     0,     0,   134,     0,     0,     0,   135,
       5,     0,   136,     0,     0,     0,     0,     0,    55,    56,
      57,     0,   137,   138,     0,     0,     0,   139,   121,     0,
       0,    58,    59,    60,    61,    62,   140,     0,    63,     0,
     141,     0,     0,   142,     0,     0,     0,     0,     0,     0,
       0,   143,   559,   144,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,   145,     0,
     146,   147,     0,   560,   149,     0,   150,     0,     0,     0,
       0,     0,     0,     0,     0,   151,     0,     0,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
       0,     0,     0,     0,    35,     0,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   505,     0,     0,     0,     0,    55,
      56,    57,   140,     0,   161,   162,   141,     0,   163,   142,
       0,     0,     0,     0,     0,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,   506,     0,     0,     0,     0,     0,     0,
       0,   507,     0,     0,   291,     0,   508,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   817,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,   506,     0,     0,     0,     0,     0,     0,
       0,   507,     0,     0,   291,     0,   818,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   817,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,   506,     0,     0,     0,     0,     0,     0,
       0,   507,     0,     0,   291,     0,   933,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   505,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,   506,     0,     0,     0,     0,     0,     0,
       0,   507,     0,     0,   291,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,   291,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,   453,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   522,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,   523,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,   601,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,   627,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,   710,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,   754,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,   768,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,   953,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   436,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   147,     0,   560,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,   151,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   369,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   372,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   382,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   387,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   389,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   133,     0,     0,     0,
       0,   134,     0,     0,     0,   135,     0,     0,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,   139,   121,     0,     0,     0,     0,     0,
       0,     0,   140,     0,     0,     0,   141,     0,     0,   142,
     161,   162,     0,     0,   163,     0,     0,   143,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   146,   391,     0,   148,
     149,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     161,   162,     0,     0,   163
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned short int yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   453,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   357,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   455,     0,   457,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   427,
       0,     0,     0,     0,     0,     0,   429,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   431,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   433,     0,
     583,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   435,     0,     0,     0,     0,     0,     0,   563,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   353,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,   559,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   423,   425,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   437,     0,   439,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     567,     0,   569,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   441,     0,   597,     0,     0,
       0,     0,   571,     0,   573,     0,     0,     0,     0,     0,
       0,     0,   443,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   445,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     459,   461,     0,   475,   463,     0,     0,     0,     0,   465,
       0,   467,     0,     0,   469,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   545,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   575,     0,     0,
       0,     0,     0,     0,     0,     0,   359,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   577,
       0,     0,   477,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   361,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   479,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   587,     0,     0,   363,   589,   591,   593,   365,
     595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   481,     0,     0,     0,   483,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   367,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   485,   599,     0,   601,     0,     0,     0,     0,     0,
       0,     0,   603,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,     0,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,     0,     0,    17,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
       0,     0,     0,     0,     0,     0,     0,    21,     0,    23,
       0,     0,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,    29,    31,
       0,    33,     0,     0,     0,     0,     0,    35,     0,    37,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
      41,    43,    45,     0,    47,     0,     0,     0,    49,     0,
       0,     0,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      53,    55,     0,    57,    59,    61,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    63,    65,
      67,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    69,    71,    73,    75,    77,    81,     0,    79,     0,
       0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
      85,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      87,     0,     0,     0,     0,     0,     0,     0,    89,     0,
      91,     0,     0,     0,     0,    93,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    95,     0,     0,     0,    97,
      99,     0,   101,     0,     0,     0,     0,     0,   103,     0,
     105,     0,   107,     0,     0,     0,     0,     0,     0,     0,
       0,   109,   111,   113,     0,   115,     0,     0,     0,   117,
       0,     0,     0,     0,     0,   119,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   121,   123,     0,   125,   127,   129,     0,     0,     0,
       0,     0,   149,     0,     0,     0,     0,     0,     0,   151,
       0,     0,     0,     0,     0,     0,   153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   155,     0,     0,   131,
     133,   135,     0,     0,   157,     0,   159,     0,     0,     0,
       0,   161,   137,   139,   141,   143,   145,     0,     0,   147,
       0,   163,     0,     0,     0,   165,   167,     0,   169,     0,
       0,     0,     0,     0,   171,     0,   173,     0,   175,     0,
       0,     0,     0,     0,     0,     0,     0,   177,   179,   181,
       0,   183,     0,     0,     0,   185,     0,     0,     0,     0,
       0,   187,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   189,   191,     0,
     193,   195,   197,     0,     0,     0,     0,   217,     0,     0,
       0,     0,     0,     0,   219,     0,     0,     0,     0,     0,
       0,   221,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   223,     0,     0,     0,   199,   201,   203,     0,   225,
       0,   227,     0,     0,     0,     0,   229,     0,   205,   207,
     209,   211,   213,     0,     0,   215,   231,     0,     0,     0,
     233,   235,     0,   237,     0,     0,     0,     0,     0,   239,
       0,   241,     0,   243,     0,     0,     0,     0,     0,     0,
       0,     0,   245,   247,   249,     0,   251,     0,     0,     0,
     253,     0,     0,     0,     0,     0,   255,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   257,   259,     0,   261,   263,   265,     0,     0,
       0,     0,   285,     0,     0,     0,     0,     0,     0,   287,
       0,     0,     0,     0,     0,     0,   289,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   291,     0,     0,     0,
     267,   269,   271,     0,   293,     0,   295,     0,     0,     0,
       0,   297,     0,   273,   275,   277,   279,   281,     0,     0,
     283,   299,     0,     0,     0,   301,   303,     0,   305,     0,
       0,     0,     0,     0,   307,     0,   309,     0,   311,     0,
       0,     0,     0,     0,     0,     0,     0,   313,   315,   317,
       0,   319,     0,     0,     0,   321,     0,     0,     0,     0,
       0,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   325,   327,     0,
     329,   331,   333,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   335,   337,   339,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   341,   343,
     345,   347,   349,     0,     0,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   541,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       3,     5,     0,     7,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     9,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   447,     0,   449,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   451,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     471,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   549,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   371,     0,     0,
       0,     0,     0,     0,   373,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   375,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   377,     0,     0,     0,     0,   379,
       0,     0,     0,     0,     0,     0,   585,     0,     0,   381,
       0,     0,     0,   383,   385,     0,   387,     0,     0,     0,
       0,     0,   389,     0,   391,     0,   393,     0,     0,     0,
       0,   489,     0,     0,     0,     0,     0,     0,   491,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   493,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   495,     0,
       0,     0,     0,   497,     0,   395,   397,     0,   399,   401,
     403,     0,     0,   499,     0,     0,     0,   501,   503,     0,
     505,     0,     0,     0,     0,     0,   507,     0,   509,     0,
     511,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   405,   407,   409,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   411,   413,   415,   417,
     419,     0,     0,   421,     0,     0,     0,     0,     0,   513,
     515,     0,   517,   519,   521,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   523,   525,   527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     529,   531,   533,   535,   537,     0,     0,   539,     0,     0,
       0,     0,     0,     0,     0,     0,   369,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     473,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     543,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0,   330,     0,   330,     0,   330,     0,   330,     0,   330,
       0,   330,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   117,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   117,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   117,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   117,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   117,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   117,     0,   117,     0,   117,     0,   117,     0,   117,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   115,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   115,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   115,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   115,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   115,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   115,
       0,   115,     0,   115,     0,   115,     0,   115,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   118,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   118,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   118,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   118,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   118,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   118,     0,   118,
       0,   118,     0,   118,     0,   118,     0,   119,     0,   119,
       0,   119,     0,   119,     0,   119,     0,   119,     0,   119,
       0,   119,     0,   119,     0,   119,     0,   119,     0,   119,
       0,   119,     0,   119,     0,   119,     0,   119,     0,   119,
       0,   119,     0,   119,     0,   119,     0,   119,     0,   119,
       0,   119,     0,   119,     0,   119,     0,   119,     0,   119,
       0,   119,     0,   119,     0,   119,     0,   119,     0,   119,
       0,   119,     0,   119,     0,    94,     0,    94,     0,    94,
       0,    94,     0,    94,     0,    94,     0,    94,     0,    94,
       0,    94,     0,    94,     0,    94,     0,    94,     0,    94,
       0,    94,     0,    94,     0,    94,     0,    94,     0,    94,
       0,    94,     0,    94,     0,    94,     0,    94,     0,    94,
       0,    94,     0,    94,     0,    94,     0,    94,     0,    94,
       0,    94,     0,    94,     0,    94,     0,    94,     0,    94,
       0,    94,     0,   531,     0,    75,     0,    75,     0,    74,
       0,    74,     0,    74,     0,    74,     0,    74,     0,    59,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,   169,     0,   169,     0,   343,     0,   343,
       0,   343,     0,   343,     0,   367,     0,   370,     0,   370,
       0,   383,     0,   389,     0,   417,     0,   330,     0,   330,
       0,   330,     0,   355,     0,   355,     0,   355,     0,   321,
       0,   321,     0,   321,     0,   321,     0,   321,     0,   321,
       0,   101,     0,   101,     0,   532,     0,    74,     0,    74,
       0,    74,     0,    74,     0,    74,     0,    57,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    92,     0,    92,     0,    92,     0,    92,     0,    92,
       0,    53,     0,    52,     0,   478,     0,   330,     0,    99,
       0,    99,     0,    50,     0,    51,     0,   212,     0,   212,
       0,    59,     0,   368,     0,   369,     0,   371,     0,   371,
       0,   372,     0,   372,     0,   384,     0,   390,     0,   409,
       0,    49,     0,   194,     0,    57,     0,   348,     0,   351,
       0,   526,     0,   528,     0,   524,     0,   197,     0,   296,
       0,   297,     0,   481,     0
};

static const short int yycheck[] =
{
       0,   191,    70,   271,    50,   350,    65,     7,   213,   214,
     158,   159,   160,    53,    44,   487,   259,   512,   346,    75,
     168,   346,    43,   497,    42,   300,   301,    27,   396,   499,
      30,    27,   312,   191,   703,    28,   351,    28,   344,   345,
      40,    41,   244,   358,   341,   331,   332,   249,     0,    14,
     455,   456,    32,    30,   674,    77,    32,     0,   206,    83,
     673,   341,    75,    32,    32,    65,    14,    42,    79,    32,
      70,     6,     6,    27,   895,    75,    32,    61,    30,    75,
      66,    83,   194,    94,    32,   109,    32,    30,    40,    41,
      42,    91,    92,    14,     0,    75,    92,    77,    41,    83,
      42,    66,    75,    32,   104,    32,    75,   109,    77,    89,
     131,    32,   302,    65,   191,    76,   228,   130,    46,   119,
      89,    27,    65,    32,    30,    77,   947,   239,    76,   109,
       0,    94,   125,   109,    40,    41,    92,    32,    92,    45,
     109,   109,    48,   108,   302,    66,    52,    53,    94,   217,
       0,    86,    86,   109,    75,    46,    77,   130,   486,    65,
      30,   486,    90,   219,    70,    94,    75,    94,    77,    75,
     131,    41,   208,    75,   109,   109,    79,    57,   143,   144,
     145,    86,   241,    75,   804,    75,    92,   108,   109,   534,
     803,    41,    42,    46,   194,    65,    76,    89,    32,    90,
     109,    32,   202,    83,   109,   205,   206,    32,   398,   245,
     203,    57,   203,    30,   273,    65,   690,   217,   688,   219,
     220,    38,   143,   144,   145,   302,   244,   130,   228,   206,
     899,   249,   529,   255,   639,    88,     0,    32,   606,   239,
     262,   241,   194,    89,    75,   488,    77,   247,   202,   529,
     722,   537,    83,   205,   206,   403,   404,   405,    92,   259,
     575,    14,    36,   206,    84,    76,   220,    86,    85,   244,
      87,   473,    83,   273,   249,   109,   228,    51,   109,    32,
      32,   337,    77,    39,   330,   475,    86,   239,   194,   241,
     109,    79,   244,   247,    50,    83,   202,   249,   241,   205,
     206,   323,   244,   325,   547,    86,    94,   249,   308,   109,
      75,   217,   308,   219,   220,    86,    89,   475,    75,    92,
      23,   273,   228,    75,    89,    77,    57,   327,   109,   347,
     273,   331,   332,   239,   446,   241,   206,   337,   109,   451,
      43,   247,    32,    32,    57,    76,   458,   459,   369,   349,
     138,   372,   680,   346,   308,   680,    57,   109,   379,   448,
     381,   382,    75,    79,    79,   567,   387,   273,   389,    40,
     391,   241,   347,   679,    75,   464,    47,    48,    94,    94,
     748,    79,   572,    76,    79,    75,    75,    77,    77,    84,
      83,   241,    90,    83,   244,   347,   741,    79,   475,   249,
      89,    81,   308,   273,    75,   347,    79,   902,   476,    89,
      81,    79,    94,    76,   572,   436,    79,    90,    89,   109,
     109,   327,   452,   273,    92,   455,   456,    92,    73,    79,
     507,   337,    77,   676,    84,    73,    79,    82,   713,    77,
     588,    84,    79,   633,    82,    73,   446,    84,   448,    77,
     655,   451,    81,    76,    82,   473,    79,    86,   458,   459,
      89,   483,   492,    89,   464,   511,    79,   467,   468,   659,
      75,    84,   662,   663,   474,   633,   476,   477,    92,   519,
      79,   724,   503,   504,    83,   485,    38,   487,   488,   395,
     161,   397,    76,   486,   446,   572,   448,   347,   473,   451,
      75,   659,    54,    79,   662,   663,   458,   459,    84,    76,
     532,    79,   464,   467,   468,    83,     0,   707,    32,    79,
     542,   473,   634,     7,    84,    79,    76,   549,    79,    79,
      84,   473,    83,   122,   123,   291,     0,   537,    76,   807,
     446,    79,   448,    27,   812,   451,    30,   547,   486,   567,
     895,   896,   458,   459,    75,    76,   633,    41,   464,    75,
      32,   467,   468,    27,    76,    76,    30,    79,    79,   562,
     476,   564,    75,    76,   330,   765,   766,    41,   448,   131,
      75,    65,   659,   928,   827,   662,   663,    78,    75,    80,
     346,    75,   567,   547,   464,   147,   502,   406,   407,   151,
     790,    65,   947,    75,    75,    77,    70,    91,    92,   639,
      78,    75,    80,   519,    91,   567,    76,    89,    76,    79,
     104,    79,   378,   473,   380,   567,    76,   775,    92,    79,
     707,     6,   790,    76,   634,    74,    79,   109,   408,   409,
     396,   547,    78,   643,    80,   401,   668,   199,    93,    75,
     202,    77,     4,   699,   722,   414,   415,   703,   210,    79,
     660,   213,   214,    89,   664,    57,   666,   872,   125,   126,
     127,   783,   784,   785,    79,    84,   676,   433,   434,    75,
      84,   674,   634,   109,   440,    83,    75,   680,    32,   643,
      77,    75,    75,    93,    84,    75,    84,    84,   720,    75,
      75,    76,    79,    89,    79,   727,    93,    79,    75,    84,
      83,    86,   666,   790,    89,    57,    86,   567,    92,    79,
      32,   721,   722,   723,   724,   725,    94,    92,   634,    76,
     486,    76,    67,    76,   109,   756,    75,   643,   759,    32,
      32,    75,   680,    84,    84,    83,   858,   147,   410,   411,
     412,   413,    84,   217,    84,   511,    32,   241,   514,   125,
     666,   125,   131,   247,    92,    90,    90,   721,    76,    79,
     724,    76,    79,    76,   820,   259,    76,   241,    56,    90,
      94,    90,   782,   783,   784,   785,    92,    32,    75,   273,
      94,    76,   813,    76,    76,   259,   734,    74,   736,    79,
      79,   162,   202,    76,    79,   917,     0,    79,   830,   273,
      76,   804,    76,    76,    79,   721,   722,   369,   724,     4,
     372,    76,     0,    75,   308,   937,    76,   827,   828,   829,
     382,   783,   784,   785,    76,   387,    76,   389,    32,   391,
      83,   887,    79,    76,   308,    76,   398,    76,   332,   961,
     606,    90,    76,   899,    32,    76,   130,    32,   858,   797,
     798,   109,   862,   863,    90,    90,    84,    90,   255,    76,
      32,   627,    94,   827,    83,   262,    92,   783,   784,   785,
     432,    75,    92,    77,   436,    79,    92,    92,    92,    83,
      92,    84,     0,    32,    84,    89,    76,    75,   450,    77,
     452,    79,    90,   455,   456,    83,   858,    76,   123,    83,
      32,    89,   312,    90,    90,   109,   916,   917,    79,    27,
      76,   827,    30,    76,   680,   312,    76,    79,    79,     0,
     317,   109,    21,    41,    21,    21,   323,   937,   325,   877,
     878,   341,    79,   699,    52,    53,    90,   703,    90,    43,
      44,   338,   858,   340,   341,   507,    90,    65,   125,    30,
     125,   961,    70,   515,    84,   917,    84,    75,    84,   369,
      41,    42,   372,    76,    76,    90,    90,    84,   734,    79,
     736,    76,   382,    77,    92,   937,    76,   387,    84,   389,
     474,   391,   748,   477,    65,    41,   751,     4,   754,    93,
     896,   485,   758,   782,   488,   327,    70,    27,   574,   961,
     731,   917,   476,   754,   770,   848,   345,    30,   774,   666,
     347,   485,   312,   487,   488,    32,   205,   464,    43,    44,
     664,   937,   783,   783,   416,    51,   436,   131,   417,    46,
     418,   797,   798,   685,   185,   787,   427,   502,   419,   303,
     517,    -1,    -1,   147,    -1,   961,    -1,   140,    -1,   142,
     143,    -1,    -1,   547,   820,    -1,    -1,    74,    83,    84,
      77,    78,    -1,    80,   157,    82,    -1,    -1,   161,   162,
     163,    -1,    -1,   547,    91,    -1,    93,   639,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,
      -1,    -1,   185,   655,    -1,   861,    -1,    -1,   202,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
      -1,   877,   878,    -1,    -1,    -1,    -1,    43,    44,   529,
      -1,   887,   147,   241,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,   899,    -1,   532,    -1,    -1,   904,    -1,
      -1,    -1,   908,    -1,   541,   542,    -1,    -1,   914,   915,
      -1,   255,   549,    -1,    -1,   273,    -1,    83,   262,    -1,
     241,    -1,    -1,   244,    -1,    -1,    -1,    -1,   249,    -1,
      -1,    -1,   666,    -1,   940,    -1,    -1,   202,    -1,    -1,
      -1,    -1,   676,    -1,   950,    -1,    -1,    -1,    -1,    -1,
     308,    -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   676,    -1,    -1,   131,    -1,    -1,   312,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   778,    -1,    -1,    -1,
      -1,   147,    -1,    -1,   786,    -1,    -1,   721,    -1,   723,
     724,   725,   257,    -1,   338,    -1,    -1,   341,   263,    -1,
     344,   345,    -1,    -1,    -1,    -1,    -1,   721,   722,    -1,
     724,    -1,   814,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     822,    -1,   824,   344,   345,   369,   347,    -1,   372,    -1,
      -1,   668,    -1,    -1,    -1,   379,   202,   381,   382,    -1,
      -1,    -1,    -1,   387,    -1,   389,    -1,   391,   782,    -1,
      -1,   316,   317,    -1,    -1,    -1,    -1,    -1,   860,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     872,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,   344,
     345,    -1,    -1,   720,    -1,    -1,    -1,    -1,    -1,    -1,
     727,   257,   436,   827,    -1,   897,    -1,   263,    -1,    -1,
      -1,    -1,    -1,    -1,   369,    -1,    -1,   372,   452,    -1,
      -1,   455,   456,   827,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,   387,    -1,   389,    -1,   391,    -1,    -1,   863,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     942,   485,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,
     316,    -1,   473,    -1,    -1,   957,    -1,    -1,    -1,   503,
     504,   519,    -1,    -1,   485,    -1,    -1,    -1,    -1,    -1,
      -1,   436,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   529,    -1,   452,    -1,    -1,
     455,   456,    -1,   830,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   369,    -1,   549,   372,    -1,    -1,    -1,
      -1,    -1,    -1,   379,    -1,   381,   382,   482,    -1,    -1,
     485,   387,    -1,   389,    -1,   391,   491,   492,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,   504,
      -1,    -1,    -1,    -1,    -1,     0,   567,    -1,    -1,    -1,
      -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
     436,    -1,    -1,    -1,    -1,    -1,   541,    32,    -1,    34,
      -1,    -1,    -1,    -1,    39,   550,   452,    -1,    -1,   455,
     456,    -1,    -1,    -1,    49,   639,    -1,    -1,    53,    54,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,
      -1,    66,    -1,    -1,    -1,    -1,   482,    -1,    -1,    -1,
      75,    76,    77,    -1,    79,   491,   492,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    89,   679,    -1,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,   106,    -1,   108,   109,   110,    -1,    -1,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   639,    -1,    -1,   721,    -1,    -1,
      -1,    -1,    -1,    -1,   550,    -1,    -1,   731,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     721,   156,   157,   158,   159,   160,     0,    -1,   163,    -1,
     731,    -1,   756,     7,   679,   759,    -1,    -1,    -1,    -1,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
      34,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    49,   721,    -1,    -1,    53,
      54,   726,    56,    -1,    -1,    -1,   731,    -1,    62,   813,
      64,    -1,    66,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    79,    -1,    -1,    -1,    83,
      -1,   756,    -1,    -1,   759,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,     7,
      -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,   813,   143,
     144,   145,    -1,     3,    32,     5,    34,    -1,    -1,    -1,
     726,    39,   156,   157,   158,   159,   160,    -1,    18,   163,
      -1,    49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    64,    37,    66,    -1,
     756,    41,    42,   759,    -1,    45,    46,    75,    76,    77,
      -1,    79,    52,    -1,    -1,    83,    -1,    -1,    -1,    59,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,    -1,
     108,   109,   110,    83,    84,    -1,    86,     0,    88,    -1,
      -1,    -1,    -1,    -1,     7,    -1,    -1,   813,    -1,    -1,
      -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,   143,   144,   145,     3,    32,
       5,    34,    -1,    -1,    -1,    -1,    39,    -1,   156,   157,
     158,   159,   160,    18,    -1,   163,    49,    -1,    -1,    -1,
      53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    64,    37,    66,    -1,    -1,    41,    42,    -1,    -1,
      45,    46,    75,    76,    77,    -1,    79,    52,    -1,    -1,
      83,    -1,    -1,    -1,    59,    -1,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,    -1,   108,   109,   110,    -1,    -1,
      -1,    86,     0,    88,    -1,    -1,    -1,    -1,    -1,     7,
      -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
     143,   144,   145,    -1,    32,    -1,    34,    -1,    -1,    -1,
      -1,    39,    -1,   156,   157,   158,   159,   160,    -1,    -1,
     163,    49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    64,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    79,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,    -1,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,
     158,   159,   160,    -1,     4,   163,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    19,
      20,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    -1,    -1,    39,
      40,    -1,    -1,    -1,    44,    -1,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    -1,    74,    75,    -1,    77,    78,    -1,
      80,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    89,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,    -1,     4,   163,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    -1,    19,    20,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    -1,    -1,    39,    40,    -1,
      -1,    -1,    44,    -1,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    -1,    74,    75,    -1,    77,    78,    -1,    80,    -1,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    89,    -1,    -1,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,    -1,
       4,   163,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    -1,    19,    20,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      34,    35,    -1,    -1,    -1,    39,    40,    -1,    -1,    -1,
      44,    -1,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    -1,
      74,    75,    -1,    77,    78,    -1,    80,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    89,    -1,    -1,    92,    -1,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,   160,    -1,     4,   163,
       6,     7,     8,     9,    -1,    -1,    12,    13,    14,    -1,
      16,    -1,    -1,    -1,    20,    -1,    22,    -1,    24,    25,
      26,    27,    -1,    -1,    -1,    31,    32,    -1,    34,    35,
      -1,    -1,    -1,    39,    40,    -1,    -1,    -1,    44,    -1,
      -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    -1,    74,    75,
      -1,    77,    78,    -1,    80,    -1,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,   145,
      -1,    -1,   148,   149,    -1,    -1,   152,    -1,    -1,    -1,
     156,   157,   158,   159,   160,     4,    -1,   163,     7,     8,
       9,    -1,    -1,    12,    13,    14,    -1,    16,    -1,    -1,
      -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
      -1,    -1,    31,    32,    -1,    34,    35,    -1,    -1,    -1,
      39,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,    -1,
      49,    -1,    -1,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    -1,    -1,
      -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,    78,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,   148,
     149,    -1,    -1,   152,    -1,    -1,    -1,   156,   157,   158,
     159,   160,     4,    -1,   163,     7,     8,     9,    -1,    -1,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,    -1,
      22,    -1,    24,    25,    26,    27,    -1,    -1,    -1,    31,
      32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,    -1,
      -1,    -1,    44,    -1,    -1,    47,    -1,    49,    -1,    -1,
      -1,    53,    54,    55,    56,    57,    58,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,
      72,    -1,    74,    75,    -1,    77,    78,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,
      92,    -1,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   143,   144,   145,    -1,    -1,   148,   149,    -1,    -1,
     152,    -1,    -1,    -1,   156,   157,   158,   159,   160,     4,
      -1,   163,     7,     8,     9,    -1,    -1,    12,    13,    14,
      -1,    16,    -1,    -1,    -1,    20,    -1,    22,    -1,    24,
      25,    26,    27,    -1,    -1,    -1,    31,    32,    -1,    34,
      35,    -1,    -1,    -1,    39,    40,    -1,    -1,    -1,    44,
      -1,    -1,    47,    -1,    49,    -1,    -1,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,
      75,    -1,    77,    78,    -1,    80,    -1,    -1,    -1,    84,
      -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,
     145,    -1,    -1,   148,   149,    -1,    -1,   152,    -1,    -1,
      -1,   156,   157,   158,   159,   160,     4,    -1,   163,     7,
       8,     9,    -1,    -1,    12,    13,    14,    -1,    16,    -1,
      -1,    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    34,    35,    -1,    -1,
      -1,    39,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
      -1,    49,    -1,    -1,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    -1,    62,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
     148,   149,    -1,    -1,   152,    -1,    -1,    -1,   156,   157,
     158,   159,   160,    -1,    -1,   163,     6,     7,     8,    -1,
      -1,    -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,
      20,    -1,    22,    -1,    24,    25,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    34,    35,    -1,    -1,    -1,    39,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,
      -1,    -1,    -1,    53,    54,    -1,    56,    -1,    58,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    -1,    -1,    -1,    75,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
     160,    -1,    -1,   163,     6,     7,     8,    -1,    -1,    -1,
      12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    20,    -1,
      22,    -1,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      -1,    53,    54,    -1,    56,    -1,    58,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      -1,    -1,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,     6,
       7,     8,   124,    -1,    -1,    12,    -1,    14,    -1,    -1,
      -1,    -1,    -1,    20,    -1,    22,    -1,    24,    25,    -1,
      -1,   143,   144,   145,    -1,    32,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,   156,   157,   158,   159,   160,    -1,
      -1,   163,    49,    -1,    -1,    -1,    53,    54,    -1,    56,
      -1,    58,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,    -1,     7,     8,    -1,    -1,    -1,
      12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    20,    -1,
      22,    -1,    24,    25,    -1,    -1,   143,   144,   145,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,   156,
     157,   158,   159,   160,    -1,    -1,   163,    49,    -1,    -1,
      -1,    53,    54,    -1,    56,    -1,    58,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
       7,     8,   124,    -1,    -1,    12,    -1,    14,    -1,    -1,
      -1,    -1,    -1,    20,    -1,    22,    -1,    24,    25,    -1,
      -1,   143,   144,   145,    -1,    32,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,   156,   157,   158,   159,   160,    -1,
      -1,   163,    49,    -1,    -1,    -1,    53,    54,    -1,    56,
      -1,    58,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    -1,    69,     7,     8,    -1,    -1,    -1,    12,    -1,
      14,    -1,    -1,    -1,    -1,    -1,    20,    84,    22,    -1,
      24,    25,    -1,    -1,    -1,    -1,    -1,    94,    32,    -1,
      34,    35,    -1,    -1,   101,    39,    -1,    -1,   105,   106,
     107,   108,   109,   110,    -1,    49,    -1,    -1,    -1,    53,
      54,    -1,    56,   120,    58,    -1,    -1,   124,    62,    63,
      64,    65,    66,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,
     157,   158,   159,   160,    -1,    -1,   163,   101,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,     7,     8,
     124,    -1,    -1,    12,    -1,    14,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    22,    -1,    24,    25,    -1,    -1,   143,
     144,   145,    -1,    32,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,   156,   157,   158,   159,   160,    -1,    -1,   163,
      49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,    58,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      14,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
      24,    25,    -1,    -1,   143,   144,   145,    -1,    32,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,   156,   157,   158,
     159,   160,    -1,    -1,   163,    49,    -1,    -1,    -1,    53,
      54,    -1,    56,    -1,    58,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,
      -1,    -1,    -1,    12,    -1,    14,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    22,    -1,    24,    25,    -1,    -1,   143,
     144,   145,    -1,    32,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,   156,   157,   158,   159,   160,    -1,    -1,   163,
      49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,    58,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    -1,    -1,
      -1,     7,     8,    -1,    -1,    -1,    12,    76,    14,    -1,
      -1,    -1,    -1,    -1,    20,    -1,    22,    -1,    24,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,   105,   106,   107,   108,
     109,   110,    -1,    49,    -1,    -1,    -1,    53,    54,    -1,
      56,    -1,    58,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
     159,   160,    -1,    -1,   163,    -1,    -1,    -1,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     7,     8,    -1,    -1,
      -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    22,    -1,    24,    25,    -1,    -1,   143,   144,   145,
      -1,    32,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
     156,   157,   158,   159,   160,    -1,    -1,   163,    49,    -1,
      -1,    -1,    53,    54,    -1,    56,    -1,    58,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    -1,    -1,     7,
       8,    -1,    -1,    -1,    12,    76,    14,    -1,    -1,    -1,
      -1,    -1,    20,    -1,    22,    -1,    24,    25,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,   105,   106,   107,   108,   109,   110,
      -1,    49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,
      58,    -1,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
      -1,    -1,   163,    -1,    -1,    -1,    -1,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     7,     8,    -1,    -1,    -1,    12,
      -1,    14,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,
      -1,    24,    25,    -1,    -1,   143,   144,   145,    -1,    32,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,   156,   157,
     158,   159,   160,    -1,    -1,   163,    49,    -1,    -1,    -1,
      53,    54,    -1,    56,    -1,    58,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    -1,     7,     8,    -1,    -1,
      -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    22,    -1,    24,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,    49,    -1,
      -1,    -1,    53,    54,    -1,    56,    -1,    58,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    -1,   156,   157,   158,   159,   160,    -1,    -1,
     163,    -1,    -1,    -1,   105,   106,   107,   108,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     7,     8,    -1,    -1,    -1,    12,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    20,    -1,    22,    -1,    24,    25,
      -1,    -1,   143,   144,   145,    -1,    32,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,   156,   157,   158,   159,   160,
      -1,    -1,   163,    49,    -1,    -1,    -1,    53,    54,    -1,
      56,    -1,    58,    -1,    -1,    -1,    62,    63,    64,    65,
      66,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,    -1,   105,
     106,   107,   108,    49,   110,    -1,    -1,    53,    54,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    -1,    79,    -1,    -1,    -1,   143,   144,   145,
      -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,
     156,   157,   158,   159,   160,    -1,    -1,   163,    -1,   105,
     106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    -1,   143,   144,   145,
      -1,    32,    -1,    34,    -1,    -1,    -1,    -1,    39,    -1,
     156,   157,   158,   159,   160,    -1,    -1,   163,    49,    -1,
      -1,    -1,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    64,    -1,    66,    -1,    -1,     7,    -1,
      -1,    -1,    -1,    -1,    75,    14,    77,    -1,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    -1,   105,   106,    -1,   108,   109,   110,
      49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    64,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    77,    -1,
      -1,    -1,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
      -1,    -1,   163,    -1,    -1,    -1,   105,   106,    -1,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    -1,    -1,   143,   144,   145,    34,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    -1,    -1,   156,   157,   158,
     159,   160,    49,    -1,   163,    -1,    53,    54,    -1,    56,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    64,    -1,    66,
      -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    75,    14,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,   105,   106,
      -1,   108,   109,   110,    49,    -1,    -1,    -1,    53,    54,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    -1,    -1,    79,    -1,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,
     157,   158,   159,   160,    -1,    -1,   163,    -1,    -1,    -1,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,
      -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,
     145,    34,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,
      -1,   156,   157,   158,   159,   160,    49,    -1,   163,    -1,
      53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    64,    -1,    66,    -1,    -1,    -1,     7,    -1,    -1,
      -1,    -1,    -1,    76,    14,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    39,
      -1,    -1,   105,   106,    -1,   108,   109,   110,    -1,    49,
      -1,    -1,    -1,    53,    54,    -1,    56,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    64,    -1,    66,    -1,    -1,    -1,
      -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
     143,   144,   145,    -1,    84,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,   156,   157,   158,   159,   160,    34,    -1,
     163,    -1,    -1,    39,    -1,   105,   106,    -1,   108,   109,
     110,    -1,    -1,    49,    -1,    -1,    -1,    53,    54,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,    -1,
      66,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,
      -1,    14,    -1,   143,   144,   145,    -1,    -1,    84,    -1,
      -1,    24,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
     160,    34,    -1,   163,    -1,    -1,    39,    -1,    -1,   105,
     106,    -1,   108,   109,   110,    -1,    49,    -1,    -1,    -1,
      53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    64,    -1,    66,    -1,    -1,    -1,    -1,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    14,    -1,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
     156,   157,   158,   159,   160,    34,    -1,   163,    -1,    -1,
      39,    -1,   105,   106,    -1,   108,   109,   110,    -1,    -1,
      49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    64,    -1,    66,    -1,    -1,
      -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,   156,   157,   158,   159,   160,    34,    -1,
     163,    -1,    -1,    39,    -1,    -1,   105,   106,    -1,   108,
     109,   110,    -1,    49,    -1,    -1,    -1,    53,    54,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,    -1,
      66,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
      -1,    -1,    14,    -1,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,   156,   157,   158,
     159,   160,    34,    -1,   163,    -1,    -1,    39,    -1,   105,
     106,    -1,   108,   109,   110,    -1,    -1,    49,    -1,    -1,
      -1,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    64,    -1,    66,    -1,    -1,    -1,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    14,    -1,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
     156,   157,   158,   159,   160,    34,    -1,   163,    -1,    -1,
      39,    -1,    -1,   105,   106,    -1,   108,   109,   110,    -1,
      49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    64,    -1,    66,    -1,    -1,
      -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,
      -1,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,    34,
      -1,   163,    -1,    -1,    39,    -1,   105,   106,    -1,   108,
     109,   110,    -1,    -1,    49,    -1,    -1,    -1,    53,    54,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,
      -1,    66,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
      -1,    -1,    14,    -1,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,   156,   157,   158,
     159,   160,    34,    -1,   163,    -1,    -1,    39,    -1,    -1,
     105,   106,    -1,   108,   109,   110,    -1,    49,    -1,    -1,
      -1,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    64,    -1,    66,    -1,    -1,    -1,    -1,     7,
      -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,   156,   157,   158,   159,   160,    34,    -1,   163,    -1,
      -1,    39,    -1,   105,   106,    -1,   108,   109,   110,    -1,
      -1,    49,    -1,    -1,    -1,    53,    54,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    64,    -1,    66,    -1,
      -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,
      -1,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,    34,
      -1,   163,    -1,    -1,    39,    -1,    -1,   105,   106,    -1,
     108,   109,   110,    -1,    49,    -1,    -1,    -1,    53,    54,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    64,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   143,   144,   145,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,
     158,   159,   160,    -1,    -1,   163,    -1,    -1,    -1,    -1,
     105,   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    13,
      14,    -1,    16,    -1,    -1,    -1,    -1,    -1,   143,   144,
     145,    -1,    26,    27,    -1,    -1,    -1,    31,    32,    -1,
      -1,   156,   157,   158,   159,   160,    40,    -1,   163,    -1,
      44,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      74,    75,    -1,    77,    78,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,    -1,    -1,   108,    -1,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,   143,
     144,   145,    40,    -1,   148,   149,    44,    -1,   152,    47,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    90,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    76,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    76,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    15,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    47,
     148,   149,    -1,    -1,   152,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    75,    -1,    77,
      78,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,    -1,    -1,   152
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,     6,     7,     8,    12,    14,    20,    22,    24,    25,
      32,    34,    35,    39,    49,    53,    54,    56,    58,    62,
      63,    64,    65,    66,    69,    70,    71,    75,    77,    84,
     101,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   120,   124,   133,   134,
     135,   137,   139,   140,   141,   143,   144,   145,   156,   157,
     158,   159,   160,   163,   165,   166,   167,   168,   170,   171,
     173,   174,   177,   182,   183,   187,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   200,   201,   202,   203,   204,
     205,   207,   208,   209,   210,   216,   217,   219,   220,   221,
     222,   240,   243,   244,   245,   270,   271,   293,   295,   300,
     301,   313,   334,   335,   342,    66,   178,    32,    92,   173,
     174,    32,   207,   209,   217,   218,   219,   168,   240,    32,
     172,    75,    75,     4,     9,    13,    16,    26,    27,    31,
      40,    44,    47,    55,    57,    72,    74,    75,    77,    78,
      80,    89,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   148,   149,   152,   268,   270,   272,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   292,   294,   298,   299,   343,   273,   288,
      10,    11,    15,    17,    19,    28,    29,    32,    33,    50,
      60,    67,    75,    77,    84,    92,   101,   119,   124,   132,
     147,   150,   151,   154,   155,   169,   170,   173,   183,   187,
     208,   221,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   261,   263,   267,   270,   289,   300,   303,   314,   315,
     338,   166,    32,    84,   101,   124,   174,   187,   189,   246,
     247,   293,   300,   302,   313,   190,   191,   196,   197,   198,
     199,   226,   190,   196,   198,   296,   270,   122,   123,   125,
     126,   127,   304,   305,   270,   318,   325,   326,     4,    32,
      46,    74,    77,    78,    80,    82,    91,    93,   319,   322,
     327,    92,   235,   288,   328,   322,   324,   221,   330,   329,
     330,   289,    89,   336,   337,     0,   167,   174,   208,   210,
     220,   204,   209,    84,   192,   193,   196,   197,    39,    53,
      54,    64,   105,   190,   191,   190,   193,    79,    84,     6,
      86,   173,   206,   234,   207,   209,   184,   185,   186,   193,
     196,   241,   242,   256,    75,    75,    89,    92,    32,   173,
      75,    92,    32,    94,   223,   224,   225,    32,    92,    76,
      76,    76,   219,    79,    84,   226,   289,    75,    32,    75,
     274,   274,    75,   274,   226,   256,   289,   289,    75,    75,
      75,    75,    75,   274,   276,   276,   276,    75,   274,    75,
     274,    75,   274,    40,    47,    48,    75,    81,    89,   161,
     344,   346,   276,    73,    77,    82,    78,    80,    36,    51,
      30,    38,    85,    87,    23,    43,    74,    91,    93,     4,
       3,     5,    18,    37,    41,    42,    45,    46,    52,    59,
      68,    86,    88,   290,    79,    57,    75,   274,   297,   299,
      79,    84,   286,   287,   291,    84,    83,   251,    75,    32,
      77,    83,    75,    84,   289,    75,    75,    94,   257,   305,
      32,   289,   339,    84,    75,   339,   339,    75,   208,   251,
      84,   251,   247,   305,    32,    83,   173,   207,   248,   249,
      84,   247,   196,   190,   191,    75,    89,   173,   208,   227,
     228,   196,    79,    75,    75,   130,   306,   307,   308,    75,
     306,   167,    79,    83,    83,    32,    81,    89,    94,   235,
     236,   237,   238,   239,    89,    92,   331,   332,   333,    79,
     331,   331,    77,    90,   291,   337,   207,   209,    84,   241,
     242,   191,   190,   205,    75,   235,   234,   173,   234,   204,
     193,   196,   190,   184,   242,    32,    76,   187,   188,   190,
     196,   229,   230,   231,   232,   233,    76,   229,   231,    56,
      77,   212,   214,   215,   218,   288,    94,   246,    32,   294,
      94,   223,    86,    94,    79,    92,    94,   223,    32,    76,
      76,    14,    32,    76,   175,   176,   226,   226,    76,    76,
      76,    90,   288,   226,   288,   226,   226,   226,   226,   226,
     270,    76,   273,   270,   286,   289,    75,   288,   345,   276,
     276,   276,   277,   277,   278,   278,   279,   279,   279,   279,
     280,   280,   281,   282,   283,   284,   285,    83,   289,   288,
     288,   226,   288,    61,    83,   251,    67,   183,   254,   266,
      84,   289,   251,   198,   262,   289,    84,   262,   262,    94,
     251,    32,   316,   317,    84,   266,    84,    84,   247,    83,
     173,   291,    83,    86,   173,   250,    79,    84,   190,   191,
      76,   227,   231,   212,   214,   215,   208,   228,   227,    75,
      89,   198,    32,   131,   309,   310,   311,   312,    75,   125,
      79,   308,   309,   125,   326,   226,   320,   226,   321,    83,
      32,   287,   291,    79,    94,   235,    86,    89,   239,   288,
      94,   289,   333,   330,    90,    90,   242,   294,   234,    84,
     190,    75,   173,   207,   208,   227,   196,   190,    76,    79,
      76,    79,    76,    76,   213,   214,   211,   212,    90,    94,
      76,    83,    94,   291,   225,    94,   223,    94,    75,    76,
      76,    79,    76,    76,    92,   276,    79,    79,    79,    79,
      76,    76,    76,    76,    76,    83,    84,    90,    76,   273,
      79,   162,   347,   288,    83,    76,   291,   251,    75,   262,
     265,    84,   207,    76,    76,    76,    83,    79,   339,   291,
      83,   291,   291,   250,   249,    76,    76,   213,   211,    90,
     227,    76,   231,   212,   214,   215,    76,    76,   311,    76,
     309,   308,    76,    79,    83,   235,    90,    32,    94,   235,
     237,    90,    83,    94,   138,   331,    76,   208,   173,   173,
     190,    32,    61,   233,   215,   215,    84,    89,   179,   180,
     181,   294,    94,   273,    76,   176,   236,   226,    32,   269,
     288,   226,   286,   286,    76,   288,   288,   276,    83,   289,
      84,    86,   173,   206,   251,   252,   259,   260,   251,   251,
     289,   317,    84,   291,   215,   215,    76,   213,   211,    90,
     123,   306,    76,   306,   226,   289,   323,    83,   235,   289,
     289,    90,    90,    32,    76,    83,    79,    75,    76,    79,
      94,    76,   238,    76,    79,    76,    90,    90,    79,   251,
      76,   264,   289,   288,    86,    86,   173,    21,   339,    90,
      90,   215,   215,   125,   125,   235,    94,    94,    90,    84,
     179,   181,   289,    94,   288,   288,    84,    76,   288,   288,
      86,   251,    84,    90,    90,   294,    76,    83,    76,    76,
      79,   251,   288,    15,   289,   340,   341,    75,    84,   179,
     288,    76,   289,    76,   251,    76,    84
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (AST* parsed_tree);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */


#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N) ((void) 0)
#endif


#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; }	     \
   while (YYID (0))

#if YYDEBUG

# ifndef YYFPRINTF
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, AST* parsed_tree)
{
  if (!yyvaluep)
    return;
  YYUSE (parsed_tree);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, AST* parsed_tree)
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, parsed_tree);
  YYFPRINTF (yyoutput, ")");
}

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			    \
do {									    \
  if (yydebug)								    \
    {									    \
      YYFPRINTF (stderr, "%s ", Title);					    \
      yy_symbol_print (stderr, Type,					    \
		       Value, parsed_tree);  \
      YYFPRINTF (stderr, "\n");						    \
    }									    \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call yyexpandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data.  */
#define YYHEADROOM 2

#ifndef YYSTACKEXPANDABLE
# if (! defined __cplusplus \
      || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
#endif

#if YYSTACKEXPANDABLE
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyexpandGLRStack (Yystack);			\
  } while (YYID (0))
#else
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyMemoryExhausted (Yystack);			\
  } while (YYID (0))
#endif


#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short int yySymbol;

/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yyGLRStateSet yyGLRStateSet;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;

struct yyGLRState {
  /** Type tag: always true.  */
  yybool yyisState;
  /** Type tag for yysemantics.  If true, yysval applies, otherwise
   *  yyfirstVal applies.  */
  yybool yyresolved;
  /** Number of corresponding LALR(1) machine state.  */
  yyStateNum yylrState;
  /** Preceding state in this stack */
  yyGLRState* yypred;
  /** Source position of the first token produced by my symbol */
  size_t yyposn;
  union {
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext.  */
    yySemanticOption* yyfirstVal;
    /** Semantic value for this state.  */
    YYSTYPE yysval;
  } yysemantics;
  /** Source location for this state.  */
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  /** During nondeterministic operation, yylookaheadNeeds tracks which
   *  stacks have actually needed the current lookahead.  During deterministic
   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
   *  duplicate yychar != YYEMPTY.  */
  yybool* yylookaheadNeeds;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  /** Type tag: always false.  */
  yybool yyisState;
  /** Rule number for this reduction */
  yyRuleNum yyrule;
  /** The last RHS state in the list of states to be reduced.  */
  yyGLRState* yystate;
  /** The lookahead for this reduction.  */
  int yyrawchar;
  YYSTYPE yyval;
  YYLTYPE yyloc;
  /** Next sibling in chain of options.  To facilitate merging,
   *  options are chained in decreasing order by address.  */
  yySemanticOption* yynext;
};

/** Type of the items in the GLR stack.  The yyisState field
 *  indicates which item of the union is valid.  */
union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrState;


  YYJMP_BUF yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  size_t yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

#if YYSTACKEXPANDABLE
static void yyexpandGLRStack (yyGLRStack* yystackp);
#endif

static void yyFail (yyGLRStack* yystackp, AST* parsed_tree, const char* yymsg)
  __attribute__ ((__noreturn__));
static void
yyFail (yyGLRStack* yystackp, AST* parsed_tree, const char* yymsg)
{
  if (yymsg != NULL)
    yyerror (parsed_tree, yymsg);
  YYLONGJMP (yystackp->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystackp)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystackp)
{
  YYLONGJMP (yystackp->yyexception_buffer, 2);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  */
static inline const char*
yytokenName (yySymbol yytoken)
{
  if (yytoken == YYEMPTY)
    return "";

  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain.  */
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
 * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
 * For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     __attribute__ ((__unused__));
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT.  */
/*ARGSUSED*/ static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp,
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
	      yyGLRStack* yystackp
	      , AST* parsed_tree)
{
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  int yylow;
  YYUSE (parsed_tree);
# undef yyerrok
# define yyerrok (yystackp->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR return yyerrok, yyerr
# undef YYRECOVERING
# define YYRECOVERING() (yystackp->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  return yyerror (parsed_tree, YY_("syntax error: cannot back up")),     \
	 yyerrok, yyerr

  yylow = 1;
  if (yyrhslen == 0)
    *yyvalp = yyval_default;
  else
    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);

  switch (yyn)
    {
        case 2:

/* Line 936 of glr.c  */
#line 1562 "c99.y"
    {
	*parsed_tree = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 3:

/* Line 936 of glr.c  */
#line 1566 "c99.y"
    {
	*parsed_tree = NULL;
;}
    break;

  case 4:

/* Line 936 of glr.c  */
#line 1576 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 5:

/* Line 936 of glr.c  */
#line 1580 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 6:

/* Line 936 of glr.c  */
#line 1586 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 7:

/* Line 936 of glr.c  */
#line 1590 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 8:

/* Line 936 of glr.c  */
#line 1596 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 9:

/* Line 936 of glr.c  */
#line 1600 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 10:

/* Line 936 of glr.c  */
#line 1606 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 11:

/* Line 936 of glr.c  */
#line 1610 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 12:

/* Line 936 of glr.c  */
#line 1616 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 13:

/* Line 936 of glr.c  */
#line 1621 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 14:

/* Line 936 of glr.c  */
#line 1625 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_EXTENSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 15:

/* Line 936 of glr.c  */
#line 1630 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 16:

/* Line 936 of glr.c  */
#line 1635 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_PP_COMMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 17:

/* Line 936 of glr.c  */
#line 1640 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_PP_TOKEN, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 18:

/* Line 936 of glr.c  */
#line 1647 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_LABEL_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 19:

/* Line 936 of glr.c  */
#line 1653 "c99.y"
    {
    AST symbol_holder = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
	((*yyvalp).ast) = ASTListLeaf(symbol_holder);
;}
    break;

  case 20:

/* Line 936 of glr.c  */
#line 1658 "c99.y"
    {
	AST label = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), label);
;}
    break;

  case 21:

/* Line 936 of glr.c  */
#line 1667 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 22:

/* Line 936 of glr.c  */
#line 1671 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 23:

/* Line 936 of glr.c  */
#line 1677 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_ATTRIBUTE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 24:

/* Line 936 of glr.c  */
#line 1681 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_ATTRIBUTE, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 25:

/* Line 936 of glr.c  */
#line 1687 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 26:

/* Line 936 of glr.c  */
#line 1691 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 27:

/* Line 936 of glr.c  */
#line 1698 "c99.y"
    {
	AST identif = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_ATTRIBUTE_EXPR, identif, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 28:

/* Line 936 of glr.c  */
#line 1704 "c99.y"
    {
	AST identif = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_ATTRIBUTE_EXPR, identif, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 29:

/* Line 936 of glr.c  */
#line 1710 "c99.y"
    {
	AST identif1 = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);
	
	((*yyvalp).ast) = ASTMake3(AST_GCC_ATTRIBUTE_EXPR, identif1, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 30:

/* Line 936 of glr.c  */
#line 1719 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_ASM_DEFINITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 31:

/* Line 936 of glr.c  */
#line 1724 "c99.y"
    {
	AST asm_parms = ASTMake4(AST_GCC_ASM_DEF_PARMS, 
			(((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (8))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ast)), NULL);
	((*yyvalp).ast) = ASTMake2(AST_GCC_ASM_DEFINITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (8))].yystate.yysemantics.yysval.ast), asm_parms, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 32:

/* Line 936 of glr.c  */
#line 1730 "c99.y"
    {
	AST asm_parms = ASTMake4(AST_GCC_ASM_DEF_PARMS, 
			(((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (10))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ast)), NULL);
	((*yyvalp).ast) = ASTMake2(AST_GCC_ASM_DEFINITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (10))].yystate.yysemantics.yysval.ast), asm_parms, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 33:

/* Line 936 of glr.c  */
#line 1736 "c99.y"
    {
	AST asm_parms = ASTMake4(AST_GCC_ASM_DEF_PARMS, 
			(((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (12))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (12))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (12))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((10) - (12))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (12))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (12))].yystate.yysemantics.yysval.ast)), NULL);
	((*yyvalp).ast) = ASTMake2(AST_GCC_ASM_DEFINITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (12))].yystate.yysemantics.yysval.ast), asm_parms, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (12))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (12))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (12))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 34:

/* Line 936 of glr.c  */
#line 1744 "c99.y"
    {
	((*yyvalp).ast) = NULL;
;}
    break;

  case 35:

/* Line 936 of glr.c  */
#line 1748 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_VOLATILE_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 36:

/* Line 936 of glr.c  */
#line 1754 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 37:

/* Line 936 of glr.c  */
#line 1758 "c99.y"
    {
	((*yyvalp).ast) = NULL;
;}
    break;

  case 38:

/* Line 936 of glr.c  */
#line 1765 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 39:

/* Line 936 of glr.c  */
#line 1769 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 40:

/* Line 936 of glr.c  */
#line 1775 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_ASM_OPERAND, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 41:

/* Line 936 of glr.c  */
#line 1779 "c99.y"
    {
    AST symbol_tree = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (7))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (7))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (7))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_ASM_OPERAND, symbol_tree, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 42:

/* Line 936 of glr.c  */
#line 1785 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 43:

/* Line 936 of glr.c  */
#line 1793 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 44:

/* Line 936 of glr.c  */
#line 1797 "c99.y"
    {
    // This is an error but also a common extension
    ((*yyvalp).ast) = ASTLeaf(AST_EMPTY_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 45:

/* Line 936 of glr.c  */
#line 1804 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SIMPLE_DECLARATION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 46:

/* Line 936 of glr.c  */
#line 1808 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SIMPLE_DECLARATION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 47:

/* Line 936 of glr.c  */
#line 1812 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SIMPLE_DECLARATION, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 48:

/* Line 936 of glr.c  */
#line 1818 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SIMPLE_DECLARATION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 49:

/* Line 936 of glr.c  */
#line 1824 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 50:

/* Line 936 of glr.c  */
#line 1828 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 51:

/* Line 936 of glr.c  */
#line 1832 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 52:

/* Line 936 of glr.c  */
#line 1836 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 53:

/* Line 936 of glr.c  */
#line 1840 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 54:

/* Line 936 of glr.c  */
#line 1847 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 55:

/* Line 936 of glr.c  */
#line 1851 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 56:

/* Line 936 of glr.c  */
#line 1857 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 57:

/* Line 936 of glr.c  */
#line 1861 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 58:

/* Line 936 of glr.c  */
#line 1865 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 59:

/* Line 936 of glr.c  */
#line 1869 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 60:

/* Line 936 of glr.c  */
#line 1873 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 61:

/* Line 936 of glr.c  */
#line 1879 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 62:

/* Line 936 of glr.c  */
#line 1883 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 63:

/* Line 936 of glr.c  */
#line 1887 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 64:

/* Line 936 of glr.c  */
#line 1891 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 65:

/* Line 936 of glr.c  */
#line 1895 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 66:

/* Line 936 of glr.c  */
#line 1907 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 67:

/* Line 936 of glr.c  */
#line 1911 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 68:

/* Line 936 of glr.c  */
#line 1915 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 69:

/* Line 936 of glr.c  */
#line 1919 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 70:

/* Line 936 of glr.c  */
#line 1925 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 71:

/* Line 936 of glr.c  */
#line 1929 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 72:

/* Line 936 of glr.c  */
#line 1935 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 73:

/* Line 936 of glr.c  */
#line 1939 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 74:

/* Line 936 of glr.c  */
#line 1945 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 75:

/* Line 936 of glr.c  */
#line 1949 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 76:

/* Line 936 of glr.c  */
#line 1954 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 77:

/* Line 936 of glr.c  */
#line 1958 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 78:

/* Line 936 of glr.c  */
#line 1962 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_TYPEDEF_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 79:

/* Line 936 of glr.c  */
#line 1967 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 80:

/* Line 936 of glr.c  */
#line 1972 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SIGNED_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 81:

/* Line 936 of glr.c  */
#line 1976 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_UNSIGNED_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 82:

/* Line 936 of glr.c  */
#line 1980 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_LONG_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 83:

/* Line 936 of glr.c  */
#line 1984 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SHORT_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 84:

/* Line 936 of glr.c  */
#line 1989 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_GCC_COMPLEX_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 85:

/* Line 936 of glr.c  */
#line 1993 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_GCC_IMAGINARY_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 86:

/* Line 936 of glr.c  */
#line 1999 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_AUTO_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 87:

/* Line 936 of glr.c  */
#line 2003 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_REGISTER_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 88:

/* Line 936 of glr.c  */
#line 2007 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_STATIC_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 89:

/* Line 936 of glr.c  */
#line 2011 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_EXTERN_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 90:

/* Line 936 of glr.c  */
#line 2016 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_THREAD_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 91:

/* Line 936 of glr.c  */
#line 2022 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_INLINE_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 92:

/* Line 936 of glr.c  */
#line 2028 "c99.y"
    {
;}
    break;

  case 93:

/* Line 936 of glr.c  */
#line 2031 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 94:

/* Line 936 of glr.c  */
#line 2036 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_GCC_COMPLEX_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 95:

/* Line 936 of glr.c  */
#line 2042 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 96:

/* Line 936 of glr.c  */
#line 2046 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 97:

/* Line 936 of glr.c  */
#line 2050 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 98:

/* Line 936 of glr.c  */
#line 2056 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 99:

/* Line 936 of glr.c  */
#line 2060 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 100:

/* Line 936 of glr.c  */
#line 2064 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 101:

/* Line 936 of glr.c  */
#line 2068 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 102:

/* Line 936 of glr.c  */
#line 2072 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 103:

/* Line 936 of glr.c  */
#line 2078 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 104:

/* Line 936 of glr.c  */
#line 2082 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 105:

/* Line 936 of glr.c  */
#line 2086 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 106:

/* Line 936 of glr.c  */
#line 2090 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 107:

/* Line 936 of glr.c  */
#line 2094 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_TYPE_SPECIFIER_SEQ, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 108:

/* Line 936 of glr.c  */
#line 2100 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_SIMPLE_TYPE_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 109:

/* Line 936 of glr.c  */
#line 2104 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 110:

/* Line 936 of glr.c  */
#line 2109 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_TYPEOF_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 111:

/* Line 936 of glr.c  */
#line 2113 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_TYPEOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 112:

/* Line 936 of glr.c  */
#line 2120 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 113:

/* Line 936 of glr.c  */
#line 2126 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_CHAR_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 114:

/* Line 936 of glr.c  */
#line 2130 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_BOOL_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 115:

/* Line 936 of glr.c  */
#line 2134 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SHORT_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 116:

/* Line 936 of glr.c  */
#line 2138 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_INT_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 117:

/* Line 936 of glr.c  */
#line 2142 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_LONG_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 118:

/* Line 936 of glr.c  */
#line 2146 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SIGNED_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 119:

/* Line 936 of glr.c  */
#line 2150 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_UNSIGNED_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 120:

/* Line 936 of glr.c  */
#line 2154 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_FLOAT_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 121:

/* Line 936 of glr.c  */
#line 2158 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_DOUBLE_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 122:

/* Line 936 of glr.c  */
#line 2162 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_VOID_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 123:

/* Line 936 of glr.c  */
#line 2168 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake2(AST_ELABORATED_TYPE_CLASS_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), identifier, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 124:

/* Line 936 of glr.c  */
#line 2174 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake1(AST_ELABORATED_TYPE_ENUM_SPEC, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 125:

/* Line 936 of glr.c  */
#line 2181 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_ELABORATED_TYPE_CLASS_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 126:

/* Line 936 of glr.c  */
#line 2187 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake2(AST_GCC_ELABORATED_TYPE_ENUM_SPEC, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 127:

/* Line 936 of glr.c  */
#line 2198 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 128:

/* Line 936 of glr.c  */
#line 2202 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 129:

/* Line 936 of glr.c  */
#line 2208 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 130:

/* Line 936 of glr.c  */
#line 2212 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 131:

/* Line 936 of glr.c  */
#line 2217 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 132:

/* Line 936 of glr.c  */
#line 2221 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 133:

/* Line 936 of glr.c  */
#line 2225 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 134:

/* Line 936 of glr.c  */
#line 2229 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 135:

/* Line 936 of glr.c  */
#line 2233 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 136:

/* Line 936 of glr.c  */
#line 2237 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_INIT_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 137:

/* Line 936 of glr.c  */
#line 2244 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_ASM_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 138:

/* Line 936 of glr.c  */
#line 2251 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 139:

/* Line 936 of glr.c  */
#line 2255 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 140:

/* Line 936 of glr.c  */
#line 2260 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_GCC_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 141:

/* Line 936 of glr.c  */
#line 2264 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_GCC_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 142:

/* Line 936 of glr.c  */
#line 2270 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_SPEC, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 143:

/* Line 936 of glr.c  */
#line 2274 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_SPEC, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 144:

/* Line 936 of glr.c  */
#line 2284 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 145:

/* Line 936 of glr.c  */
#line 2288 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 146:

/* Line 936 of glr.c  */
#line 2293 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 147:

/* Line 936 of glr.c  */
#line 2297 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 148:

/* Line 936 of glr.c  */
#line 2303 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 149:

/* Line 936 of glr.c  */
#line 2307 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PARENTHESIZED_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 150:

/* Line 936 of glr.c  */
#line 2314 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 151:

/* Line 936 of glr.c  */
#line 2318 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 152:

/* Line 936 of glr.c  */
#line 2324 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 153:

/* Line 936 of glr.c  */
#line 2331 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 154:

/* Line 936 of glr.c  */
#line 2335 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 155:

/* Line 936 of glr.c  */
#line 2340 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_STATIC_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 156:

/* Line 936 of glr.c  */
#line 2347 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 157:

/* Line 936 of glr.c  */
#line 2351 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_VLA_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 158:

/* Line 936 of glr.c  */
#line 2355 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 159:

/* Line 936 of glr.c  */
#line 2361 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 160:

/* Line 936 of glr.c  */
#line 2365 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 161:

/* Line 936 of glr.c  */
#line 2369 "c99.y"
    {
	AST empty_parameter = ASTLeaf(AST_EMPTY_PARAMETER_DECLARATION_CLAUSE, NULL, 0, NULL);

	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), empty_parameter, NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 162:

/* Line 936 of glr.c  */
#line 2378 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 163:

/* Line 936 of glr.c  */
#line 2383 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_PARENTHESIZED_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 164:

/* Line 936 of glr.c  */
#line 2389 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 165:

/* Line 936 of glr.c  */
#line 2393 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 166:

/* Line 936 of glr.c  */
#line 2399 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_CONST_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 167:

/* Line 936 of glr.c  */
#line 2403 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_VOLATILE_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 168:

/* Line 936 of glr.c  */
#line 2408 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_GCC_RESTRICT_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 169:

/* Line 936 of glr.c  */
#line 2414 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 170:

/* Line 936 of glr.c  */
#line 2418 "c99.y"
    {
	AST empty_parameter = ASTLeaf(AST_EMPTY_PARAMETER_DECLARATION_CLAUSE, NULL, 0, NULL);

	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), empty_parameter, NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 171:

/* Line 936 of glr.c  */
#line 2424 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 172:

/* Line 936 of glr.c  */
#line 2428 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 173:

/* Line 936 of glr.c  */
#line 2432 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL,  ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 174:

/* Line 936 of glr.c  */
#line 2436 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast),  ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 175:

/* Line 936 of glr.c  */
#line 2440 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast),  ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 176:

/* Line 936 of glr.c  */
#line 2444 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PARENTHESIZED_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 177:

/* Line 936 of glr.c  */
#line 2450 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_DECLARATOR_ID_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 178:

/* Line 936 of glr.c  */
#line 2457 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake2(AST_ENUM_SPECIFIER, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 179:

/* Line 936 of glr.c  */
#line 2463 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_ENUM_SPECIFIER, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 180:

/* Line 936 of glr.c  */
#line 2467 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake2(AST_ENUM_SPECIFIER, identifier, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 181:

/* Line 936 of glr.c  */
#line 2473 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_ENUM_SPECIFIER, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 182:

/* Line 936 of glr.c  */
#line 2478 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_ENUM_SPECIFIER, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 183:

/* Line 936 of glr.c  */
#line 2484 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_ENUM_SPECIFIER, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 184:

/* Line 936 of glr.c  */
#line 2488 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_ENUM_SPECIFIER, identifier, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 185:

/* Line 936 of glr.c  */
#line 2494 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_ENUM_SPECIFIER, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 186:

/* Line 936 of glr.c  */
#line 2501 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 187:

/* Line 936 of glr.c  */
#line 2507 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 188:

/* Line 936 of glr.c  */
#line 2512 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 189:

/* Line 936 of glr.c  */
#line 2516 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 190:

/* Line 936 of glr.c  */
#line 2522 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake2(AST_ENUMERATOR_DEF, identifier, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 191:

/* Line 936 of glr.c  */
#line 2528 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake2(AST_ENUMERATOR_DEF, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 192:

/* Line 936 of glr.c  */
#line 2536 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_TYPE_ID, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 193:

/* Line 936 of glr.c  */
#line 2540 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_TYPE_ID, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 194:

/* Line 936 of glr.c  */
#line 2546 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 195:

/* Line 936 of glr.c  */
#line 2550 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 196:

/* Line 936 of glr.c  */
#line 2554 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 197:

/* Line 936 of glr.c  */
#line 2559 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 198:

/* Line 936 of glr.c  */
#line 2563 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_POINTER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 199:

/* Line 936 of glr.c  */
#line 2567 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 200:

/* Line 936 of glr.c  */
#line 2573 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PARENTHESIZED_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 201:

/* Line 936 of glr.c  */
#line 2577 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 202:

/* Line 936 of glr.c  */
#line 2581 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 203:

/* Line 936 of glr.c  */
#line 2585 "c99.y"
    {
	AST empty_parameter = ASTLeaf(AST_EMPTY_PARAMETER_DECLARATION_CLAUSE, NULL, 0, NULL);

	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, NULL, empty_parameter, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 204:

/* Line 936 of glr.c  */
#line 2591 "c99.y"
    {
	AST empty_parameter = ASTLeaf(AST_EMPTY_PARAMETER_DECLARATION_CLAUSE, NULL, 0, NULL);

	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_FUNC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), empty_parameter, NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 205:

/* Line 936 of glr.c  */
#line 2597 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 206:

/* Line 936 of glr.c  */
#line 2601 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 207:

/* Line 936 of glr.c  */
#line 2605 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 208:

/* Line 936 of glr.c  */
#line 2609 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL,  ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 209:

/* Line 936 of glr.c  */
#line 2613 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast),  ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 210:

/* Line 936 of glr.c  */
#line 2617 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast),  ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 211:

/* Line 936 of glr.c  */
#line 2623 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_KR_PARAMETER_LIST, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 212:

/* Line 936 of glr.c  */
#line 2628 "c99.y"
    {
    AST symbol = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);

    ((*yyvalp).ast) = ASTListLeaf(symbol);
;}
    break;

  case 213:

/* Line 936 of glr.c  */
#line 2634 "c99.y"
    {
    AST symbol = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);

    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), symbol);
;}
    break;

  case 214:

/* Line 936 of glr.c  */
#line 2642 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 215:

/* Line 936 of glr.c  */
#line 2646 "c99.y"
    {
    AST variadic_arg = ASTLeaf(AST_VARIADIC_ARG, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), variadic_arg);
;}
    break;

  case 216:

/* Line 936 of glr.c  */
#line 2653 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 217:

/* Line 936 of glr.c  */
#line 2657 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 218:

/* Line 936 of glr.c  */
#line 2663 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_PARAMETER_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 219:

/* Line 936 of glr.c  */
#line 2667 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_PARAMETER_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 220:

/* Line 936 of glr.c  */
#line 2671 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_PARAMETER_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 221:

/* Line 936 of glr.c  */
#line 2676 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_PARAMETER_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 222:

/* Line 936 of glr.c  */
#line 2680 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_PARAMETER_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 223:

/* Line 936 of glr.c  */
#line 2686 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_EQUAL_INITIALIZER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 224:

/* Line 936 of glr.c  */
#line 2692 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 225:

/* Line 936 of glr.c  */
#line 2696 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_INITIALIZER_BRACES, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 226:

/* Line 936 of glr.c  */
#line 2700 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_INITIALIZER_BRACES, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 227:

/* Line 936 of glr.c  */
#line 2704 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_INITIALIZER_BRACES, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 228:

/* Line 936 of glr.c  */
#line 2710 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 229:

/* Line 936 of glr.c  */
#line 2714 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 230:

/* Line 936 of glr.c  */
#line 2718 "c99.y"
    {
    AST designated_initializer = ASTMake2(AST_DESIGNATED_INITIALIZER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);

    ((*yyvalp).ast) = ASTListLeaf(designated_initializer);
;}
    break;

  case 231:

/* Line 936 of glr.c  */
#line 2724 "c99.y"
    {
    AST designated_initializer = ASTMake2(AST_DESIGNATED_INITIALIZER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast)), NULL);

    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), designated_initializer);
;}
    break;

  case 232:

/* Line 936 of glr.c  */
#line 2731 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);

	AST gcc_initializer_clause = ASTMake2(AST_GCC_INITIALIZER_CLAUSE, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);

	((*yyvalp).ast) = ASTListLeaf(gcc_initializer_clause);
;}
    break;

  case 233:

/* Line 936 of glr.c  */
#line 2739 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.token_atrib).token_text);

	AST gcc_initializer_clause = ASTMake2(AST_GCC_INITIALIZER_CLAUSE, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);

	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), gcc_initializer_clause);
;}
    break;

  case 234:

/* Line 936 of glr.c  */
#line 2749 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_DESIGNATION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 235:

/* Line 936 of glr.c  */
#line 2755 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 236:

/* Line 936 of glr.c  */
#line 2759 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 237:

/* Line 936 of glr.c  */
#line 2765 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_INDEX_DESIGNATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 238:

/* Line 936 of glr.c  */
#line 2769 "c99.y"
    {
    AST symbol = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);

    ((*yyvalp).ast) = ASTMake1(AST_FIELD_DESIGNATOR, symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 239:

/* Line 936 of glr.c  */
#line 2777 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_FUNCTION_DEFINITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 240:

/* Line 936 of glr.c  */
#line 2781 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_FUNCTION_DEFINITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 241:

/* Line 936 of glr.c  */
#line 2786 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake4(AST_FUNCTION_DEFINITION, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 242:

/* Line 936 of glr.c  */
#line 2790 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake4(AST_FUNCTION_DEFINITION, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 243:

/* Line 936 of glr.c  */
#line 2795 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_EXTENSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 244:

/* Line 936 of glr.c  */
#line 2801 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 245:

/* Line 936 of glr.c  */
#line 2805 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 246:

/* Line 936 of glr.c  */
#line 2811 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_FUNCTION_BODY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 247:

/* Line 936 of glr.c  */
#line 2821 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_CLASS_SPECIFIER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 248:

/* Line 936 of glr.c  */
#line 2825 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_CLASS_SPECIFIER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 249:

/* Line 936 of glr.c  */
#line 2831 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_CLASS_HEAD_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 250:

/* Line 936 of glr.c  */
#line 2835 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_CLASS_HEAD_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), identifier, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 251:

/* Line 936 of glr.c  */
#line 2842 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_GCC_CLASS_HEAD_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 252:

/* Line 936 of glr.c  */
#line 2846 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake4(AST_GCC_CLASS_HEAD_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), identifier, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 253:

/* Line 936 of glr.c  */
#line 2854 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_CLASS_KEY_STRUCT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 254:

/* Line 936 of glr.c  */
#line 2858 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_CLASS_KEY_UNION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 255:

/* Line 936 of glr.c  */
#line 2864 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 256:

/* Line 936 of glr.c  */
#line 2868 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 257:

/* Line 936 of glr.c  */
#line 2874 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MEMBER_DECLARATION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 258:

/* Line 936 of glr.c  */
#line 2878 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MEMBER_DECLARATION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 259:

/* Line 936 of glr.c  */
#line 2882 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 260:

/* Line 936 of glr.c  */
#line 2887 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_EMPTY_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 261:

/* Line 936 of glr.c  */
#line 2892 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_EXTENSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 262:

/* Line 936 of glr.c  */
#line 2898 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 263:

/* Line 936 of glr.c  */
#line 2902 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 264:

/* Line 936 of glr.c  */
#line 2908 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MEMBER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 265:

/* Line 936 of glr.c  */
#line 2912 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MEMBER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 266:

/* Line 936 of glr.c  */
#line 2916 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_BITFIELD_DECLARATOR, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 267:

/* Line 936 of glr.c  */
#line 2920 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
	AST declarator_id_expr = ASTMake1(AST_DECLARATOR_ID_EXPR, identifier, ASTFileName(identifier), ASTLine(identifier), NULL);

	((*yyvalp).ast) = ASTMake2(AST_BITFIELD_DECLARATOR, declarator_id_expr, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 268:

/* Line 936 of glr.c  */
#line 2928 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_MEMBER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 269:

/* Line 936 of glr.c  */
#line 2932 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_MEMBER_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 270:

/* Line 936 of glr.c  */
#line 2936 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake3(AST_GCC_BITFIELD_DECLARATOR, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 271:

/* Line 936 of glr.c  */
#line 2942 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_BITFIELD_DECLARATOR, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 272:

/* Line 936 of glr.c  */
#line 2948 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 273:

/* Line 936 of glr.c  */
#line 2958 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 274:

/* Line 936 of glr.c  */
#line 2962 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 275:

/* Line 936 of glr.c  */
#line 2966 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 276:

/* Line 936 of glr.c  */
#line 2972 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 277:

/* Line 936 of glr.c  */
#line 2976 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 278:

/* Line 936 of glr.c  */
#line 2980 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 279:

/* Line 936 of glr.c  */
#line 2984 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 280:

/* Line 936 of glr.c  */
#line 2988 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 281:

/* Line 936 of glr.c  */
#line 2992 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 282:

/* Line 936 of glr.c  */
#line 2996 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 283:

/* Line 936 of glr.c  */
#line 3003 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
	
	((*yyvalp).ast) = ASTMake2(AST_LABELED_STATEMENT, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 284:

/* Line 936 of glr.c  */
#line 3009 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_CASE_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 285:

/* Line 936 of glr.c  */
#line 3013 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_DEFAULT_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 286:

/* Line 936 of glr.c  */
#line 3018 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_GCC_CASE_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 287:

/* Line 936 of glr.c  */
#line 3024 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_EXPRESSION_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 288:

/* Line 936 of glr.c  */
#line 3028 "c99.y"
    {
	// Empty statement ...
	((*yyvalp).ast) = ASTLeaf(AST_EMPTY_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 289:

/* Line 936 of glr.c  */
#line 3035 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_DECLARATION_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 290:

/* Line 936 of glr.c  */
#line 3041 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_COMPOUND_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 291:

/* Line 936 of glr.c  */
#line 3045 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_COMPOUND_STATEMENT, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 292:

/* Line 936 of glr.c  */
#line 3051 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 293:

/* Line 936 of glr.c  */
#line 3055 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 294:

/* Line 936 of glr.c  */
#line 3063 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_IF_ELSE_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 295:

/* Line 936 of glr.c  */
#line 3070 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_IF_ELSE_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 296:

/* Line 936 of glr.c  */
#line 3077 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 297:

/* Line 936 of glr.c  */
#line 3081 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 298:

/* Line 936 of glr.c  */
#line 3087 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_SWITCH_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 299:

/* Line 936 of glr.c  */
#line 3093 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_CONDITION, NULL, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 300:

/* Line 936 of glr.c  */
#line 3097 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_CONDITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 301:

/* Line 936 of glr.c  */
#line 3102 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_CONDITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ast),
			ASTMake4(AST_GCC_CONDITION_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL),
			ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 302:

/* Line 936 of glr.c  */
#line 3108 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_CONDITION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast),
			ASTMake4(AST_GCC_CONDITION_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL),
			ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 303:

/* Line 936 of glr.c  */
#line 3114 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_CONDITION, NULL,
			ASTMake4(AST_GCC_CONDITION_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL),
			ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 304:

/* Line 936 of glr.c  */
#line 3122 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_WHILE_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 305:

/* Line 936 of glr.c  */
#line 3126 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_DO_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 306:

/* Line 936 of glr.c  */
#line 3130 "c99.y"
    {
    AST loop_control = ASTMake3(AST_LOOP_CONTROL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
	((*yyvalp).ast) = ASTMake3(AST_FOR_STATEMENT, loop_control, (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (8))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 307:

/* Line 936 of glr.c  */
#line 3137 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 308:

/* Line 936 of glr.c  */
#line 3141 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 309:

/* Line 936 of glr.c  */
#line 3147 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 310:

/* Line 936 of glr.c  */
#line 3151 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 311:

/* Line 936 of glr.c  */
#line 3158 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 312:

/* Line 936 of glr.c  */
#line 3162 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 313:

/* Line 936 of glr.c  */
#line 3168 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_BREAK_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 314:

/* Line 936 of glr.c  */
#line 3172 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_CONTINUE_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 315:

/* Line 936 of glr.c  */
#line 3176 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_RETURN_STATEMENT, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 316:

/* Line 936 of glr.c  */
#line 3180 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_RETURN_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 317:

/* Line 936 of glr.c  */
#line 3184 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
	
	((*yyvalp).ast) = ASTMake1(AST_GOTO_STATEMENT, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 318:

/* Line 936 of glr.c  */
#line 3191 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_GOTO_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 319:

/* Line 936 of glr.c  */
#line 3201 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 320:

/* Line 936 of glr.c  */
#line 3205 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PARENTHESIZED_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 321:

/* Line 936 of glr.c  */
#line 3209 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 322:

/* Line 936 of glr.c  */
#line 3223 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_PARENTHESIZED_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 323:

/* Line 936 of glr.c  */
#line 3227 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_BUILTIN_VA_ARG, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 324:

/* Line 936 of glr.c  */
#line 3231 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_GCC_BUILTIN_OFFSETOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 325:

/* Line 936 of glr.c  */
#line 3235 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_GCC_BUILTIN_CHOOSE_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (8))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 326:

/* Line 936 of glr.c  */
#line 3239 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_GCC_BUILTIN_TYPES_COMPATIBLE_P, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 327:

/* Line 936 of glr.c  */
#line 3252 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_GCC_OFFSETOF_MEMBER_DESIGNATOR,
            ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text),
            (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 328:

/* Line 936 of glr.c  */
#line 3258 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_GCC_OFFSETOF_MEMBER_DESIGNATOR,
            ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text),
            NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 329:

/* Line 936 of glr.c  */
#line 3266 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 330:

/* Line 936 of glr.c  */
#line 3272 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 331:

/* Line 936 of glr.c  */
#line 3278 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 332:

/* Line 936 of glr.c  */
#line 3282 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_ARRAY_SUBSCRIPT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 333:

/* Line 936 of glr.c  */
#line 3286 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_FUNCTION_CALL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 334:

/* Line 936 of glr.c  */
#line 3290 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_FUNCTION_CALL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 335:

/* Line 936 of glr.c  */
#line 3294 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_CLASS_MEMBER_ACCESS, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 336:

/* Line 936 of glr.c  */
#line 3298 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_POINTER_CLASS_MEMBER_ACCESS, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 337:

/* Line 936 of glr.c  */
#line 3302 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_POSTINCREMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 338:

/* Line 936 of glr.c  */
#line 3306 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_POSTDECREMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 339:

/* Line 936 of glr.c  */
#line 3311 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_POSTFIX_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 340:

/* Line 936 of glr.c  */
#line 3315 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_POSTFIX_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 341:

/* Line 936 of glr.c  */
#line 3321 "c99.y"
    {
    AST expression_holder = ASTMake1(AST_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
	((*yyvalp).ast) = ASTListLeaf(expression_holder);
;}
    break;

  case 342:

/* Line 936 of glr.c  */
#line 3326 "c99.y"
    {
    AST expression_holder = ASTMake1(AST_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast)), NULL);
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), expression_holder);
;}
    break;

  case 343:

/* Line 936 of glr.c  */
#line 3333 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 344:

/* Line 936 of glr.c  */
#line 3337 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PREINCREMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 345:

/* Line 936 of glr.c  */
#line 3341 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PREDECREMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 346:

/* Line 936 of glr.c  */
#line 3345 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.node_type), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 347:

/* Line 936 of glr.c  */
#line 3349 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_SIZEOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 348:

/* Line 936 of glr.c  */
#line 3353 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_SIZEOF_TYPEID, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 349:

/* Line 936 of glr.c  */
#line 3358 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_EXTENSION_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 350:

/* Line 936 of glr.c  */
#line 3362 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_ALIGNOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 351:

/* Line 936 of glr.c  */
#line 3366 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_ALIGNOF_TYPE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 352:

/* Line 936 of glr.c  */
#line 3370 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_REAL_PART, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 353:

/* Line 936 of glr.c  */
#line 3374 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_GCC_IMAG_PART, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 354:

/* Line 936 of glr.c  */
#line 3378 "c99.y"
    {
	AST identifier = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);

	((*yyvalp).ast) = ASTMake1(AST_GCC_LABEL_ADDR, identifier, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 355:

/* Line 936 of glr.c  */
#line 3386 "c99.y"
    {
	((*yyvalp).node_type) = AST_DERREFERENCE;
;}
    break;

  case 356:

/* Line 936 of glr.c  */
#line 3390 "c99.y"
    {
	((*yyvalp).node_type) = AST_REFERENCE;
;}
    break;

  case 357:

/* Line 936 of glr.c  */
#line 3394 "c99.y"
    {
	((*yyvalp).node_type) = AST_PLUS;
;}
    break;

  case 358:

/* Line 936 of glr.c  */
#line 3398 "c99.y"
    {
	((*yyvalp).node_type) = AST_NEG;
;}
    break;

  case 359:

/* Line 936 of glr.c  */
#line 3402 "c99.y"
    {
	((*yyvalp).node_type) = AST_NOT;
;}
    break;

  case 360:

/* Line 936 of glr.c  */
#line 3406 "c99.y"
    {
	((*yyvalp).node_type) = AST_COMPLEMENT;
;}
    break;

  case 361:

/* Line 936 of glr.c  */
#line 3412 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 362:

/* Line 936 of glr.c  */
#line 3416 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_CAST_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 363:

/* Line 936 of glr.c  */
#line 3422 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 364:

/* Line 936 of glr.c  */
#line 3426 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MULT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 365:

/* Line 936 of glr.c  */
#line 3430 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_DIV, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 366:

/* Line 936 of glr.c  */
#line 3434 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MOD, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 367:

/* Line 936 of glr.c  */
#line 3440 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 368:

/* Line 936 of glr.c  */
#line 3444 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_ADD, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 369:

/* Line 936 of glr.c  */
#line 3448 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_MINUS, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 370:

/* Line 936 of glr.c  */
#line 3454 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 371:

/* Line 936 of glr.c  */
#line 3458 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SHL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 372:

/* Line 936 of glr.c  */
#line 3462 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SHR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 373:

/* Line 936 of glr.c  */
#line 3468 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 374:

/* Line 936 of glr.c  */
#line 3472 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_LOWER_THAN, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 375:

/* Line 936 of glr.c  */
#line 3476 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GREATER_THAN, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 376:

/* Line 936 of glr.c  */
#line 3480 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GREATER_OR_EQUAL_THAN, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 377:

/* Line 936 of glr.c  */
#line 3484 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_LOWER_OR_EQUAL_THAN, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 378:

/* Line 936 of glr.c  */
#line 3490 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 379:

/* Line 936 of glr.c  */
#line 3494 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_EQUAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 380:

/* Line 936 of glr.c  */
#line 3498 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_DIFFERENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 381:

/* Line 936 of glr.c  */
#line 3504 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 382:

/* Line 936 of glr.c  */
#line 3508 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_BITWISE_AND, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 383:

/* Line 936 of glr.c  */
#line 3514 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 384:

/* Line 936 of glr.c  */
#line 3518 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_BITWISE_XOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 385:

/* Line 936 of glr.c  */
#line 3524 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 386:

/* Line 936 of glr.c  */
#line 3528 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_BITWISE_OR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 387:

/* Line 936 of glr.c  */
#line 3534 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 388:

/* Line 936 of glr.c  */
#line 3538 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_LOGICAL_AND, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 389:

/* Line 936 of glr.c  */
#line 3544 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 390:

/* Line 936 of glr.c  */
#line 3548 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_LOGICAL_OR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 391:

/* Line 936 of glr.c  */
#line 3554 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 392:

/* Line 936 of glr.c  */
#line 3558 "c99.y"
    {
	((*yyvalp).ast) = ASTMake3(AST_CONDITIONAL_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 393:

/* Line 936 of glr.c  */
#line 3563 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_GCC_CONDITIONAL_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 394:

/* Line 936 of glr.c  */
#line 3569 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 395:

/* Line 936 of glr.c  */
#line 3573 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.node_type), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 396:

/* Line 936 of glr.c  */
#line 3579 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 397:

/* Line 936 of glr.c  */
#line 3583 "c99.y"
    {
	AST comma_expression = ASTMake2(AST_COMMA, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);

	((*yyvalp).ast) = ASTMake1(AST_EXPRESSION, comma_expression, ASTFileName(comma_expression), ASTLine(comma_expression), NULL);
;}
    break;

  case 398:

/* Line 936 of glr.c  */
#line 3591 "c99.y"
    {
	((*yyvalp).node_type) = AST_ASSIGNMENT;
;}
    break;

  case 399:

/* Line 936 of glr.c  */
#line 3595 "c99.y"
    {
	((*yyvalp).node_type) = AST_MUL_ASSIGNMENT;
;}
    break;

  case 400:

/* Line 936 of glr.c  */
#line 3599 "c99.y"
    {
	((*yyvalp).node_type) = AST_DIV_ASSIGNMENT;
;}
    break;

  case 401:

/* Line 936 of glr.c  */
#line 3603 "c99.y"
    {
	((*yyvalp).node_type) = AST_ADD_ASSIGNMENT;
;}
    break;

  case 402:

/* Line 936 of glr.c  */
#line 3607 "c99.y"
    {
	((*yyvalp).node_type) = AST_SUB_ASSIGNMENT;
;}
    break;

  case 403:

/* Line 936 of glr.c  */
#line 3611 "c99.y"
    {
	((*yyvalp).node_type) = AST_SHL_ASSIGNMENT;
;}
    break;

  case 404:

/* Line 936 of glr.c  */
#line 3615 "c99.y"
    {
	((*yyvalp).node_type) = AST_SHR_ASSIGNMENT;
;}
    break;

  case 405:

/* Line 936 of glr.c  */
#line 3619 "c99.y"
    {
	((*yyvalp).node_type) = AST_AND_ASSIGNMENT;
;}
    break;

  case 406:

/* Line 936 of glr.c  */
#line 3623 "c99.y"
    {
	((*yyvalp).node_type) = AST_OR_ASSIGNMENT;
;}
    break;

  case 407:

/* Line 936 of glr.c  */
#line 3627 "c99.y"
    {
	((*yyvalp).node_type) = AST_XOR_ASSIGNMENT;
;}
    break;

  case 408:

/* Line 936 of glr.c  */
#line 3631 "c99.y"
    {
	((*yyvalp).node_type) = AST_MOD_ASSIGNMENT;
;}
    break;

  case 409:

/* Line 936 of glr.c  */
#line 3637 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_CONSTANT_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 410:

/* Line 936 of glr.c  */
#line 3647 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_DECIMAL_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 411:

/* Line 936 of glr.c  */
#line 3651 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_OCTAL_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 412:

/* Line 936 of glr.c  */
#line 3655 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_HEXADECIMAL_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 413:

/* Line 936 of glr.c  */
#line 3659 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_HEXADECIMAL_FLOAT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 414:

/* Line 936 of glr.c  */
#line 3663 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_FLOATING_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 415:

/* Line 936 of glr.c  */
#line 3667 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_BOOLEAN_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 416:

/* Line 936 of glr.c  */
#line 3671 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_CHARACTER_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 417:

/* Line 936 of glr.c  */
#line 3675 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 418:

/* Line 936 of glr.c  */
#line 3681 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_UNKNOWN_PRAGMA, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 419:

/* Line 936 of glr.c  */
#line 3687 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_STRING_LITERAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 420:

/* Line 936 of glr.c  */
#line 3691 "c99.y"
    {
	// Let's concatenate here, it will ease everything

	const char* str1 = ASTText((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast));
	const char* str2 = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text;
	char* text = calloc(strlen(str1) + strlen(str2) + 1, sizeof(*text));

	strcat(text, str1);

	// Append the second string
	strcat(text, str2);

	((*yyvalp).ast) = ASTLeaf(AST_STRING_LITERAL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), text);
;}
    break;

  case 421:

/* Line 936 of glr.c  */
#line 3728 "c99.y"
    {
	*parsed_tree = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 422:

/* Line 936 of glr.c  */
#line 3734 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 423:

/* Line 936 of glr.c  */
#line 3738 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 424:

/* Line 936 of glr.c  */
#line 3742 "c99.y"
    {
	((*yyvalp).ast) = NULL;
;}
    break;

  case 425:

/* Line 936 of glr.c  */
#line 3746 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 426:

/* Line 936 of glr.c  */
#line 3750 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 427:

/* Line 936 of glr.c  */
#line 3754 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 428:

/* Line 936 of glr.c  */
#line 3758 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 429:

/* Line 936 of glr.c  */
#line 3762 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 430:

/* Line 936 of glr.c  */
#line 3766 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 431:

/* Line 936 of glr.c  */
#line 3770 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 432:

/* Line 936 of glr.c  */
#line 3797 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 433:

/* Line 936 of glr.c  */
#line 3801 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 434:

/* Line 936 of glr.c  */
#line 3819 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_ARRAY_SECTION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 435:

/* Line 936 of glr.c  */
#line 3823 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_ARRAY_SECTION_SIZE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 436:

/* Line 936 of glr.c  */
#line 3830 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 437:

/* Line 936 of glr.c  */
#line 3834 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_CAST_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 438:

/* Line 936 of glr.c  */
#line 3840 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_SHAPING_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 439:

/* Line 936 of glr.c  */
#line 3846 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 440:

/* Line 936 of glr.c  */
#line 3850 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 441:

/* Line 936 of glr.c  */
#line 3856 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 442:

/* Line 936 of glr.c  */
#line 3874 "c99.y"
    {
    // The lexer ensures this has the following form
    // @STATEMENT-PH::0x1234abcd@, where the pointer coded
    // is an 'AST*'
    AST *tree = decode_placeholder((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);

    // This is an empty statement
    ((*yyvalp).ast) = *tree = ASTMake1(AST_DECLARATION_STATEMENT,
            ASTLeaf(AST_EMPTY_DECL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text), 
            (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 443:

/* Line 936 of glr.c  */
#line 3970 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 444:

/* Line 936 of glr.c  */
#line 3974 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 445:

/* Line 936 of glr.c  */
#line 3980 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 446:

/* Line 936 of glr.c  */
#line 3984 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 447:

/* Line 936 of glr.c  */
#line 3990 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 448:

/* Line 936 of glr.c  */
#line 3994 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 449:

/* Line 936 of glr.c  */
#line 4019 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_DIRECTIVE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 450:

/* Line 936 of glr.c  */
#line 4026 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_CONSTRUCT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 451:

/* Line 936 of glr.c  */
#line 4032 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_CONSTRUCT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 452:

/* Line 936 of glr.c  */
#line 4038 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_CONSTRUCT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 453:

/* Line 936 of glr.c  */
#line 4099 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_LINE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 454:

/* Line 936 of glr.c  */
#line 4103 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_LINE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 455:

/* Line 936 of glr.c  */
#line 4107 "c99.y"
    {
    // This is a degenerated case caused by wrong designed pragmas
    ((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_LINE, NULL, NULL, NULL, 0, NULL);
;}
    break;

  case 456:

/* Line 936 of glr.c  */
#line 4114 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_LINE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 457:

/* Line 936 of glr.c  */
#line 4118 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_PRAGMA_CUSTOM_LINE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 458:

/* Line 936 of glr.c  */
#line 4124 "c99.y"
    {
	((*yyvalp).ast) = NULL;
;}
    break;

  case 459:

/* Line 936 of glr.c  */
#line 4128 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 460:

/* Line 936 of glr.c  */
#line 4134 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 461:

/* Line 936 of glr.c  */
#line 4138 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 462:

/* Line 936 of glr.c  */
#line 4142 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 463:

/* Line 936 of glr.c  */
#line 4148 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PRAGMA_CUSTOM_CLAUSE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 464:

/* Line 936 of glr.c  */
#line 4152 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PRAGMA_CUSTOM_CLAUSE, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 465:

/* Line 936 of glr.c  */
#line 4156 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_PRAGMA_CUSTOM_CLAUSE, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 466:

/* Line 936 of glr.c  */
#line 4162 "c99.y"
    {
    AST node = ASTLeaf(AST_PRAGMA_CLAUSE_ARG, NULL, 0, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.text));

    ((*yyvalp).ast) = ASTListLeaf(node);
;}
    break;

  case 467:

/* Line 936 of glr.c  */
#line 4170 "c99.y"
    {
    ((*yyvalp).text) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.text);
;}
    break;

  case 468:

/* Line 936 of glr.c  */
#line 4174 "c99.y"
    {
    ((*yyvalp).text) = strappend((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.text), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.text));
;}
    break;

  case 469:

/* Line 936 of glr.c  */
#line 4180 "c99.y"
    {
    ((*yyvalp).text) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.text);
;}
    break;

  case 470:

/* Line 936 of glr.c  */
#line 4186 "c99.y"
    {
    ((*yyvalp).text) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text;
;}
    break;

  case 471:

/* Line 936 of glr.c  */
#line 4194 "c99.y"
    {
    AST ident = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);

    ((*yyvalp).ast) = ASTMake1(AST_VERBATIM, ident, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 472:

/* Line 936 of glr.c  */
#line 4200 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_VERBATIM, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 473:

/* Line 936 of glr.c  */
#line 4206 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 474:

/* Line 936 of glr.c  */
#line 4212 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 475:

/* Line 936 of glr.c  */
#line 4231 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 476:

/* Line 936 of glr.c  */
#line 4239 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_CUSTOM_CONSTRUCT_STATEMENT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 477:

/* Line 936 of glr.c  */
#line 4244 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_CUSTOM_CONSTRUCT_HEADER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 478:

/* Line 936 of glr.c  */
#line 4248 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_CUSTOM_CONSTRUCT_HEADER, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 479:

/* Line 936 of glr.c  */
#line 4254 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 480:

/* Line 936 of glr.c  */
#line 4258 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 481:

/* Line 936 of glr.c  */
#line 4264 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake2(AST_CUSTOM_CONSTRUCT_PARAMETER,
            ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_text), 
            (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), 
            (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 482:

/* Line 936 of glr.c  */
#line 4308 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_OMP_UDR_DECLARE_ARG, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 483:

/* Line 936 of glr.c  */
#line 4321 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_OMP_UDR_DECLARE_ARG_2, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 484:

/* Line 936 of glr.c  */
#line 4328 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 485:

/* Line 936 of glr.c  */
#line 4346 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 486:

/* Line 936 of glr.c  */
#line 4350 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 487:

/* Line 936 of glr.c  */
#line 4356 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_SYMBOL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 488:

/* Line 936 of glr.c  */
#line 4360 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
	struct { const char *op; const char *name; } map[] =
    { 
        { "+", "_plus_"},
        { "-", "_minus_"},
        { "*", "_mult_"},
        { "/", "_div_"},
        { "&", "_and_"},
        { "|", "_or_"},
        { "^", "_exp_"},
        { "&&", "_andand_"},
        { "||", "_oror_"},
        { NULL, NULL }
    };

	int i; 
	char found = 0;
	for (i = 0; map[i].op != NULL && !found; i++)
	{
		if ((found = (strcmp(ast_get_text(((*yyvalp).ast)), map[i].op) == 0)))
        {
            ast_set_type(((*yyvalp).ast), AST_SYMBOL);
            ast_set_text(((*yyvalp).ast), map[i].name);
		    break;
        }
	}
	if (!found)
    {
		internal_error("Unhandled operator '%s'", ast_get_text(((*yyvalp).ast)));
    }
;}
    break;

  case 489:

/* Line 936 of glr.c  */
#line 4395 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 490:

/* Line 936 of glr.c  */
#line 4401 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 491:

/* Line 936 of glr.c  */
#line 4427 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 492:

/* Line 936 of glr.c  */
#line 4431 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 493:

/* Line 936 of glr.c  */
#line 4437 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 494:

/* Line 936 of glr.c  */
#line 4453 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 495:

/* Line 936 of glr.c  */
#line 4457 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 496:

/* Line 936 of glr.c  */
#line 4461 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 497:

/* Line 936 of glr.c  */
#line 4465 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 498:

/* Line 936 of glr.c  */
#line 4469 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 499:

/* Line 936 of glr.c  */
#line 4473 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 500:

/* Line 936 of glr.c  */
#line 4477 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 501:

/* Line 936 of glr.c  */
#line 4481 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 502:

/* Line 936 of glr.c  */
#line 4485 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_OMP_UDR_BUILTIN_OP, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 503:

/* Line 936 of glr.c  */
#line 4491 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 504:

/* Line 936 of glr.c  */
#line 4497 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 505:

/* Line 936 of glr.c  */
#line 4503 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 506:

/* Line 936 of glr.c  */
#line 4509 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 507:

/* Line 936 of glr.c  */
#line 4515 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 508:

/* Line 936 of glr.c  */
#line 4564 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SUPERSCALAR_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 509:

/* Line 936 of glr.c  */
#line 4568 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 510:

/* Line 936 of glr.c  */
#line 4572 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SUPERSCALAR_EXPRESSION, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 511:

/* Line 936 of glr.c  */
#line 4578 "c99.y"
    {
	AST ss_decl = ASTMake2(AST_SUPERSCALAR_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast)), NULL);
    ((*yyvalp).ast) = ASTListLeaf(ss_decl);
;}
    break;

  case 512:

/* Line 936 of glr.c  */
#line 4583 "c99.y"
    {
	AST ss_decl = ASTMake2(AST_SUPERSCALAR_DECLARATOR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast)), NULL);
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), ss_decl);
;}
    break;

  case 513:

/* Line 936 of glr.c  */
#line 4590 "c99.y"
    {
	((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 514:

/* Line 936 of glr.c  */
#line 4594 "c99.y"
    {
	((*yyvalp).ast) = ASTMake4(AST_DECLARATOR_ARRAY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 515:

/* Line 936 of glr.c  */
#line 4601 "c99.y"
    {
	((*yyvalp).ast) = NULL;
;}
    break;

  case 517:

/* Line 936 of glr.c  */
#line 4608 "c99.y"
    {
	((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 518:

/* Line 936 of glr.c  */
#line 4612 "c99.y"
    {
	((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 519:

/* Line 936 of glr.c  */
#line 4618 "c99.y"
    {
	((*yyvalp).ast) = ASTLeaf(AST_SUPERSCALAR_REGION_SPEC_FULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 520:

/* Line 936 of glr.c  */
#line 4622 "c99.y"
    {
	((*yyvalp).ast) = ASTMake1(AST_SUPERSCALAR_REGION_SPEC_SINGLE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 521:

/* Line 936 of glr.c  */
#line 4626 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SUPERSCALAR_REGION_SPEC_RANGE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 522:

/* Line 936 of glr.c  */
#line 4630 "c99.y"
    {
	((*yyvalp).ast) = ASTMake2(AST_SUPERSCALAR_REGION_SPEC_LENGTH, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 523:

/* Line 936 of glr.c  */
#line 4665 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_LOCALSIZEOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 524:

/* Line 936 of glr.c  */
#line 4669 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_LOCALSIZEOF_TYPEID, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 525:

/* Line 936 of glr.c  */
#line 4673 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_BLOCKSIZEOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 526:

/* Line 936 of glr.c  */
#line 4677 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_BLOCKSIZEOF_TYPEID, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 527:

/* Line 936 of glr.c  */
#line 4681 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_ELEMSIZEOF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 528:

/* Line 936 of glr.c  */
#line 4685 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_ELEMSIZEOF_TYPEID, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 529:

/* Line 936 of glr.c  */
#line 4691 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 530:

/* Line 936 of glr.c  */
#line 4695 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 531:

/* Line 936 of glr.c  */
#line 4701 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_SHARED, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 532:

/* Line 936 of glr.c  */
#line 4705 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_SHARED, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 533:

/* Line 936 of glr.c  */
#line 4711 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_UPC_RELAXED, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 534:

/* Line 936 of glr.c  */
#line 4715 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_UPC_STRICT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 535:

/* Line 936 of glr.c  */
#line 4722 "c99.y"
    {
    ((*yyvalp).ast) = ASTListLeaf((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 536:

/* Line 936 of glr.c  */
#line 4726 "c99.y"
    {
    ((*yyvalp).ast) = ASTList((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ast));
;}
    break;

  case 537:

/* Line 936 of glr.c  */
#line 4732 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_LAYOUT_QUALIFIER, NULL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 538:

/* Line 936 of glr.c  */
#line 4736 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_LAYOUT_QUALIFIER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 539:

/* Line 936 of glr.c  */
#line 4740 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_LAYOUT_QUALIFIER, 
            ASTLeaf(AST_UPC_LAYOUT_UNDEF, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL), 
            (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 540:

/* Line 936 of glr.c  */
#line 4748 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 541:

/* Line 936 of glr.c  */
#line 4754 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_NOTIFY, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 542:

/* Line 936 of glr.c  */
#line 4758 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_WAIT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 543:

/* Line 936 of glr.c  */
#line 4762 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake1(AST_UPC_BARRIER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 544:

/* Line 936 of glr.c  */
#line 4766 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_UPC_FENCE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 545:

/* Line 936 of glr.c  */
#line 4772 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 546:

/* Line 936 of glr.c  */
#line 4776 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 547:

/* Line 936 of glr.c  */
#line 4782 "c99.y"
    {
    AST upc_forall_header =
        ASTMake4(AST_UPC_FORALL_HEADER, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);

    ((*yyvalp).ast) = ASTMake2(AST_UPC_FORALL, upc_forall_header, (((yyGLRStackItem const *)yyvsp)[YYFILL ((10) - (10))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 548:

/* Line 936 of glr.c  */
#line 4791 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 549:

/* Line 936 of glr.c  */
#line 4795 "c99.y"
    {
    ((*yyvalp).ast) = NULL;
;}
    break;

  case 550:

/* Line 936 of glr.c  */
#line 4800 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 551:

/* Line 936 of glr.c  */
#line 4804 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_UPC_CONTINUE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, NULL);
;}
    break;

  case 552:

/* Line 936 of glr.c  */
#line 4831 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 553:

/* Line 936 of glr.c  */
#line 4837 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 554:

/* Line 936 of glr.c  */
#line 4843 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_CUDA_DEVICE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 555:

/* Line 936 of glr.c  */
#line 4847 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_CUDA_GLOBAL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 556:

/* Line 936 of glr.c  */
#line 4851 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_CUDA_HOST, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 557:

/* Line 936 of glr.c  */
#line 4855 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_CUDA_CONSTANT, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 558:

/* Line 936 of glr.c  */
#line 4859 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_CUDA_SHARED, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;

  case 559:

/* Line 936 of glr.c  */
#line 4865 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_CUDA_KERNEL_CALL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 560:

/* Line 936 of glr.c  */
#line 4869 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake3(AST_CUDA_KERNEL_CALL, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 561:

/* Line 936 of glr.c  */
#line 4875 "c99.y"
    {
    ((*yyvalp).ast) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ast);
;}
    break;

  case 562:

/* Line 936 of glr.c  */
#line 4881 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake4(AST_CUDA_KERNEL_ARGUMENTS, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yysemantics.yysval.ast), ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 563:

/* Line 936 of glr.c  */
#line 4885 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake4(AST_CUDA_KERNEL_ARGUMENTS, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ast), NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 564:

/* Line 936 of glr.c  */
#line 4889 "c99.y"
    {
    ((*yyvalp).ast) = ASTMake4(AST_CUDA_KERNEL_ARGUMENTS, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ast), NULL, NULL, ASTFileName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), ASTLine((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ast)), NULL);
;}
    break;

  case 565:

/* Line 936 of glr.c  */
#line 4895 "c99.y"
    {
    ((*yyvalp).token_atrib) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib);
;}
    break;

  case 566:

/* Line 936 of glr.c  */
#line 4902 "c99.y"
    {
    ((*yyvalp).token_atrib) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib);
;}
    break;

  case 567:

/* Line 936 of glr.c  */
#line 4924 "c99.y"
    {
    ((*yyvalp).ast) = ASTLeaf(AST_XL_BUILTIN_SPEC, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_file, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_line, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.token_atrib).token_text);
;}
    break;



/* Line 936 of glr.c  */
#line 9687 "c99-parser.c"
      default: break;
    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
}


/*ARGSUSED*/ static void
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYUSE (yy0);
  YYUSE (yy1);

  switch (yyn)
    {
        case 1: yy0->ast = ambiguityHandler (*yy0, *yy1); break;

      default: break;
    }
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, AST* parsed_tree)
{
  YYUSE (yyvaluep);
  YYUSE (parsed_tree);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE.  */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys, AST* parsed_tree)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, parsed_tree);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  if (yys->yysemantics.yyfirstVal)
	    YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  else
	    YYFPRINTF (stderr, "%s incomplete ", yymsg);
	  yy_symbol_print (stderr, yystos[yys->yylrState],
			   NULL, parsed_tree);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
	{
	  yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
	  yyGLRState *yyrh;
	  int yyn;
	  for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
	       yyn > 0;
	       yyrh = yyrh->yypred, yyn -= 1)
	    yydestroyGLRState (yymsg, yyrh, parsed_tree);
	}
    }
}

/** Left-hand-side symbol for rule #RULE.  */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token).  */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one.  */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  YYID (0)

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
		int* yyaction, const short int** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

/** Return a fresh GLRStackItem.  Callers should call
 * YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
 * headroom.  */

static inline yyGLRStackItem*
yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
{
  yyGLRStackItem* yynewItem = yystackp->yynextFree;
  yystackp->yyspaceLeft -= 1;
  yystackp->yynextFree += 1;
  yynewItem->yystate.yyisState = yyisState;
  return yynewItem;
}

/** Add a new semantic action that will execute the action for rule
 *  RULENUM on the semantic values in RHS to the list of
 *  alternative actions for STATE.  Assumes that RHS comes from
 *  stack #K of *STACKP. */
static void
yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewOption =
    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
  yynewOption->yystate = rhs;
  yynewOption->yyrule = yyrule;
  if (yystackp->yytops.yylookaheadNeeds[yyk])
    {
      yynewOption->yyrawchar = yychar;
      yynewOption->yyval = yylval;
      yynewOption->yyloc = yylloc;
    }
  else
    yynewOption->yyrawchar = YYEMPTY;
  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewOption;

  YY_RESERVE_GLRSTACK (yystackp);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack.  */
static yybool
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
  if (! yyset->yystates)
    return yyfalse;
  yyset->yystates[0] = NULL;
  yyset->yylookaheadNeeds =
    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
  if (! yyset->yylookaheadNeeds)
    {
      YYFREE (yyset->yystates);
      return yyfalse;
    }
  return yytrue;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
  YYFREE (yyset->yylookaheadNeeds);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE.  */
static yybool
yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
{
  yystackp->yyerrState = 0;
  yynerrs = 0;
  yystackp->yyspaceLeft = yysize;
  yystackp->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
  if (!yystackp->yyitems)
    return yyfalse;
  yystackp->yynextFree = yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;
  return yyinitStateSet (&yystackp->yytops);
}


#if YYSTACKEXPANDABLE
# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation.  */
static void
yyexpandGLRStack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yynewItems;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystackp->yynextFree - yystackp->yyitems;
  if (YYMAXDEPTH - YYHEADROOM < yysize)
    yyMemoryExhausted (yystackp);
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystackp);
  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystackp->yysplitPoint != NULL)
    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
				 yystackp->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
    if (yystackp->yytops.yystates[yyn] != NULL)
      yystackp->yytops.yystates[yyn] =
	YYRELOC (yystackp->yyitems, yynewItems,
		 yystackp->yytops.yystates[yyn], yystate);
  YYFREE (yystackp->yyitems);
  yystackp->yyitems = yynewItems;
  yystackp->yynextFree = yynewItems + yysize;
  yystackp->yyspaceLeft = yynewSize - yysize;
}
#endif

static void
yyfreeGLRStack (yyGLRStack* yystackp)
{
  YYFREE (yystackp->yyitems);
  yyfreeStateSet (&yystackp->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S.  */
static inline void
yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
{
  if (yystackp->yysplitPoint != NULL && yystackp->yysplitPoint > yys)
    yystackp->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK.  */
static inline void
yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yytops.yystates[yyk] != NULL)
    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted.  */
static void
yyundeleteLastStack (yyGLRStack* yystackp)
{
  if (yystackp->yylastDeleted == NULL || yystackp->yytops.yysize != 0)
    return;
  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
  yystackp->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystackp->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystackp)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystackp->yytops.yysize)
    {
      if (yystackp->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystackp->yytops.yysize -= 1;
	}
      else
	{
	  yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
	  /* In the current implementation, it's unnecessary to copy
	     yystackp->yytops.yylookaheadNeeds[yyi] since, after
	     yyremoveDeletes returns, the parser immediately either enters
	     deterministic operation or shifts a token.  However, it doesn't
	     hurt, and the code might evolve to need it.  */
	  yystackp->yytops.yylookaheadNeeds[yyj] =
	    yystackp->yytops.yylookaheadNeeds[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL.  */
static inline void
yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yytrue;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yysval = *yyvalp;
  yynewState->yyloc = *yylocp;
  yystackp->yytops.yystates[yyk] = yynewState;

  YY_RESERVE_GLRSTACK (yystackp);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE.  */
static inline void
yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yyfalse;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yyfirstVal = NULL;
  yystackp->yytops.yystates[yyk] = yynewState;

  /* Invokes YY_RESERVE_GLRSTACK.  */
  yyaddDeferredAction (yystackp, yyk, yynewState, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved.  Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction.  */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp, AST* parsed_tree)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystackp->yysplitPoint == NULL)
    {
      /* Standard special case: single stack.  */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystackp->yynextFree -= yynrhs;
      yystackp->yyspaceLeft += yynrhs;
      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystackp, parsed_tree);
    }
  else
    {
      /* At present, doAction is never called in nondeterministic
       * mode, so this branch is never taken.  It is here in
       * anticipation of a future feature that will allow immediate
       * evaluation of selected actions in nondeterministic mode.  */
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
	= yystackp->yytops.yystates[yyk];
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yystackp->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp, parsed_tree);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(Args)
#else
# define YY_REDUCE_PRINT(Args)		\
do {					\
  if (yydebug)				\
    yy_reduce_print Args;		\
} while (YYID (0))

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

/*ARGSUSED*/ static inline void
yy_reduce_print (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp, AST* parsed_tree)
{
  int yynrhs = yyrhsLength (yyrule);
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  yyGLRStackItem* yyvsp = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
  int yylow = 1;
  int yyi;
  YYUSE (yyvalp);
  YYUSE (yylocp);
  YYUSE (parsed_tree);
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yysemantics.yysval)
		       		       , parsed_tree);
      YYFPRINTF (stderr, "\n");
    }
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK.  In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	     yybool yyforceEval, AST* parsed_tree)
{
  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystackp->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT ((yystackp, yyk, yyrule, &yysval, &yyloc, parsed_tree));
      YYCHK (yydoAction (yystackp, yyk, yyrule, &yysval,
			 &yyloc, parsed_tree));
      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
      yyglrShift (yystackp, yyk,
		  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, &yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
		  "Reduced stack %lu by rule #%d; action deferred.  Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystackp->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystackp->yysplitPoint;
	    yyp = yystackp->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystackp, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystackp->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static size_t
yysplitStack (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
    }
  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
    {
      yyGLRState** yynewStates;
      yybool* yynewLookaheadNeeds;

      yynewStates = NULL;

      if (yystackp->yytops.yycapacity
	  > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yycapacity *= 2;

      yynewStates =
	(yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
				  (yystackp->yytops.yycapacity
				   * sizeof yynewStates[0]));
      if (yynewStates == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yystates = yynewStates;

      yynewLookaheadNeeds =
	(yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
			     (yystackp->yytops.yycapacity
			      * sizeof yynewLookaheadNeeds[0]));
      if (yynewLookaheadNeeds == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
    }
  yystackp->yytops.yystates[yystackp->yytops.yysize]
    = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
    = yystackp->yytops.yylookaheadNeeds[yyk];
  yystackp->yytops.yysize += 1;
  return yystackp->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols.  */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0.  */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (YYID (yytrue))
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yyGLRState* yys,
				   yyGLRStack* yystackp, AST* parsed_tree);


/** Resolve the previous N states starting at and including state S.  If result
 *  != yyok, some states may have been left unresolved possibly with empty
 *  semantic option chains.  Regardless of whether result = yyok, each state
 *  has been left with consistent data so that yydestroyGLRState can be invoked
 *  if necessary.  */
static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn,
		 yyGLRStack* yystackp, AST* parsed_tree)
{
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp, parsed_tree));
      if (! yys->yyresolved)
	YYCHK (yyresolveValue (yys, yystackp, parsed_tree));
    }
  return yyok;
}

/** Resolve the states for the RHS of OPT, perform its user action, and return
 *  the semantic value and location.  Regardless of whether result = yyok, all
 *  RHS states have been destroyed (assuming the user action destroys all RHS
 *  semantic values if invoked).  */
static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp, AST* parsed_tree)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
  int yychar_current;
  YYSTYPE yylval_current;
  YYLTYPE yylloc_current;
  YYRESULTTAG yyflag;

  yynrhs = yyrhsLength (yyopt->yyrule);
  yyflag = yyresolveStates (yyopt->yystate, yynrhs, yystackp, parsed_tree);
  if (yyflag != yyok)
    {
      yyGLRState *yys;
      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
	yydestroyGLRState ("Cleanup: popping", yys, parsed_tree);
      return yyflag;
    }

  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  yychar_current = yychar;
  yylval_current = yylval;
  yylloc_current = yylloc;
  yychar = yyopt->yyrawchar;
  yylval = yyopt->yyval;
  yylloc = yyopt->yyloc;
  yyflag = yyuserAction (yyopt->yyrule, yynrhs,
			   yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp, parsed_tree);
  yychar = yychar_current;
  yylval = yylval_current;
  yylloc = yylloc_current;
  return yyflag;
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[1 + YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

/*ARGSUSED*/ static YYRESULTTAG
yyreportAmbiguity (yySemanticOption* yyx0,
		   yySemanticOption* yyx1, AST* parsed_tree)
{
  YYUSE (yyx0);
  YYUSE (yyx1);

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif

  yyerror (parsed_tree, YY_("syntax is ambiguous"));
  return yyabort;
}

/** Starting at and including state S1, resolve the location for each of the
 *  previous N1 states that is unresolved.  The first semantic option of a state
 *  is always chosen.  */
static void
yyresolveLocations (yyGLRState* yys1, int yyn1,
		    yyGLRStack *yystackp, AST* parsed_tree)
{
  if (0 < yyn1)
    {
      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp, parsed_tree);
      if (!yys1->yyresolved)
	{
	  yySemanticOption *yyoption;
	  yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
	  int yynrhs;
	  int yychar_current;
	  YYSTYPE yylval_current;
	  YYLTYPE yylloc_current;
	  yyoption = yys1->yysemantics.yyfirstVal;
	  YYASSERT (yyoption != NULL);
	  yynrhs = yyrhsLength (yyoption->yyrule);
	  if (yynrhs > 0)
	    {
	      yyGLRState *yys;
	      int yyn;
	      yyresolveLocations (yyoption->yystate, yynrhs,
				  yystackp, parsed_tree);
	      for (yys = yyoption->yystate, yyn = yynrhs;
		   yyn > 0;
		   yys = yys->yypred, yyn -= 1)
		yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
	    }
	  else
	    {
	      /* Both yyresolveAction and yyresolveLocations traverse the GSS
		 in reverse rightmost order.  It is only necessary to invoke
		 yyresolveLocations on a subforest for which yyresolveAction
		 would have been invoked next had an ambiguity not been
		 detected.  Thus the location of the previous state (but not
		 necessarily the previous state itself) is guaranteed to be
		 resolved already.  */
	      yyGLRState *yyprevious = yyoption->yystate;
	      yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
	    }
	  yychar_current = yychar;
	  yylval_current = yylval;
	  yylloc_current = yylloc;
	  yychar = yyoption->yyrawchar;
	  yylval = yyoption->yyval;
	  yylloc = yyoption->yyloc;
	  YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
	  yychar = yychar_current;
	  yylval = yylval_current;
	  yylloc = yylloc_current;
	}
    }
}

/** Resolve the ambiguity represented in state S, perform the indicated
 *  actions, and set the semantic value of S.  If result != yyok, the chain of
 *  semantic options in S has been cleared instead or it has been left
 *  unmodified except that redundant options may have been removed.  Regardless
 *  of whether result = yyok, S has been left with consistent data so that
 *  yydestroyGLRState can be invoked if necessary.  */
static YYRESULTTAG
yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp, AST* parsed_tree)
{
  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
  yySemanticOption* yybest;
  yySemanticOption** yypp;
  yybool yymerge;
  YYSTYPE yysval;
  YYRESULTTAG yyflag;
  YYLTYPE *yylocp = &yys->yyloc;

  yybest = yyoptionList;
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
    {
      yySemanticOption* yyp = *yypp;

      if (yyidenticalOptions (yybest, yyp))
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
      else
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyresolveLocations (yys, 1, yystackp, parsed_tree);
	      return yyreportAmbiguity (yybest, yyp, parsed_tree);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
		 but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
    }

  if (yymerge)
    {
      yySemanticOption* yyp;
      int yyprec = yydprec[yybest->yyrule];
      yyflag = yyresolveAction (yybest, yystackp, &yysval,
				yylocp, parsed_tree);
      if (yyflag == yyok)
	for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	  {
	    if (yyprec == yydprec[yyp->yyrule])
	      {
		YYSTYPE yysval_other;
		YYLTYPE yydummy;
		yyflag = yyresolveAction (yyp, yystackp, &yysval_other,
					  &yydummy, parsed_tree);
		if (yyflag != yyok)
		  {
		    yydestruct ("Cleanup: discarding incompletely merged value for",
				yystos[yys->yylrState],
				&yysval, parsed_tree);
		    break;
		  }
		yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
	      }
	  }
    }
  else
    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp, parsed_tree);

  if (yyflag == yyok)
    {
      yys->yyresolved = yytrue;
      yys->yysemantics.yysval = yysval;
    }
  else
    yys->yysemantics.yyfirstVal = NULL;
  return yyflag;
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystackp, AST* parsed_tree)
{
  if (yystackp->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystackp->yytops.yystates[0];
	   yys != yystackp->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
			     , parsed_tree));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystackp)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == NULL)
    return;

  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystackp->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystackp->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
      yystackp->yynextFree += 1;
      yystackp->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
		   size_t yyposn, AST* parsed_tree)
{
  int yyaction;
  const short int* yyconflicts;
  yyRuleNum yyrule;

  while (yystackp->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystackp, yyk, yyrule, yyfalse, parsed_tree));
	}
      else
	{
	  yySymbol yytoken;
	  yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
	  if (yychar == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	    }

	  if (yychar <= YYEOF)
	    {
	      yychar = yytoken = YYEOF;
	      YYDPRINTF ((stderr, "Now at end of input.\n"));
	    }
	  else
	    {
	      yytoken = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	    }

	  yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      size_t yynewStack = yysplitStack (yystackp, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
	      YYCHK (yyglrReduce (yystackp, yynewStack,
				  *yyconflicts, yyfalse, parsed_tree));
	      YYCHK (yyprocessOneStack (yystackp, yynewStack,
					yyposn, parsed_tree));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    break;
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystackp, yyk, -yyaction,
				yyfalse, parsed_tree));
	}
    }
  return yyok;
}

/*ARGSUSED*/ static void
yyreportSyntaxError (yyGLRStack* yystackp, AST* parsed_tree)
{
  if (yystackp->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      int yyn;
      yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn <= YYLAST)
	{
	  yySymbol yytoken = YYTRANSLATE (yychar);
	  size_t yysize0 = yytnamerr (NULL, yytokenName (yytoken));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn + 1;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytokenName (yytoken);
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
	    {
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (parsed_tree, yymsg);
	      YYFREE (yymsg);
	    }
	  else
	    {
	      yyerror (parsed_tree, YY_("syntax error"));
	      yyMemoryExhausted (yystackp);
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (parsed_tree, YY_("syntax error"));
      yynerrs += 1;
    }
}

/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
   yylval, and yylloc are the syntactic category, semantic value, and location
   of the lookahead.  */
/*ARGSUSED*/ static void
yyrecoverSyntaxError (yyGLRStack* yystackp, AST* parsed_tree)
{
  size_t yyk;
  int yyj;

  if (yystackp->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (YYID (yytrue))
      {
	yySymbol yytoken;
	if (yychar == YYEOF)
	  yyFail (yystackp, parsed_tree, NULL);
	if (yychar != YYEMPTY)
	  {
	    yytoken = YYTRANSLATE (yychar);
	    yydestruct ("Error: discarding",
			yytoken, &yylval, parsed_tree);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	if (yychar <= YYEOF)
	  {
	    yychar = yytoken = YYEOF;
	    YYDPRINTF ((stderr, "Now at end of input.\n"));
	  }
	else
	  {
	    yytoken = YYTRANSLATE (yychar);
	    YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	  }
	yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += yytoken;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
	  {
	    if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
    if (yystackp->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystackp->yytops.yysize)
    yyFail (yystackp, parsed_tree, NULL);
  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystackp, yyk);
  yyremoveDeletes (yystackp);
  yycompressStack (yystackp);

  /* Now pop stack until we find a state that shifts the error token.  */
  yystackp->yyerrState = 3;
  while (yystackp->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystackp->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      /* Shift the error token having adjusted its location.  */
	      YYLTYPE yyerrloc;
	      YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
			       &yylval, &yyerrloc);
	      yyglrShift (yystackp, 0, yytable[yyj],
			  yys->yyposn, &yylval, &yyerrloc);
	      yys = yystackp->yytops.yystates[0];
	      break;
	    }
	}

      if (yys->yypred != NULL)
	yydestroyGLRState ("Error: popping", yys, parsed_tree);
      yystackp->yytops.yystates[0] = yys->yypred;
      yystackp->yynextFree -= 1;
      yystackp->yyspaceLeft += 1;
    }
  if (yystackp->yytops.yystates[0] == NULL)
    yyFail (yystackp, parsed_tree, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    case yyok:								     \
      break;								     \
    case yyabort:							     \
      goto yyabortlab;							     \
    case yyaccept:							     \
      goto yyacceptlab;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    default:								     \
      goto yybuglab;							     \
    }									     \
  } while (YYID (0))


/*----------.
| yyparse.  |
`----------*/

int
yyparse (AST* parsed_tree)
{
  int yyresult;
  yyGLRStack yystack;
  yyGLRStack* const yystackp = &yystack;
  size_t yyposn;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY;
  yylval = yyval_default;


  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
  yyposn = 0;

  while (YYID (yytrue))
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (YYID (yytrue))
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short int* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
	  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyacceptlab;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{

		  yyreportSyntaxError (&yystack, parsed_tree);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue, parsed_tree));
	    }
	  else
	    {
	      yySymbol yytoken;
	      if (yychar == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		}

	      if (yychar <= YYEOF)
		{
		  yychar = yytoken = YYEOF;
		  YYDPRINTF ((stderr, "Now at end of input.\n"));
		}
	      else
		{
		  yytoken = YYTRANSLATE (yychar);
		  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
		}

	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
		  yychar = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{

		  yyreportSyntaxError (&yystack, parsed_tree);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue, parsed_tree));
	    }
	}

      while (YYID (yytrue))
	{
	  yySymbol yytoken_to_shift;
	  size_t yys;

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;

	  /* yyprocessOneStack returns one of three things:

	      - An error flag.  If the caller is yyprocessOneStack, it
		immediately returns as well.  When the caller is finally
		yyparse, it jumps to an error label via YYCHK1.

	      - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
		(&yystack, yys), which sets the top state of yys to NULL.  Thus,
		yyparse's following invocation of yyremoveDeletes will remove
		the stack.

	      - yyok, when ready to shift a token.

	     Except in the first case, yyparse will invoke yyremoveDeletes and
	     then shift the next token onto all remaining stacks.  This
	     synchronization of the shift (that is, after all preceding
	     reductions on all stacks) helps prevent double destructor calls
	     on yylval in the event of memory exhaustion.  */

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn, parsed_tree));
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, parsed_tree, YY_("syntax error"));
	      YYCHK1 (yyresolveStack (&yystack, parsed_tree));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));

	      yyreportSyntaxError (&yystack, parsed_tree);
	      goto yyuser_error;
	    }

	  /* If any yyglrShift call fails, it will fail after shifting.  Thus,
	     a copy of yylval will already be on stack 0 in the event of a
	     failure in the following loop.  Thus, yychar is set to YYEMPTY
	     before the loop to make sure the user destructor for yylval isn't
	     called twice.  */
	  yytoken_to_shift = YYTRANSLATE (yychar);
	  yychar = YYEMPTY;
	  yyposn += 1;
	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    {
	      int yyaction;
	      const short int* yyconflicts;
	      yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
	      yygetLRActions (yystate, yytoken_to_shift, &yyaction,
			      &yyconflicts);
	      /* Note that yyconflicts were handled by yyprocessOneStack.  */
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
	      YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
	      yyglrShift (&yystack, yys, yyaction, yyposn,
			  &yylval, &yylloc);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yys,
			  yystack.yytops.yystates[yys]->yylrState));
	    }

	  if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack, parsed_tree));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack, parsed_tree);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  goto yyabortlab;

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (parsed_tree, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;

 yyreturn:
  if (yychar != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
		YYTRANSLATE (yychar),
		&yylval, parsed_tree);

  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	{
	  size_t yysize = yystack.yytops.yysize;
	  size_t yyk;
	  for (yyk = 0; yyk < yysize; yyk += 1)
	    if (yystates[yyk])
	      {
		while (yystates[yyk])
		  {
		    yyGLRState *yys = yystates[yyk];
		    if (yys->yypred != NULL)
		      yydestroyGLRState ("Cleanup: popping", yys, parsed_tree);
		    yystates[yyk] = yys->yypred;
		    yystack.yynextFree -= 1;
		    yystack.yyspaceLeft += 1;
		  }
		break;
	      }
	}
      yyfreeGLRStack (&yystack);
    }

  /* Make sure YYID is used.  */
  return YYID (yyresult);
}

/* DEBUGGING ONLY */
#if YYDEBUG
static void yypstack (yyGLRStack* yystackp, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystackp) __attribute__ ((__unused__));

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      YYFPRINTF (stderr, " -> ");
    }
  YYFPRINTF (stderr, "%d@%lu", yys->yylrState,
             (unsigned long int) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    YYFPRINTF (stderr, "<null>");
  else
    yy_yypstack (yyst);
  YYFPRINTF (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystackp, size_t yyk)
{
  yypstates (yystackp->yytops.yystates[yyk]);
}

#define YYINDEX(YYX)							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)


static void
yypdumpstack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
    {
      YYFPRINTF (stderr, "%3lu. ",
                 (unsigned long int) (yyp - yystackp->yyitems));
      if (*(yybool *) yyp)
	{
	  YYFPRINTF (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		     yyp->yystate.yyresolved, yyp->yystate.yylrState,
		     (unsigned long int) yyp->yystate.yyposn,
		     (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    YYFPRINTF (stderr, ", firstVal: %ld",
		       (long int) YYINDEX (yyp->yystate
                                             .yysemantics.yyfirstVal));
	}
      else
	{
	  YYFPRINTF (stderr, "Option. rule: %d, state: %ld, next: %ld",
		     yyp->yyoption.yyrule - 1,
		     (long int) YYINDEX (yyp->yyoption.yystate),
		     (long int) YYINDEX (yyp->yyoption.yynext));
	}
      YYFPRINTF (stderr, "\n");
    }
  YYFPRINTF (stderr, "Tops:");
  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
    YYFPRINTF (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	       (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
  YYFPRINTF (stderr, "\n");
}
#endif



/* Line 2634 of glr.c  */
#line 4932 "c99.y"






























// This is code


#define TOK_SEPARATOR "::"
static AST* decode_placeholder(const char *c)
{
    const char * colons = strstr(c, TOK_SEPARATOR);

    if (colons == NULL)
    {
        internal_error("Invalid placeholder token", 0);
    }

    colons += strlen(TOK_SEPARATOR);

    AST *tree = NULL;
    sscanf(colons, "%p", &tree);

    if (tree == NULL)
    {
        internal_error("Invalid AST* reference", 0);
    }

    return tree;
}



#include "cxx-utils.h"

static AST ambiguityHandler (YYSTYPE x0, YYSTYPE x1)
{
	AST son0 = x0.ast;
	AST son1 = x1.ast;

	if (son0 == son1) 
	{
		internal_error("Ambiguity function received two trees that are the same!\n", 0);
	}

    return ast_make_ambiguous(son0, son1);
}



void yyerror(AST* parsed_tree UNUSED_PARAMETER, const char* c)
{
	fprintf(stderr, "%s:%d: error: %s\n", scanning_now.current_filename, scanning_now.line_number, c);
}


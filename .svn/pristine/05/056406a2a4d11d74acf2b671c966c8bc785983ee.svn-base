/*
<testinfo>
test_generator=05_torture_cxx_1.dg/mercurium
</testinfo>
*/

namespace std __attribute__((__visibility__("default"))) {
}
typedef long int ptrdiff_t;
typedef long unsigned int size_t;
namespace std __attribute__((__visibility__("default"))) {
    using ::ptrdiff_t;
    using ::size_t;
}
namespace std __attribute__((__visibility__("default"))) {
    void __throw_bad_exception(void) __attribute__((__noreturn__));
    void __throw_bad_alloc(void) __attribute__((__noreturn__));
    void __throw_bad_cast(void) __attribute__((__noreturn__));
    void __throw_bad_typeid(void) __attribute__((__noreturn__));
    void __throw_logic_error(const char *) __attribute__((__noreturn__));
    void __throw_domain_error(const char *) __attribute__((__noreturn__));
    void __throw_invalid_argument(const char *) __attribute__((__noreturn__));
    void __throw_length_error(const char *) __attribute__((__noreturn__));
    void __throw_out_of_range(const char *) __attribute__((__noreturn__));
    void __throw_runtime_error(const char *) __attribute__((__noreturn__));
    void __throw_range_error(const char *) __attribute__((__noreturn__));
    void __throw_overflow_error(const char *) __attribute__((__noreturn__));
    void __throw_underflow_error(const char *) __attribute__((__noreturn__));
    void __throw_ios_failure(const char *) __attribute__((__noreturn__));
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    template<typename _Iterator, typename _Container >
    class __normal_iterator;
}
namespace std __attribute__((__visibility__("default"))) {
    struct __true_type
    {
    };
    struct __false_type
    {
    };
    template<bool >
    struct __truth_type
    {
            typedef __false_type __type;
    };
    template<>
    struct __truth_type< true >
    {
            typedef __true_type __type;
    };
    template<class _Sp, class _Tp >
    struct __traitor
    {
            enum 
            {
                __value = bool(_Sp::__value) || bool(_Tp::__value)
            };
            typedef typename __truth_type< __value >::__type __type;
    };
    template<class _Sp, class _Tp >
    struct __traitand
    {
            enum 
            {
                __value = bool(_Sp::__value) && bool(_Tp::__value)
            };
            typedef typename __truth_type< __value >::__type __type;
    };
    template<typename , typename  >
    struct __are_same
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<typename _Tp >
    struct __are_same< _Tp, _Tp >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_void
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<>
    struct __is_void< void >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_integer
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<>
    struct __is_integer< bool >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< signed char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< unsigned char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< wchar_t >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< short >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< unsigned short >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< int >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< unsigned int >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< long >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< unsigned long >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< long long >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_integer< unsigned long long >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_floating
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<>
    struct __is_floating< float >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_floating< double >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_floating< long double >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_pointer
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<typename _Tp >
    struct __is_pointer< _Tp * >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_normal_iterator
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<typename _Iterator, typename _Container >
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container > >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_arithmetic : public __traitor< __is_integer< _Tp >, __is_floating< _Tp > >
    {
    };
    template<typename _Tp >
    struct __is_fundamental : public __traitor< __is_void< _Tp >, __is_arithmetic< _Tp > >
    {
    };
    template<typename _Tp >
    struct __is_scalar : public __traitor< __is_arithmetic< _Tp >, __is_pointer< _Tp > >
    {
    };
    template<typename _Tp >
    struct __is_char
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<>
    struct __is_char< char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_char< wchar_t >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_byte
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
    template<>
    struct __is_byte< char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_byte< signed char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<>
    struct __is_byte< unsigned char >
    {
            enum 
            {
                __value = 1
            };
            typedef __true_type __type;
    };
    template<typename _Tp >
    struct __is_move_iterator
    {
            enum 
            {
                __value = 0
            };
            typedef __false_type __type;
    };
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    template<bool, typename  >
    struct __enable_if
    {
    };
    template<typename _Tp >
    struct __enable_if< true, _Tp >
    {
            typedef _Tp __type;
    };
    template<bool _Cond, typename _Iftrue, typename _Iffalse >
    struct __conditional_type
    {
            typedef _Iftrue __type;
    };
    template<typename _Iftrue, typename _Iffalse >
    struct __conditional_type< false, _Iftrue, _Iffalse >
    {
            typedef _Iffalse __type;
    };
    template<typename _Tp >
    struct __add_unsigned
    {
        private :
            typedef __enable_if< std::__is_integer< _Tp >::__value, _Tp > __if_type;
        public :
            typedef typename __if_type::__type __type;
    };
    template<>
    struct __add_unsigned< char >
    {
            typedef unsigned char __type;
    };
    template<>
    struct __add_unsigned< signed char >
    {
            typedef unsigned char __type;
    };
    template<>
    struct __add_unsigned< short >
    {
            typedef unsigned short __type;
    };
    template<>
    struct __add_unsigned< int >
    {
            typedef unsigned int __type;
    };
    template<>
    struct __add_unsigned< long >
    {
            typedef unsigned long __type;
    };
    template<>
    struct __add_unsigned< long long >
    {
            typedef unsigned long long __type;
    };
    template<>
    struct __add_unsigned< bool >;
    template<>
    struct __add_unsigned< wchar_t >;
    template<typename _Tp >
    struct __remove_unsigned
    {
        private :
            typedef __enable_if< std::__is_integer< _Tp >::__value, _Tp > __if_type;
        public :
            typedef typename __if_type::__type __type;
    };
    template<>
    struct __remove_unsigned< char >
    {
            typedef signed char __type;
    };
    template<>
    struct __remove_unsigned< unsigned char >
    {
            typedef signed char __type;
    };
    template<>
    struct __remove_unsigned< unsigned short >
    {
            typedef short __type;
    };
    template<>
    struct __remove_unsigned< unsigned int >
    {
            typedef int __type;
    };
    template<>
    struct __remove_unsigned< unsigned long >
    {
            typedef long __type;
    };
    template<>
    struct __remove_unsigned< unsigned long long >
    {
            typedef long long __type;
    };
    template<>
    struct __remove_unsigned< bool >;
    template<>
    struct __remove_unsigned< wchar_t >;
    template<typename _Type >
    inline bool __is_null_pointer(_Type * __ptr)
    {
        return __ptr == 0;
    }
    template<typename _Type >
    inline bool __is_null_pointer(_Type)
    {
        return false;
    }
    template<typename _Tp, bool = std::__is_integer< _Tp >::__value >
    struct __promote
    {
            typedef double __type;
    };
    template<typename _Tp >
    struct __promote< _Tp, false >
    {
            typedef _Tp __type;
    };
    template<typename _Tp, typename _Up >
    struct __promote_2
    {
        private :
            typedef typename __promote< _Tp >::__type __type1;
            typedef typename __promote< _Up >::__type __type2;
        public :
            typedef __typeof__ (__type1() + __type2()) __type;
    };
    template<typename _Tp, typename _Up, typename _Vp >
    struct __promote_3
    {
        private :
            typedef typename __promote< _Tp >::__type __type1;
            typedef typename __promote< _Up >::__type __type2;
            typedef typename __promote< _Vp >::__type __type3;
        public :
            typedef __typeof__ (__type1() + __type2() + __type3()) __type;
    };
    template<typename _Tp, typename _Up, typename _Vp, typename _Wp >
    struct __promote_4
    {
        private :
            typedef typename __promote< _Tp >::__type __type1;
            typedef typename __promote< _Up >::__type __type2;
            typedef typename __promote< _Vp >::__type __type3;
            typedef typename __promote< _Wp >::__type __type4;
        public :
            typedef __typeof__ (__type1() + __type2() + __type3() + __type4()) __type;
    };
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    template<typename _Value >
    struct __numeric_traits_integer
    {
            static const _Value __min = (((_Value) (-1) < 0) ? (_Value) 1 << (sizeof(_Value) * 8 - ((_Value) (-1) < 0)) : (_Value) 0);
            static const _Value __max = (((_Value) (-1) < 0) ? (((((_Value) 1 << ((sizeof(_Value) * 8 - ((_Value) (-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value) 0);
            static const bool __is_signed = ((_Value) (-1) < 0);
            static const int __digits = (sizeof(_Value) * 8 - ((_Value) (-1) < 0));
    };
    template<typename _Value >
    const _Value __numeric_traits_integer< _Value >::__min;
    template<typename _Value >
    const _Value __numeric_traits_integer< _Value >::__max;
    template<typename _Value >
    const bool __numeric_traits_integer< _Value >::__is_signed;
    template<typename _Value >
    const int __numeric_traits_integer< _Value >::__digits;
    template<typename _Value >
    struct __numeric_traits_floating
    {
            static const int __max_digits10 = (2 + (std::__are_same< _Value, float >::__value ? 24 : std::__are_same< _Value, double >::__value ? 53 : 64) * 3010 / 10000);
            static const bool __is_signed = true;
            static const int __digits10 = (std::__are_same< _Value, float >::__value ? 6 : std::__are_same< _Value, double >::__value ? 15 : 18);
            static const int __max_exponent10 = (std::__are_same< _Value, float >::__value ? 38 : std::__are_same< _Value, double >::__value ? 308 : 4932);
    };
    template<typename _Value >
    const int __numeric_traits_floating< _Value >::__max_digits10;
    template<typename _Value >
    const bool __numeric_traits_floating< _Value >::__is_signed;
    template<typename _Value >
    const int __numeric_traits_floating< _Value >::__digits10;
    template<typename _Value >
    const int __numeric_traits_floating< _Value >::__max_exponent10;
    template<typename _Value >
    struct __numeric_traits : public __conditional_type< std::__is_integer< _Value >::__value, __numeric_traits_integer< _Value >, __numeric_traits_floating< _Value > >::__type
    {
    };
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Tp >
    inline void swap(_Tp & __a, _Tp & __b)
    {
        _Tp __tmp = (__a);
        __a = (__b);
        __b = (__tmp);
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<class _T1, class _T2 >
    struct pair
    {
            typedef _T1 first_type;
            typedef _T2 second_type;
            _T1 first;
            _T2 second;
            pair()
                : first(), second() 
            {
            }
            pair(const _T1 & __a, const _T2 & __b)
                : first(__a), second(__b) 
            {
            }
            template<class _U1, class _U2 >
            pair(const pair< _U1, _U2 > & __p)
                : first(__p.first), second(__p.second) 
            {
            }
    };
    template<class _T1, class _T2 >
    inline bool operator ==(const pair< _T1, _T2 > & __x, const pair< _T1, _T2 > & __y)
    {
        return __x.first == __y.first && __x.second == __y.second;
    }
    template<class _T1, class _T2 >
    inline bool operator <(const pair< _T1, _T2 > & __x, const pair< _T1, _T2 > & __y)
    {
        return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
    }
    template<class _T1, class _T2 >
    inline bool operator !=(const pair< _T1, _T2 > & __x, const pair< _T1, _T2 > & __y)
    {
        return !(__x == __y);
    }
    template<class _T1, class _T2 >
    inline bool operator >(const pair< _T1, _T2 > & __x, const pair< _T1, _T2 > & __y)
    {
        return __y < __x;
    }
    template<class _T1, class _T2 >
    inline bool operator <=(const pair< _T1, _T2 > & __x, const pair< _T1, _T2 > & __y)
    {
        return !(__y < __x);
    }
    template<class _T1, class _T2 >
    inline bool operator >=(const pair< _T1, _T2 > & __x, const pair< _T1, _T2 > & __y)
    {
        return !(__x < __y);
    }
    template<class _T1, class _T2 >
    inline pair< _T1, _T2 > make_pair(_T1 __x, _T2 __y)
    {
        return pair< _T1, _T2 >(__x, __y);
    }
}
namespace std __attribute__((__visibility__("default"))) {
    struct input_iterator_tag
    {
    };
    struct output_iterator_tag
    {
    };
    struct forward_iterator_tag : public input_iterator_tag
    {
    };
    struct bidirectional_iterator_tag : public forward_iterator_tag
    {
    };
    struct random_access_iterator_tag : public bidirectional_iterator_tag
    {
    };
    template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp *, typename _Reference = _Tp & >
    struct iterator
    {
            typedef _Category iterator_category;
            typedef _Tp value_type;
            typedef _Distance difference_type;
            typedef _Pointer pointer;
            typedef _Reference reference;
    };
    template<typename _Iterator >
    struct iterator_traits
    {
            typedef typename _Iterator::iterator_category iterator_category;
            typedef typename _Iterator::value_type value_type;
            typedef typename _Iterator::difference_type difference_type;
            typedef typename _Iterator::pointer pointer;
            typedef typename _Iterator::reference reference;
    };
    template<typename _Tp >
    struct iterator_traits< _Tp * >
    {
            typedef random_access_iterator_tag iterator_category;
            typedef _Tp value_type;
            typedef ptrdiff_t difference_type;
            typedef _Tp * pointer;
            typedef _Tp & reference;
    };
    template<typename _Tp >
    struct iterator_traits< const _Tp * >
    {
            typedef random_access_iterator_tag iterator_category;
            typedef _Tp value_type;
            typedef ptrdiff_t difference_type;
            typedef const _Tp * pointer;
            typedef const _Tp & reference;
    };
    template<typename _Iter >
    inline typename iterator_traits< _Iter >::iterator_category __iterator_category(const _Iter &)
    {
        return typename iterator_traits< _Iter >::iterator_category();
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _InputIterator >
    inline typename iterator_traits< _InputIterator >::difference_type __distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)
    {
        typename iterator_traits< _InputIterator >::difference_type __n = 0;
        while (__first != __last)
        {
            ++__first;
            ++__n;
        }
        return __n;
    }
    template<typename _RandomAccessIterator >
    inline typename iterator_traits< _RandomAccessIterator >::difference_type __distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
    {
        return __last - __first;
    }
    template<typename _InputIterator >
    inline typename iterator_traits< _InputIterator >::difference_type distance(_InputIterator __first, _InputIterator __last)
    {
        return std::__distance(__first, __last, std::__iterator_category(__first));
    }
    template<typename _InputIterator, typename _Distance >
    inline void __advance(_InputIterator & __i, _Distance __n, input_iterator_tag)
    {
        while (__n--)
            ++__i;
    }
    template<typename _BidirectionalIterator, typename _Distance >
    inline void __advance(_BidirectionalIterator & __i, _Distance __n, bidirectional_iterator_tag)
    {
        if (__n > 0)
            while (__n--)
                ++__i;
        else
            while (__n++)
                --__i;
    }
    template<typename _RandomAccessIterator, typename _Distance >
    inline void __advance(_RandomAccessIterator & __i, _Distance __n, random_access_iterator_tag)
    {
        __i += __n;
    }
    template<typename _InputIterator, typename _Distance >
    inline void advance(_InputIterator & __i, _Distance __n)
    {
        typename iterator_traits< _InputIterator >::difference_type __d = __n;
        std::__advance(__i, __d, std::__iterator_category(__i));
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Iterator >
    class reverse_iterator : public iterator< typename iterator_traits< _Iterator >::iterator_category, typename iterator_traits< _Iterator >::value_type, typename iterator_traits< _Iterator >::difference_type, typename iterator_traits< _Iterator >::pointer, typename iterator_traits< _Iterator >::reference >
    {
        protected :
            _Iterator current;
        public :
            typedef _Iterator iterator_type;
            typedef typename iterator_traits< _Iterator >::difference_type difference_type;
            typedef typename iterator_traits< _Iterator >::reference reference;
            typedef typename iterator_traits< _Iterator >::pointer pointer;
        public :
            reverse_iterator()
                : current() 
            {
            }
            explicit reverse_iterator(iterator_type __x)
                : current(__x) 
            {
            }
            reverse_iterator(const reverse_iterator & __x)
                : current(__x.current) 
            {
            }
            template<typename _Iter >
            reverse_iterator(const reverse_iterator< _Iter > & __x)
                : current(__x.base()) 
            {
            }
            iterator_type base() const
            {
                return current;
            }
            reference operator *() const
            {
                _Iterator __tmp = current;
                return *--__tmp;
            }
            pointer operator ->() const
            {
                return &(operator *());
            }
            reverse_iterator & operator ++()
            {
                --current;
                return *this;
            }
            reverse_iterator operator ++(int)
            {
                reverse_iterator __tmp = *this;
                --current;
                return __tmp;
            }
            reverse_iterator & operator --()
            {
                ++current;
                return *this;
            }
            reverse_iterator operator --(int)
            {
                reverse_iterator __tmp = *this;
                ++current;
                return __tmp;
            }
            reverse_iterator operator +(difference_type __n) const
            {
                return reverse_iterator(current - __n);
            }
            reverse_iterator & operator +=(difference_type __n)
            {
                current -= __n;
                return *this;
            }
            reverse_iterator operator -(difference_type __n) const
            {
                return reverse_iterator(current + __n);
            }
            reverse_iterator & operator -=(difference_type __n)
            {
                current += __n;
                return *this;
            }
            reference operator [](difference_type __n) const
            {
                return *(*this + __n);
            }
    };
    template<typename _Iterator >
    inline bool operator ==(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return __x.base() == __y.base();
    }
    template<typename _Iterator >
    inline bool operator <(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return __y.base() < __x.base();
    }
    template<typename _Iterator >
    inline bool operator !=(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return !(__x == __y);
    }
    template<typename _Iterator >
    inline bool operator >(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return __y < __x;
    }
    template<typename _Iterator >
    inline bool operator <=(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return !(__y < __x);
    }
    template<typename _Iterator >
    inline bool operator >=(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return !(__x < __y);
    }
    template<typename _Iterator >
    inline typename reverse_iterator< _Iterator >::difference_type operator -(const reverse_iterator< _Iterator > & __x, const reverse_iterator< _Iterator > & __y)
    {
        return __y.base() - __x.base();
    }
    template<typename _Iterator >
    inline reverse_iterator< _Iterator > operator +(typename reverse_iterator< _Iterator >::difference_type __n, const reverse_iterator< _Iterator > & __x)
    {
        return reverse_iterator< _Iterator >(__x.base() - __n);
    }
    template<typename _IteratorL, typename _IteratorR >
    inline bool operator ==(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return __x.base() == __y.base();
    }
    template<typename _IteratorL, typename _IteratorR >
    inline bool operator <(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return __y.base() < __x.base();
    }
    template<typename _IteratorL, typename _IteratorR >
    inline bool operator !=(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return !(__x == __y);
    }
    template<typename _IteratorL, typename _IteratorR >
    inline bool operator >(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return __y < __x;
    }
    template<typename _IteratorL, typename _IteratorR >
    inline bool operator <=(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return !(__y < __x);
    }
    template<typename _IteratorL, typename _IteratorR >
    inline bool operator >=(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return !(__x < __y);
    }
    template<typename _IteratorL, typename _IteratorR >
    inline typename reverse_iterator< _IteratorL >::difference_type operator -(const reverse_iterator< _IteratorL > & __x, const reverse_iterator< _IteratorR > & __y)
    {
        return __y.base() - __x.base();
    }
    template<typename _Container >
    class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void >
    {
        protected :
            _Container * container;
        public :
            typedef _Container container_type;
            explicit back_insert_iterator(_Container & __x)
                : container(&__x) 
            {
            }
            back_insert_iterator & operator =(typename _Container::const_reference __value)
            {
                container->push_back(__value);
                return *this;
            }
            back_insert_iterator & operator *()
            {
                return *this;
            }
            back_insert_iterator & operator ++()
            {
                return *this;
            }
            back_insert_iterator operator ++(int)
            {
                return *this;
            }
    };
    template<typename _Container >
    inline back_insert_iterator< _Container > back_inserter(_Container & __x)
    {
        return back_insert_iterator< _Container >(__x);
    }
    template<typename _Container >
    class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void >
    {
        protected :
            _Container * container;
        public :
            typedef _Container container_type;
            explicit front_insert_iterator(_Container & __x)
                : container(&__x) 
            {
            }
            front_insert_iterator & operator =(typename _Container::const_reference __value)
            {
                container->push_front(__value);
                return *this;
            }
            front_insert_iterator & operator *()
            {
                return *this;
            }
            front_insert_iterator & operator ++()
            {
                return *this;
            }
            front_insert_iterator operator ++(int)
            {
                return *this;
            }
    };
    template<typename _Container >
    inline front_insert_iterator< _Container > front_inserter(_Container & __x)
    {
        return front_insert_iterator< _Container >(__x);
    }
    template<typename _Container >
    class insert_iterator : public iterator< output_iterator_tag, void, void, void, void >
    {
        protected :
            _Container * container;
            typename _Container::iterator iter;
        public :
            typedef _Container container_type;
            insert_iterator(_Container & __x, typename _Container::iterator __i)
                : container(&__x), iter(__i) 
            {
            }
            insert_iterator & operator =(typename _Container::const_reference __value)
            {
                iter = container->insert(iter, __value);
                ++iter;
                return *this;
            }
            insert_iterator & operator *()
            {
                return *this;
            }
            insert_iterator & operator ++()
            {
                return *this;
            }
            insert_iterator & operator ++(int)
            {
                return *this;
            }
    };
    template<typename _Container, typename _Iterator >
    inline insert_iterator< _Container > inserter(_Container & __x, _Iterator __i)
    {
        return insert_iterator< _Container >(__x, typename _Container::iterator(__i));
    }
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    using std::iterator_traits;
    using std::iterator;
    template<typename _Iterator, typename _Container >
    class __normal_iterator
    {
        protected :
            _Iterator _M_current;
        public :
            typedef _Iterator iterator_type;
            typedef typename iterator_traits< _Iterator >::iterator_category iterator_category;
            typedef typename iterator_traits< _Iterator >::value_type value_type;
            typedef typename iterator_traits< _Iterator >::difference_type difference_type;
            typedef typename iterator_traits< _Iterator >::reference reference;
            typedef typename iterator_traits< _Iterator >::pointer pointer;
            __normal_iterator()
                : _M_current(_Iterator()) 
            {
            }
            explicit __normal_iterator(const _Iterator & __i)
                : _M_current(__i) 
            {
            }
            template<typename _Iter >
            __normal_iterator(const __normal_iterator< _Iter, typename __enable_if< (std::__are_same< _Iter, typename _Container::pointer >::__value), _Container >::__type > & __i)
                : _M_current(__i.base()) 
            {
            }
            reference operator *() const
            {
                return *_M_current;
            }
            pointer operator ->() const
            {
                return _M_current;
            }
            __normal_iterator & operator ++()
            {
                ++_M_current;
                return *this;
            }
            __normal_iterator operator ++(int)
            {
                return __normal_iterator(_M_current++);
            }
            __normal_iterator & operator --()
            {
                --_M_current;
                return *this;
            }
            __normal_iterator operator --(int)
            {
                return __normal_iterator(_M_current--);
            }
            reference operator [](const difference_type & __n) const
            {
                return _M_current[__n];
            }
            __normal_iterator & operator +=(const difference_type & __n)
            {
                _M_current += __n;
                return *this;
            }
            __normal_iterator operator +(const difference_type & __n) const
            {
                return __normal_iterator(_M_current + __n);
            }
            __normal_iterator & operator -=(const difference_type & __n)
            {
                _M_current -= __n;
                return *this;
            }
            __normal_iterator operator -(const difference_type & __n) const
            {
                return __normal_iterator(_M_current - __n);
            }
            const _Iterator & base() const
            {
                return _M_current;
            }
    };
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool operator ==(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() == __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline bool operator ==(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() == __rhs.base();
    }
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool operator !=(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() != __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline bool operator !=(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() != __rhs.base();
    }
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool operator <(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() < __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline bool operator <(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() < __rhs.base();
    }
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool operator >(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() > __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline bool operator >(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() > __rhs.base();
    }
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool operator <=(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() <= __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline bool operator <=(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() <= __rhs.base();
    }
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool operator >=(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() >= __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline bool operator >=(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() >= __rhs.base();
    }
    template<typename _IteratorL, typename _IteratorR, typename _Container >
    inline typename __normal_iterator< _IteratorL, _Container >::difference_type operator -(const __normal_iterator< _IteratorL, _Container > & __lhs, const __normal_iterator< _IteratorR, _Container > & __rhs)
    {
        return __lhs.base() - __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline typename __normal_iterator< _Iterator, _Container >::difference_type operator -(const __normal_iterator< _Iterator, _Container > & __lhs, const __normal_iterator< _Iterator, _Container > & __rhs)
    {
        return __lhs.base() - __rhs.base();
    }
    template<typename _Iterator, typename _Container >
    inline __normal_iterator< _Iterator, _Container > operator +(typename __normal_iterator< _Iterator, _Container >::difference_type __n, const __normal_iterator< _Iterator, _Container > & __i)
    {
        return __normal_iterator< _Iterator, _Container >(__i.base() + __n);
    }
}
namespace std {
    namespace __debug {
    }
}
namespace __gnu_debug {
    using namespace std::__debug;
}
namespace std __attribute__((__visibility__("default"))) {
    template<bool _BoolType >
    struct __iter_swap
    {
            template<typename _ForwardIterator1, typename _ForwardIterator2 >
            static void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
            {
                typedef typename iterator_traits< _ForwardIterator1 >::value_type _ValueType1;
                _ValueType1 __tmp = (*__a);
                *__a = (*__b);
                *__b = (__tmp);
            }
    };
    template<>
    struct __iter_swap< true >
    {
            template<typename _ForwardIterator1, typename _ForwardIterator2 >
            static void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
            {
                swap(*__a, *__b);
            }
    };
    template<typename _ForwardIterator1, typename _ForwardIterator2 >
    inline void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
        typedef typename iterator_traits< _ForwardIterator1 >::value_type _ValueType1;
        typedef typename iterator_traits< _ForwardIterator2 >::value_type _ValueType2;
        typedef typename iterator_traits< _ForwardIterator1 >::reference _ReferenceType1;
        typedef typename iterator_traits< _ForwardIterator2 >::reference _ReferenceType2;
        std::__iter_swap< __are_same< _ValueType1, _ValueType2 >::__value && __are_same< _ValueType1 &, _ReferenceType1 >::__value && __are_same< _ValueType2 &, _ReferenceType2 >::__value >::iter_swap(__a, __b);
    }
    template<typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator2 swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
    {
        ;
        for (;
            __first1 != __last1;
            ++__first1 , ++__first2)
        std::iter_swap(__first1, __first2);
        return __first2;
    }
    template<typename _Tp >
    inline const _Tp & min(const _Tp & __a, const _Tp & __b)
    {
        if (__b < __a)
            return __b;
        return __a;
    }
    template<typename _Tp >
    inline const _Tp & max(const _Tp & __a, const _Tp & __b)
    {
        if (__a < __b)
            return __b;
        return __a;
    }
    template<typename _Tp, typename _Compare >
    inline const _Tp & min(const _Tp & __a, const _Tp & __b, _Compare __comp)
    {
        if (__comp(__b, __a))
            return __b;
        return __a;
    }
    template<typename _Tp, typename _Compare >
    inline const _Tp & max(const _Tp & __a, const _Tp & __b, _Compare __comp)
    {
        if (__comp(__a, __b))
            return __b;
        return __a;
    }
    template<typename _Iterator, bool _IsNormal = __is_normal_iterator< _Iterator >::__value >
    struct __niter_base
    {
            static _Iterator __b(_Iterator __it)
            {
                return __it;
            }
    };
    template<typename _Iterator >
    struct __niter_base< _Iterator, true >
    {
            static typename _Iterator::iterator_type __b(_Iterator __it)
            {
                return __it.base();
            }
    };
    template<typename _Iterator, bool _IsMove = __is_move_iterator< _Iterator >::__value >
    struct __miter_base
    {
            static _Iterator __b(_Iterator __it)
            {
                return __it;
            }
    };
    template<typename _Iterator >
    struct __miter_base< _Iterator, true >
    {
            static typename _Iterator::iterator_type __b(_Iterator __it)
            {
                return __it.base();
            }
    };
    template<bool, bool, typename  >
    struct __copy_move
    {
            template<typename _II, typename _OI >
            static _OI __copy_m(_II __first, _II __last, _OI __result)
            {
                for (;
                    __first != __last;
                    ++__result , ++__first)
                *__result = *__first;
                return __result;
            }
    };
    template<>
    struct __copy_move< false, false, random_access_iterator_tag >
    {
            template<typename _II, typename _OI >
            static _OI __copy_m(_II __first, _II __last, _OI __result)
            {
                typedef typename iterator_traits< _II >::difference_type _Distance;
                for (_Distance __n = __last - __first;
                    __n > 0;
                    --__n)
                {
                    *__result = *__first;
                    ++__first;
                    ++__result;
                }
                return __result;
            }
    };
    template<bool _IsMove >
    struct __copy_move< _IsMove, true, random_access_iterator_tag >
    {
            template<typename _Tp >
            static _Tp * __copy_m(const _Tp * __first, const _Tp * __last, _Tp * __result)
            {
                __builtin_memmove(__result, __first, sizeof(_Tp) * (__last - __first));
                return __result + (__last - __first);
            }
    };
    template<bool _IsMove, typename _II, typename _OI >
    inline _OI __copy_move_a(_II __first, _II __last, _OI __result)
    {
        typedef typename iterator_traits< _II >::value_type _ValueTypeI;
        typedef typename iterator_traits< _OI >::value_type _ValueTypeO;
        typedef typename iterator_traits< _II >::iterator_category _Category;
        const bool __simple = (__is_pod(_ValueTypeI) && __is_pointer< _II >::__value && __is_pointer< _OI >::__value && __are_same< _ValueTypeI, _ValueTypeO >::__value);
        return std::__copy_move< _IsMove, __simple, _Category >::__copy_m(__first, __last, __result);
    }
    template<typename _CharT >
    struct char_traits;
    template<typename _CharT, typename _Traits >
    class istreambuf_iterator;
    template<typename _CharT, typename _Traits >
    class ostreambuf_iterator;
    template<bool _IsMove, typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, ostreambuf_iterator< _CharT, char_traits< _CharT > > >::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT > >);
    template<bool _IsMove, typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, ostreambuf_iterator< _CharT, char_traits< _CharT > > >::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT > >);
    template<bool _IsMove, typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, _CharT * >::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT > >, istreambuf_iterator< _CharT, char_traits< _CharT > >, _CharT *);
    template<bool _IsMove, typename _II, typename _OI >
    inline _OI __copy_move_a2(_II __first, _II __last, _OI __result)
    {
        return _OI(std::__copy_move_a< _IsMove >(std::__niter_base< _II >::__b(__first), std::__niter_base< _II >::__b(__last), std::__niter_base< _OI >::__b(__result)));
    }
    template<typename _II, typename _OI >
    inline _OI copy(_II __first, _II __last, _OI __result)
    {
        ;
        return (std::__copy_move_a2< __is_move_iterator< _II >::__value >(std::__miter_base< _II >::__b(__first), std::__miter_base< _II >::__b(__last), __result));
    }
    template<bool, bool, typename  >
    struct __copy_move_backward
    {
            template<typename _BI1, typename _BI2 >
            static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
            {
                while (__first != __last)
                    *--__result = *--__last;
                return __result;
            }
    };
    template<>
    struct __copy_move_backward< false, false, random_access_iterator_tag >
    {
            template<typename _BI1, typename _BI2 >
            static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
            {
                typename iterator_traits< _BI1 >::difference_type __n;
                for (__n = __last - __first;
                    __n > 0;
                    --__n)
                *--__result = *--__last;
                return __result;
            }
    };
    template<bool _IsMove >
    struct __copy_move_backward< _IsMove, true, random_access_iterator_tag >
    {
            template<typename _Tp >
            static _Tp * __copy_move_b(const _Tp * __first, const _Tp * __last, _Tp * __result)
            {
                const ptrdiff_t _Num = __last - __first;
                __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
                return __result - _Num;
            }
    };
    template<bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2 __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
        typedef typename iterator_traits< _BI1 >::value_type _ValueType1;
        typedef typename iterator_traits< _BI2 >::value_type _ValueType2;
        typedef typename iterator_traits< _BI1 >::iterator_category _Category;
        const bool __simple = (__is_pod(_ValueType1) && __is_pointer< _BI1 >::__value && __is_pointer< _BI2 >::__value && __are_same< _ValueType1, _ValueType2 >::__value);
        return std::__copy_move_backward< _IsMove, __simple, _Category >::__copy_move_b(__first, __last, __result);
    }
    template<bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2 __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
        return _BI2(std::__copy_move_backward_a< _IsMove >(std::__niter_base< _BI1 >::__b(__first), std::__niter_base< _BI1 >::__b(__last), std::__niter_base< _BI2 >::__b(__result)));
    }
    template<typename _BI1, typename _BI2 >
    inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {
        ;
        return (std::__copy_move_backward_a2< __is_move_iterator< _BI1 >::__value >(std::__miter_base< _BI1 >::__b(__first), std::__miter_base< _BI1 >::__b(__last), __result));
    }
    template<typename _ForwardIterator, typename _Tp >
    inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp >::__value, void >::__type __fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value)
    {
        for (;
            __first != __last;
            ++__first)
        *__first = __value;
    }
    template<typename _ForwardIterator, typename _Tp >
    inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp >::__value, void >::__type __fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value)
    {
        const _Tp __tmp = __value;
        for (;
            __first != __last;
            ++__first)
        *__first = __tmp;
    }
    template<typename _Tp >
    inline typename __gnu_cxx::__enable_if< __is_byte< _Tp >::__value, void >::__type __fill_a(_Tp * __first, _Tp * __last, const _Tp & __c)
    {
        const _Tp __tmp = __c;
        __builtin_memset(__first, static_cast<unsigned char >(__tmp), __last - __first);
    }
    template<typename _ForwardIterator, typename _Tp >
    inline void fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value)
    {
        ;
        std::__fill_a(std::__niter_base< _ForwardIterator >::__b(__first), std::__niter_base< _ForwardIterator >::__b(__last), __value);
    }
    template<typename _OutputIterator, typename _Size, typename _Tp >
    inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp >::__value, _OutputIterator >::__type __fill_n_a(_OutputIterator __first, _Size __n, const _Tp & __value)
    {
        for (;
            __n > 0;
            --__n , ++__first)
        *__first = __value;
        return __first;
    }
    template<typename _OutputIterator, typename _Size, typename _Tp >
    inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp >::__value, _OutputIterator >::__type __fill_n_a(_OutputIterator __first, _Size __n, const _Tp & __value)
    {
        const _Tp __tmp = __value;
        for (;
            __n > 0;
            --__n , ++__first)
        *__first = __tmp;
        return __first;
    }
    template<typename _Size, typename _Tp >
    inline typename __gnu_cxx::__enable_if< __is_byte< _Tp >::__value, _Tp * >::__type __fill_n_a(_Tp * __first, _Size __n, const _Tp & __c)
    {
        std::__fill_a(__first, __first + __n, __c);
        return __first + __n;
    }
    template<typename _OI, typename _Size, typename _Tp >
    inline _OI fill_n(_OI __first, _Size __n, const _Tp & __value)
    {
        return _OI(std::__fill_n_a(std::__niter_base< _OI >::__b(__first), __n, __value));
    }
    template<bool _BoolType >
    struct __equal
    {
            template<typename _II1, typename _II2 >
            static bool equal(_II1 __first1, _II1 __last1, _II2 __first2)
            {
                for (;
                    __first1 != __last1;
                    ++__first1 , ++__first2)
                if (!(*__first1 == *__first2))
                    return false;
                return true;
            }
    };
    template<>
    struct __equal< true >
    {
            template<typename _Tp >
            static bool equal(const _Tp * __first1, const _Tp * __last1, const _Tp * __first2)
            {
                return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * (__last1 - __first1));
            }
    };
    template<typename _II1, typename _II2 >
    inline bool __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
        typedef typename iterator_traits< _II1 >::value_type _ValueType1;
        typedef typename iterator_traits< _II2 >::value_type _ValueType2;
        const bool __simple = (__is_integer< _ValueType1 >::__value && __is_pointer< _II1 >::__value && __is_pointer< _II2 >::__value && __are_same< _ValueType1, _ValueType2 >::__value);
        return std::__equal< __simple >::equal(__first1, __last1, __first2);
    }
    template<typename , typename  >
    struct __lc_rai
    {
            template<typename _II1, typename _II2 >
            static _II1 __newlast1(_II1, _II1 __last1, _II2, _II2)
            {
                return __last1;
            }
            template<typename _II >
            static bool __cnd2(_II __first, _II __last)
            {
                return __first != __last;
            }
    };
    template<>
    struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag >
    {
            template<typename _RAI1, typename _RAI2 >
            static _RAI1 __newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 __first2, _RAI2 __last2)
            {
                const typename iterator_traits< _RAI1 >::difference_type __diff1 = __last1 - __first1;
                const typename iterator_traits< _RAI2 >::difference_type __diff2 = __last2 - __first2;
                return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
            }
            template<typename _RAI >
            static bool __cnd2(_RAI, _RAI)
            {
                return true;
            }
    };
    template<bool _BoolType >
    struct __lexicographical_compare
    {
            template<typename _II1, typename _II2 >
            static bool __lc(_II1, _II1, _II2, _II2);
    };
    template<bool _BoolType >
    template<typename _II1, typename _II2 >
    bool __lexicographical_compare< _BoolType >::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
        typedef typename iterator_traits< _II1 >::iterator_category _Category1;
        typedef typename iterator_traits< _II2 >::iterator_category _Category2;
        typedef std::__lc_rai< _Category1, _Category2 > __rai_type;
        __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
        for (;
            __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
            ++__first1 , ++__first2)
        {
            if (*__first1 < *__first2)
                return true;
            if (*__first2 < *__first1)
                return false;
        }
        return __first1 == __last1 && __first2 != __last2;
    }
    template<>
    struct __lexicographical_compare< true >
    {
            template<typename _Tp, typename _Up >
            static bool __lc(const _Tp * __first1, const _Tp * __last1, const _Up * __first2, const _Up * __last2)
            {
                const size_t __len1 = __last1 - __first1;
                const size_t __len2 = __last2 - __first2;
                const int __result = __builtin_memcmp(__first1, __first2, std::min(__len1, __len2));
                return __result != 0 ? __result < 0 : __len1 < __len2;
            }
    };
    template<typename _II1, typename _II2 >
    inline bool __lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
        typedef typename iterator_traits< _II1 >::value_type _ValueType1;
        typedef typename iterator_traits< _II2 >::value_type _ValueType2;
        const bool __simple = (__is_byte< _ValueType1 >::__value && __is_byte< _ValueType2 >::__value && !__gnu_cxx::__numeric_traits< _ValueType1 >::__is_signed && !__gnu_cxx::__numeric_traits< _ValueType2 >::__is_signed && __is_pointer< _II1 >::__value && __is_pointer< _II2 >::__value);
        return std::__lexicographical_compare< __simple >::__lc(__first1, __last1, __first2, __last2);
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _II1, typename _II2 >
    inline bool equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {
        ;
        return std::__equal_aux(std::__niter_base< _II1 >::__b(__first1), std::__niter_base< _II1 >::__b(__last1), std::__niter_base< _II2 >::__b(__first2));
    }
    template<typename _IIter1, typename _IIter2, typename _BinaryPredicate >
    inline bool equal(_IIter1 __first1, _IIter1 __last1, _IIter2 __first2, _BinaryPredicate __binary_pred)
    {
        ;
        for (;
            __first1 != __last1;
            ++__first1 , ++__first2)
        if (!bool(__binary_pred(*__first1, *__first2)))
            return false;
        return true;
    }
    template<typename _II1, typename _II2 >
    inline bool lexicographical_compare(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
        typedef typename iterator_traits< _II1 >::value_type _ValueType1;
        typedef typename iterator_traits< _II2 >::value_type _ValueType2;
        ;
        ;
        return std::__lexicographical_compare_aux(std::__niter_base< _II1 >::__b(__first1), std::__niter_base< _II1 >::__b(__last1), std::__niter_base< _II2 >::__b(__first2), std::__niter_base< _II2 >::__b(__last2));
    }
    template<typename _II1, typename _II2, typename _Compare >
    bool lexicographical_compare(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp)
    {
        typedef typename iterator_traits< _II1 >::iterator_category _Category1;
        typedef typename iterator_traits< _II2 >::iterator_category _Category2;
        typedef std::__lc_rai< _Category1, _Category2 > __rai_type;
        ;
        ;
        __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
        for (;
            __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
            ++__first1 , ++__first2)
        {
            if (__comp(*__first1, *__first2))
                return true;
            if (__comp(*__first2, *__first1))
                return false;
        }
        return __first1 == __last1 && __first2 != __last2;
    }
    template<typename _InputIterator1, typename _InputIterator2 >
    pair< _InputIterator1, _InputIterator2 > mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
    {
        ;
        while (__first1 != __last1 && *__first1 == *__first2)
        {
            ++__first1;
            ++__first2;
        }
        return pair< _InputIterator1, _InputIterator2 >(__first1, __first2);
    }
    template<typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate >
    pair< _InputIterator1, _InputIterator2 > mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
        ;
        while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
            ++__first1;
            ++__first2;
        }
        return pair< _InputIterator1, _InputIterator2 >(__first1, __first2);
    }
}
#pragma GCC visibility push(default)
extern "C++"
{
    namespace std {
        class exception
        {
            public :
                exception() throw ()
                {
                }
                virtual ~exception() throw ();
                virtual const char * what() const throw ();
        };
        class bad_exception : public exception
        {
            public :
                bad_exception() throw ()
                {
                }
                virtual ~bad_exception() throw ();
                virtual const char * what() const throw ();
        };
        typedef void (* terminate_handler)();
        typedef void (* unexpected_handler)();
        terminate_handler set_terminate(terminate_handler) throw ();
        void terminate() __attribute__((__noreturn__));
        unexpected_handler set_unexpected(unexpected_handler) throw ();
        void unexpected() __attribute__((__noreturn__));
        bool uncaught_exception() throw ();
    }
    namespace __gnu_cxx __attribute__((__visibility__("default"))) {
        void __verbose_terminate_handler();
    }
}
#pragma GCC visibility pop
#pragma GCC visibility push(default)
extern "C++"
{
    namespace std {
        class bad_alloc : public exception
        {
            public :
                bad_alloc() throw ()
                {
                }
                virtual ~bad_alloc() throw ();
                virtual const char * what() const throw ();
        };
        struct nothrow_t
        {
        };
        extern const nothrow_t nothrow;
        typedef void (* new_handler)();
        new_handler set_new_handler(new_handler) throw ();
    }
    void * operator new(std::size_t) throw (std::bad_alloc);
    void * operator new[](std::size_t) throw (std::bad_alloc);
    void operator delete(void *) throw ();
    void operator delete[](void *) throw ();
    void * operator new(std::size_t, const std::nothrow_t &) throw ();
    void * operator new[](std::size_t, const std::nothrow_t &) throw ();
    void operator delete(void *, const std::nothrow_t &) throw ();
    void operator delete[](void *, const std::nothrow_t &) throw ();
    inline void * operator new(std::size_t, void * __p) throw ()
    {
        return __p;
    }
    inline void * operator new[](std::size_t, void * __p) throw ()
    {
        return __p;
    }
    inline void operator delete(void *, void *) throw ()
    {
    }
    inline void operator delete[](void *, void *) throw ()
    {
    }
}
#pragma GCC visibility pop
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    using std::size_t;
    using std::ptrdiff_t;
    template<typename _Tp >
    class new_allocator
    {
        public :
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
            typedef _Tp * pointer;
            typedef const _Tp * const_pointer;
            typedef _Tp & reference;
            typedef const _Tp & const_reference;
            typedef _Tp value_type;
            template<typename _Tp1 >
            struct rebind
            {
                    typedef new_allocator< _Tp1 > other;
            };
            new_allocator() throw ()
            {
            }
            new_allocator(const new_allocator &) throw ()
            {
            }
            template<typename _Tp1 >
            new_allocator(const new_allocator< _Tp1 > &) throw ()
            {
            }
            ~new_allocator() throw ()
            {
            }
            pointer address(reference __x) const
            {
                return &__x;
            }
            const_pointer address(const_reference __x) const
            {
                return &__x;
            }
            pointer allocate(size_type __n, const void * = 0)
            {
                if (__builtin_expect(__n > this->max_size(), false))
                    std::__throw_bad_alloc();
                return static_cast<_Tp * >(::operator new(__n * sizeof(_Tp)));
            }
            void deallocate(pointer __p, size_type)
            {
                ::operator delete(__p);
            }
            size_type max_size() const throw ()
            {
                return size_t(-1) / sizeof(_Tp);
            }
            void construct(pointer __p, const _Tp & __val)
            {
                ::new ((void *) __p) _Tp (__val);
            }
            void destroy(pointer __p)
            {
                __p->~_Tp();
            }
    };
    template<typename _Tp >
    inline bool operator ==(const new_allocator< _Tp > &, const new_allocator< _Tp > &)
    {
        return true;
    }
    template<typename _Tp >
    inline bool operator !=(const new_allocator< _Tp > &, const new_allocator< _Tp > &)
    {
        return false;
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Tp >
    class allocator;
    template<>
    class allocator< void >
    {
        public :
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
            typedef void * pointer;
            typedef const void * const_pointer;
            typedef void value_type;
            template<typename _Tp1 >
            struct rebind
            {
                    typedef allocator< _Tp1 > other;
            };
    };
    template<typename _Tp >
    class allocator : public __gnu_cxx::new_allocator< _Tp >
    {
        public :
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
            typedef _Tp * pointer;
            typedef const _Tp * const_pointer;
            typedef _Tp & reference;
            typedef const _Tp & const_reference;
            typedef _Tp value_type;
            template<typename _Tp1 >
            struct rebind
            {
                    typedef allocator< _Tp1 > other;
            };
            allocator() throw ()
            {
            }
            allocator(const allocator & __a) throw ()
                : __gnu_cxx::new_allocator< _Tp >(__a) 
            {
            }
            template<typename _Tp1 >
            allocator(const allocator< _Tp1 > &) throw ()
            {
            }
            ~allocator() throw ()
            {
            }
    };
    template<typename _T1, typename _T2 >
    inline bool operator ==(const allocator< _T1 > &, const allocator< _T2 > &)
    {
        return true;
    }
    template<typename _Tp >
    inline bool operator ==(const allocator< _Tp > &, const allocator< _Tp > &)
    {
        return true;
    }
    template<typename _T1, typename _T2 >
    inline bool operator !=(const allocator< _T1 > &, const allocator< _T2 > &)
    {
        return false;
    }
    template<typename _Tp >
    inline bool operator !=(const allocator< _Tp > &, const allocator< _Tp > &)
    {
        return false;
    }
    extern template class allocator< char > ;
    extern template class allocator< wchar_t > ;
    template<typename _Alloc, bool = __is_empty(_Alloc) >
    struct __alloc_swap
    {
            static void _S_do_it(_Alloc &, _Alloc &)
            {
            }
    };
    template<typename _Alloc >
    struct __alloc_swap< _Alloc, false >
    {
            static void _S_do_it(_Alloc & __one, _Alloc & __two)
            {
                if (__one != __two)
                    swap(__one, __two);
            }
    };
    template<typename _Alloc, bool = __is_empty(_Alloc) >
    struct __alloc_neq
    {
            static bool _S_do_it(const _Alloc &, const _Alloc &)
            {
                return false;
            }
    };
    template<typename _Alloc >
    struct __alloc_neq< _Alloc, false >
    {
            static bool _S_do_it(const _Alloc & __one, const _Alloc & __two)
            {
                return __one != __two;
            }
    };
}
namespace std __attribute__((__visibility__("default"))) {
    struct _List_node_base
    {
            _List_node_base * _M_next;
            _List_node_base * _M_prev;
            static void swap(_List_node_base & __x, _List_node_base & __y);
            void transfer(_List_node_base *const __first, _List_node_base *const __last);
            void reverse();
            void hook(_List_node_base *const __position);
            void unhook();
    };
    template<typename _Tp >
    struct _List_node : public _List_node_base
    {
            _Tp _M_data;
    };
    template<typename _Tp >
    struct _List_iterator
    {
            typedef _List_iterator< _Tp > _Self;
            typedef _List_node< _Tp > _Node;
            typedef ptrdiff_t difference_type;
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef _Tp value_type;
            typedef _Tp * pointer;
            typedef _Tp & reference;
            _List_iterator()
                : _M_node() 
            {
            }
            explicit _List_iterator(_List_node_base * __x)
                : _M_node(__x) 
            {
            }
            reference operator *() const
            {
                return static_cast<_Node * >(_M_node)->_M_data;
            }
            pointer operator ->() const
            {
                return &static_cast<_Node * >(_M_node)->_M_data;
            }
            _Self & operator ++()
            {
                _M_node = _M_node->_M_next;
                return *this;
            }
            _Self operator ++(int)
            {
                _Self __tmp = *this;
                _M_node = _M_node->_M_next;
                return __tmp;
            }
            _Self & operator --()
            {
                _M_node = _M_node->_M_prev;
                return *this;
            }
            _Self operator --(int)
            {
                _Self __tmp = *this;
                _M_node = _M_node->_M_prev;
                return __tmp;
            }
            bool operator ==(const _Self & __x) const
            {
                return _M_node == __x._M_node;
            }
            bool operator !=(const _Self & __x) const
            {
                return _M_node != __x._M_node;
            }
            _List_node_base * _M_node;
    };
    template<typename _Tp >
    struct _List_const_iterator
    {
            typedef _List_const_iterator< _Tp > _Self;
            typedef const _List_node< _Tp > _Node;
            typedef _List_iterator< _Tp > iterator;
            typedef ptrdiff_t difference_type;
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef _Tp value_type;
            typedef const _Tp * pointer;
            typedef const _Tp & reference;
            _List_const_iterator()
                : _M_node() 
            {
            }
            explicit _List_const_iterator(const _List_node_base * __x)
                : _M_node(__x) 
            {
            }
            _List_const_iterator(const iterator & __x)
                : _M_node(__x._M_node) 
            {
            }
            reference operator *() const
            {
                return static_cast<_Node * >(_M_node)->_M_data;
            }
            pointer operator ->() const
            {
                return &static_cast<_Node * >(_M_node)->_M_data;
            }
            _Self & operator ++()
            {
                _M_node = _M_node->_M_next;
                return *this;
            }
            _Self operator ++(int)
            {
                _Self __tmp = *this;
                _M_node = _M_node->_M_next;
                return __tmp;
            }
            _Self & operator --()
            {
                _M_node = _M_node->_M_prev;
                return *this;
            }
            _Self operator --(int)
            {
                _Self __tmp = *this;
                _M_node = _M_node->_M_prev;
                return __tmp;
            }
            bool operator ==(const _Self & __x) const
            {
                return _M_node == __x._M_node;
            }
            bool operator !=(const _Self & __x) const
            {
                return _M_node != __x._M_node;
            }
            const _List_node_base * _M_node;
    };
    template<typename _Val >
    inline bool operator ==(const _List_iterator< _Val > & __x, const _List_const_iterator< _Val > & __y)
    {
        return __x._M_node == __y._M_node;
    }
    template<typename _Val >
    inline bool operator !=(const _List_iterator< _Val > & __x, const _List_const_iterator< _Val > & __y)
    {
        return __x._M_node != __y._M_node;
    }
    template<typename _Tp, typename _Alloc >
    class _List_base
    {
        protected :
            typedef typename _Alloc::template rebind< _List_node< _Tp > >::other _Node_alloc_type;
            typedef typename _Alloc::template rebind< _Tp >::other _Tp_alloc_type;
            struct _List_impl : public _Node_alloc_type
            {
                    _List_node_base _M_node;
                    _List_impl()
                        : _Node_alloc_type(), _M_node() 
                    {
                    }
                    _List_impl(const _Node_alloc_type & __a)
                        : _Node_alloc_type(__a), _M_node() 
                    {
                    }
            };
            _List_impl _M_impl;
            _List_node< _Tp > * _M_get_node()
            {
                return _M_impl._Node_alloc_type::allocate(1);
            }
            void _M_put_node(_List_node< _Tp > * __p)
            {
                _M_impl._Node_alloc_type::deallocate(__p, 1);
            }
        public :
            typedef _Alloc allocator_type;
            _Node_alloc_type & _M_get_Node_allocator()
            {
                return *static_cast<_Node_alloc_type * >(&this->_M_impl);
            }
            const _Node_alloc_type & _M_get_Node_allocator() const
            {
                return *static_cast<const _Node_alloc_type * >(&this->_M_impl);
            }
            _Tp_alloc_type _M_get_Tp_allocator() const
            {
                return _Tp_alloc_type(_M_get_Node_allocator());
            }
            allocator_type get_allocator() const
            {
                return allocator_type(_M_get_Node_allocator());
            }
            _List_base()
                : _M_impl() 
            {
                _M_init();
            }
            _List_base(const allocator_type & __a)
                : _M_impl(__a) 
            {
                _M_init();
            }
            ~_List_base()
            {
                _M_clear();
            }
            void _M_clear();
            void _M_init()
            {
                this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
                this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
            }
    };
    template<typename _Tp, typename _Alloc = std::allocator< _Tp > >
    class list : protected _List_base< _Tp, _Alloc >
    {
            typedef typename _Alloc::value_type _Alloc_value_type;
            typedef _List_base< _Tp, _Alloc > _Base;
            typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
        public :
            typedef _Tp value_type;
            typedef typename _Tp_alloc_type::pointer pointer;
            typedef typename _Tp_alloc_type::const_pointer const_pointer;
            typedef typename _Tp_alloc_type::reference reference;
            typedef typename _Tp_alloc_type::const_reference const_reference;
            typedef _List_iterator< _Tp > iterator;
            typedef _List_const_iterator< _Tp > const_iterator;
            typedef std::reverse_iterator< const_iterator > const_reverse_iterator;
            typedef std::reverse_iterator< iterator > reverse_iterator;
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
            typedef _Alloc allocator_type;
        protected :
            typedef _List_node< _Tp > _Node;
            using _Base::_M_impl;
            using _Base::_M_put_node;
            using _Base::_M_get_node;
            using _Base::_M_get_Tp_allocator;
            using _Base::_M_get_Node_allocator;
            _Node * _M_create_node(const value_type & __x)
            {
                _Node * __p = this->_M_get_node();
                try
                {
                    _M_get_Tp_allocator().construct(&__p->_M_data, __x);
                }
                catch (...)
                {
                    _M_put_node(__p);
                    throw;
                }
                return __p;
            }
        public :
            list()
                : _Base() 
            {
            }
            explicit list(const allocator_type & __a)
                : _Base(__a) 
            {
            }
            explicit list(size_type __n, const value_type & __value = value_type(), const allocator_type & __a = allocator_type())
                : _Base(__a) 
            {
                _M_fill_initialize(__n, __value);
            }
            list(const list & __x)
                : _Base(__x._M_get_Node_allocator()) 
            {
                _M_initialize_dispatch(__x.begin(), __x.end(), __false_type());
            }
            template<typename _InputIterator >
            list(_InputIterator __first, _InputIterator __last, const allocator_type & __a = allocator_type())
                : _Base(__a) 
            {
                typedef typename std::__is_integer< _InputIterator >::__type _Integral;
                _M_initialize_dispatch(__first, __last, _Integral());
            }
            list & operator =(const list & __x);
            void assign(size_type __n, const value_type & __val)
            {
                _M_fill_assign(__n, __val);
            }
            template<typename _InputIterator >
            void assign(_InputIterator __first, _InputIterator __last)
            {
                typedef typename std::__is_integer< _InputIterator >::__type _Integral;
                _M_assign_dispatch(__first, __last, _Integral());
            }
            allocator_type get_allocator() const
            {
                return _Base::get_allocator();
            }
            iterator begin()
            {
                return iterator(this->_M_impl._M_node._M_next);
            }
            const_iterator begin() const
            {
                return const_iterator(this->_M_impl._M_node._M_next);
            }
            iterator end()
            {
                return iterator(&this->_M_impl._M_node);
            }
            const_iterator end() const
            {
                return const_iterator(&this->_M_impl._M_node);
            }
            reverse_iterator rbegin()
            {
                return reverse_iterator(end());
            }
            const_reverse_iterator rbegin() const
            {
                return const_reverse_iterator(end());
            }
            reverse_iterator rend()
            {
                return reverse_iterator(begin());
            }
            const_reverse_iterator rend() const
            {
                return const_reverse_iterator(begin());
            }
            bool empty() const
            {
                return this->_M_impl._M_node._M_next == &this->_M_impl._M_node;
            }
            size_type size() const
            {
                return std::distance(begin(), end());
            }
            size_type max_size() const
            {
                return _M_get_Tp_allocator().max_size();
            }
            void resize(size_type __new_size, value_type __x = value_type());
            reference front()
            {
                return *begin();
            }
            const_reference front() const
            {
                return *begin();
            }
            reference back()
            {
                iterator __tmp = end();
                --__tmp;
                return *__tmp;
            }
            const_reference back() const
            {
                const_iterator __tmp = end();
                --__tmp;
                return *__tmp;
            }
            void push_front(const value_type & __x)
            {
                this->_M_insert(begin(), __x);
            }
            void pop_front()
            {
                this->_M_erase(begin());
            }
            void push_back(const value_type & __x)
            {
                this->_M_insert(end(), __x);
            }
            void pop_back()
            {
                this->_M_erase(iterator(this->_M_impl._M_node._M_prev));
            }
            iterator insert(iterator __position, const value_type & __x);
            void insert(iterator __position, size_type __n, const value_type & __x)
            {
                list __tmp(__n, __x, _M_get_Node_allocator());
                splice(__position, __tmp);
            }
            template<typename _InputIterator >
            void insert(iterator __position, _InputIterator __first, _InputIterator __last)
            {
                list __tmp(__first, __last, _M_get_Node_allocator());
                splice(__position, __tmp);
            }
            iterator erase(iterator __position);
            iterator erase(iterator __first, iterator __last)
            {
                while (__first != __last)
                    __first = erase(__first);
                return __last;
            }
            void swap(list & __x)
            {
                _List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);
                std::__alloc_swap< typename _Base::_Node_alloc_type >::_S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator());
            }
            void clear()
            {
                _Base::_M_clear();
                _Base::_M_init();
            }
            void splice(iterator __position, list & __x)
            {
                if (!__x.empty())
                {
                    _M_check_equal_allocators(__x);
                    this->_M_transfer(__position, __x.begin(), __x.end());
                }
            }
            void splice(iterator __position, list & __x, iterator __i)
            {
                iterator __j = __i;
                ++__j;
                if (__position == __i || __position == __j)
                    return;
                if (this != &__x)
                    _M_check_equal_allocators(__x);
                this->_M_transfer(__position, __i, __j);
            }
            void splice(iterator __position, list & __x, iterator __first, iterator __last)
            {
                if (__first != __last)
                {
                    if (this != &__x)
                        _M_check_equal_allocators(__x);
                    this->_M_transfer(__position, __first, __last);
                }
            }
            void remove(const _Tp & __value);
            template<typename _Predicate >
            void remove_if(_Predicate);
            void unique();
            template<typename _BinaryPredicate >
            void unique(_BinaryPredicate);
            void merge(list & __x);
            template<typename _StrictWeakOrdering >
            void merge(list &, _StrictWeakOrdering);
            void reverse()
            {
                this->_M_impl._M_node.reverse();
            }
            void sort();
            template<typename _StrictWeakOrdering >
            void sort(_StrictWeakOrdering);
        protected :
            template<typename _Integer >
            void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
            {
                _M_fill_initialize(static_cast<size_type >(__n), __x);
            }
            template<typename _InputIterator >
            void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last, __false_type)
            {
                for (;
                    __first != __last;
                    ++__first)
                push_back(*__first);
            }
            void _M_fill_initialize(size_type __n, const value_type & __x)
            {
                for (;
                    __n > 0;
                    --__n)
                push_back(__x);
            }
            template<typename _Integer >
            void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
            {
                _M_fill_assign(__n, __val);
            }
            template<typename _InputIterator >
            void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type);
            void _M_fill_assign(size_type __n, const value_type & __val);
            void _M_transfer(iterator __position, iterator __first, iterator __last)
            {
                __position._M_node->transfer(__first._M_node, __last._M_node);
            }
            void _M_insert(iterator __position, const value_type & __x)
            {
                _Node * __tmp = _M_create_node(__x);
                __tmp->hook(__position._M_node);
            }
            void _M_erase(iterator __position)
            {
                __position._M_node->unhook();
                _Node * __n = static_cast<_Node * >(__position._M_node);
                _M_get_Tp_allocator().destroy(&__n->_M_data);
                _M_put_node(__n);
            }
            void _M_check_equal_allocators(list & __x)
            {
                if (std::__alloc_neq< typename _Base::_Node_alloc_type >::_S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
                    __throw_runtime_error(("list::_M_check_equal_allocators"));
            }
    };
    template<typename _Tp, typename _Alloc >
    inline bool operator ==(const list< _Tp, _Alloc > & __x, const list< _Tp, _Alloc > & __y)
    {
        typedef typename list< _Tp, _Alloc >::const_iterator const_iterator;
        const_iterator __end1 = __x.end();
        const_iterator __end2 = __y.end();
        const_iterator __i1 = __x.begin();
        const_iterator __i2 = __y.begin();
        while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
        {
            ++__i1;
            ++__i2;
        }
        return __i1 == __end1 && __i2 == __end2;
    }
    template<typename _Tp, typename _Alloc >
    inline bool operator <(const list< _Tp, _Alloc > & __x, const list< _Tp, _Alloc > & __y)
    {
        return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
    }
    template<typename _Tp, typename _Alloc >
    inline bool operator !=(const list< _Tp, _Alloc > & __x, const list< _Tp, _Alloc > & __y)
    {
        return !(__x == __y);
    }
    template<typename _Tp, typename _Alloc >
    inline bool operator >(const list< _Tp, _Alloc > & __x, const list< _Tp, _Alloc > & __y)
    {
        return __y < __x;
    }
    template<typename _Tp, typename _Alloc >
    inline bool operator <=(const list< _Tp, _Alloc > & __x, const list< _Tp, _Alloc > & __y)
    {
        return !(__y < __x);
    }
    template<typename _Tp, typename _Alloc >
    inline bool operator >=(const list< _Tp, _Alloc > & __x, const list< _Tp, _Alloc > & __y)
    {
        return !(__x < __y);
    }
    template<typename _Tp, typename _Alloc >
    inline void swap(list< _Tp, _Alloc > & __x, list< _Tp, _Alloc > & __y)
    {
        __x.swap(__y);
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Tp, typename _Alloc >
    void _List_base< _Tp, _Alloc >::_M_clear()
    {
        typedef _List_node< _Tp > _Node;
        _Node * __cur = static_cast<_Node * >(this->_M_impl._M_node._M_next);
        while (__cur != &this->_M_impl._M_node)
        {
            _Node * __tmp = __cur;
            __cur = static_cast<_Node * >(__cur->_M_next);
            _M_get_Tp_allocator().destroy(&__tmp->_M_data);
            _M_put_node(__tmp);
        }
    }
    template<typename _Tp, typename _Alloc >
    typename list< _Tp, _Alloc >::iterator list< _Tp, _Alloc >::insert(iterator __position, const value_type & __x)
    {
        _Node * __tmp = _M_create_node(__x);
        __tmp->hook(__position._M_node);
        return iterator(__tmp);
    }
    template<typename _Tp, typename _Alloc >
    typename list< _Tp, _Alloc >::iterator list< _Tp, _Alloc >::erase(iterator __position)
    {
        iterator __ret = iterator(__position._M_node->_M_next);
        _M_erase(__position);
        return __ret;
    }
    template<typename _Tp, typename _Alloc >
    void list< _Tp, _Alloc >::resize(size_type __new_size, value_type __x)
    {
        iterator __i = begin();
        size_type __len = 0;
        for (;
            __i != end() && __len < __new_size;
            ++__i , ++__len)
        ;
        if (__len == __new_size)
            erase(__i, end());
        else
            insert(end(), __new_size - __len, __x);
    }
    template<typename _Tp, typename _Alloc >
    list< _Tp, _Alloc > & list< _Tp, _Alloc >::operator =(const list & __x)
    {
        if (this != &__x)
        {
            iterator __first1 = begin();
            iterator __last1 = end();
            const_iterator __first2 = __x.begin();
            const_iterator __last2 = __x.end();
            for (;
                __first1 != __last1 && __first2 != __last2;
                ++__first1 , ++__first2)
            *__first1 = *__first2;
            if (__first2 == __last2)
                erase(__first1, __last1);
            else
                insert(__last1, __first2, __last2);
        }
        return *this;
    }
    template<typename _Tp, typename _Alloc >
    void list< _Tp, _Alloc >::_M_fill_assign(size_type __n, const value_type & __val)
    {
        iterator __i = begin();
        for (;
            __i != end() && __n > 0;
            ++__i , --__n)
        *__i = __val;
        if (__n > 0)
            insert(end(), __n, __val);
        else
            erase(__i, end());
    }
    template<typename _Tp, typename _Alloc >
    template<typename _InputIterator >
    void list< _Tp, _Alloc >::_M_assign_dispatch(_InputIterator __first2, _InputIterator __last2, __false_type)
    {
        iterator __first1 = begin();
        iterator __last1 = end();
        for (;
            __first1 != __last1 && __first2 != __last2;
            ++__first1 , ++__first2)
        *__first1 = *__first2;
        if (__first2 == __last2)
            erase(__first1, __last1);
        else
            insert(__last1, __first2, __last2);
    }
    template<typename _Tp, typename _Alloc >
    void list< _Tp, _Alloc >::remove(const value_type & __value)
    {
        iterator __first = begin();
        iterator __last = end();
        iterator __extra = __last;
        while (__first != __last)
        {
            iterator __next = __first;
            ++__next;
            if (*__first == __value)
            {
                if (&*__first != &__value)
                    _M_erase(__first);
                else
                    __extra = __first;
            }
            __first = __next;
        }
        if (__extra != __last)
            _M_erase(__extra);
    }
    template<typename _Tp, typename _Alloc >
    void list< _Tp, _Alloc >::unique()
    {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
            return;
        iterator __next = __first;
        while (++__next != __last)
        {
            if (*__first == *__next)
                _M_erase(__next);
            else
                __first = __next;
            __next = __first;
        }
    }
    template<typename _Tp, typename _Alloc >
    void list< _Tp, _Alloc >::merge(list & __x)
    {
        if (this != &__x)
        {
            _M_check_equal_allocators(__x);
            iterator __first1 = begin();
            iterator __last1 = end();
            iterator __first2 = __x.begin();
            iterator __last2 = __x.end();
            while (__first1 != __last1 && __first2 != __last2)
                if (*__first2 < *__first1)
                {
                    iterator __next = __first2;
                    _M_transfer(__first1, __first2, ++__next);
                    __first2 = __next;
                }
                else
                    ++__first1;
            if (__first2 != __last2)
                _M_transfer(__last1, __first2, __last2);
        }
    }
    template<typename _Tp, typename _Alloc >
    template<typename _StrictWeakOrdering >
    void list< _Tp, _Alloc >::merge(list & __x, _StrictWeakOrdering __comp)
    {
        if (this != &__x)
        {
            _M_check_equal_allocators(__x);
            iterator __first1 = begin();
            iterator __last1 = end();
            iterator __first2 = __x.begin();
            iterator __last2 = __x.end();
            while (__first1 != __last1 && __first2 != __last2)
                if (__comp(*__first2, *__first1))
                {
                    iterator __next = __first2;
                    _M_transfer(__first1, __first2, ++__next);
                    __first2 = __next;
                }
                else
                    ++__first1;
            if (__first2 != __last2)
                _M_transfer(__last1, __first2, __last2);
        }
    }
    template<typename _Tp, typename _Alloc >
    void list< _Tp, _Alloc >::sort()
    {
        if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
        {
            list __carry;
            list __tmp[64];
            list * __fill = &__tmp[0];
            list * __counter;
            do
            {
                __carry.splice(__carry.begin(), *this, begin());
                for (__counter = &__tmp[0];
                    __counter != __fill && !__counter->empty();
                    ++__counter)
                {
                    __counter->merge(__carry);
                    __carry.swap(*__counter);
                }
                __carry.swap(*__counter);
                if (__counter == __fill)
                    ++__fill;
            }
            while (!empty());
            for (__counter = &__tmp[1];
                __counter != __fill;
                ++__counter)
            __counter->merge(*(__counter - 1));
            swap(*(__fill - 1));
        }
    }
    template<typename _Tp, typename _Alloc >
    template<typename _Predicate >
    void list< _Tp, _Alloc >::remove_if(_Predicate __pred)
    {
        iterator __first = begin();
        iterator __last = end();
        while (__first != __last)
        {
            iterator __next = __first;
            ++__next;
            if (__pred(*__first))
                _M_erase(__first);
            __first = __next;
        }
    }
    template<typename _Tp, typename _Alloc >
    template<typename _BinaryPredicate >
    void list< _Tp, _Alloc >::unique(_BinaryPredicate __binary_pred)
    {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
            return;
        iterator __next = __first;
        while (++__next != __last)
        {
            if (__binary_pred(*__first, *__next))
                _M_erase(__next);
            else
                __first = __next;
            __next = __first;
        }
    }
    template<typename _Tp, typename _Alloc >
    template<typename _StrictWeakOrdering >
    void list< _Tp, _Alloc >::sort(_StrictWeakOrdering __comp)
    {
        if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
        {
            list __carry;
            list __tmp[64];
            list * __fill = &__tmp[0];
            list * __counter;
            do
            {
                __carry.splice(__carry.begin(), *this, begin());
                for (__counter = &__tmp[0];
                    __counter != __fill && !__counter->empty();
                    ++__counter)
                {
                    __counter->merge(__carry, __comp);
                    __carry.swap(*__counter);
                }
                __carry.swap(*__counter);
                if (__counter == __fill)
                    ++__fill;
            }
            while (!empty());
            for (__counter = &__tmp[1];
                __counter != __fill;
                ++__counter)
            __counter->merge(*(__counter - 1), __comp);
            swap(*(__fill - 1));
        }
    }
}
namespace sigc {
    template<class T_type >
    struct type_trait
    {
            typedef T_type type;
            typedef T_type & pass;
            typedef const T_type & take;
            typedef T_type * pointer;
    };
    template<class T_type, int N >
    struct type_trait< T_type [N] >
    {
            typedef T_type * type;
            typedef T_type * & pass;
            typedef const T_type * & take;
            typedef T_type * * pointer;
    };
    template<class T_type >
    struct type_trait< T_type & >
    {
            typedef T_type type;
            typedef T_type & pass;
            typedef T_type & take;
            typedef T_type * pointer;
    };
    template<class T_type >
    struct type_trait< const T_type & >
    {
            typedef const T_type type;
            typedef const T_type & pass;
            typedef const T_type & take;
            typedef const T_type * pointer;
    };
    template<>
    struct type_trait< void >
    {
            typedef void type;
            typedef void pass;
            typedef void take;
            typedef void * pointer;
    };
    template<class T_base, class T_derived >
    struct is_base_and_derived
    {
        private :
            struct big
            {
                    char memory[64];
            };
            static big is_base_class_(...);
            static char is_base_class_(typename type_trait< T_base >::pointer);
        public :
            static const bool value = sizeof (is_base_class_(reinterpret_cast<typename type_trait< T_derived >::pointer >(0))) == sizeof(char);
            void avoid_gcc3_warning_();
    };
    template<class T_base >
    struct is_base_and_derived< T_base, T_base >
    {
            static const bool value = true;
    };
}
namespace sigc {
    namespace internal {
        typedef void * (* func_destroy_notify)(void * data);
        struct trackable_callback
        {
                void * data_;
                func_destroy_notify func_;
                trackable_callback(void * data, func_destroy_notify func)
                    : data_(data), func_(func) 
                {
                }
        };
        struct trackable_callback_list
        {
                void add_callback(void * data, func_destroy_notify func);
                void remove_callback(void * data);
                void clear();
                trackable_callback_list()
                    : clearing_(false) 
                {
                }
                ~trackable_callback_list();
            private :
                typedef std::list< trackable_callback > callback_list;
                callback_list callbacks_;
                bool clearing_;
        };
    }
    struct trackable
    {
            trackable();
            trackable(const trackable & src);
            trackable & operator =(const trackable & src);
            ~trackable();
            typedef internal::func_destroy_notify func_destroy_notify;
            void add_destroy_notify_callback(void * data, func_destroy_notify func) const;
            void remove_destroy_notify_callback(void * data) const;
            void notify_callbacks();
        private :
            internal::trackable_callback_list * callback_list() const;
            mutable internal::trackable_callback_list * callback_list_;
    };
}
namespace sigc {
    namespace internal {
        template<bool I_derived, class T_type, class T_limit >
        struct with_type;
        template<class T_type, class T_limit >
        struct with_type< false, T_type, T_limit >
        {
                static void execute_(const T_type &, const T_limit &)
                {
                }
        };
        template<class T_type, class T_limit >
        struct with_type< true, T_type, T_limit >
        {
                static void execute_(const T_type & _A_type, const T_limit & _A_action)
                {
                    _A_action.action_(_A_type);
                }
        };
        template<class T_target, class T_action >
        struct limit_derived_target
        {
                typedef limit_derived_target< T_target, T_action > T_self;
                template<class T_type >
                void operator ()(const T_type & _A_type) const
                {
                    with_type< is_base_and_derived< T_target, T_type >::value, T_type, T_self >::execute_(_A_type, *this);
                }
                limit_derived_target(const T_action & _A_action)
                    : action_(_A_action) 
                {
                }
                T_action action_;
        };
        template<bool I_derived, class T_type, class T_limit >
        struct with_type_pointer;
        template<class T_type, class T_limit >
        struct with_type_pointer< false, T_type, T_limit >
        {
                static void execute_(const T_type &, const T_limit &)
                {
                }
        };
        template<class T_type, class T_limit >
        struct with_type_pointer< true, T_type, T_limit >
        {
                static void execute_(const T_type & _A_type, const T_limit & _A_action)
                {
                    _A_action.action_(&_A_type);
                }
        };
        template<class T_target, class T_action >
        struct limit_derived_target< T_target *, T_action >
        {
                typedef limit_derived_target< T_target *, T_action > T_self;
                template<class T_type >
                void operator ()(const T_type & _A_type) const
                {
                    with_type_pointer< is_base_and_derived< T_target, T_type >::value, T_type, T_self >::execute_(_A_type, *this);
                }
                limit_derived_target(const T_action & _A_action)
                    : action_(_A_action) 
                {
                }
                T_action action_;
        };
    }
    template<class T_action, class T_functor >
    void visit_each(const T_action & _A_action, const T_functor & _A_functor)
    {
        _A_action(_A_functor);
    }
    template<class T_type, class T_action, class T_functor >
    void visit_each_type(const T_action & _A_action, const T_functor & _A_functor)
    {
        typedef internal::limit_derived_target< T_type, T_action > type_limited_action;
        type_limited_action limited_action(_A_action);
        visit_each(limited_action, _A_functor);
    }
}
namespace sigc {
    struct nil;
    struct functor_base
    {
    };
    template<class T_functor, bool I_derives_functor_base = is_base_and_derived< functor_base, T_functor >::value >
    struct functor_trait
    {
            typedef void result_type;
            typedef T_functor functor_type;
    };
    template<class T_functor >
    struct functor_trait< T_functor, true >
    {
            typedef typename T_functor::result_type result_type;
            typedef T_functor functor_type;
    };
    template<class T_return >
    class pointer_functor0;
    template<class T_return >
    struct functor_trait< T_return (*)(), false >
    {
            typedef T_return result_type;
            typedef pointer_functor0< T_return > functor_type;
    };
    template<class T_arg1, class T_return >
    class pointer_functor1;
    template<class T_arg1, class T_return >
    struct functor_trait< T_return (*)(T_arg1), false >
    {
            typedef T_return result_type;
            typedef pointer_functor1< T_arg1, T_return > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_return >
    class pointer_functor2;
    template<class T_arg1, class T_arg2, class T_return >
    struct functor_trait< T_return (*)(T_arg1, T_arg2), false >
    {
            typedef T_return result_type;
            typedef pointer_functor2< T_arg1, T_arg2, T_return > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_return >
    class pointer_functor3;
    template<class T_arg1, class T_arg2, class T_arg3, class T_return >
    struct functor_trait< T_return (*)(T_arg1, T_arg2, T_arg3), false >
    {
            typedef T_return result_type;
            typedef pointer_functor3< T_arg1, T_arg2, T_arg3, T_return > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return >
    class pointer_functor4;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return >
    struct functor_trait< T_return (*)(T_arg1, T_arg2, T_arg3, T_arg4), false >
    {
            typedef T_return result_type;
            typedef pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return >
    class pointer_functor5;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return >
    struct functor_trait< T_return (*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false >
    {
            typedef T_return result_type;
            typedef pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return >
    class pointer_functor6;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return >
    struct functor_trait< T_return (*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false >
    {
            typedef T_return result_type;
            typedef pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return >
    class pointer_functor7;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return >
    struct functor_trait< T_return (*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false >
    {
            typedef T_return result_type;
            typedef pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return > functor_type;
    };
    template<class T_return, class T_obj >
    class mem_functor0;
    template<class T_return, class T_obj >
    class const_mem_functor0;
    template<class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(), false >
    {
            typedef T_return result_type;
            typedef mem_functor0< T_return, T_obj > functor_type;
    };
    template<class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)() const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor0< T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_return, class T_obj >
    class mem_functor1;
    template<class T_arg1, class T_return, class T_obj >
    class const_mem_functor1;
    template<class T_arg1, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1), false >
    {
            typedef T_return result_type;
            typedef mem_functor1< T_arg1, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor1< T_arg1, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    class mem_functor2;
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    class const_mem_functor2;
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2), false >
    {
            typedef T_return result_type;
            typedef mem_functor2< T_arg1, T_arg2, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor2< T_arg1, T_arg2, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    class mem_functor3;
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    class const_mem_functor3;
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3), false >
    {
            typedef T_return result_type;
            typedef mem_functor3< T_arg1, T_arg2, T_arg3, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor3< T_arg1, T_arg2, T_arg3, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    class mem_functor4;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    class const_mem_functor4;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4), false >
    {
            typedef T_return result_type;
            typedef mem_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    class mem_functor5;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    class const_mem_functor5;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false >
    {
            typedef T_return result_type;
            typedef mem_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    class mem_functor6;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    class const_mem_functor6;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false >
    {
            typedef T_return result_type;
            typedef mem_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    class mem_functor7;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    class const_mem_functor7;
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false >
    {
            typedef T_return result_type;
            typedef mem_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return, T_obj > functor_type;
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    struct functor_trait< T_return (T_obj:: *)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const, false >
    {
            typedef T_return result_type;
            typedef const_mem_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return, T_obj > functor_type;
    };
}
namespace sigc {
    template<class T_return >
    class pointer_functor0 : public functor_base
    {
            typedef T_return (* function_type)();
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor0()
            {
            }
            explicit pointer_functor0(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()() const
            {
                return func_ptr_();
            }
    };
    template<class T_arg1, class T_return >
    class pointer_functor1 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor1()
            {
            }
            explicit pointer_functor1(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return func_ptr_(_A_a1);
            }
    };
    template<class T_arg1, class T_arg2, class T_return >
    class pointer_functor2 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1, T_arg2);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor2()
            {
            }
            explicit pointer_functor2(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return func_ptr_(_A_a1, _A_a2);
            }
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_return >
    class pointer_functor3 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1, T_arg2, T_arg3);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor3()
            {
            }
            explicit pointer_functor3(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return func_ptr_(_A_a1, _A_a2, _A_a3);
            }
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return >
    class pointer_functor4 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1, T_arg2, T_arg3, T_arg4);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor4()
            {
            }
            explicit pointer_functor4(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return func_ptr_(_A_a1, _A_a2, _A_a3, _A_a4);
            }
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return >
    class pointer_functor5 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor5()
            {
            }
            explicit pointer_functor5(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return func_ptr_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return >
    class pointer_functor6 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor6()
            {
            }
            explicit pointer_functor6(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return func_ptr_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
    };
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return >
    class pointer_functor7 : public functor_base
    {
            typedef T_return (* function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7);
        protected :
            function_type func_ptr_;
        public :
            typedef T_return result_type;
            pointer_functor7()
            {
            }
            explicit pointer_functor7(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return func_ptr_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
    };
    template<class T_return >
    inline pointer_functor0< T_return > ptr_fun0(T_return (* _A_func)())
    {
        return pointer_functor0< T_return >(_A_func);
    }
    template<class T_arg1, class T_return >
    inline pointer_functor1< T_arg1, T_return > ptr_fun1(T_return (* _A_func)(T_arg1))
    {
        return pointer_functor1< T_arg1, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return >
    inline pointer_functor2< T_arg1, T_arg2, T_return > ptr_fun2(T_return (* _A_func)(T_arg1, T_arg2))
    {
        return pointer_functor2< T_arg1, T_arg2, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return >
    inline pointer_functor3< T_arg1, T_arg2, T_arg3, T_return > ptr_fun3(T_return (* _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return pointer_functor3< T_arg1, T_arg2, T_arg3, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return >
    inline pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return > ptr_fun4(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return >
    inline pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return > ptr_fun5(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return >
    inline pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return > ptr_fun6(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return >
    inline pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return > ptr_fun7(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return >(_A_func);
    }
    template<class T_return >
    inline pointer_functor0< T_return > ptr_fun(T_return (* _A_func)())
    {
        return pointer_functor0< T_return >(_A_func);
    }
    template<class T_arg1, class T_return >
    inline pointer_functor1< T_arg1, T_return > ptr_fun(T_return (* _A_func)(T_arg1))
    {
        return pointer_functor1< T_arg1, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return >
    inline pointer_functor2< T_arg1, T_arg2, T_return > ptr_fun(T_return (* _A_func)(T_arg1, T_arg2))
    {
        return pointer_functor2< T_arg1, T_arg2, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return >
    inline pointer_functor3< T_arg1, T_arg2, T_arg3, T_return > ptr_fun(T_return (* _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return pointer_functor3< T_arg1, T_arg2, T_arg3, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return >
    inline pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return > ptr_fun(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return >
    inline pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return > ptr_fun(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return >
    inline pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return > ptr_fun(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return >
    inline pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return > ptr_fun(T_return (* _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return >(_A_func);
    }
}
namespace sigc {
    template<class T_type, bool I_derives_trackable = is_base_and_derived< trackable, T_type >::value >
    class limit_reference
    {
        public :
            limit_reference(T_type & _A_target)
                : visited(_A_target) 
            {
            }
            inline const T_type & visit() const
            {
                return visited;
            }
            inline T_type & invoke() const
            {
                return visited;
            }
        private :
            T_type & visited;
    };
    template<class T_type >
    class limit_reference< T_type, true >
    {
        public :
            limit_reference(T_type & _A_target)
                : visited(_A_target), invoked(_A_target) 
            {
            }
            inline const trackable & visit() const
            {
                return visited;
            }
            inline T_type & invoke() const
            {
                return invoked;
            }
        private :
            trackable & visited;
            T_type & invoked;
    };
    template<class T_action, class T_type, bool I_derives_trackable >
    void visit_each(const T_action & _A_action, const limit_reference< T_type, I_derives_trackable > & _A_target)
    {
        visit_each(_A_action, _A_target.visit());
    }
    template<class T_type, bool I_derives_trackable = is_base_and_derived< trackable, T_type >::value >
    class const_limit_reference
    {
        public :
            const_limit_reference(const T_type & _A_target)
                : visited(_A_target) 
            {
            }
            inline const T_type & visit() const
            {
                return visited;
            }
            inline const T_type & invoke() const
            {
                return visited;
            }
        private :
            const T_type & visited;
    };
    template<class T_type >
    class const_limit_reference< T_type, true >
    {
        public :
            const_limit_reference(const T_type & _A_target)
                : visited(_A_target), invoked(_A_target) 
            {
            }
            inline const trackable & visit() const
            {
                return visited;
            }
            inline const T_type & invoke() const
            {
                return invoked;
            }
        private :
            const trackable & visited;
            const T_type & invoked;
    };
    template<class T_action, class T_type, bool I_derives_trackable >
    void visit_each(const T_action & _A_action, const const_limit_reference< T_type, I_derives_trackable > & _A_target)
    {
        visit_each(_A_action, _A_target.visit());
    }
    template<class T_type, bool I_derives_trackable = is_base_and_derived< trackable, T_type >::value >
    class volatile_limit_reference
    {
        public :
            volatile_limit_reference(T_type & _A_target)
                : visited(_A_target) 
            {
            }
            inline const T_type & visit() const
            {
                return visited;
            }
            inline volatile T_type & invoke() const
            {
                return visited;
            }
        private :
            T_type & visited;
    };
    template<class T_type >
    class volatile_limit_reference< T_type, true >
    {
        public :
            volatile_limit_reference(T_type & _A_target)
                : visited(_A_target), invoked(_A_target) 
            {
            }
            inline const trackable & visit() const
            {
                return visited;
            }
            inline volatile T_type & invoke() const
            {
                return invoked;
            }
        private :
            trackable & visited;
            T_type & invoked;
    };
    template<class T_action, class T_type, bool I_derives_trackable >
    void visit_each(const T_action & _A_action, const volatile_limit_reference< T_type, I_derives_trackable > & _A_target)
    {
        visit_each(_A_action, _A_target.visit());
    }
    template<class T_type, bool I_derives_trackable = is_base_and_derived< trackable, T_type >::value >
    class const_volatile_limit_reference
    {
        public :
            const_volatile_limit_reference(const T_type & _A_target)
                : visited(_A_target) 
            {
            }
            inline const T_type & visit() const
            {
                return visited;
            }
            inline const volatile T_type & invoke() const
            {
                return visited;
            }
        private :
            const T_type & visited;
    };
    template<class T_type >
    class const_volatile_limit_reference< T_type, true >
    {
        public :
            const_volatile_limit_reference(const T_type & _A_target)
                : visited(_A_target), invoked(_A_target) 
            {
            }
            inline const trackable & visit() const
            {
                return visited;
            }
            inline const volatile T_type & invoke() const
            {
                return invoked;
            }
        private :
            const trackable & visited;
            const T_type & invoked;
    };
    template<class T_action, class T_type, bool I_derives_trackable >
    void visit_each(const T_action & _A_action, const const_volatile_limit_reference< T_type, I_derives_trackable > & _A_target)
    {
        visit_each(_A_action, _A_target.visit());
    }
}
namespace sigc {
    template<class T_return, class T_obj >
    class mem_functor0 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)();
            typedef T_return result_type;
            mem_functor0()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor0(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj) const
            {
                return (_A_obj ->* (this->func_ptr_))();
            }
            T_return operator ()(T_obj & _A_obj) const
            {
                return (_A_obj .* func_ptr_)();
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1 >
    class mem_functor1 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1);
            typedef T_return result_type;
            mem_functor1()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor1(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj .* func_ptr_)(_A_a1);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class mem_functor2 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2);
            typedef T_return result_type;
            mem_functor2()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor2(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class mem_functor3 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3);
            typedef T_return result_type;
            mem_functor3()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor3(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class mem_functor4 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4);
            typedef T_return result_type;
            mem_functor4()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor4(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class mem_functor5 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5);
            typedef T_return result_type;
            mem_functor5()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor5(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class mem_functor6 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6);
            typedef T_return result_type;
            mem_functor6()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor6(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class mem_functor7 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7);
            typedef T_return result_type;
            mem_functor7()
                : func_ptr_(0) 
            {
            }
            explicit mem_functor7(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj >
    class const_mem_functor0 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)() const;
            typedef T_return result_type;
            const_mem_functor0()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor0(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj) const
            {
                return (_A_obj ->* (this->func_ptr_))();
            }
            T_return operator ()(const T_obj & _A_obj) const
            {
                return (_A_obj .* func_ptr_)();
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1 >
    class const_mem_functor1 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1) const;
            typedef T_return result_type;
            const_mem_functor1()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor1(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj .* func_ptr_)(_A_a1);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class const_mem_functor2 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2) const;
            typedef T_return result_type;
            const_mem_functor2()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor2(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class const_mem_functor3 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3) const;
            typedef T_return result_type;
            const_mem_functor3()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor3(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class const_mem_functor4 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4) const;
            typedef T_return result_type;
            const_mem_functor4()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor4(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class const_mem_functor5 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const;
            typedef T_return result_type;
            const_mem_functor5()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor5(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class const_mem_functor6 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const;
            typedef T_return result_type;
            const_mem_functor6()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor6(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class const_mem_functor7 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const;
            typedef T_return result_type;
            const_mem_functor7()
                : func_ptr_(0) 
            {
            }
            explicit const_mem_functor7(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj >
    class volatile_mem_functor0 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)() volatile;
            typedef T_return result_type;
            volatile_mem_functor0()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor0(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj) const
            {
                return (_A_obj ->* (this->func_ptr_))();
            }
            T_return operator ()(T_obj & _A_obj) const
            {
                return (_A_obj .* func_ptr_)();
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1 >
    class volatile_mem_functor1 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1) volatile;
            typedef T_return result_type;
            volatile_mem_functor1()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor1(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj .* func_ptr_)(_A_a1);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class volatile_mem_functor2 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2) volatile;
            typedef T_return result_type;
            volatile_mem_functor2()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor2(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class volatile_mem_functor3 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3) volatile;
            typedef T_return result_type;
            volatile_mem_functor3()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor3(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class volatile_mem_functor4 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4) volatile;
            typedef T_return result_type;
            volatile_mem_functor4()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor4(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class volatile_mem_functor5 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile;
            typedef T_return result_type;
            volatile_mem_functor5()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor5(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class volatile_mem_functor6 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile;
            typedef T_return result_type;
            volatile_mem_functor6()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor6(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class volatile_mem_functor7 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile;
            typedef T_return result_type;
            volatile_mem_functor7()
                : func_ptr_(0) 
            {
            }
            explicit volatile_mem_functor7(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            T_return operator ()(T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj >
    class const_volatile_mem_functor0 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)() const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor0()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor0(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj) const
            {
                return (_A_obj ->* (this->func_ptr_))();
            }
            T_return operator ()(const T_obj & _A_obj) const
            {
                return (_A_obj .* func_ptr_)();
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1 >
    class const_volatile_mem_functor1 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor1()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor1(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (_A_obj .* func_ptr_)(_A_a1);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class const_volatile_mem_functor2 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor2()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor2(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class const_volatile_mem_functor3 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor3()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor3(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class const_volatile_mem_functor4 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor4()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor4(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class const_volatile_mem_functor5 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor5()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor5(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class const_volatile_mem_functor6 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor6()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor6(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class const_volatile_mem_functor7 : public functor_base
    {
        public :
            typedef T_return (T_obj:: * function_type)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile;
            typedef T_return result_type;
            const_volatile_mem_functor7()
                : func_ptr_(0) 
            {
            }
            explicit const_volatile_mem_functor7(function_type _A_func)
                : func_ptr_(_A_func) 
            {
            }
            T_return operator ()(const T_obj * _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj ->* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            T_return operator ()(const T_obj & _A_obj, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (_A_obj .* func_ptr_)(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
        protected :
            function_type func_ptr_;
    };
    template<class T_return, class T_obj >
    class bound_mem_functor0 : public mem_functor0< T_return, T_obj >
    {
            typedef mem_functor0< T_return, T_obj > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor0(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor0(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()() const
            {
                return (obj_.invoke() .* (this->func_ptr_))();
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj >
    void visit_each(const T_action & _A_action, const bound_mem_functor0< T_return, T_obj > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1 >
    class bound_mem_functor1 : public mem_functor1< T_return, T_obj, T_arg1 >
    {
            typedef mem_functor1< T_return, T_obj, T_arg1 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor1(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor1(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1 >
    void visit_each(const T_action & _A_action, const bound_mem_functor1< T_return, T_obj, T_arg1 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class bound_mem_functor2 : public mem_functor2< T_return, T_obj, T_arg1, T_arg2 >
    {
            typedef mem_functor2< T_return, T_obj, T_arg1, T_arg2 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor2(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor2(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2 >
    void visit_each(const T_action & _A_action, const bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class bound_mem_functor3 : public mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >
    {
            typedef mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor3(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor3(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    void visit_each(const T_action & _A_action, const bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class bound_mem_functor4 : public mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >
    {
            typedef mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor4(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor4(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    void visit_each(const T_action & _A_action, const bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class bound_mem_functor5 : public mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >
    {
            typedef mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor5(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor5(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    void visit_each(const T_action & _A_action, const bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class bound_mem_functor6 : public mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >
    {
            typedef mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor6(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor6(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    void visit_each(const T_action & _A_action, const bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class bound_mem_functor7 : public mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
    {
            typedef mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_mem_functor7(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_mem_functor7(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    void visit_each(const T_action & _A_action, const bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj >
    class bound_const_mem_functor0 : public const_mem_functor0< T_return, T_obj >
    {
            typedef const_mem_functor0< T_return, T_obj > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor0(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor0(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()() const
            {
                return (obj_.invoke() .* (this->func_ptr_))();
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor0< T_return, T_obj > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1 >
    class bound_const_mem_functor1 : public const_mem_functor1< T_return, T_obj, T_arg1 >
    {
            typedef const_mem_functor1< T_return, T_obj, T_arg1 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor1(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor1(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor1< T_return, T_obj, T_arg1 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class bound_const_mem_functor2 : public const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >
    {
            typedef const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor2(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor2(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class bound_const_mem_functor3 : public const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >
    {
            typedef const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor3(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor3(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class bound_const_mem_functor4 : public const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >
    {
            typedef const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor4(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor4(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class bound_const_mem_functor5 : public const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >
    {
            typedef const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor5(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor5(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class bound_const_mem_functor6 : public const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >
    {
            typedef const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor6(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor6(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class bound_const_mem_functor7 : public const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
    {
            typedef const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_mem_functor7(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_mem_functor7(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            const_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    void visit_each(const T_action & _A_action, const bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj >
    class bound_volatile_mem_functor0 : public volatile_mem_functor0< T_return, T_obj >
    {
            typedef volatile_mem_functor0< T_return, T_obj > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor0(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor0(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()() const
            {
                return (obj_.invoke() .* (this->func_ptr_))();
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor0< T_return, T_obj > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1 >
    class bound_volatile_mem_functor1 : public volatile_mem_functor1< T_return, T_obj, T_arg1 >
    {
            typedef volatile_mem_functor1< T_return, T_obj, T_arg1 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor1(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor1(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor1< T_return, T_obj, T_arg1 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class bound_volatile_mem_functor2 : public volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >
    {
            typedef volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor2(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor2(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class bound_volatile_mem_functor3 : public volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >
    {
            typedef volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor3(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor3(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class bound_volatile_mem_functor4 : public volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >
    {
            typedef volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor4(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor4(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class bound_volatile_mem_functor5 : public volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >
    {
            typedef volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor5(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor5(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class bound_volatile_mem_functor6 : public volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >
    {
            typedef volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor6(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor6(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class bound_volatile_mem_functor7 : public volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
    {
            typedef volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_volatile_mem_functor7(T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_volatile_mem_functor7(T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    void visit_each(const T_action & _A_action, const bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj >
    class bound_const_volatile_mem_functor0 : public const_volatile_mem_functor0< T_return, T_obj >
    {
            typedef const_volatile_mem_functor0< T_return, T_obj > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor0(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor0(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()() const
            {
                return (obj_.invoke() .* (this->func_ptr_))();
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor0< T_return, T_obj > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1 >
    class bound_const_volatile_mem_functor1 : public const_volatile_mem_functor1< T_return, T_obj, T_arg1 >
    {
            typedef const_volatile_mem_functor1< T_return, T_obj, T_arg1 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor1(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor1(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    class bound_const_volatile_mem_functor2 : public const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >
    {
            typedef const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor2(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor2(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    class bound_const_volatile_mem_functor3 : public const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >
    {
            typedef const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor3(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor3(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class bound_const_volatile_mem_functor4 : public const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >
    {
            typedef const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor4(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor4(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class bound_const_volatile_mem_functor5 : public const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >
    {
            typedef const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor5(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor5(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class bound_const_volatile_mem_functor6 : public const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >
    {
            typedef const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor6(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor6(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class bound_const_volatile_mem_functor7 : public const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
    {
            typedef const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > base_type_;
        public :
            typedef typename base_type_::function_type function_type;
            bound_const_volatile_mem_functor7(const T_obj * _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(*_A_obj) 
            {
            }
            bound_const_volatile_mem_functor7(const T_obj & _A_obj, function_type _A_func)
                : base_type_(_A_func), obj_(_A_obj) 
            {
            }
            T_return operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return (obj_.invoke() .* (this->func_ptr_))(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            const_volatile_limit_reference< T_obj > obj_;
    };
    template<class T_action, class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    void visit_each(const T_action & _A_action, const bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.obj_);
    }
    template<class T_return, class T_obj >
    inline mem_functor0< T_return, T_obj > mem_fun0(T_return (T_obj:: * _A_func)())
    {
        return mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_return (T_obj:: * _A_func)(T_arg1))
    {
        return mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_return (T_obj:: * _A_func)(T_arg1, T_arg2))
    {
        return mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj >
    inline const_mem_functor0< T_return, T_obj > mem_fun0(T_return (T_obj:: * _A_func)() const)
    {
        return const_mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline const_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_return (T_obj:: * _A_func)(T_arg1) const)
    {
        return const_mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_return (T_obj:: * _A_func)(T_arg1, T_arg2) const)
    {
        return const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3) const)
    {
        return const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)
    {
        return const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)
    {
        return const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)
    {
        return const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)
    {
        return const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj >
    inline volatile_mem_functor0< T_return, T_obj > mem_fun0(T_return (T_obj:: * _A_func)() volatile)
    {
        return volatile_mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_return (T_obj:: * _A_func)(T_arg1) volatile)
    {
        return volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_return (T_obj:: * _A_func)(T_arg1, T_arg2) volatile)
    {
        return volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3) volatile)
    {
        return volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) volatile)
    {
        return volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile)
    {
        return volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile)
    {
        return volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile)
    {
        return volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj >
    inline const_volatile_mem_functor0< T_return, T_obj > mem_fun0(T_return (T_obj:: * _A_func)() const volatile)
    {
        return const_volatile_mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline const_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_return (T_obj:: * _A_func)(T_arg1) const volatile)
    {
        return const_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_return (T_obj:: * _A_func)(T_arg1, T_arg2) const volatile)
    {
        return const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3) const volatile)
    {
        return const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile)
    {
        return const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile)
    {
        return const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile)
    {
        return const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile)
    {
        return const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor0< T_return, T_obj > mem_fun0(T_obj * _A_obj, T_return (T_obj2:: * _A_func)())
    {
        return bound_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor0< T_return, T_obj > mem_fun0(T_obj & _A_obj, T_return (T_obj2:: * _A_func)())
    {
        return bound_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1))
    {
        return bound_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1))
    {
        return bound_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2))
    {
        return bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2))
    {
        return bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor0< T_return, T_obj > mem_fun0(T_obj * _A_obj, T_return (T_obj2:: * _A_func)() const)
    {
        return bound_const_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor0< T_return, T_obj > mem_fun0(T_obj & _A_obj, T_return (T_obj2:: * _A_func)() const)
    {
        return bound_const_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const)
    {
        return bound_const_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const)
    {
        return bound_const_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const)
    {
        return bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const)
    {
        return bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const)
    {
        return bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const)
    {
        return bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)
    {
        return bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)
    {
        return bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)
    {
        return bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)
    {
        return bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)
    {
        return bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)
    {
        return bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)
    {
        return bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)
    {
        return bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor0< T_return, T_obj > mem_fun0(T_obj * _A_obj, T_return (T_obj2:: * _A_func)() volatile)
    {
        return bound_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor0< T_return, T_obj > mem_fun0(T_obj & _A_obj, T_return (T_obj2:: * _A_func)() volatile)
    {
        return bound_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) volatile)
    {
        return bound_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) volatile)
    {
        return bound_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) volatile)
    {
        return bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) volatile)
    {
        return bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) volatile)
    {
        return bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) volatile)
    {
        return bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) volatile)
    {
        return bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) volatile)
    {
        return bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile)
    {
        return bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile)
    {
        return bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile)
    {
        return bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile)
    {
        return bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile)
    {
        return bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile)
    {
        return bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor0< T_return, T_obj > mem_fun0(T_obj * _A_obj, T_return (T_obj2:: * _A_func)() const volatile)
    {
        return bound_const_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor0< T_return, T_obj > mem_fun0(T_obj & _A_obj, T_return (T_obj2:: * _A_func)() const volatile)
    {
        return bound_const_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const volatile)
    {
        return bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun1(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const volatile)
    {
        return bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const volatile)
    {
        return bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun2(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const volatile)
    {
        return bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const volatile)
    {
        return bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun3(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const volatile)
    {
        return bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile)
    {
        return bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun4(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile)
    {
        return bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile)
    {
        return bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun5(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile)
    {
        return bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile)
    {
        return bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun6(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile)
    {
        return bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile)
    {
        return bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun7(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile)
    {
        return bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj >
    inline mem_functor0< T_return, T_obj > mem_fun(T_return (T_obj:: * _A_func)())
    {
        return mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1))
    {
        return mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2))
    {
        return mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj >
    inline const_mem_functor0< T_return, T_obj > mem_fun(T_return (T_obj:: * _A_func)() const)
    {
        return const_mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline const_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1) const)
    {
        return const_mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2) const)
    {
        return const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3) const)
    {
        return const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)
    {
        return const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)
    {
        return const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)
    {
        return const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)
    {
        return const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj >
    inline volatile_mem_functor0< T_return, T_obj > mem_fun(T_return (T_obj:: * _A_func)() volatile)
    {
        return volatile_mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1) volatile)
    {
        return volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2) volatile)
    {
        return volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3) volatile)
    {
        return volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) volatile)
    {
        return volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile)
    {
        return volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile)
    {
        return volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile)
    {
        return volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj >
    inline const_volatile_mem_functor0< T_return, T_obj > mem_fun(T_return (T_obj:: * _A_func)() const volatile)
    {
        return const_volatile_mem_functor0< T_return, T_obj >(_A_func);
    }
    template<class T_arg1, class T_return, class T_obj >
    inline const_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1) const volatile)
    {
        return const_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj >
    inline const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2) const volatile)
    {
        return const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj >
    inline const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3) const volatile)
    {
        return const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj >
    inline const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile)
    {
        return const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj >
    inline const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile)
    {
        return const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj >
    inline const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile)
    {
        return const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj >
    inline const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_return (T_obj:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile)
    {
        return const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor0< T_return, T_obj > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)())
    {
        return bound_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor0< T_return, T_obj > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)())
    {
        return bound_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1))
    {
        return bound_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1))
    {
        return bound_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2))
    {
        return bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2))
    {
        return bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3))
    {
        return bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4))
    {
        return bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))
    {
        return bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))
    {
        return bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))
    {
        return bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor0< T_return, T_obj > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)() const)
    {
        return bound_const_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor0< T_return, T_obj > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)() const)
    {
        return bound_const_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const)
    {
        return bound_const_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const)
    {
        return bound_const_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const)
    {
        return bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const)
    {
        return bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const)
    {
        return bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const)
    {
        return bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)
    {
        return bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)
    {
        return bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)
    {
        return bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)
    {
        return bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)
    {
        return bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)
    {
        return bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)
    {
        return bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)
    {
        return bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor0< T_return, T_obj > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)() volatile)
    {
        return bound_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor0< T_return, T_obj > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)() volatile)
    {
        return bound_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) volatile)
    {
        return bound_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) volatile)
    {
        return bound_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) volatile)
    {
        return bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) volatile)
    {
        return bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) volatile)
    {
        return bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) volatile)
    {
        return bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) volatile)
    {
        return bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) volatile)
    {
        return bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile)
    {
        return bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile)
    {
        return bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile)
    {
        return bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile)
    {
        return bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile)
    {
        return bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile)
    {
        return bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor0< T_return, T_obj > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)() const volatile)
    {
        return bound_const_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor0< T_return, T_obj > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)() const volatile)
    {
        return bound_const_volatile_mem_functor0< T_return, T_obj >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const volatile)
    {
        return bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1) const volatile)
    {
        return bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const volatile)
    {
        return bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2) const volatile)
    {
        return bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const volatile)
    {
        return bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3) const volatile)
    {
        return bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile)
    {
        return bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile)
    {
        return bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile)
    {
        return bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile)
    {
        return bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile)
    {
        return bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile)
    {
        return bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj * _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile)
    {
        return bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return, class T_obj, class T_obj2 >
    inline bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > mem_fun(T_obj & _A_obj, T_return (T_obj2:: * _A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile)
    {
        return bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_obj, _A_func);
    }
}
namespace sigc {
    struct adaptor_base : public functor_base
    {
    };
    template<class T_functor, class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void, bool I_derives_adaptor_base = is_base_and_derived< adaptor_base, T_functor >::value >
    struct deduce_result_type
    {
            typedef typename functor_trait< T_functor >::result_type type;
    };
    template<class T_functor >
    struct deduce_result_type< T_functor, void, void, void, void, void, void, void, true >
    {
            typedef typename T_functor::template deduce_result_type<  >::type type;
    };
    template<class T_functor, class T_arg1 >
    struct deduce_result_type< T_functor, T_arg1, void, void, void, void, void, void, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1 >::type type;
    };
    template<class T_functor, class T_arg1, class T_arg2 >
    struct deduce_result_type< T_functor, T_arg1, T_arg2, void, void, void, void, void, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1, T_arg2 >::type type;
    };
    template<class T_functor, class T_arg1, class T_arg2, class T_arg3 >
    struct deduce_result_type< T_functor, T_arg1, T_arg2, T_arg3, void, void, void, void, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type type;
    };
    template<class T_functor, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    struct deduce_result_type< T_functor, T_arg1, T_arg2, T_arg3, T_arg4, void, void, void, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type type;
    };
    template<class T_functor, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    struct deduce_result_type< T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, void, void, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type type;
    };
    template<class T_functor, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    struct deduce_result_type< T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, void, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type type;
    };
    template<class T_functor, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    struct deduce_result_type< T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, true >
    {
            typedef typename T_functor::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
    };
}
namespace sigc {
    template<class T_functor >
    struct adapts;
    template<class T_functor >
    struct adaptor_functor : public adaptor_base
    {
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename sigc::deduce_result_type< T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename functor_trait< T_functor >::result_type result_type;
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1) const
            {
                return functor_(_A_arg1);
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2) const
            {
                return functor_(_A_arg1, _A_arg2);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3) const
            {
                return functor_(_A_arg1, _A_arg2, _A_arg3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4) const
            {
                return functor_(_A_arg1, _A_arg2, _A_arg3, _A_arg4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5) const
            {
                return functor_(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6) const
            {
                return functor_(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, _A_arg6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6, T_arg7 _A_arg7) const
            {
                return functor_(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, _A_arg6, _A_arg7);
            }
            adaptor_functor()
            {
            }
            explicit adaptor_functor(const T_functor & _A_functor)
                : functor_(_A_functor) 
            {
            }
            template<class T_type >
            explicit adaptor_functor(const T_type & _A_type)
                : functor_(_A_type) 
            {
            }
            mutable T_functor functor_;
    };
    template<class T_functor >
    typename adaptor_functor< T_functor >::result_type adaptor_functor< T_functor >::operator ()() const
    {
        return functor_();
    }
    template<class T_action, class T_functor >
    void visit_each(const T_action & _A_action, const adaptor_functor< T_functor > & _A_target)
    {
        sigc::visit_each(_A_action, _A_target.functor_);
    }
    template<class T_functor, bool I_isadaptor = is_base_and_derived< adaptor_base, T_functor >::value >
    struct adaptor_trait;
    template<class T_functor >
    struct adaptor_trait< T_functor, true >
    {
            typedef typename T_functor::result_type result_type;
            typedef T_functor functor_type;
            typedef T_functor adaptor_type;
    };
    template<class T_functor >
    struct adaptor_trait< T_functor, false >
    {
            typedef typename functor_trait< T_functor >::result_type result_type;
            typedef typename functor_trait< T_functor >::functor_type functor_type;
            typedef adaptor_functor< functor_type > adaptor_type;
    };
    template<class T_functor >
    struct adapts : public adaptor_base
    {
            typedef typename adaptor_trait< T_functor >::result_type result_type;
            typedef typename adaptor_trait< T_functor >::adaptor_type adaptor_type;
            explicit adapts(const T_functor & _A_functor)
                : functor_(_A_functor) 
            {
            }
            mutable adaptor_type functor_;
    };
}
namespace sigc {
    namespace internal {
        typedef void * (* hook)(void *);
        struct slot_rep : public trackable
        {
                hook call_;
                hook destroy_;
                hook dup_;
                hook cleanup_;
                void * parent_;
                inline slot_rep(hook call__, hook destroy__, hook dup__)
                    : call_(call__), destroy_(destroy__), dup_(dup__), cleanup_(0), parent_(0) 
                {
                }
                inline ~slot_rep()
                {
                    destroy();
                }
                inline void destroy()
                {
                    if (destroy_)
                        (*destroy_)(this);
                }
                inline slot_rep * dup() const
                {
                    return reinterpret_cast<slot_rep * >((*dup_)(const_cast<slot_rep * >(this)));
                }
                inline void set_parent(void * parent, hook cleanup)
                {
                    parent_ = parent;
                    cleanup_ = cleanup;
                }
                void disconnect();
                static void * notify(void * data);
        };
        struct slot_do_bind
        {
                slot_rep * rep_;
                inline slot_do_bind(slot_rep * rep)
                    : rep_(rep) 
                {
                }
                inline void operator ()(const trackable * t) const
                {
                    t->add_destroy_notify_callback(rep_, &slot_rep::notify);
                }
        };
        struct slot_do_unbind
        {
                slot_rep * rep_;
                inline slot_do_unbind(slot_rep * rep)
                    : rep_(rep) 
                {
                }
                inline void operator ()(const trackable * t) const
                {
                    t->remove_destroy_notify_callback(rep_);
                }
        };
    }
    class slot_base : public functor_base
    {
            typedef internal::slot_rep rep_type;
        public :
            slot_base();
            explicit slot_base(rep_type * rep);
            slot_base(const slot_base & src);
            ~slot_base();
            operator bool() const;
            void set_parent(void * parent, void * (* cleanup)(void *)) const;
            typedef trackable::func_destroy_notify func_destroy_notify;
            void add_destroy_notify_callback(void * data, func_destroy_notify func) const;
            void remove_destroy_notify_callback(void * data) const;
            inline bool empty() const
            {
                return (!rep_ || !rep_->call_);
            }
            inline bool blocked() const
            {
                return blocked_;
            }
            bool block(bool should_block = true);
            bool unblock();
            void disconnect();
            slot_base & operator =(const slot_base & src);
        public :
            mutable rep_type * rep_;
            bool blocked_;
    };
}
namespace sigc {
    namespace internal {
        template<class T_functor >
        struct typed_slot_rep : public slot_rep
        {
                typedef typed_slot_rep< T_functor > self;
                typedef typename adaptor_trait< T_functor >::adaptor_type adaptor_type;
                adaptor_type functor_;
                inline typed_slot_rep(const T_functor & functor)
                    : slot_rep(0, &destroy, &dup), functor_(functor) 
                {
                    visit_each_type< trackable * >(slot_do_bind(this), functor_);
                }
                inline typed_slot_rep(const typed_slot_rep & cl)
                    : slot_rep(cl.call_, &destroy, &dup), functor_(cl.functor_) 
                {
                    visit_each_type< trackable * >(slot_do_bind(this), functor_);
                }
                inline ~typed_slot_rep()
                {
                    call_ = 0;
                    destroy_ = 0;
                    visit_each_type< trackable * >(slot_do_unbind(this), functor_);
                }
                static void * destroy(void * data)
                {
                    self * self_ = static_cast<self * >(reinterpret_cast<slot_rep * >(data));
                    self_->call_ = 0;
                    self_->destroy_ = 0;
                    visit_each_type< trackable * >(slot_do_unbind(self_), self_->functor_);
                    self_->functor_.~adaptor_type();
                    return 0;
                }
                static void * dup(void * data)
                {
                    slot_rep * a_rep = reinterpret_cast<slot_rep * >(data);
                    return static_cast<slot_rep * >(new self (*static_cast<self * >(a_rep)));
                }
        };
        template<class T_functor, class T_return >
        struct slot_call0
        {
                static T_return call_it(slot_rep * rep)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_)();
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1 >
        struct slot_call1
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take >(a_1);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1, class T_arg2 >
        struct slot_call2
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1, typename type_trait< T_arg2 >::take a_2)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take >(a_1, a_2);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1, class T_arg2, class T_arg3 >
        struct slot_call3
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1, typename type_trait< T_arg2 >::take a_2, typename type_trait< T_arg3 >::take a_3)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take >(a_1, a_2, a_3);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
        struct slot_call4
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1, typename type_trait< T_arg2 >::take a_2, typename type_trait< T_arg3 >::take a_3, typename type_trait< T_arg4 >::take a_4)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take >(a_1, a_2, a_3, a_4);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
        struct slot_call5
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1, typename type_trait< T_arg2 >::take a_2, typename type_trait< T_arg3 >::take a_3, typename type_trait< T_arg4 >::take a_4, typename type_trait< T_arg5 >::take a_5)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take >(a_1, a_2, a_3, a_4, a_5);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
        struct slot_call6
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1, typename type_trait< T_arg2 >::take a_2, typename type_trait< T_arg3 >::take a_3, typename type_trait< T_arg4 >::take a_4, typename type_trait< T_arg5 >::take a_5, typename type_trait< T_arg6 >::take a_6)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take, typename type_trait< T_arg6 >::take >(a_1, a_2, a_3, a_4, a_5, a_6);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
        template<class T_functor, class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
        struct slot_call7
        {
                static T_return call_it(slot_rep * rep, typename type_trait< T_arg1 >::take a_1, typename type_trait< T_arg2 >::take a_2, typename type_trait< T_arg3 >::take a_3, typename type_trait< T_arg4 >::take a_4, typename type_trait< T_arg5 >::take a_5, typename type_trait< T_arg6 >::take a_6, typename type_trait< T_arg7 >::take a_7)
                {
                    typedef typed_slot_rep< T_functor > typed_slot;
                    typed_slot * typed_rep = static_cast<typed_slot * >(rep);
                    return (typed_rep->functor_).template operator ()<typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take, typename type_trait< T_arg6 >::take, typename type_trait< T_arg7 >::take >(a_1, a_2, a_3, a_4, a_5, a_6, a_7);
                }
                static hook address()
                {
                    return reinterpret_cast<hook >(&call_it);
                }
        };
    }
    template<class T_return >
    class slot0 : public slot_base
    {
        public :
            typedef T_return result_type;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *);
            inline T_return operator ()() const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_);
                return T_return();
            }
            inline slot0()
            {
            }
            template<class T_functor >
            slot0(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call0< T_functor, T_return >::address();
            }
            slot0(const slot0 & src)
                : slot_base(src) 
            {
            }
            slot0 & operator =(const slot0 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1 >
    class slot1 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_);
            inline T_return operator ()(arg1_type_ _A_a1) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1);
                return T_return();
            }
            inline slot1()
            {
            }
            template<class T_functor >
            slot1(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call1< T_functor, T_return, T_arg1 >::address();
            }
            slot1(const slot1 & src)
                : slot_base(src) 
            {
            }
            slot1 & operator =(const slot1 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1, class T_arg2 >
    class slot2 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
            typedef typename type_trait< T_arg2 >::take arg2_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_, arg2_type_);
            inline T_return operator ()(arg1_type_ _A_a1, arg2_type_ _A_a2) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1, _A_a2);
                return T_return();
            }
            inline slot2()
            {
            }
            template<class T_functor >
            slot2(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call2< T_functor, T_return, T_arg1, T_arg2 >::address();
            }
            slot2(const slot2 & src)
                : slot_base(src) 
            {
            }
            slot2 & operator =(const slot2 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3 >
    class slot3 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
            typedef typename type_trait< T_arg2 >::take arg2_type_;
            typedef typename type_trait< T_arg3 >::take arg3_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_, arg2_type_, arg3_type_);
            inline T_return operator ()(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1, _A_a2, _A_a3);
                return T_return();
            }
            inline slot3()
            {
            }
            template<class T_functor >
            slot3(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call3< T_functor, T_return, T_arg1, T_arg2, T_arg3 >::address();
            }
            slot3(const slot3 & src)
                : slot_base(src) 
            {
            }
            slot3 & operator =(const slot3 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class slot4 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
            typedef typename type_trait< T_arg2 >::take arg2_type_;
            typedef typename type_trait< T_arg3 >::take arg3_type_;
            typedef typename type_trait< T_arg4 >::take arg4_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_, arg2_type_, arg3_type_, arg4_type_);
            inline T_return operator ()(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1, _A_a2, _A_a3, _A_a4);
                return T_return();
            }
            inline slot4()
            {
            }
            template<class T_functor >
            slot4(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call4< T_functor, T_return, T_arg1, T_arg2, T_arg3, T_arg4 >::address();
            }
            slot4(const slot4 & src)
                : slot_base(src) 
            {
            }
            slot4 & operator =(const slot4 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class slot5 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
            typedef typename type_trait< T_arg2 >::take arg2_type_;
            typedef typename type_trait< T_arg3 >::take arg3_type_;
            typedef typename type_trait< T_arg4 >::take arg4_type_;
            typedef typename type_trait< T_arg5 >::take arg5_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_, arg2_type_, arg3_type_, arg4_type_, arg5_type_);
            inline T_return operator ()(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4, arg5_type_ _A_a5) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                return T_return();
            }
            inline slot5()
            {
            }
            template<class T_functor >
            slot5(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call5< T_functor, T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::address();
            }
            slot5(const slot5 & src)
                : slot_base(src) 
            {
            }
            slot5 & operator =(const slot5 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class slot6 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
            typedef typename type_trait< T_arg2 >::take arg2_type_;
            typedef typename type_trait< T_arg3 >::take arg3_type_;
            typedef typename type_trait< T_arg4 >::take arg4_type_;
            typedef typename type_trait< T_arg5 >::take arg5_type_;
            typedef typename type_trait< T_arg6 >::take arg6_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_, arg2_type_, arg3_type_, arg4_type_, arg5_type_, arg6_type_);
            inline T_return operator ()(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4, arg5_type_ _A_a5, arg6_type_ _A_a6) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                return T_return();
            }
            inline slot6()
            {
            }
            template<class T_functor >
            slot6(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call6< T_functor, T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::address();
            }
            slot6(const slot6 & src)
                : slot_base(src) 
            {
            }
            slot6 & operator =(const slot6 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    class slot7 : public slot_base
    {
        public :
            typedef T_return result_type;
            typedef typename type_trait< T_arg1 >::take arg1_type_;
            typedef typename type_trait< T_arg2 >::take arg2_type_;
            typedef typename type_trait< T_arg3 >::take arg3_type_;
            typedef typename type_trait< T_arg4 >::take arg4_type_;
            typedef typename type_trait< T_arg5 >::take arg5_type_;
            typedef typename type_trait< T_arg6 >::take arg6_type_;
            typedef typename type_trait< T_arg7 >::take arg7_type_;
        private :
            typedef internal::slot_rep rep_type;
        public :
            typedef T_return (* call_type)(rep_type *, arg1_type_, arg2_type_, arg3_type_, arg4_type_, arg5_type_, arg6_type_, arg7_type_);
            inline T_return operator ()(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4, arg5_type_ _A_a5, arg6_type_ _A_a6, arg7_type_ _A_a7) const
            {
                if (!empty() && !blocked())
                    return (reinterpret_cast<call_type >(slot_base::rep_->call_))(slot_base::rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                return T_return();
            }
            inline slot7()
            {
            }
            template<class T_functor >
            slot7(const T_functor & _A_func)
                : slot_base(new internal::typed_slot_rep< T_functor > (_A_func)) 
            {
                slot_base::rep_->call_ = internal::slot_call7< T_functor, T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::address();
            }
            slot7(const slot7 & src)
                : slot_base(src) 
            {
            }
            slot7 & operator =(const slot7 & src)
            {
                slot_base::operator =(src);
                return *this;
            }
    };
    template<class T_return, class T_arg1 = nil, class T_arg2 = nil, class T_arg3 = nil, class T_arg4 = nil, class T_arg5 = nil, class T_arg6 = nil, class T_arg7 = nil >
    class slot : public slot7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
    {
        public :
            typedef slot7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return >
    class slot< T_return, nil, nil, nil, nil, nil, nil, nil > : public slot0< T_return >
    {
        public :
            typedef slot0< T_return > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return, class T_arg1 >
    class slot< T_return, T_arg1, nil, nil, nil, nil, nil, nil > : public slot1< T_return, T_arg1 >
    {
        public :
            typedef slot1< T_return, T_arg1 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2 >
    class slot< T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil > : public slot2< T_return, T_arg1, T_arg2 >
    {
        public :
            typedef slot2< T_return, T_arg1, T_arg2 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3 >
    class slot< T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil > : public slot3< T_return, T_arg1, T_arg2, T_arg3 >
    {
        public :
            typedef slot3< T_return, T_arg1, T_arg2, T_arg3 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil > : public slot4< T_return, T_arg1, T_arg2, T_arg3, T_arg4 >
    {
        public :
            typedef slot4< T_return, T_arg1, T_arg2, T_arg3, T_arg4 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil > : public slot5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >
    {
        public :
            typedef slot5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil > : public slot6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >
    {
        public :
            typedef slot6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > parent_type;
            inline slot()
            {
            }
            template<class T_functor >
            slot(const T_functor & _A_func)
                : parent_type(_A_func) 
            {
            }
            slot(const slot & src)
                : parent_type(reinterpret_cast<const parent_type & >(src)) 
            {
            }
    };
}
namespace sigc {
    namespace internal {
        struct signal_impl
        {
                typedef size_t size_type;
                typedef std::list< slot_base > slot_list;
                typedef slot_list::iterator iterator_type;
                typedef slot_list::const_iterator const_iterator_type;
                signal_impl();
                inline void reference()
                {
                    ++ref_count_;
                }
                inline void reference_exec()
                {
                    ++ref_count_;
                    ++exec_count_;
                }
                inline void unreference()
                {
                    if (!(--ref_count_))
                        delete this;
                }
                inline void unreference_exec()
                {
                    if (!(--ref_count_))
                        delete this;
                    else
                        if (!(--exec_count_) && deferred_)
                            sweep();
                }
                inline bool empty() const
                {
                    return slots_.empty();
                }
                void clear();
                size_type size() const;
                iterator_type connect(const slot_base & slot_);
                iterator_type insert(iterator_type i, const slot_base & slot_);
                iterator_type erase(iterator_type i);
                void sweep();
                static void * notify(void * d);
                short ref_count_;
                short exec_count_;
                bool deferred_;
                std::list< slot_base > slots_;
        };
        struct signal_exec
        {
                signal_impl * sig_;
                inline signal_exec(const signal_impl * sig)
                    : sig_(const_cast<signal_impl * >(sig)) 
                {
                    sig_->reference_exec();
                }
                inline ~signal_exec()
                {
                    sig_->unreference_exec();
                }
        };
        struct temp_slot_list
        {
                typedef signal_impl::slot_list slot_list;
                typedef signal_impl::iterator_type iterator;
                typedef signal_impl::const_iterator_type const_iterator;
                temp_slot_list(slot_list & slots)
                    : slots_(slots) 
                {
                    placeholder = slots_.insert(slots_.end(), slot_base());
                }
                ~temp_slot_list()
                {
                    slots_.erase(placeholder);
                }
                iterator begin()
                {
                    return slots_.begin();
                }
                iterator end()
                {
                    return placeholder;
                }
                const_iterator begin() const
                {
                    return slots_.begin();
                }
                const_iterator end() const
                {
                    return placeholder;
                }
            private :
                slot_list & slots_;
                slot_list::iterator placeholder;
        };
    }
    struct signal_base : public trackable
    {
            typedef size_t size_type;
            signal_base();
            signal_base(const signal_base & src);
            ~signal_base();
            signal_base & operator =(const signal_base & src);
            inline bool empty() const
            {
                return (!impl_ || impl_->empty());
            }
            void clear();
            size_type size() const;
        protected :
            typedef internal::signal_impl::iterator_type iterator_type;
            iterator_type connect(const slot_base & slot_);
            iterator_type insert(iterator_type i, const slot_base & slot_);
            iterator_type erase(iterator_type i);
            internal::signal_impl * impl() const;
            mutable internal::signal_impl * impl_;
    };
}
namespace sigc {
    template<typename T_slot >
    struct slot_iterator
    {
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef T_slot slot_type;
            typedef T_slot value_type;
            typedef T_slot * pointer;
            typedef T_slot & reference;
            typedef typename internal::signal_impl::iterator_type iterator_type;
            slot_iterator()
            {
            }
            explicit slot_iterator(const iterator_type & i)
                : i_(i) 
            {
            }
            reference operator *() const
            {
                return static_cast<reference >(*i_);
            }
            pointer operator ->() const
            {
                return &(operator *());
            }
            slot_iterator & operator ++()
            {
                ++i_;
                return *this;
            }
            slot_iterator operator ++(int)
            {
                slot_iterator __tmp(*this);
                ++i_;
                return __tmp;
            }
            slot_iterator & operator --()
            {
                --i_;
                return *this;
            }
            slot_iterator operator --(int)
            {
                slot_iterator __tmp(*this);
                --i_;
                return __tmp;
            }
            bool operator ==(const slot_iterator & other) const
            {
                return i_ == other.i_;
            }
            bool operator !=(const slot_iterator & other) const
            {
                return i_ != other.i_;
            }
            iterator_type i_;
    };
    template<typename T_slot >
    struct slot_const_iterator
    {
            typedef size_t size_type;
            typedef ptrdiff_t difference_type;
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef T_slot slot_type;
            typedef T_slot value_type;
            typedef const T_slot * pointer;
            typedef const T_slot & reference;
            typedef typename internal::signal_impl::const_iterator_type iterator_type;
            slot_const_iterator()
            {
            }
            explicit slot_const_iterator(const iterator_type & i)
                : i_(i) 
            {
            }
            reference operator *() const
            {
                return static_cast<reference >(*i_);
            }
            pointer operator ->() const
            {
                return &(operator *());
            }
            slot_const_iterator & operator ++()
            {
                ++i_;
                return *this;
            }
            slot_const_iterator operator ++(int)
            {
                slot_const_iterator __tmp(*this);
                ++i_;
                return __tmp;
            }
            slot_const_iterator & operator --()
            {
                --i_;
                return *this;
            }
            slot_const_iterator operator --(int)
            {
                slot_const_iterator __tmp(*this);
                --i_;
                return __tmp;
            }
            bool operator ==(const slot_const_iterator & other) const
            {
                return i_ == other.i_;
            }
            bool operator !=(const slot_const_iterator & other) const
            {
                return i_ != other.i_;
            }
            iterator_type i_;
    };
    template<class T_slot >
    struct slot_list
    {
            typedef T_slot slot_type;
            typedef slot_type & reference;
            typedef const slot_type & const_reference;
            typedef slot_iterator< slot_type > iterator;
            typedef slot_const_iterator< slot_type > const_iterator;
            typedef std::reverse_iterator< iterator > reverse_iterator;
            typedef std::reverse_iterator< const_iterator > const_reverse_iterator;
            slot_list()
                : list_(0) 
            {
            }
            explicit slot_list(internal::signal_impl * __list)
                : list_(__list) 
            {
            }
            iterator begin()
            {
                return iterator(list_->slots_.begin());
            }
            const_iterator begin() const
            {
                return const_iterator(list_->slots_.begin());
            }
            iterator end()
            {
                return iterator(list_->slots_.end());
            }
            const_iterator end() const
            {
                return const_iterator(list_->slots_.end());
            }
            reverse_iterator rbegin()
            {
                return reverse_iterator(end());
            }
            const_reverse_iterator rbegin() const
            {
                return const_reverse_iterator(end());
            }
            reverse_iterator rend()
            {
                return reverse_iterator(begin());
            }
            const_reverse_iterator rend() const
            {
                return const_reverse_iterator(begin());
            }
            reference front()
            {
                return *begin();
            }
            const_reference front() const
            {
                return *begin();
            }
            reference back()
            {
                return *(--end());
            }
            const_reference back() const
            {
                return *(--end());
            }
            iterator insert(iterator i, const slot_type & slot_)
            {
                return iterator(list_->insert(i.i_, static_cast<const slot_base & >(slot_)));
            }
            void push_front(const slot_type & c)
            {
                insert(begin(), c);
            }
            void push_back(const slot_type & c)
            {
                insert(end(), c);
            }
            iterator erase(iterator i)
            {
                return iterator(list_->erase(i.i_));
            }
            iterator erase(iterator first_, iterator last_)
            {
                while (first_ != last_)
                    first_ = erase(first_);
                return last_;
            }
            void pop_front()
            {
                erase(begin());
            }
            void pop_back()
            {
                iterator tmp_ = end();
                erase(--tmp_);
            }
        protected :
            internal::signal_impl * list_;
    };
    namespace internal {
        template<class T_emitter, class T_result = typename T_emitter::result_type >
        struct slot_iterator_buf
        {
                typedef size_t size_type;
                typedef ptrdiff_t difference_type;
                typedef std::bidirectional_iterator_tag iterator_category;
                typedef T_emitter emitter_type;
                typedef T_result result_type;
                typedef typename T_emitter::slot_type slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                slot_iterator_buf()
                    : c_(0), invoked_(false) 
                {
                }
                slot_iterator_buf(const iterator_type & i, const emitter_type * c)
                    : i_(i), c_(c), invoked_(false) 
                {
                }
                result_type operator *() const
                {
                    if (!i_->empty() && !i_->blocked() && !invoked_)
                    {
                        r_ = (*c_)(static_cast<const slot_type & >(*i_));
                        invoked_ = true;
                    }
                    return r_;
                }
                slot_iterator_buf & operator ++()
                {
                    ++i_;
                    invoked_ = false;
                    return *this;
                }
                slot_iterator_buf operator ++(int)
                {
                    slot_iterator_buf __tmp(*this);
                    ++i_;
                    invoked_ = false;
                    return __tmp;
                }
                slot_iterator_buf & operator --()
                {
                    --i_;
                    invoked_ = false;
                    return *this;
                }
                slot_iterator_buf operator --(int)
                {
                    slot_iterator_buf __tmp(*this);
                    --i_;
                    invoked_ = false;
                    return __tmp;
                }
                bool operator ==(const slot_iterator_buf & other) const
                {
                    return (!c_ || (i_ == other.i_));
                }
                bool operator !=(const slot_iterator_buf & other) const
                {
                    return (c_ && (i_ != other.i_));
                }
            private :
                iterator_type i_;
                const emitter_type * c_;
                mutable result_type r_;
                mutable bool invoked_;
        };
        template<class T_emitter >
        struct slot_iterator_buf< T_emitter, void >
        {
                typedef size_t size_type;
                typedef ptrdiff_t difference_type;
                typedef std::bidirectional_iterator_tag iterator_category;
                typedef T_emitter emitter_type;
                typedef void result_type;
                typedef typename T_emitter::slot_type slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                slot_iterator_buf()
                    : c_(0), invoked_(false) 
                {
                }
                slot_iterator_buf(const iterator_type & i, const emitter_type * c)
                    : i_(i), c_(c), invoked_(false) 
                {
                }
                void operator *() const
                {
                    if (!i_->empty() && !i_->blocked() && !invoked_)
                    {
                        (*c_)(static_cast<const slot_type & >(*i_));
                        invoked_ = true;
                    }
                }
                slot_iterator_buf & operator ++()
                {
                    ++i_;
                    invoked_ = false;
                    return *this;
                }
                slot_iterator_buf operator ++(int)
                {
                    slot_iterator_buf __tmp(*this);
                    ++i_;
                    invoked_ = false;
                    return __tmp;
                }
                slot_iterator_buf & operator --()
                {
                    --i_;
                    invoked_ = false;
                    return *this;
                }
                slot_iterator_buf operator --(int)
                {
                    slot_iterator_buf __tmp(*this);
                    --i_;
                    invoked_ = false;
                    return __tmp;
                }
                bool operator ==(const slot_iterator_buf & other) const
                {
                    return i_ == other.i_;
                }
                bool operator !=(const slot_iterator_buf & other) const
                {
                    return i_ != other.i_;
                }
            private :
                iterator_type i_;
                const emitter_type * c_;
                mutable bool invoked_;
        };
        template<class T_return, class T_accumulator >
        struct signal_emit0
        {
                typedef signal_emit0< T_return, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit0()
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_);
                }
                static result_type emit(signal_impl * impl)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self;
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
        };
        template<class T_return >
        struct signal_emit0< T_return, nil >
        {
                typedef signal_emit0< T_return, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_);
                        }
                    }
                    return r_;
                }
        };
        template<>
        struct signal_emit0< void, nil >
        {
                typedef signal_emit0< void, nil > self_type;
                typedef void result_type;
                typedef slot< void > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef void (* call_type)(slot_rep *);
                static result_type emit(signal_impl * impl)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_accumulator >
        struct signal_emit1
        {
                typedef signal_emit1< T_return, T_arg1, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit1(typename type_trait< T_arg1 >::take _A_a1)
                    : _A_a1_(_A_a1) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
        };
        template<class T_return, class T_arg1 >
        struct signal_emit1< T_return, T_arg1, nil >
        {
                typedef signal_emit1< T_return, T_arg1, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1 >
        struct signal_emit1< void, T_arg1, nil >
        {
                typedef signal_emit1< void, T_arg1, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_arg2, class T_accumulator >
        struct signal_emit2
        {
                typedef signal_emit2< T_return, T_arg1, T_arg2, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1, T_arg2 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit2(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2)
                    : _A_a1_(_A_a1), _A_a2_(_A_a2) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_, _A_a2_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1, _A_a2);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
                typename type_trait< T_arg2 >::take _A_a2_;
        };
        template<class T_return, class T_arg1, class T_arg2 >
        struct signal_emit2< T_return, T_arg1, T_arg2, nil >
        {
                typedef signal_emit2< T_return, T_arg1, T_arg2, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1, T_arg2 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1, class T_arg2 >
        struct signal_emit2< void, T_arg1, T_arg2, nil >
        {
                typedef signal_emit2< void, T_arg1, T_arg2, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1, T_arg2 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_accumulator >
        struct signal_emit3
        {
                typedef signal_emit3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit3(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3)
                    : _A_a1_(_A_a1), _A_a2_(_A_a2), _A_a3_(_A_a3) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_, _A_a2_, _A_a3_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1, _A_a2, _A_a3);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
                typename type_trait< T_arg2 >::take _A_a2_;
                typename type_trait< T_arg3 >::take _A_a3_;
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3 >
        struct signal_emit3< T_return, T_arg1, T_arg2, T_arg3, nil >
        {
                typedef signal_emit3< T_return, T_arg1, T_arg2, T_arg3, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1, class T_arg2, class T_arg3 >
        struct signal_emit3< void, T_arg1, T_arg2, T_arg3, nil >
        {
                typedef signal_emit3< void, T_arg1, T_arg2, T_arg3, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1, T_arg2, T_arg3 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_accumulator >
        struct signal_emit4
        {
                typedef signal_emit4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit4(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4)
                    : _A_a1_(_A_a1), _A_a2_(_A_a2), _A_a3_(_A_a3), _A_a4_(_A_a4) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_, _A_a2_, _A_a3_, _A_a4_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1, _A_a2, _A_a3, _A_a4);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
                typename type_trait< T_arg2 >::take _A_a2_;
                typename type_trait< T_arg3 >::take _A_a3_;
                typename type_trait< T_arg4 >::take _A_a4_;
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
        struct signal_emit4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil >
        {
                typedef signal_emit4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
        struct signal_emit4< void, T_arg1, T_arg2, T_arg3, T_arg4, nil >
        {
                typedef signal_emit4< void, T_arg1, T_arg2, T_arg3, T_arg4, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1, T_arg2, T_arg3, T_arg4 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_accumulator >
        struct signal_emit5
        {
                typedef signal_emit5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit5(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5)
                    : _A_a1_(_A_a1), _A_a2_(_A_a2), _A_a3_(_A_a3), _A_a4_(_A_a4), _A_a5_(_A_a5) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_, _A_a2_, _A_a3_, _A_a4_, _A_a5_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
                typename type_trait< T_arg2 >::take _A_a2_;
                typename type_trait< T_arg3 >::take _A_a3_;
                typename type_trait< T_arg4 >::take _A_a4_;
                typename type_trait< T_arg5 >::take _A_a5_;
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
        struct signal_emit5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil >
        {
                typedef signal_emit5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
        struct signal_emit5< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil >
        {
                typedef signal_emit5< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_accumulator >
        struct signal_emit6
        {
                typedef signal_emit6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit6(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6)
                    : _A_a1_(_A_a1), _A_a2_(_A_a2), _A_a3_(_A_a3), _A_a4_(_A_a4), _A_a5_(_A_a5), _A_a6_(_A_a6) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_, _A_a2_, _A_a3_, _A_a4_, _A_a5_, _A_a6_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
                typename type_trait< T_arg2 >::take _A_a2_;
                typename type_trait< T_arg3 >::take _A_a3_;
                typename type_trait< T_arg4 >::take _A_a4_;
                typename type_trait< T_arg5 >::take _A_a5_;
                typename type_trait< T_arg6 >::take _A_a6_;
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
        struct signal_emit6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil >
        {
                typedef signal_emit6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
        struct signal_emit6< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil >
        {
                typedef signal_emit6< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                    }
                }
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_accumulator >
        struct signal_emit7
        {
                typedef signal_emit7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator > self_type;
                typedef typename T_accumulator::result_type result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > slot_type;
                typedef internal::slot_iterator_buf< self_type > slot_iterator_buf_type;
                typedef signal_impl::const_iterator_type iterator_type;
                signal_emit7(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7)
                    : _A_a1_(_A_a1), _A_a2_(_A_a2), _A_a3_(_A_a3), _A_a4_(_A_a4), _A_a5_(_A_a5), _A_a6_(_A_a6), _A_a7_(_A_a7) 
                {
                }
                T_return operator ()(const slot_type & _A_slot) const
                {
                    return (reinterpret_cast<typename slot_type::call_type >(_A_slot.rep_->call_))(_A_slot.rep_, _A_a1_, _A_a2_, _A_a3_, _A_a4_, _A_a5_, _A_a6_, _A_a7_);
                }
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7)
                {
                    T_accumulator accumulator;
                    if (!impl)
                        return accumulator(slot_iterator_buf_type(), slot_iterator_buf_type());
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    self_type self(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                    return accumulator(slot_iterator_buf_type(slots.begin(), &self), slot_iterator_buf_type(slots.end(), &self));
                }
                typename type_trait< T_arg1 >::take _A_a1_;
                typename type_trait< T_arg2 >::take _A_a2_;
                typename type_trait< T_arg3 >::take _A_a3_;
                typename type_trait< T_arg4 >::take _A_a4_;
                typename type_trait< T_arg5 >::take _A_a5_;
                typename type_trait< T_arg6 >::take _A_a6_;
                typename type_trait< T_arg7 >::take _A_a7_;
        };
        template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
        struct signal_emit7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil >
        {
                typedef signal_emit7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil > self_type;
                typedef T_return result_type;
                typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7)
                {
                    if (!impl || impl->slots_.empty())
                        return T_return();
                    signal_exec exec(impl);
                    T_return r_ = T_return();
                    {
                        temp_slot_list slots(impl->slots_);
                        iterator_type it = slots.begin();
                        for (;
                            it != slots.end();
                            ++it)
                        if (!it->empty() && !it->blocked())
                            break;
                        if (it == slots.end())
                            return T_return();
                        r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                        for (++it;
                            it != slots.end();
                            ++it)
                        {
                            if (it->empty() || it->blocked())
                                continue;
                            r_ = (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                        }
                    }
                    return r_;
                }
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
        struct signal_emit7< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil >
        {
                typedef signal_emit7< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil > self_type;
                typedef void result_type;
                typedef slot< void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > slot_type;
                typedef signal_impl::const_iterator_type iterator_type;
                typedef typename slot_type::call_type call_type;
                static result_type emit(signal_impl * impl, typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7)
                {
                    if (!impl || impl->slots_.empty())
                        return;
                    signal_exec exec(impl);
                    temp_slot_list slots(impl->slots_);
                    for (iterator_type it = slots.begin();
                        it != slots.end();
                        ++it)
                    {
                        if (it->empty() || it->blocked())
                            continue;
                        (reinterpret_cast<call_type >(it->rep_->call_))(it->rep_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                    }
                }
        };
    }
    template<class T_return, class T_accumulator = nil >
    class signal0 : public signal_base
    {
        public :
            typedef internal::signal_emit0< T_return, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit() const
            {
                return emitter_type::emit(impl_);
            }
            result_type operator ()() const
            {
                return emit();
            }
            bound_const_mem_functor0< result_type, signal0 > make_slot() const
            {
                return bound_const_mem_functor0< result_type, signal0 >(this, &signal0::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal0 * >(this)->impl());
            }
            signal0()
            {
            }
            signal0(const signal0 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_accumulator = nil >
    class signal1 : public signal_base
    {
        public :
            typedef internal::signal_emit1< T_return, T_arg1, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return emitter_type::emit(impl_, _A_a1);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1) const
            {
                return emit(_A_a1);
            }
            bound_const_mem_functor1< result_type, signal1, typename type_trait< T_arg1 >::take > make_slot() const
            {
                return bound_const_mem_functor1< result_type, signal1, typename type_trait< T_arg1 >::take >(this, &signal1::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal1 * >(this)->impl());
            }
            signal1()
            {
            }
            signal1(const signal1 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_accumulator = nil >
    class signal2 : public signal_base
    {
        public :
            typedef internal::signal_emit2< T_return, T_arg1, T_arg2, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1, T_arg2 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return emitter_type::emit(impl_, _A_a1, _A_a2);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2) const
            {
                return emit(_A_a1, _A_a2);
            }
            bound_const_mem_functor2< result_type, signal2, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take > make_slot() const
            {
                return bound_const_mem_functor2< result_type, signal2, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take >(this, &signal2::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal2 * >(this)->impl());
            }
            signal2()
            {
            }
            signal2(const signal2 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_accumulator = nil >
    class signal3 : public signal_base
    {
        public :
            typedef internal::signal_emit3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1, T_arg2, T_arg3 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return emitter_type::emit(impl_, _A_a1, _A_a2, _A_a3);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3) const
            {
                return emit(_A_a1, _A_a2, _A_a3);
            }
            bound_const_mem_functor3< result_type, signal3, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take > make_slot() const
            {
                return bound_const_mem_functor3< result_type, signal3, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take >(this, &signal3::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal3 * >(this)->impl());
            }
            signal3()
            {
            }
            signal3(const signal3 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_accumulator = nil >
    class signal4 : public signal_base
    {
        public :
            typedef internal::signal_emit4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return emitter_type::emit(impl_, _A_a1, _A_a2, _A_a3, _A_a4);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4) const
            {
                return emit(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            bound_const_mem_functor4< result_type, signal4, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take > make_slot() const
            {
                return bound_const_mem_functor4< result_type, signal4, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take >(this, &signal4::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal4 * >(this)->impl());
            }
            signal4()
            {
            }
            signal4(const signal4 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_accumulator = nil >
    class signal5 : public signal_base
    {
        public :
            typedef internal::signal_emit5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return emitter_type::emit(impl_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5) const
            {
                return emit(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            bound_const_mem_functor5< result_type, signal5, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take > make_slot() const
            {
                return bound_const_mem_functor5< result_type, signal5, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take >(this, &signal5::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal5 * >(this)->impl());
            }
            signal5()
            {
            }
            signal5(const signal5 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_accumulator = nil >
    class signal6 : public signal_base
    {
        public :
            typedef internal::signal_emit6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return emitter_type::emit(impl_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6) const
            {
                return emit(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            bound_const_mem_functor6< result_type, signal6, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take, typename type_trait< T_arg6 >::take > make_slot() const
            {
                return bound_const_mem_functor6< result_type, signal6, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take, typename type_trait< T_arg6 >::take >(this, &signal6::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal6 * >(this)->impl());
            }
            signal6()
            {
            }
            signal6(const signal6 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_accumulator = nil >
    class signal7 : public signal_base
    {
        public :
            typedef internal::signal_emit7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator > emitter_type;
            typedef typename emitter_type::result_type result_type;
            typedef slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > slot_type;
            typedef slot_list< slot_type > slot_list_type;
            typedef typename slot_list_type::iterator iterator;
            typedef typename slot_list_type::const_iterator const_iterator;
            typedef typename slot_list_type::reverse_iterator reverse_iterator;
            typedef typename slot_list_type::const_reverse_iterator const_reverse_iterator;
            iterator connect(const slot_type & slot_)
            {
                return iterator(signal_base::connect(static_cast<const slot_base & >(slot_)));
            }
            result_type emit(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return emitter_type::emit(impl_, _A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            result_type operator ()(typename type_trait< T_arg1 >::take _A_a1, typename type_trait< T_arg2 >::take _A_a2, typename type_trait< T_arg3 >::take _A_a3, typename type_trait< T_arg4 >::take _A_a4, typename type_trait< T_arg5 >::take _A_a5, typename type_trait< T_arg6 >::take _A_a6, typename type_trait< T_arg7 >::take _A_a7) const
            {
                return emit(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            bound_const_mem_functor7< result_type, signal7, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take, typename type_trait< T_arg6 >::take, typename type_trait< T_arg7 >::take > make_slot() const
            {
                return bound_const_mem_functor7< result_type, signal7, typename type_trait< T_arg1 >::take, typename type_trait< T_arg2 >::take, typename type_trait< T_arg3 >::take, typename type_trait< T_arg4 >::take, typename type_trait< T_arg5 >::take, typename type_trait< T_arg6 >::take, typename type_trait< T_arg7 >::take >(this, &signal7::emit);
            }
            slot_list_type slots()
            {
                return slot_list_type(impl());
            }
            const slot_list_type slots() const
            {
                return slot_list_type(const_cast<signal7 * >(this)->impl());
            }
            signal7()
            {
            }
            signal7(const signal7 & src)
                : signal_base(src) 
            {
            }
    };
    template<class T_return, class T_arg1 = nil, class T_arg2 = nil, class T_arg3 = nil, class T_arg4 = nil, class T_arg5 = nil, class T_arg6 = nil, class T_arg7 = nil >
    class signal : public signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil >(src) 
            {
            }
    };
    template<class T_return >
    class signal< T_return, nil, nil, nil, nil, nil, nil, nil > : public signal0< T_return, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal0< T_return, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal0< T_return, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal0< T_return, nil >(src) 
            {
            }
    };
    template<class T_return, class T_arg1 >
    class signal< T_return, T_arg1, nil, nil, nil, nil, nil, nil > : public signal1< T_return, T_arg1, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal1< T_return, T_arg1, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal1< T_return, T_arg1, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal1< T_return, T_arg1, nil >(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2 >
    class signal< T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil > : public signal2< T_return, T_arg1, T_arg2, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal2< T_return, T_arg1, T_arg2, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal2< T_return, T_arg1, T_arg2, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal2< T_return, T_arg1, T_arg2, nil >(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3 >
    class signal< T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil > : public signal3< T_return, T_arg1, T_arg2, T_arg3, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal3< T_return, T_arg1, T_arg2, T_arg3, nil >(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    class signal< T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil > : public signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil >(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    class signal< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil > : public signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil >(src) 
            {
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    class signal< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil > : public signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil >
    {
        public :
            template<class T_accumulator >
            class accumulated : public signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator >
            {
                public :
                    accumulated()
                    {
                    }
                    accumulated(const accumulated & src)
                        : signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator >(src) 
                    {
                    }
            };
            signal()
            {
            }
            signal(const signal & src)
                : signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil >(src) 
            {
            }
    };
}
namespace SigC {
    template<class T_return, class T_accumulator = ::sigc::nil >
    class Signal0 : public ::sigc::signal0< T_return, T_accumulator >
    {
        public :
            typedef ::sigc::signal0< T_return, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal0()
            {
            }
            Signal0(const Signal0 & src)
                : ::sigc::signal0< T_return, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor0< result_type, parent_type >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_accumulator = ::sigc::nil >
    class Signal1 : public ::sigc::signal1< T_return, T_arg1, T_accumulator >
    {
        public :
            typedef ::sigc::signal1< T_return, T_arg1, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal1()
            {
            }
            Signal1(const Signal1 & src)
                : ::sigc::signal1< T_return, T_arg1, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor1< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_accumulator = ::sigc::nil >
    class Signal2 : public ::sigc::signal2< T_return, T_arg1, T_arg2, T_accumulator >
    {
        public :
            typedef ::sigc::signal2< T_return, T_arg1, T_arg2, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal2()
            {
            }
            Signal2(const Signal2 & src)
                : ::sigc::signal2< T_return, T_arg1, T_arg2, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor2< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take, typename ::sigc::type_trait< T_arg2 >::take >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_accumulator = ::sigc::nil >
    class Signal3 : public ::sigc::signal3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator >
    {
        public :
            typedef ::sigc::signal3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal3()
            {
            }
            Signal3(const Signal3 & src)
                : ::sigc::signal3< T_return, T_arg1, T_arg2, T_arg3, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor3< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take, typename ::sigc::type_trait< T_arg2 >::take, typename ::sigc::type_trait< T_arg3 >::take >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_accumulator = ::sigc::nil >
    class Signal4 : public ::sigc::signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator >
    {
        public :
            typedef ::sigc::signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal4()
            {
            }
            Signal4(const Signal4 & src)
                : ::sigc::signal4< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor4< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take, typename ::sigc::type_trait< T_arg2 >::take, typename ::sigc::type_trait< T_arg3 >::take, typename ::sigc::type_trait< T_arg4 >::take >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_accumulator = ::sigc::nil >
    class Signal5 : public ::sigc::signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator >
    {
        public :
            typedef ::sigc::signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal5()
            {
            }
            Signal5(const Signal5 & src)
                : ::sigc::signal5< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor5< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take, typename ::sigc::type_trait< T_arg2 >::take, typename ::sigc::type_trait< T_arg3 >::take, typename ::sigc::type_trait< T_arg4 >::take, typename ::sigc::type_trait< T_arg5 >::take >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_accumulator = ::sigc::nil >
    class Signal6 : public ::sigc::signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator >
    {
        public :
            typedef ::sigc::signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal6()
            {
            }
            Signal6(const Signal6 & src)
                : ::sigc::signal6< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor6< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take, typename ::sigc::type_trait< T_arg2 >::take, typename ::sigc::type_trait< T_arg3 >::take, typename ::sigc::type_trait< T_arg4 >::take, typename ::sigc::type_trait< T_arg5 >::take, typename ::sigc::type_trait< T_arg6 >::take >(this, &parent_type::emit);
            }
    };
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_accumulator = ::sigc::nil >
    class Signal7 : public ::sigc::signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator >
    {
        public :
            typedef ::sigc::signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator > parent_type;
            typedef typename parent_type::result_type result_type;
            typedef typename parent_type::slot_type slot_type;
            Signal7()
            {
            }
            Signal7(const Signal7 & src)
                : ::sigc::signal7< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator >(src) 
            {
            }
            slot_type slot() const
            {
                return ::sigc::bound_const_mem_functor7< result_type, parent_type, typename ::sigc::type_trait< T_arg1 >::take, typename ::sigc::type_trait< T_arg2 >::take, typename ::sigc::type_trait< T_arg3 >::take, typename ::sigc::type_trait< T_arg4 >::take, typename ::sigc::type_trait< T_arg5 >::take, typename ::sigc::type_trait< T_arg6 >::take, typename ::sigc::type_trait< T_arg7 >::take >(this, &parent_type::emit);
            }
    };
}
namespace sigc {
    struct connection
    {
            connection();
            connection(const connection & c);
            template<typename T_slot >
            connection(const slot_iterator< T_slot > & it)
                : slot_(&(*it)) 
            {
                if (slot_)
                    slot_->add_destroy_notify_callback(this, &notify);
            }
            explicit connection(slot_base & sl);
            connection & operator =(const connection & c);
            template<typename T_slot >
            connection & operator =(const slot_iterator< T_slot > & it)
            {
                set_slot(&(*it));
                return *this;
            }
            ~connection();
            bool empty() const;
            bool connected() const;
            bool blocked() const;
            bool block(bool should_block = true);
            bool unblock();
            void disconnect();
            operator bool();
            static void * notify(void * data);
        private :
            void set_slot(slot_base * sl);
            slot_base * slot_;
    };
}
namespace SigC {
    typedef ::sigc::connection Connection;
}
namespace sigc {
    template<class T_type >
    struct reference_wrapper
    {
            explicit reference_wrapper(T_type & v)
                : value_(v) 
            {
            }
            operator T_type &() const
            {
                return value_;
            }
            T_type & value_;
    };
    template<class T_type >
    struct const_reference_wrapper
    {
            explicit const_reference_wrapper(const T_type & v)
                : value_(v) 
            {
            }
            operator const T_type &() const
            {
                return value_;
            }
            const T_type & value_;
    };
    template<class T_type >
    reference_wrapper< T_type > ref(T_type & v)
    {
        return reference_wrapper< T_type >(v);
    }
    template<class T_type >
    const_reference_wrapper< T_type > ref(const T_type & v)
    {
        return const_reference_wrapper< T_type >(v);
    }
    template<class T_type >
    struct unwrap_reference
    {
            typedef T_type type;
    };
    template<class T_type >
    struct unwrap_reference< reference_wrapper< T_type > >
    {
            typedef T_type & type;
    };
    template<class T_type >
    struct unwrap_reference< const_reference_wrapper< T_type > >
    {
            typedef const T_type & type;
    };
    template<class T_type >
    T_type & unwrap(const reference_wrapper< T_type > & v)
    {
        return v;
    }
    template<class T_type >
    const T_type & unwrap(const const_reference_wrapper< T_type > & v)
    {
        return v;
    }
}
namespace sigc {
    template<class T_type >
    class bound_argument
    {
        public :
            bound_argument(const T_type & _A_argument)
                : visited_(_A_argument) 
            {
            }
            inline const T_type & visit() const
            {
                return visited_;
            }
            inline T_type & invoke()
            {
                return visited_;
            }
        private :
            T_type visited_;
    };
    template<class T_wrapped >
    class bound_argument< reference_wrapper< T_wrapped > >
    {
        public :
            bound_argument(const reference_wrapper< T_wrapped > & _A_argument)
                : visited_(unwrap(_A_argument)) 
            {
            }
            inline const limit_reference< T_wrapped > & visit() const
            {
                return visited_;
            }
            inline T_wrapped & invoke()
            {
                return visited_.invoke();
            }
        private :
            limit_reference< T_wrapped > visited_;
    };
    template<class T_wrapped >
    class bound_argument< const_reference_wrapper< T_wrapped > >
    {
        public :
            bound_argument(const const_reference_wrapper< T_wrapped > & _A_argument)
                : visited_(unwrap(_A_argument)) 
            {
            }
            inline const const_limit_reference< T_wrapped > & visit() const
            {
                return visited_;
            }
            inline const T_wrapped & invoke()
            {
                return visited_.invoke();
            }
        private :
            const_limit_reference< T_wrapped > visited_;
    };
    template<class T_action, class T_type >
    void visit_each(const T_action & _A_action, const bound_argument< T_type > & _A_argument)
    {
        visit_each(_A_action, _A_argument.visit());
    }
}
namespace sigc {
    namespace internal {
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
        struct count_void
        {
                static const int value = 0;
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
        struct count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, void >
        {
                static const int value = 1;
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
        struct count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, void, void >
        {
                static const int value = 2;
        };
        template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
        struct count_void< T_arg1, T_arg2, T_arg3, T_arg4, void, void, void >
        {
                static const int value = 3;
        };
        template<class T_arg1, class T_arg2, class T_arg3 >
        struct count_void< T_arg1, T_arg2, T_arg3, void, void, void, void >
        {
                static const int value = 4;
        };
        template<class T_arg1, class T_arg2 >
        struct count_void< T_arg1, T_arg2, void, void, void, void, void >
        {
                static const int value = 5;
        };
        template<class T_arg1 >
        struct count_void< T_arg1, void, void, void, void, void, void >
        {
                static const int value = 6;
        };
        template<>
        struct count_void< void, void, void, void, void, void, void >
        {
                static const int value = 7;
        };
    }
    template<int I_location, class T_functor, class T_type1 = nil, class T_type2 = nil, class T_type3 = nil, class T_type4 = nil, class T_type5 = nil, class T_type6 = nil, class T_type7 = nil >
    struct bind_functor;
    template<class T_functor, class T_bound >
    struct bind_functor< 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass >(bound_.invoke(), _A_arg1);
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(bound_.invoke(), _A_arg1, _A_arg2);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(bound_.invoke(), _A_arg1, _A_arg2, _A_arg3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(bound_.invoke(), _A_arg1, _A_arg2, _A_arg3, _A_arg4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(bound_.invoke(), _A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(bound_.invoke(), _A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, _A_arg6);
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_functor, class T_bound >
    struct bind_functor< 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(_A_arg1, bound_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg2 >::pass >(_A_arg1, bound_.invoke(), _A_arg2);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_arg1, bound_.invoke(), _A_arg2, _A_arg3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_arg1, bound_.invoke(), _A_arg2, _A_arg3, _A_arg4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_arg1, bound_.invoke(), _A_arg2, _A_arg3, _A_arg4, _A_arg5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_arg1, bound_.invoke(), _A_arg2, _A_arg3, _A_arg4, _A_arg5, _A_arg6);
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_functor, class T_bound >
    struct bind_functor< 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(_A_arg1, _A_arg2, bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg3 >::pass >(_A_arg1, _A_arg2, bound_.invoke(), _A_arg3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_arg1, _A_arg2, bound_.invoke(), _A_arg3, _A_arg4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_arg1, _A_arg2, bound_.invoke(), _A_arg3, _A_arg4, _A_arg5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_arg1, _A_arg2, bound_.invoke(), _A_arg3, _A_arg4, _A_arg5, _A_arg6);
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_functor, class T_bound >
    struct bind_functor< 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg4 >::pass >(_A_arg1, _A_arg2, _A_arg3, bound_.invoke(), _A_arg4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_arg1, _A_arg2, _A_arg3, bound_.invoke(), _A_arg4, _A_arg5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_arg1, _A_arg2, _A_arg3, bound_.invoke(), _A_arg4, _A_arg5, _A_arg6);
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_functor, class T_bound >
    struct bind_functor< 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg5 >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, bound_.invoke(), _A_arg5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, bound_.invoke(), _A_arg5, _A_arg6);
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_functor, class T_bound >
    struct bind_functor< 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass, typename type_trait< T_arg6 >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, bound_.invoke(), _A_arg6);
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_functor, class T_bound >
    struct bind_functor< 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(bound_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< typename unwrap_reference< T_bound >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, _A_arg6, bound_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_bound >::take _A_bound)
                : adapts< T_functor >(_A_func), bound_(_A_bound) 
            {
            }
            bound_argument< T_bound > bound_;
    };
    template<class T_action, int T_loc, class T_functor, class T_bound >
    void visit_each(const T_action & _A_action, const bind_functor< T_loc, T_functor, T_bound > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound_);
    }
    template<class T_functor, class T_type1 >
    struct bind_functor< -1, T_functor, T_type1, nil, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 2, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 3, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 4, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 5, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 6, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(bound1_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(_A_arg1, bound1_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(_A_arg1, _A_arg2, bound1_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, bound1_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, bound1_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, bound1_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, _A_arg6, bound1_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1) 
            {
            }
            bound_argument< T_type1 > bound1_;
    };
    template<class T_action, class T_functor, class T_type1 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
    }
    template<class T_functor, class T_type1, class T_type2 >
    struct bind_functor< -1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 3, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 4, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 5, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 6, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >(bound1_.invoke(), bound2_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >(_A_arg1, bound1_.invoke(), bound2_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >(_A_arg1, _A_arg2, bound1_.invoke(), bound2_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, bound1_.invoke(), bound2_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, bound1_.invoke(), bound2_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, _A_arg5, bound1_.invoke(), bound2_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1, typename type_trait< T_type2 >::take _A_bound2)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1), bound2_(_A_bound2) 
            {
            }
            bound_argument< T_type1 > bound1_;
            bound_argument< T_type2 > bound2_;
    };
    template<class T_action, class T_functor, class T_type1, class T_type2 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1, T_type2 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
        visit_each(_A_action, _A_target.bound2_);
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3 >
    struct bind_functor< -1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 4, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 5, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 6, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >(bound1_.invoke(), bound2_.invoke(), bound3_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >(_A_arg1, bound1_.invoke(), bound2_.invoke(), bound3_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >(_A_arg1, _A_arg2, bound1_.invoke(), bound2_.invoke(), bound3_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, bound1_.invoke(), bound2_.invoke(), bound3_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, _A_arg4, bound1_.invoke(), bound2_.invoke(), bound3_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1, typename type_trait< T_type2 >::take _A_bound2, typename type_trait< T_type3 >::take _A_bound3)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1), bound2_(_A_bound2), bound3_(_A_bound3) 
            {
            }
            bound_argument< T_type1 > bound1_;
            bound_argument< T_type2 > bound2_;
            bound_argument< T_type3 > bound3_;
    };
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1, T_type2, T_type3 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
        visit_each(_A_action, _A_target.bound2_);
        visit_each(_A_action, _A_target.bound3_);
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3, class T_type4 >
    struct bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 5, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 6, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >(bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >(_A_arg1, bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >(_A_arg1, _A_arg2, bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke());
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass >(_A_arg1, _A_arg2, _A_arg3, bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1, typename type_trait< T_type2 >::take _A_bound2, typename type_trait< T_type3 >::take _A_bound3, typename type_trait< T_type4 >::take _A_bound4)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1), bound2_(_A_bound2), bound3_(_A_bound3), bound4_(_A_bound4) 
            {
            }
            bound_argument< T_type1 > bound1_;
            bound_argument< T_type2 > bound2_;
            bound_argument< T_type3 > bound3_;
            bound_argument< T_type4 > bound4_;
    };
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3, class T_type4 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
        visit_each(_A_action, _A_target.bound2_);
        visit_each(_A_action, _A_target.bound3_);
        visit_each(_A_action, _A_target.bound4_);
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5 >
    struct bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass >::type type;
            };
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal< 6, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass >(bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke(), bound5_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass >(_A_arg1, bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke(), bound5_.invoke());
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_arg1, T_arg2 _A_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass >(_A_arg1, _A_arg2, bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke(), bound5_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1, typename type_trait< T_type2 >::take _A_bound2, typename type_trait< T_type3 >::take _A_bound3, typename type_trait< T_type4 >::take _A_bound4, typename type_trait< T_type5 >::take _A_bound5)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1), bound2_(_A_bound2), bound3_(_A_bound3), bound4_(_A_bound4), bound5_(_A_bound5) 
            {
            }
            bound_argument< T_type1 > bound1_;
            bound_argument< T_type2 > bound2_;
            bound_argument< T_type3 > bound3_;
            bound_argument< T_type4 > bound4_;
            bound_argument< T_type5 > bound5_;
    };
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
        visit_each(_A_action, _A_target.bound2_);
        visit_each(_A_action, _A_target.bound3_);
        visit_each(_A_action, _A_target.bound4_);
        visit_each(_A_action, _A_target.bound5_);
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6 >
    struct bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass, typename type_trait< typename unwrap_reference< T_type6 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass, typename type_trait< typename unwrap_reference< T_type6 >::type >::pass >(bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke(), bound5_.invoke(), bound6_.invoke());
            }
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_arg1)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass, typename type_trait< typename unwrap_reference< T_type6 >::type >::pass >(_A_arg1, bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke(), bound5_.invoke(), bound6_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1, typename type_trait< T_type2 >::take _A_bound2, typename type_trait< T_type3 >::take _A_bound3, typename type_trait< T_type4 >::take _A_bound4, typename type_trait< T_type5 >::take _A_bound5, typename type_trait< T_type6 >::take _A_bound6)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1), bound2_(_A_bound2), bound3_(_A_bound3), bound4_(_A_bound4), bound5_(_A_bound5), bound6_(_A_bound6) 
            {
            }
            bound_argument< T_type1 > bound1_;
            bound_argument< T_type2 > bound2_;
            bound_argument< T_type3 > bound3_;
            bound_argument< T_type4 > bound4_;
            bound_argument< T_type5 > bound5_;
            bound_argument< T_type6 > bound6_;
    };
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
        visit_each(_A_action, _A_target.bound2_);
        visit_each(_A_action, _A_target.bound3_);
        visit_each(_A_action, _A_target.bound4_);
        visit_each(_A_action, _A_target.bound5_);
        visit_each(_A_action, _A_target.bound6_);
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6, class T_type7 >
    struct bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<int count, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            struct deduce_result_type_internal
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass, typename type_trait< typename unwrap_reference< T_type6 >::type >::pass, typename type_trait< typename unwrap_reference< T_type7 >::type >::pass >::type type;
            };
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename deduce_result_type_internal< internal::count_void< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()()
            {
                return this->functor_.template operator ()<typename type_trait< typename unwrap_reference< T_type1 >::type >::pass, typename type_trait< typename unwrap_reference< T_type2 >::type >::pass, typename type_trait< typename unwrap_reference< T_type3 >::type >::pass, typename type_trait< typename unwrap_reference< T_type4 >::type >::pass, typename type_trait< typename unwrap_reference< T_type5 >::type >::pass, typename type_trait< typename unwrap_reference< T_type6 >::type >::pass, typename type_trait< typename unwrap_reference< T_type7 >::type >::pass >(bound1_.invoke(), bound2_.invoke(), bound3_.invoke(), bound4_.invoke(), bound5_.invoke(), bound6_.invoke(), bound7_.invoke());
            }
            bind_functor(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_bound1, typename type_trait< T_type2 >::take _A_bound2, typename type_trait< T_type3 >::take _A_bound3, typename type_trait< T_type4 >::take _A_bound4, typename type_trait< T_type5 >::take _A_bound5, typename type_trait< T_type6 >::take _A_bound6, typename type_trait< T_type7 >::take _A_bound7)
                : adapts< T_functor >(_A_func), bound1_(_A_bound1), bound2_(_A_bound2), bound3_(_A_bound3), bound4_(_A_bound4), bound5_(_A_bound5), bound6_(_A_bound6), bound7_(_A_bound7) 
            {
            }
            bound_argument< T_type1 > bound1_;
            bound_argument< T_type2 > bound2_;
            bound_argument< T_type3 > bound3_;
            bound_argument< T_type4 > bound4_;
            bound_argument< T_type5 > bound5_;
            bound_argument< T_type6 > bound6_;
            bound_argument< T_type7 > bound7_;
    };
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6, class T_type7 >
    void visit_each(const T_action & _A_action, const bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.bound1_);
        visit_each(_A_action, _A_target.bound2_);
        visit_each(_A_action, _A_target.bound3_);
        visit_each(_A_action, _A_target.bound4_);
        visit_each(_A_action, _A_target.bound5_);
        visit_each(_A_action, _A_target.bound6_);
        visit_each(_A_action, _A_target.bound7_);
    }
    template<int I_location, class T_bound1, class T_functor >
    inline bind_functor< I_location, T_functor, T_bound1 > bind(const T_functor & _A_func, T_bound1 _A_b1)
    {
        return bind_functor< I_location, T_functor, T_bound1 >(_A_func, _A_b1);
    }
    template<class T_type1, class T_functor >
    inline bind_functor< -1, T_functor, T_type1 > bind(const T_functor & _A_func, T_type1 _A_b1)
    {
        return bind_functor< -1, T_functor, T_type1 >(_A_func, _A_b1);
    }
    template<class T_type1, class T_type2, class T_functor >
    inline bind_functor< -1, T_functor, T_type1, T_type2 > bind(const T_functor & _A_func, T_type1 _A_b1, T_type2 _A_b2)
    {
        return bind_functor< -1, T_functor, T_type1, T_type2 >(_A_func, _A_b1, _A_b2);
    }
    template<class T_type1, class T_type2, class T_type3, class T_functor >
    inline bind_functor< -1, T_functor, T_type1, T_type2, T_type3 > bind(const T_functor & _A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3)
    {
        return bind_functor< -1, T_functor, T_type1, T_type2, T_type3 >(_A_func, _A_b1, _A_b2, _A_b3);
    }
    template<class T_type1, class T_type2, class T_type3, class T_type4, class T_functor >
    inline bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4 > bind(const T_functor & _A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4)
    {
        return bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4 >(_A_func, _A_b1, _A_b2, _A_b3, _A_b4);
    }
    template<class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_functor >
    inline bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 > bind(const T_functor & _A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5)
    {
        return bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 >(_A_func, _A_b1, _A_b2, _A_b3, _A_b4, _A_b5);
    }
    template<class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6, class T_functor >
    inline bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 > bind(const T_functor & _A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6)
    {
        return bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 >(_A_func, _A_b1, _A_b2, _A_b3, _A_b4, _A_b5, _A_b6);
    }
    template<class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6, class T_type7, class T_functor >
    inline bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 > bind(const T_functor & _A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6, T_type7 _A_b7)
    {
        return bind_functor< -1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 >(_A_func, _A_b1, _A_b2, _A_b3, _A_b4, _A_b5, _A_b6, _A_b7);
    }
}
namespace sigc {
    template<class T_return, class T_functor >
    struct bind_return_functor : public adapts< T_functor >
    {
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename unwrap_reference< T_return >::type type;
            };
            typedef typename unwrap_reference< T_return >::type result_type;
            typename unwrap_reference< T_return >::type operator ()();
            template<class T_arg1 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1);
                return ret_value_.invoke();
            }
            template<class T_arg1, class T_arg2 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2);
                return ret_value_.invoke();
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3);
                return ret_value_.invoke();
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4);
                return ret_value_.invoke();
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                return ret_value_.invoke();
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                return ret_value_.invoke();
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            inline typename unwrap_reference< T_return >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                return ret_value_.invoke();
            }
            bind_return_functor(typename type_trait< T_functor >::take _A_functor, typename type_trait< T_return >::take _A_ret_value)
                : adapts< T_functor >(_A_functor), ret_value_(_A_ret_value) 
            {
            }
            bound_argument< T_return > ret_value_;
    };
    template<class T_return, class T_functor >
    typename unwrap_reference< T_return >::type bind_return_functor< T_return, T_functor >::operator ()()
    {
        this->functor_();
        return ret_value_.invoke();
    }
    template<class T_action, class T_return, class T_functor >
    void visit_each(const T_action & _A_action, const bind_return_functor< T_return, T_functor > & _A_target)
    {
        visit_each(_A_action, _A_target.ret_value_);
        visit_each(_A_action, _A_target.functor_);
    }
    template<class T_return, class T_functor >
    inline bind_return_functor< T_return, T_functor > bind_return(const T_functor & _A_functor, T_return _A_ret_value)
    {
        return bind_return_functor< T_return, T_functor >(_A_functor, _A_ret_value);
    }
}
namespace sigc {
    template<int I_location, class T_functor >
    struct hide_functor;
    template<class T_functor >
    struct hide_functor< -1, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1)
            {
                return this->functor_();
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 0, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1)
            {
                return this->functor_();
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1, T_arg2 _A_a2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg2 >::pass >(_A_a2);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a2, _A_a3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a2, _A_a3, _A_a4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a2, _A_a3, _A_a4, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 1, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a3, _A_a4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a3, _A_a4, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 2, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a4, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a4, _A_a5, _A_a6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 3, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a5, _A_a6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a5, _A_a6, _A_a7);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 4, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a6, _A_a7);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 5, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a7);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_functor >
    struct hide_functor< 6, T_functor > : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7)
            {
                return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            explicit hide_functor(const T_functor & _A_func)
                : adapts< T_functor >(_A_func) 
            {
            }
    };
    template<class T_action, int I_location, class T_functor >
    void visit_each(const T_action & _A_action, const hide_functor< I_location, T_functor > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
    }
    template<int I_location, class T_functor >
    inline hide_functor< I_location, T_functor > hide(const T_functor & _A_func)
    {
        return hide_functor< I_location, T_functor >(_A_func);
    }
    template<class T_functor >
    inline hide_functor< -1, T_functor > hide(const T_functor & _A_func)
    {
        return hide_functor< -1, T_functor >(_A_func);
    }
}
namespace sigc {
    template<class T_return, class T_functor >
    struct retype_return_functor : public adapts< T_functor >
    {
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef T_return type;
            };
            typedef T_return result_type;
            T_return operator ()();
            template<class T_arg1 >
            inline T_return operator ()(T_arg1 _A_a1)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1));
            }
            template<class T_arg1, class T_arg2 >
            inline T_return operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            inline T_return operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            inline T_return operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            inline T_return operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            inline T_return operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            inline T_return operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return T_return(this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7));
            }
            retype_return_functor()
            {
            }
            explicit retype_return_functor(typename type_trait< T_functor >::take _A_functor)
                : adapts< T_functor >(_A_functor) 
            {
            }
    };
    template<class T_return, class T_functor >
    T_return retype_return_functor< T_return, T_functor >::operator ()()
    {
        return T_return(this->functor_());
    }
    template<class T_functor >
    struct retype_return_functor< void, T_functor > : public adapts< T_functor >
    {
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef void type;
            };
            typedef void result_type;
            void operator ()();
            template<class T_arg1 >
            inline void operator ()(T_arg1 _A_a1)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1);
            }
            template<class T_arg1, class T_arg2 >
            inline void operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2);
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            inline void operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            inline void operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            inline void operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            inline void operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            inline void operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
            }
            retype_return_functor()
            {
            }
            retype_return_functor(typename type_trait< T_functor >::take _A_functor)
                : adapts< T_functor >(_A_functor) 
            {
            }
    };
    template<class T_functor >
    void retype_return_functor< void, T_functor >::operator ()()
    {
        this->functor_();
    }
    template<class T_action, class T_return, class T_functor >
    void visit_each(const T_action & _A_action, const retype_return_functor< T_return, T_functor > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
    }
    template<class T_return, class T_functor >
    inline retype_return_functor< T_return, T_functor > retype_return(const T_functor & _A_functor)
    {
        return retype_return_functor< T_return, T_functor >(_A_functor);
    }
    template<class T_functor >
    inline retype_return_functor< void, T_functor > hide_return(const T_functor & _A_functor)
    {
        return retype_return_functor< void, T_functor >(_A_functor);
    }
}
namespace sigc {
    template<class T_functor, class T_type1 = nil, class T_type2 = nil, class T_type3 = nil, class T_type4 = nil, class T_type5 = nil, class T_type6 = nil, class T_type7 = nil >
    struct retype_functor : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef typename adapts< T_functor >::result_type result_type;
            result_type operator ()();
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_a1)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take >(static_cast<T_type1 >(_A_a1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take, typename type_trait< T_type2 >::take >(static_cast<T_type1 >(_A_a1), static_cast<T_type2 >(_A_a2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take, typename type_trait< T_type2 >::take, typename type_trait< T_type3 >::take >(static_cast<T_type1 >(_A_a1), static_cast<T_type2 >(_A_a2), static_cast<T_type3 >(_A_a3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take, typename type_trait< T_type2 >::take, typename type_trait< T_type3 >::take, typename type_trait< T_type4 >::take >(static_cast<T_type1 >(_A_a1), static_cast<T_type2 >(_A_a2), static_cast<T_type3 >(_A_a3), static_cast<T_type4 >(_A_a4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take, typename type_trait< T_type2 >::take, typename type_trait< T_type3 >::take, typename type_trait< T_type4 >::take, typename type_trait< T_type5 >::take >(static_cast<T_type1 >(_A_a1), static_cast<T_type2 >(_A_a2), static_cast<T_type3 >(_A_a3), static_cast<T_type4 >(_A_a4), static_cast<T_type5 >(_A_a5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take, typename type_trait< T_type2 >::take, typename type_trait< T_type3 >::take, typename type_trait< T_type4 >::take, typename type_trait< T_type5 >::take, typename type_trait< T_type6 >::take >(static_cast<T_type1 >(_A_a1), static_cast<T_type2 >(_A_a2), static_cast<T_type3 >(_A_a3), static_cast<T_type4 >(_A_a4), static_cast<T_type5 >(_A_a5), static_cast<T_type6 >(_A_a6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename type_trait< T_type1 >::take, typename type_trait< T_type2 >::take, typename type_trait< T_type3 >::take, typename type_trait< T_type4 >::take, typename type_trait< T_type5 >::take, typename type_trait< T_type6 >::take, typename type_trait< T_type7 >::take >(static_cast<T_type1 >(_A_a1), static_cast<T_type2 >(_A_a2), static_cast<T_type3 >(_A_a3), static_cast<T_type4 >(_A_a4), static_cast<T_type5 >(_A_a5), static_cast<T_type6 >(_A_a6), static_cast<T_type7 >(_A_a7));
            }
            explicit retype_functor(typename type_trait< T_functor >::take _A_functor)
                : adapts< T_functor >(_A_functor) 
            {
            }
    };
    template<class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6, class T_type7 >
    typename retype_functor< T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 >::result_type retype_functor< T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 >::operator ()()
    {
        return this->functor_();
    }
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3, class T_type4, class T_type5, class T_type6, class T_type7 >
    void visit_each(const T_action & _A_action, const retype_functor< T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
    }
    template<class T_return, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< slot< T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return >
    inline retype_functor< pointer_functor0< T_return > > retype(const pointer_functor0< T_return > & _A_functor)
    {
        return retype_functor< pointer_functor0< T_return > >(_A_functor);
    }
    template<class T_arg1, class T_return >
    inline retype_functor< pointer_functor1< T_arg1, T_return >, T_arg1 > retype(const pointer_functor1< T_arg1, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor1< T_arg1, T_return >, T_arg1 >(_A_functor);
    }
    template<class T_arg1, class T_arg2, class T_return >
    inline retype_functor< pointer_functor2< T_arg1, T_arg2, T_return >, T_arg1, T_arg2 > retype(const pointer_functor2< T_arg1, T_arg2, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor2< T_arg1, T_arg2, T_return >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_return >
    inline retype_functor< pointer_functor3< T_arg1, T_arg2, T_arg3, T_return >, T_arg1, T_arg2, T_arg3 > retype(const pointer_functor3< T_arg1, T_arg2, T_arg3, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor3< T_arg1, T_arg2, T_arg3, T_return >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_return >
    inline retype_functor< pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor4< T_arg1, T_arg2, T_arg3, T_arg4, T_return >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_return >
    inline retype_functor< pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor5< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_return >
    inline retype_functor< pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor6< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7, class T_return >
    inline retype_functor< pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return > & _A_functor)
    {
        return retype_functor< pointer_functor7< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< mem_functor0< T_return, T_obj > > retype(const mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< const_mem_functor0< T_return, T_obj > > retype(const const_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< const_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< const_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const const_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< const_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< volatile_mem_functor0< T_return, T_obj > > retype(const volatile_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< volatile_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const volatile_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< const_volatile_mem_functor0< T_return, T_obj > > retype(const const_volatile_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< const_volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const const_volatile_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< bound_mem_functor0< T_return, T_obj > > retype(const bound_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< bound_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< bound_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const bound_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< bound_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< bound_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< bound_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< bound_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< bound_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< bound_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< bound_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< bound_const_mem_functor0< T_return, T_obj > > retype(const bound_const_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< bound_const_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const bound_const_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< bound_const_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< bound_volatile_mem_functor0< T_return, T_obj > > retype(const bound_volatile_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< bound_volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const bound_volatile_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< bound_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
    template<class T_return, class T_obj >
    inline retype_functor< bound_const_volatile_mem_functor0< T_return, T_obj > > retype(const bound_const_volatile_mem_functor0< T_return, T_obj > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor0< T_return, T_obj > >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1 >
    inline retype_functor< bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 > retype(const bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor1< T_return, T_obj, T_arg1 >, T_arg1 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2 >
    inline retype_functor< bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 > retype(const bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor2< T_return, T_obj, T_arg1, T_arg2 >, T_arg1, T_arg2 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3 >
    inline retype_functor< bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 > retype(const bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor3< T_return, T_obj, T_arg1, T_arg2, T_arg3 >, T_arg1, T_arg2, T_arg3 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
    inline retype_functor< bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 > retype(const bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor4< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 >, T_arg1, T_arg2, T_arg3, T_arg4 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
    inline retype_functor< bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > retype(const bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor5< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
    inline retype_functor< bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > retype(const bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor6< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >(_A_functor);
    }
    template<class T_return, class T_obj, class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
    inline retype_functor< bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > retype(const bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 > & _A_functor)
    {
        return retype_functor< bound_const_volatile_mem_functor7< T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >(_A_functor);
    }
}
namespace sigc {
    template<class T_setter, class T_getter >
    struct compose1_functor : public adapts< T_setter >
    {
            typedef typename adapts< T_setter >::adaptor_type adaptor_type;
            typedef T_setter setter_type;
            typedef T_getter getter_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >::type type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()();
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_a1)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1 >::type >(get_(_A_a1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2 >::type >(get_(_A_a1, _A_a2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2, T_arg3 >::type >(get_(_A_a1, _A_a2, _A_a3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2, T_arg3, T_arg4 >::type >(get_(_A_a1, _A_a2, _A_a3, _A_a4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type >(get_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type >(get_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >(get_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7));
            }
            compose1_functor(const T_setter & _A_setter, const T_getter & _A_getter)
                : adapts< T_setter >(_A_setter), get_(_A_getter) 
            {
            }
            getter_type get_;
    };
    template<class T_setter, class T_getter >
    typename compose1_functor< T_setter, T_getter >::result_type compose1_functor< T_setter, T_getter >::operator ()()
    {
        return this->functor_(get_());
    }
    template<class T_setter, class T_getter1, class T_getter2 >
    struct compose2_functor : public adapts< T_setter >
    {
            typedef typename adapts< T_setter >::adaptor_type adaptor_type;
            typedef T_setter setter_type;
            typedef T_getter1 getter1_type;
            typedef T_getter2 getter2_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >::type result_type;
            };
            typedef typename adaptor_type::result_type result_type;
            result_type operator ()();
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_a1)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1 >::type >(get1_(_A_a1), get2_(_A_a1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2 >::type >(get1_(_A_a1, _A_a2), get2_(_A_a1, _A_a2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2, T_arg3 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2, T_arg3 >::type >(get1_(_A_a1, _A_a2, _A_a3), get2_(_A_a1, _A_a2, _A_a3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2, T_arg3, T_arg4 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2, T_arg3, T_arg4 >::type >(get1_(_A_a1, _A_a2, _A_a3, _A_a4), get2_(_A_a1, _A_a2, _A_a3, _A_a4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type >(get1_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5), get2_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type >(get1_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6), get2_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                return this->functor_.template operator ()<typename sigc::deduce_result_type< T_getter1, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type, typename sigc::deduce_result_type< T_getter2, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >(get1_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7), get2_(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7));
            }
            compose2_functor(const T_setter & _A_setter, const T_getter1 & _A_getter1, const T_getter2 & _A_getter2)
                : adapts< T_setter >(_A_setter), get1_(_A_getter1), get2_(_A_getter2) 
            {
            }
            getter1_type get1_;
            getter2_type get2_;
    };
    template<class T_setter, class T_getter1, class T_getter2 >
    typename compose2_functor< T_setter, T_getter1, T_getter2 >::result_type compose2_functor< T_setter, T_getter1, T_getter2 >::operator ()()
    {
        return this->functor_(get1_(), get2_());
    }
    template<class T_action, class T_setter, class T_getter >
    void visit_each(const T_action & _A_action, const compose1_functor< T_setter, T_getter > & _A_target)
    {
        typedef compose1_functor< T_setter, T_getter > type_functor;
        typedef typename type_functor::setter_type type_functor1;
        visit_each< T_action, type_functor1 >(_A_action, _A_target.functor_);
        typedef typename type_functor::getter_type type_functor_getter;
        visit_each< T_action, type_functor_getter >(_A_action, _A_target.get_);
    }
    template<class T_action, class T_setter, class T_getter1, class T_getter2 >
    void visit_each(const T_action & _A_action, const compose2_functor< T_setter, T_getter1, T_getter2 > & _A_target)
    {
        typedef compose2_functor< T_setter, T_getter1, T_getter2 > type_functor;
        typedef typename type_functor::setter_type type_functor1;
        visit_each< T_action, type_functor1 >(_A_action, _A_target.functor_);
        typedef typename type_functor::getter1_type type_functor_getter1;
        visit_each< T_action, type_functor_getter1 >(_A_action, _A_target.get1_);
        typedef typename type_functor::getter2_type type_functor_getter2;
        visit_each< T_action, type_functor_getter2 >(_A_action, _A_target.get2_);
    }
    template<class T_setter, class T_getter >
    inline compose1_functor< T_setter, T_getter > compose(const T_setter & _A_setter, const T_getter & _A_getter)
    {
        return compose1_functor< T_setter, T_getter >(_A_setter, _A_getter);
    }
    template<class T_setter, class T_getter1, class T_getter2 >
    inline compose2_functor< T_setter, T_getter1, T_getter2 > compose(const T_setter & _A_setter, const T_getter1 & _A_getter1, const T_getter2 & _A_getter2)
    {
        return compose2_functor< T_setter, T_getter1, T_getter2 >(_A_setter, _A_getter1, _A_getter2);
    }
}
namespace sigc {
    template<class T_functor, class T_catcher, class T_return = typename adapts< T_functor >::result_type >
    struct exception_catch_functor : public adapts< T_functor >
    {
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename adaptor_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
            };
            typedef T_return result_type;
            result_type operator ()();
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_a1)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            exception_catch_functor(const T_functor & _A_func, const T_catcher & _A_catcher)
                : adapts< T_functor >(_A_func), catcher_(_A_catcher) 
            {
            }
            T_catcher catcher_;
    };
    template<class T_functor, class T_catcher, class T_return >
    typename exception_catch_functor< T_functor, T_catcher, T_return >::result_type exception_catch_functor< T_functor, T_catcher, T_return >::operator ()()
    {
        try
        {
            return this->functor_();
        }
        catch (...)
        {
            return catcher_();
        }
    }
    template<class T_functor, class T_catcher >
    struct exception_catch_functor< T_functor, T_catcher, void > : public adapts< T_functor >
    {
            typedef void result_type;
            typedef typename adapts< T_functor >::adaptor_type adaptor_type;
            void operator ()();
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_a1)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_a1);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_a1, _A_a2);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_a1, _A_a2, _A_a3);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)
            {
                try
                {
                    return this->functor_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_a1, _A_a2, _A_a3, _A_a4, _A_a5, _A_a6, _A_a7);
                }
                catch (...)
                {
                    return catcher_();
                }
            }
            exception_catch_functor()
            {
            }
            exception_catch_functor(const T_functor & _A_func, const T_catcher & _A_catcher)
                : adapts< T_functor >(_A_func), catcher_(_A_catcher) 
            {
            }
            ~exception_catch_functor()
            {
            }
            T_catcher catcher_;
    };
    template<class T_functor, class T_catcher >
    void exception_catch_functor< T_functor, T_catcher, void >::operator ()()
    {
        try
        {
            this->functor_();
        }
        catch (...)
        {
            this->catcher_();
        }
    }
    template<class T_action, class T_functor, class T_catcher, class T_return >
    void visit_each(const T_action & _A_action, const exception_catch_functor< T_functor, T_catcher, T_return > & _A_target)
    {
        visit_each(_A_action, _A_target.functor_);
        visit_each(_A_action, _A_target.catcher_);
    }
    template<class T_functor, class T_catcher >
    inline exception_catch_functor< T_functor, T_catcher > exception_catch(const T_functor & _A_func, const T_catcher & _A_catcher)
    {
        return exception_catch_functor< T_functor, T_catcher >(_A_func, _A_catcher);
    }
}
namespace sigc {
    struct lambda_base : public adaptor_base
    {
    };
    template<class T_type >
    struct lambda;
    namespace internal {
        template<class T_type, bool I_islambda = is_base_and_derived< lambda_base, T_type >::value >
        struct lambda_core;
        template<class T_type >
        struct lambda_core< T_type, true > : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef typename T_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type type;
                };
                typedef typename T_type::result_type result_type;
                typedef T_type lambda_type;
                result_type operator ()() const;
                template<class T_arg1 >
                typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1);
                }
                template<class T_arg1, class T_arg2 >
                typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2);
                }
                template<class T_arg1, class T_arg2, class T_arg3 >
                typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3);
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
                typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4);
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5);
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6);
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
                {
                    return value_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7);
                }
                lambda_core()
                {
                }
                explicit lambda_core(const T_type & v)
                    : value_(v) 
                {
                }
                T_type value_;
        };
        template<class T_type >
        typename lambda_core< T_type, true >::result_type lambda_core< T_type, true >::operator ()() const
        {
            return value_();
        }
        template<class T_type >
        struct lambda_core< T_type, false > : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_type type;
                };
                typedef T_type result_type;
                typedef lambda< T_type > lambda_type;
                result_type operator ()() const;
                template<class T_arg1 >
                result_type operator ()(T_arg1) const
                {
                    return value_;
                }
                template<class T_arg1, class T_arg2 >
                result_type operator ()(T_arg1, T_arg2) const
                {
                    return value_;
                }
                template<class T_arg1, class T_arg2, class T_arg3 >
                result_type operator ()(T_arg1, T_arg2, T_arg3) const
                {
                    return value_;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
                result_type operator ()(T_arg1, T_arg2, T_arg3, T_arg4) const
                {
                    return value_;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                result_type operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const
                {
                    return value_;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                result_type operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const
                {
                    return value_;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                result_type operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const
                {
                    return value_;
                }
                explicit lambda_core(typename type_trait< T_type >::take v)
                    : value_(v) 
                {
                }
                T_type value_;
        };
        template<class T_type >
        typename lambda_core< T_type, false >::result_type lambda_core< T_type, false >::operator ()() const
        {
            return value_;
        }
    }
    template<class T_action, class T_functor, bool I_islambda >
    void visit_each(const T_action & _A_action, const internal::lambda_core< T_functor, I_islambda > & _A_target)
    {
        visit_each(_A_action, _A_target.value_);
    }
    template<class T_type >
    struct other;
    struct subscript;
    struct assign;
    template<class T_action, class T_type1, class T_type2 >
    struct lambda_operator;
    template<class T_type >
    struct unwrap_lambda_type;
    template<class T_type >
    struct lambda : public internal::lambda_core< T_type >
    {
            typedef lambda< T_type > self;
            lambda()
            {
            }
            lambda(typename type_trait< T_type >::take v)
                : internal::lambda_core< T_type >(v) 
            {
            }
            template<class T_arg >
            lambda< lambda_operator< other< subscript >, self, typename unwrap_lambda_type< T_arg >::type > > operator [](const T_arg & a) const
            {
                typedef lambda_operator< other< subscript >, self, typename unwrap_lambda_type< T_arg >::type > lambda_operator_type;
                return lambda< lambda_operator_type >(lambda_operator_type(this->value_, unwrap_lambda_value(a)));
            }
            template<class T_arg >
            lambda< lambda_operator< other< assign >, self, typename unwrap_lambda_type< T_arg >::type > > operator =(const T_arg & a) const
            {
                typedef lambda_operator< other< assign >, self, typename unwrap_lambda_type< T_arg >::type > lambda_operator_type;
                return lambda< lambda_operator_type >(lambda_operator_type(this->value_, unwrap_lambda_value(a)));
            }
    };
    template<class T_action, class T_type >
    void visit_each(const T_action & _A_action, const lambda< T_type > & _A_target)
    {
        visit_each(_A_action, _A_target.value_);
    }
    template<class T_type >
    lambda< T_type & > var(T_type & v)
    {
        return lambda< T_type & >(v);
    }
    template<class T_type >
    lambda< const T_type & > var(const T_type & v)
    {
        return lambda< const T_type & >(v);
    }
    template<class T_type >
    struct unwrap_lambda_type
    {
            typedef typename unwrap_reference< T_type >::type type;
    };
    template<class T_type >
    struct unwrap_lambda_type< lambda< T_type > >
    {
            typedef T_type type;
    };
    template<class T_type >
    T_type & unwrap_lambda_value(T_type & a)
    {
        return a;
    }
    template<class T_type >
    const T_type & unwrap_lambda_value(const T_type & a)
    {
        return a;
    }
    template<class T_type >
    const T_type & unwrap_lambda_value(const lambda< T_type > & a)
    {
        return a.value_;
    }
}
namespace sigc {
    namespace internal {
        struct lambda_select1 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg1 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1 >
                T_arg1 operator ()(T_arg1 _A_1) const
                {
                    return _A_1;
                }
                template<class T_arg1, class T_arg2 >
                T_arg1 operator ()(T_arg1 _A_1, T_arg2) const
                {
                    return _A_1;
                }
                template<class T_arg1, class T_arg2, class T_arg3 >
                T_arg1 operator ()(T_arg1 _A_1, T_arg2, T_arg3) const
                {
                    return _A_1;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
                T_arg1 operator ()(T_arg1 _A_1, T_arg2, T_arg3, T_arg4) const
                {
                    return _A_1;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                T_arg1 operator ()(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5) const
                {
                    return _A_1;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                T_arg1 operator ()(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const
                {
                    return _A_1;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg1 operator ()(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const
                {
                    return _A_1;
                }
        };
        struct lambda_select2 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg2 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1, class T_arg2 >
                T_arg2 operator ()(T_arg1, T_arg2 _A_2) const
                {
                    return _A_2;
                }
                template<class T_arg1, class T_arg2, class T_arg3 >
                T_arg2 operator ()(T_arg1, T_arg2 _A_2, T_arg3) const
                {
                    return _A_2;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
                T_arg2 operator ()(T_arg1, T_arg2 _A_2, T_arg3, T_arg4) const
                {
                    return _A_2;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                T_arg2 operator ()(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5) const
                {
                    return _A_2;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                T_arg2 operator ()(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5, T_arg6) const
                {
                    return _A_2;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg2 operator ()(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const
                {
                    return _A_2;
                }
        };
        struct lambda_select3 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg3 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1, class T_arg2, class T_arg3 >
                T_arg3 operator ()(T_arg1, T_arg2, T_arg3 _A_3) const
                {
                    return _A_3;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
                T_arg3 operator ()(T_arg1, T_arg2, T_arg3 _A_3, T_arg4) const
                {
                    return _A_3;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                T_arg3 operator ()(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5) const
                {
                    return _A_3;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                T_arg3 operator ()(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5, T_arg6) const
                {
                    return _A_3;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg3 operator ()(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5, T_arg6, T_arg7) const
                {
                    return _A_3;
                }
        };
        struct lambda_select4 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg4 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
                T_arg4 operator ()(T_arg1, T_arg2, T_arg3, T_arg4 _A_4) const
                {
                    return _A_4;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                T_arg4 operator ()(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5) const
                {
                    return _A_4;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                T_arg4 operator ()(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5, T_arg6) const
                {
                    return _A_4;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg4 operator ()(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5, T_arg6, T_arg7) const
                {
                    return _A_4;
                }
        };
        struct lambda_select5 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg5 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
                T_arg5 operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5) const
                {
                    return _A_5;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                T_arg5 operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5, T_arg6) const
                {
                    return _A_5;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg5 operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5, T_arg6, T_arg7) const
                {
                    return _A_5;
                }
        };
        struct lambda_select6 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg6 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
                T_arg6 operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 _A_6) const
                {
                    return _A_6;
                }
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg6 operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 _A_6, T_arg7) const
                {
                    return _A_6;
                }
        };
        struct lambda_select7 : public lambda_base
        {
                template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
                struct deduce_result_type
                {
                        typedef T_arg7 type;
                };
                typedef void result_type;
                void operator ()() const;
                template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
                T_arg7 operator ()(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 _A_7) const
                {
                    return _A_7;
                }
        };
    }
    extern const lambda< internal::lambda_select1 > _1;
    extern const lambda< internal::lambda_select2 > _2;
    extern const lambda< internal::lambda_select3 > _3;
    extern const lambda< internal::lambda_select4 > _4;
    extern const lambda< internal::lambda_select5 > _5;
    extern const lambda< internal::lambda_select6 > _6;
    extern const lambda< internal::lambda_select7 > _7;
}
namespace sigc {
    template<class T_type >
    struct dereference_trait
    {
            typedef void type;
    };
    template<class T_type >
    struct dereference_trait< T_type * >
    {
            typedef T_type type;
    };
    template<class T_type >
    struct dereference_trait< const T_type * >
    {
            typedef const T_type type;
    };
    template<class T_type >
    struct dereference_trait< T_type *& >
    {
            typedef T_type type;
    };
    template<class T_type >
    struct dereference_trait< const T_type *& >
    {
            typedef const T_type type;
    };
    template<class T_type >
    struct dereference_trait< T_type *const& >
    {
            typedef T_type type;
    };
    template<class T_type >
    struct dereference_trait< const T_type *const& >
    {
            typedef const T_type type;
    };
    template<class T_type >
    struct arithmetic
    {
    };
    template<class T_type >
    struct bitwise
    {
    };
    template<class T_type >
    struct logical
    {
    };
    template<class T_type >
    struct relational
    {
    };
    template<class T_type >
    struct arithmetic_assign
    {
    };
    template<class T_type >
    struct bitwise_assign
    {
    };
    template<class T_type >
    struct other
    {
    };
    template<class T_type >
    struct unary_arithmetic
    {
    };
    template<class T_type >
    struct unary_bitwise
    {
    };
    template<class T_type >
    struct unary_logical
    {
    };
    template<class T_type >
    struct unary_other
    {
    };
    template<class T_type >
    struct cast_
    {
    };
    struct plus
    {
    };
    struct minus
    {
    };
    struct multiplies
    {
    };
    struct divides
    {
    };
    struct modulus
    {
    };
    struct leftshift
    {
    };
    struct rightshift
    {
    };
    struct and_
    {
    };
    struct or_
    {
    };
    struct xor_
    {
    };
    struct less
    {
    };
    struct greater
    {
    };
    struct less_equal
    {
    };
    struct greater_equal
    {
    };
    struct equal_to
    {
    };
    struct not_equal_to
    {
    };
    struct subscript
    {
    };
    struct assign
    {
    };
    struct pre_increment
    {
    };
    struct pre_decrement
    {
    };
    struct negate
    {
    };
    struct not_
    {
    };
    struct address
    {
    };
    struct dereference
    {
    };
    struct reinterpret_
    {
    };
    struct static_
    {
    };
    struct dynamic_
    {
    };
    template<class T_action, class T_test1, class T_test2 >
    struct lambda_action_deduce_result_type
    {
            typedef typename type_trait< T_test1 >::type type;
    };
    template<class T_action, class T_test1, class T_test2 >
    struct lambda_action_deduce_result_type< logical< T_action >, T_test1, T_test2 >
    {
            typedef bool type;
    };
    template<class T_action, class T_test1, class T_test2 >
    struct lambda_action_deduce_result_type< relational< T_action >, T_test1, T_test2 >
    {
            typedef bool type;
    };
    template<class T_action, class T_test1, class T_test2 >
    struct lambda_action_deduce_result_type< arithmetic_assign< T_action >, T_test1, T_test2 >
    {
            typedef T_test1 type;
    };
    template<class T_action, class T_test1, class T_test2 >
    struct lambda_action_deduce_result_type< bitwise_assign< T_action >, T_test1, T_test2 >
    {
            typedef T_test1 type;
    };
    template<class T_test1, class T_test2 >
    struct lambda_action_deduce_result_type< other< subscript >, T_test1, T_test2 >
    {
            typedef typename type_trait< typename dereference_trait< T_test1 >::type >::pass type;
    };
    template<class T_action, class T_test >
    struct lambda_action_unary_deduce_result_type
    {
            typedef typename type_trait< T_test >::type type;
    };
    template<class T_action, class T_type, class T_test >
    struct lambda_action_convert_deduce_result_type
    {
            typedef typename type_trait< T_type >::type type;
    };
    template<class T_action, class T_test >
    struct lambda_action_unary_deduce_result_type< unary_logical< T_action >, T_test >
    {
            typedef bool type;
    };
    template<class T_test >
    struct lambda_action_unary_deduce_result_type< unary_other< address >, T_test >
    {
            typedef typename type_trait< T_test >::pointer type;
    };
    template<class T_test >
    struct lambda_action_unary_deduce_result_type< unary_other< dereference >, T_test >
    {
            typedef typename type_trait< typename dereference_trait< T_test >::type >::pass type;
    };
    template<class T_action >
    struct lambda_action
    {
    };
    template<class T_action >
    struct lambda_action_unary
    {
    };
    template<class T_action, class T_type >
    struct lambda_action_convert
    {
    };
    template<>
    struct lambda_action< arithmetic< plus > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic< plus >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 + _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic< minus > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic< minus >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 - _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic< multiplies > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic< multiplies >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 * _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic< divides > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic< divides >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 / _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic< modulus > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic< modulus >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 % _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise< leftshift > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise< leftshift >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 << _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise< rightshift > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise< rightshift >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 >> _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise< and_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise< and_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 & _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise< or_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise< or_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 | _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise< xor_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise< xor_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 ^ _A_2;
            }
    };
    template<>
    struct lambda_action< logical< and_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< logical< and_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 && _A_2;
            }
    };
    template<>
    struct lambda_action< logical< or_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< logical< or_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 || _A_2;
            }
    };
    template<>
    struct lambda_action< relational< less > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< relational< less >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 < _A_2;
            }
    };
    template<>
    struct lambda_action< relational< greater > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< relational< greater >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 > _A_2;
            }
    };
    template<>
    struct lambda_action< relational< less_equal > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< relational< less_equal >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 <= _A_2;
            }
    };
    template<>
    struct lambda_action< relational< greater_equal > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< relational< greater_equal >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 >= _A_2;
            }
    };
    template<>
    struct lambda_action< relational< equal_to > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< relational< equal_to >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 == _A_2;
            }
    };
    template<>
    struct lambda_action< relational< not_equal_to > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< relational< not_equal_to >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 != _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic_assign< plus > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic_assign< plus >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 += _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic_assign< minus > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic_assign< minus >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 -= _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic_assign< multiplies > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic_assign< multiplies >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 *= _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic_assign< divides > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic_assign< divides >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 /= _A_2;
            }
    };
    template<>
    struct lambda_action< arithmetic_assign< modulus > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< arithmetic_assign< modulus >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 %= _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise_assign< leftshift > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise_assign< leftshift >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 <<= _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise_assign< rightshift > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise_assign< rightshift >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 >>= _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise_assign< and_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise_assign< and_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 &= _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise_assign< or_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise_assign< or_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 |= _A_2;
            }
    };
    template<>
    struct lambda_action< bitwise_assign< xor_ > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< bitwise_assign< xor_ >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 ^= _A_2;
            }
    };
    template<>
    struct lambda_action< other< subscript > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< other< subscript >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1[_A_2];
            }
    };
    template<>
    struct lambda_action< other< assign > >
    {
            template<class T_arg1, class T_arg2 >
            static typename lambda_action_deduce_result_type< other< assign >, T_arg1, T_arg2 >::type do_action(T_arg1 _A_1, T_arg2 _A_2)
            {
                return _A_1 = _A_2;
            }
    };
    template<>
    struct lambda_action_unary< unary_arithmetic< pre_increment > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_arithmetic< pre_increment >, T_arg >::type do_action(T_arg _Aa)
            {
                return ++_Aa;
            }
    };
    template<>
    struct lambda_action_unary< unary_arithmetic< pre_decrement > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_arithmetic< pre_decrement >, T_arg >::type do_action(T_arg _Aa)
            {
                return --_Aa;
            }
    };
    template<>
    struct lambda_action_unary< unary_arithmetic< negate > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_arithmetic< negate >, T_arg >::type do_action(T_arg _Aa)
            {
                return -_Aa;
            }
    };
    template<>
    struct lambda_action_unary< unary_bitwise< not_ > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_bitwise< not_ >, T_arg >::type do_action(T_arg _Aa)
            {
                return ~_Aa;
            }
    };
    template<>
    struct lambda_action_unary< unary_logical< not_ > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_logical< not_ >, T_arg >::type do_action(T_arg _Aa)
            {
                return !_Aa;
            }
    };
    template<>
    struct lambda_action_unary< unary_other< address > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_other< address >, T_arg >::type do_action(T_arg _Aa)
            {
                return &_Aa;
            }
    };
    template<>
    struct lambda_action_unary< unary_other< dereference > >
    {
            template<class T_arg >
            static typename lambda_action_unary_deduce_result_type< unary_other< dereference >, T_arg >::type do_action(T_arg _Aa)
            {
                return *_Aa;
            }
    };
    template<class T_type >
    struct lambda_action_convert< cast_< reinterpret_ >, T_type >
    {
            template<class T_arg >
            static typename lambda_action_convert_deduce_result_type< cast_< reinterpret_ >, T_type, T_arg >::type do_action(T_arg _Aa)
            {
                return reinterpret_cast<T_type >(_Aa);
            }
    };
    template<class T_type >
    struct lambda_action_convert< cast_< static_ >, T_type >
    {
            template<class T_arg >
            static typename lambda_action_convert_deduce_result_type< cast_< static_ >, T_type, T_arg >::type do_action(T_arg _Aa)
            {
                return static_cast<T_type >(_Aa);
            }
    };
    template<class T_type >
    struct lambda_action_convert< cast_< dynamic_ >, T_type >
    {
            template<class T_arg >
            static typename lambda_action_convert_deduce_result_type< cast_< dynamic_ >, T_type, T_arg >::type do_action(T_arg _Aa)
            {
                return dynamic_cast<T_type >(_Aa);
            }
    };
    template<class T_action, class T_type1, class T_type2 >
    struct lambda_operator : public lambda_base
    {
            typedef typename lambda< T_type1 >::lambda_type arg1_type;
            typedef typename lambda< T_type2 >::lambda_type arg2_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename arg1_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type left_type;
                    typedef typename arg2_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type right_type;
                    typedef typename lambda_action_deduce_result_type< T_action, left_type, right_type >::type type;
            };
            typedef typename lambda_action_deduce_result_type< T_action, typename arg1_type::result_type, typename arg2_type::result_type >::type result_type;
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1), arg2_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2), arg2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3), arg2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4), arg2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5), arg2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6), arg2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
            {
                return lambda_action< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::left_type, typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::right_type >(arg1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7), arg2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7));
            }
            lambda_operator(typename type_trait< T_type1 >::take a1, typename type_trait< T_type2 >::take a2)
                : arg1_(a1), arg2_(a2) 
            {
            }
            arg1_type arg1_;
            arg2_type arg2_;
    };
    template<class T_action, class T_type1, class T_type2 >
    typename lambda_operator< T_action, T_type1, T_type2 >::result_type lambda_operator< T_action, T_type1, T_type2 >::operator ()() const
    {
        return lambda_action< T_action >::template do_action< typename arg1_type::result_type, typename arg2_type::result_type >(arg1_(), arg2_());
    }
    template<class T_action, class T_lambda_action, class T_arg1, class T_arg2 >
    void visit_each(const T_action & _A_action, const lambda_operator< T_lambda_action, T_arg1, T_arg2 > & _A_target)
    {
        visit_each(_A_action, _A_target.arg1_);
        visit_each(_A_action, _A_target.arg2_);
    }
    template<class T_action, class T_type >
    struct lambda_operator_unary : public lambda_base
    {
            typedef typename lambda< T_type >::lambda_type arg_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename arg_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type operand_type;
                    typedef typename lambda_action_unary_deduce_result_type< T_action, operand_type >::type type;
            };
            typedef typename lambda_action_unary_deduce_result_type< T_action, typename arg_type::result_type >::type result_type;
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
            {
                return lambda_action_unary< T_action >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7));
            }
            lambda_operator_unary(typename type_trait< T_type >::take a)
                : arg_(a) 
            {
            }
            arg_type arg_;
    };
    template<class T_action, class T_type >
    typename lambda_operator_unary< T_action, T_type >::result_type lambda_operator_unary< T_action, T_type >::operator ()() const
    {
        return lambda_action_unary< T_action >::template do_action< typename arg_type::result_type >(arg_());
    }
    template<class T_action, class T_lambda_action, class T_arg >
    void visit_each(const T_action & _A_action, const lambda_operator_unary< T_lambda_action, T_arg > & _A_target)
    {
        visit_each(_A_action, _A_target.arg_);
    }
    template<class T_action, class T_type, class T_arg >
    struct lambda_operator_convert : public lambda_base
    {
            typedef typename lambda< T_arg >::lambda_type arg_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename arg_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type operand_type;
                    typedef typename lambda_action_convert_deduce_result_type< T_action, T_type, operand_type >::type type;
            };
            typedef typename lambda_action_convert_deduce_result_type< T_action, T_type, typename arg_type::result_type >::type result_type;
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
            {
                return lambda_action_convert< T_action, T_type >::template do_action< typename deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::operand_type >(arg_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7));
            }
            lambda_operator_convert(typename type_trait< T_arg >::take a)
                : arg_(a) 
            {
            }
            arg_type arg_;
    };
    template<class T_action, class T_type, class T_arg >
    typename lambda_operator_convert< T_action, T_type, T_arg >::result_type lambda_operator_convert< T_action, T_type, T_arg >::operator ()() const
    {
        return lambda_action_convert< T_action, T_type >::template do_action< typename arg_type::result_type >(arg_());
    }
    template<class T_action, class T_lambda_action, class T_type, class T_arg >
    void visit_each(const T_action & _A_action, const lambda_operator_convert< T_lambda_action, T_type, T_arg > & _A_target)
    {
        visit_each(_A_action, _A_target.arg_);
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< plus >, T_arg1, T_arg2 > > operator +(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< plus >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< plus >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator +(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic< plus >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< plus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator +(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< plus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< minus >, T_arg1, T_arg2 > > operator -(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< minus >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< minus >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator -(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic< minus >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< minus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator -(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< minus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< multiplies >, T_arg1, T_arg2 > > operator *(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< multiplies >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< multiplies >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator *(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic< multiplies >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< multiplies >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator *(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< multiplies >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< divides >, T_arg1, T_arg2 > > operator /(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< divides >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< divides >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator /(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic< divides >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< divides >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator /(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< divides >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< modulus >, T_arg1, T_arg2 > > operator %(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< modulus >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< modulus >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator %(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic< modulus >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic< modulus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator %(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic< modulus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< leftshift >, T_arg1, T_arg2 > > operator <<(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< leftshift >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< leftshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator <<(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise< leftshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< leftshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator <<(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< leftshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< rightshift >, T_arg1, T_arg2 > > operator >>(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< rightshift >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< rightshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator >>(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise< rightshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< rightshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator >>(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< rightshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< and_ >, T_arg1, T_arg2 > > operator &(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< and_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< and_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator &(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise< and_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< and_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator &(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< and_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< or_ >, T_arg1, T_arg2 > > operator |(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< or_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< or_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator |(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise< or_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< or_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator |(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< or_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< xor_ >, T_arg1, T_arg2 > > operator ^(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< xor_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< xor_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator ^(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise< xor_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise< xor_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator ^(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise< xor_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< logical< and_ >, T_arg1, T_arg2 > > operator &&(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< logical< and_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< logical< and_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator &&(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< logical< and_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< logical< and_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator &&(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< logical< and_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< logical< or_ >, T_arg1, T_arg2 > > operator ||(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< logical< or_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< logical< or_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator ||(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< logical< or_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< logical< or_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator ||(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< logical< or_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< less >, T_arg1, T_arg2 > > operator <(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< less >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< less >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator <(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< relational< less >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< less >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator <(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< less >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< greater >, T_arg1, T_arg2 > > operator >(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< greater >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< greater >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator >(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< relational< greater >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< greater >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator >(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< greater >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< less_equal >, T_arg1, T_arg2 > > operator <=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< less_equal >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< less_equal >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator <=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< relational< less_equal >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< less_equal >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator <=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< less_equal >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< greater_equal >, T_arg1, T_arg2 > > operator >=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< greater_equal >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< greater_equal >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator >=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< relational< greater_equal >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< greater_equal >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator >=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< greater_equal >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< equal_to >, T_arg1, T_arg2 > > operator ==(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< equal_to >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< equal_to >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator ==(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< relational< equal_to >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< equal_to >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator ==(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< equal_to >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< not_equal_to >, T_arg1, T_arg2 > > operator !=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< not_equal_to >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< not_equal_to >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator !=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< relational< not_equal_to >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< relational< not_equal_to >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator !=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< relational< not_equal_to >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< plus >, T_arg1, T_arg2 > > operator +=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< plus >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< plus >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator +=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic_assign< plus >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< plus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator +=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< plus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< minus >, T_arg1, T_arg2 > > operator -=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< minus >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< minus >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator -=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic_assign< minus >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< minus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator -=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< minus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< multiplies >, T_arg1, T_arg2 > > operator *=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< multiplies >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< multiplies >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator *=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic_assign< multiplies >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< multiplies >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator *=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< multiplies >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< divides >, T_arg1, T_arg2 > > operator /=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< divides >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< divides >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator /=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic_assign< divides >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< divides >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator /=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< divides >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< modulus >, T_arg1, T_arg2 > > operator %=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< modulus >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< modulus >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator %=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< arithmetic_assign< modulus >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< arithmetic_assign< modulus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator %=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< arithmetic_assign< modulus >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< leftshift >, T_arg1, T_arg2 > > operator <<=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< leftshift >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< leftshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator <<=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise_assign< leftshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< leftshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator <<=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< leftshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< rightshift >, T_arg1, T_arg2 > > operator >>=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< rightshift >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< rightshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator >>=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise_assign< rightshift >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< rightshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator >>=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< rightshift >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< and_ >, T_arg1, T_arg2 > > operator &=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< and_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< and_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator &=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise_assign< and_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< and_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator &=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< and_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< or_ >, T_arg1, T_arg2 > > operator |=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< or_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< or_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator |=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise_assign< or_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< or_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator |=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< or_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< xor_ >, T_arg1, T_arg2 > > operator ^=(const lambda< T_arg1 > & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< xor_ >, T_arg1, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2.value_));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< xor_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > > operator ^=(const lambda< T_arg1 > & a1, const T_arg2 & a2)
    {
        typedef lambda_operator< bitwise_assign< xor_ >, T_arg1, typename unwrap_reference< T_arg2 >::type > operator_type;
        return lambda< operator_type >(operator_type(a1.value_, a2));
    }
    template<class T_arg1, class T_arg2 >
    lambda< lambda_operator< bitwise_assign< xor_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > > operator ^=(const T_arg1 & a1, const lambda< T_arg2 > & a2)
    {
        typedef lambda_operator< bitwise_assign< xor_ >, typename unwrap_reference< T_arg1 >::type, T_arg2 > operator_type;
        return lambda< operator_type >(operator_type(a1, a2.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_arithmetic< pre_increment >, T_arg > > operator ++(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_arithmetic< pre_increment >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_arithmetic< pre_decrement >, T_arg > > operator --(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_arithmetic< pre_decrement >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_arithmetic< negate >, T_arg > > operator -(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_arithmetic< negate >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_bitwise< not_ >, T_arg > > operator ~(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_bitwise< not_ >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_logical< not_ >, T_arg > > operator !(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_logical< not_ >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_other< address >, T_arg > > operator &(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_other< address >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_arg >
    lambda< lambda_operator_unary< unary_other< dereference >, T_arg > > operator *(const lambda< T_arg > & a)
    {
        typedef lambda_operator_unary< unary_other< dereference >, T_arg > operator_type;
        return lambda< operator_type >(operator_type(a.value_));
    }
    template<class T_type, class T_arg >
    lambda< lambda_operator_convert< cast_< reinterpret_ >, T_type, typename unwrap_lambda_type< T_arg >::type > > reinterpret_cast_(const T_arg & a)
    {
        typedef lambda_operator_convert< cast_< reinterpret_ >, T_type, typename unwrap_lambda_type< T_arg >::type > operator_type;
        return lambda< operator_type >(operator_type(unwrap_lambda_value(a)));
    }
    template<class T_type, class T_arg >
    lambda< lambda_operator_convert< cast_< static_ >, T_type, typename unwrap_lambda_type< T_arg >::type > > static_cast_(const T_arg & a)
    {
        typedef lambda_operator_convert< cast_< static_ >, T_type, typename unwrap_lambda_type< T_arg >::type > operator_type;
        return lambda< operator_type >(operator_type(unwrap_lambda_value(a)));
    }
    template<class T_type, class T_arg >
    lambda< lambda_operator_convert< cast_< dynamic_ >, T_type, typename unwrap_lambda_type< T_arg >::type > > dynamic_cast_(const T_arg & a)
    {
        typedef lambda_operator_convert< cast_< dynamic_ >, T_type, typename unwrap_lambda_type< T_arg >::type > operator_type;
        return lambda< operator_type >(operator_type(unwrap_lambda_value(a)));
    }
}
namespace sigc {
    template<class T_functor, class T_type1 >
    struct lambda_group1 : public lambda_base
    {
            typedef typename functor_trait< T_functor >::result_type result_type;
            typedef typename lambda< T_type1 >::lambda_type value1_type;
            typedef typename adaptor_trait< T_functor >::adaptor_type functor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename functor_type::template deduce_result_type< typename value1_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type >::type type;
            };
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7));
            }
            lambda_group1(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_1)
                : value1_(_A_1), func_(_A_func) 
            {
            }
            value1_type value1_;
            mutable functor_type func_;
    };
    template<class T_functor, class T_type1 >
    typename lambda_group1< T_functor, T_type1 >::result_type lambda_group1< T_functor, T_type1 >::operator ()() const
    {
        return func_(value1_());
    }
    template<class T_action, class T_functor, class T_type1 >
    void visit_each(const T_action & _A_action, const lambda_group1< T_functor, T_type1 > & _A_target)
    {
        visit_each(_A_action, _A_target.value1_);
        visit_each(_A_action, _A_target.func_);
    }
    template<class T_functor, class T_type1, class T_type2 >
    struct lambda_group2 : public lambda_base
    {
            typedef typename functor_trait< T_functor >::result_type result_type;
            typedef typename lambda< T_type1 >::lambda_type value1_type;
            typedef typename lambda< T_type2 >::lambda_type value2_type;
            typedef typename adaptor_trait< T_functor >::adaptor_type functor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename functor_type::template deduce_result_type< typename value1_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type, typename value2_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type >::type type;
            };
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1 >::type, typename value2_type::template deduce_result_type< T_arg1 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7));
            }
            lambda_group2(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_1, typename type_trait< T_type2 >::take _A_2)
                : value1_(_A_1), value2_(_A_2), func_(_A_func) 
            {
            }
            value1_type value1_;
            value2_type value2_;
            mutable functor_type func_;
    };
    template<class T_functor, class T_type1, class T_type2 >
    typename lambda_group2< T_functor, T_type1, T_type2 >::result_type lambda_group2< T_functor, T_type1, T_type2 >::operator ()() const
    {
        return func_(value1_(), value2_());
    }
    template<class T_action, class T_functor, class T_type1, class T_type2 >
    void visit_each(const T_action & _A_action, const lambda_group2< T_functor, T_type1, T_type2 > & _A_target)
    {
        visit_each(_A_action, _A_target.value1_);
        visit_each(_A_action, _A_target.value2_);
        visit_each(_A_action, _A_target.func_);
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3 >
    struct lambda_group3 : public lambda_base
    {
            typedef typename functor_trait< T_functor >::result_type result_type;
            typedef typename lambda< T_type1 >::lambda_type value1_type;
            typedef typename lambda< T_type2 >::lambda_type value2_type;
            typedef typename lambda< T_type3 >::lambda_type value3_type;
            typedef typename adaptor_trait< T_functor >::adaptor_type functor_type;
            template<class T_arg1 = void, class T_arg2 = void, class T_arg3 = void, class T_arg4 = void, class T_arg5 = void, class T_arg6 = void, class T_arg7 = void >
            struct deduce_result_type
            {
                    typedef typename functor_type::template deduce_result_type< typename value1_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type, typename value2_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type, typename value3_type::template deduce_result_type< typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >::type >::type type;
            };
            result_type operator ()() const;
            template<class T_arg1 >
            typename deduce_result_type< T_arg1 >::type operator ()(T_arg1 _A_1) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1 >::type, typename value2_type::template deduce_result_type< T_arg1 >::type, typename value3_type::template deduce_result_type< T_arg1 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass >(_A_1));
            }
            template<class T_arg1, class T_arg2 >
            typename deduce_result_type< T_arg1, T_arg2 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2 >::type, typename value3_type::template deduce_result_type< T_arg1, T_arg2 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass >(_A_1, _A_2));
            }
            template<class T_arg1, class T_arg2, class T_arg3 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type, typename value3_type::template deduce_result_type< T_arg1, T_arg2, T_arg3 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass >(_A_1, _A_2, _A_3));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type, typename value3_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass >(_A_1, _A_2, _A_3, _A_4));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type, typename value3_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type, typename value3_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6));
            }
            template<class T_arg1, class T_arg2, class T_arg3, class T_arg4, class T_arg5, class T_arg6, class T_arg7 >
            typename deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type operator ()(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const
            {
                return this->func_.template operator ()<typename value1_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type, typename value2_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type, typename value3_type::template deduce_result_type< T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 >::type >(this->value1_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7), this->value2_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7), this->value3_.template operator ()<typename type_trait< T_arg1 >::pass, typename type_trait< T_arg2 >::pass, typename type_trait< T_arg3 >::pass, typename type_trait< T_arg4 >::pass, typename type_trait< T_arg5 >::pass, typename type_trait< T_arg6 >::pass, typename type_trait< T_arg7 >::pass >(_A_1, _A_2, _A_3, _A_4, _A_5, _A_6, _A_7));
            }
            lambda_group3(typename type_trait< T_functor >::take _A_func, typename type_trait< T_type1 >::take _A_1, typename type_trait< T_type2 >::take _A_2, typename type_trait< T_type3 >::take _A_3)
                : value1_(_A_1), value2_(_A_2), value3_(_A_3), func_(_A_func) 
            {
            }
            value1_type value1_;
            value2_type value2_;
            value3_type value3_;
            mutable functor_type func_;
    };
    template<class T_functor, class T_type1, class T_type2, class T_type3 >
    typename lambda_group3< T_functor, T_type1, T_type2, T_type3 >::result_type lambda_group3< T_functor, T_type1, T_type2, T_type3 >::operator ()() const
    {
        return func_(value1_(), value2_(), value3_());
    }
    template<class T_action, class T_functor, class T_type1, class T_type2, class T_type3 >
    void visit_each(const T_action & _A_action, const lambda_group3< T_functor, T_type1, T_type2, T_type3 > & _A_target)
    {
        visit_each(_A_action, _A_target.value1_);
        visit_each(_A_action, _A_target.value2_);
        visit_each(_A_action, _A_target.value3_);
        visit_each(_A_action, _A_target.func_);
    }
    template<class T_functor, class T_type1 >
    lambda< lambda_group1< T_functor, typename unwrap_reference< T_type1 >::type > > group(const T_functor & _A_func, T_type1 _A_1)
    {
        typedef lambda_group1< T_functor, typename unwrap_reference< T_type1 >::type > T_lambda;
        return lambda< T_lambda >(T_lambda(_A_func, _A_1));
    }
    template<class T_functor, class T_type1, class T_type2 >
    lambda< lambda_group2< T_functor, typename unwrap_reference< T_type1 >::type, typename unwrap_reference< T_type2 >::type > > group(const T_functor & _A_func, T_type1 _A_1, T_type2 _A_2)
    {
        typedef lambda_group2< T_functor, typename unwrap_reference< T_type1 >::type, typename unwrap_reference< T_type2 >::type > T_lambda;
        return lambda< T_lambda >(T_lambda(_A_func, _A_1, _A_2));
    }
    template<class T_functor, class T_type1, class T_type2, class T_type3 >
    lambda< lambda_group3< T_functor, typename unwrap_reference< T_type1 >::type, typename unwrap_reference< T_type2 >::type, typename unwrap_reference< T_type3 >::type > > group(const T_functor & _A_func, T_type1 _A_1, T_type2 _A_2, T_type3 _A_3)
    {
        typedef lambda_group3< T_functor, typename unwrap_reference< T_type1 >::type, typename unwrap_reference< T_type2 >::type, typename unwrap_reference< T_type3 >::type > T_lambda;
        return lambda< T_lambda >(T_lambda(_A_func, _A_1, _A_2, _A_3));
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Alloc >
    class allocator;
    template<class _CharT >
    struct char_traits;
    template<typename _CharT, typename _Traits = char_traits< _CharT >, typename _Alloc = allocator< _CharT > >
    class basic_string;
    template<>
    struct char_traits< char >;
    typedef basic_string< char > string;
    template<>
    struct char_traits< wchar_t >;
    typedef basic_string< wchar_t > wstring;
}
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef struct _IO_FILE __FILE;
typedef __builtin_va_list __gnuc_va_list;
typedef unsigned int wint_t;
typedef struct 
{
        int __count;
        union 
        {
                unsigned int __wch;
                char __wchb[4];
        } __value;
} __mbstate_t;
typedef __mbstate_t mbstate_t;
extern "C"
{
    struct tm;
    extern wchar_t * wcscpy(wchar_t *__restrict __dest, __const wchar_t *__restrict __src) throw ();
    extern wchar_t * wcsncpy(wchar_t *__restrict __dest, __const wchar_t *__restrict __src, size_t __n) throw ();
    extern wchar_t * wcscat(wchar_t *__restrict __dest, __const wchar_t *__restrict __src) throw ();
    extern wchar_t * wcsncat(wchar_t *__restrict __dest, __const wchar_t *__restrict __src, size_t __n) throw ();
    extern int wcscmp(__const wchar_t * __s1, __const wchar_t * __s2) throw () __attribute__((__pure__));
    extern int wcsncmp(__const wchar_t * __s1, __const wchar_t * __s2, size_t __n) throw () __attribute__((__pure__));
    extern int wcscasecmp(__const wchar_t * __s1, __const wchar_t * __s2) throw ();
    extern int wcsncasecmp(__const wchar_t * __s1, __const wchar_t * __s2, size_t __n) throw ();
    typedef struct __locale_struct
    {
            struct locale_data * __locales[13];
            const unsigned short int * __ctype_b;
            const int * __ctype_tolower;
            const int * __ctype_toupper;
            const char * __names[13];
    } * __locale_t;
    extern int wcscasecmp_l(__const wchar_t * __s1, __const wchar_t * __s2, __locale_t __loc) throw ();
    extern int wcsncasecmp_l(__const wchar_t * __s1, __const wchar_t * __s2, size_t __n, __locale_t __loc) throw ();
    extern int wcscoll(__const wchar_t * __s1, __const wchar_t * __s2) throw ();
    extern size_t wcsxfrm(wchar_t *__restrict __s1, __const wchar_t *__restrict __s2, size_t __n) throw ();
    extern int wcscoll_l(__const wchar_t * __s1, __const wchar_t * __s2, __locale_t __loc) throw ();
    extern size_t wcsxfrm_l(wchar_t * __s1, __const wchar_t * __s2, size_t __n, __locale_t __loc) throw ();
    extern wchar_t * wcsdup(__const wchar_t * __s) throw () __attribute__((__malloc__));
    extern wchar_t * wcschr(__const wchar_t * __wcs, wchar_t __wc) throw () __attribute__((__pure__));
    extern wchar_t * wcsrchr(__const wchar_t * __wcs, wchar_t __wc) throw () __attribute__((__pure__));
    extern wchar_t * wcschrnul(__const wchar_t * __s, wchar_t __wc) throw () __attribute__((__pure__));
    extern size_t wcscspn(__const wchar_t * __wcs, __const wchar_t * __reject) throw () __attribute__((__pure__));
    extern size_t wcsspn(__const wchar_t * __wcs, __const wchar_t * __accept) throw () __attribute__((__pure__));
    extern wchar_t * wcspbrk(__const wchar_t * __wcs, __const wchar_t * __accept) throw () __attribute__((__pure__));
    extern wchar_t * wcsstr(__const wchar_t * __haystack, __const wchar_t * __needle) throw () __attribute__((__pure__));
    extern wchar_t * wcstok(wchar_t *__restrict __s, __const wchar_t *__restrict __delim, wchar_t * *__restrict __ptr) throw ();
    extern size_t wcslen(__const wchar_t * __s) throw () __attribute__((__pure__));
    extern wchar_t * wcswcs(__const wchar_t * __haystack, __const wchar_t * __needle) throw () __attribute__((__pure__));
    extern size_t wcsnlen(__const wchar_t * __s, size_t __maxlen) throw () __attribute__((__pure__));
    extern wchar_t * wmemchr(__const wchar_t * __s, wchar_t __c, size_t __n) throw () __attribute__((__pure__));
    extern int wmemcmp(__const wchar_t *__restrict __s1, __const wchar_t *__restrict __s2, size_t __n) throw () __attribute__((__pure__));
    extern wchar_t * wmemcpy(wchar_t *__restrict __s1, __const wchar_t *__restrict __s2, size_t __n) throw ();
    extern wchar_t * wmemmove(wchar_t * __s1, __const wchar_t * __s2, size_t __n) throw ();
    extern wchar_t * wmemset(wchar_t * __s, wchar_t __c, size_t __n) throw ();
    extern wchar_t * wmempcpy(wchar_t *__restrict __s1, __const wchar_t *__restrict __s2, size_t __n) throw ();
    extern wint_t btowc(int __c) throw ();
    extern int wctob(wint_t __c) throw ();
    extern int mbsinit(__const mbstate_t * __ps) throw () __attribute__((__pure__));
    extern size_t mbrtowc(wchar_t *__restrict __pwc, __const char *__restrict __s, size_t __n, mbstate_t * __p) throw ();
    extern size_t wcrtomb(char *__restrict __s, wchar_t __wc, mbstate_t *__restrict __ps) throw ();
    extern size_t __mbrlen(__const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ();
    extern size_t mbrlen(__const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ();
    extern size_t mbsrtowcs(wchar_t *__restrict __dst, __const char * *__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw ();
    extern size_t wcsrtombs(char *__restrict __dst, __const wchar_t * *__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw ();
    extern size_t mbsnrtowcs(wchar_t *__restrict __dst, __const char * *__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) throw ();
    extern size_t wcsnrtombs(char *__restrict __dst, __const wchar_t * *__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) throw ();
    extern int wcwidth(wchar_t __c) throw ();
    extern int wcswidth(__const wchar_t * __s, size_t __n) throw ();
    extern double wcstod(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr) throw ();
    extern float wcstof(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr) throw ();
    extern long double wcstold(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr) throw ();
    extern long int wcstol(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base) throw ();
    extern unsigned long int wcstoul(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base) throw ();
    __extension__
    extern long long int wcstoll(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base) throw ();
    __extension__
    extern unsigned long long int wcstoull(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base) throw ();
    __extension__
    extern long long int wcstoq(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base) throw ();
    __extension__
    extern unsigned long long int wcstouq(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base) throw ();
    extern long int wcstol_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base, __locale_t __loc) throw ();
    extern unsigned long int wcstoul_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base, __locale_t __loc) throw ();
    __extension__
    extern long long int wcstoll_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base, __locale_t __loc) throw ();
    __extension__
    extern unsigned long long int wcstoull_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, int __base, __locale_t __loc) throw ();
    extern double wcstod_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, __locale_t __loc) throw ();
    extern float wcstof_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, __locale_t __loc) throw ();
    extern long double wcstold_l(__const wchar_t *__restrict __nptr, wchar_t * *__restrict __endptr, __locale_t __loc) throw ();
    extern wchar_t * wcpcpy(wchar_t * __dest, __const wchar_t * __src) throw ();
    extern wchar_t * wcpncpy(wchar_t * __dest, __const wchar_t * __src, size_t __n) throw ();
    extern __FILE * open_wmemstream(wchar_t * * __bufloc, size_t * __sizeloc) throw ();
    extern int fwide(__FILE * __fp, int __mode) throw ();
    extern int fwprintf(__FILE *__restrict __stream, __const wchar_t *__restrict __format, ...);
    extern int wprintf(__const wchar_t *__restrict __format, ...);
    extern int swprintf(wchar_t *__restrict __s, size_t __n, __const wchar_t *__restrict __format, ...) throw ();
    extern int vfwprintf(__FILE *__restrict __s, __const wchar_t *__restrict __format, __gnuc_va_list __arg);
    extern int vwprintf(__const wchar_t *__restrict __format, __gnuc_va_list __arg);
    extern int vswprintf(wchar_t *__restrict __s, size_t __n, __const wchar_t *__restrict __format, __gnuc_va_list __arg) throw ();
    extern int fwscanf(__FILE *__restrict __stream, __const wchar_t *__restrict __format, ...);
    extern int wscanf(__const wchar_t *__restrict __format, ...);
    extern int swscanf(__const wchar_t *__restrict __s, __const wchar_t *__restrict __format, ...) throw ();
    extern int vfwscanf(__FILE *__restrict __s, __const wchar_t *__restrict __format, __gnuc_va_list __arg);
    extern int vwscanf(__const wchar_t *__restrict __format, __gnuc_va_list __arg);
    extern int vswscanf(__const wchar_t *__restrict __s, __const wchar_t *__restrict __format, __gnuc_va_list __arg) throw ();
    extern wint_t fgetwc(__FILE * __stream);
    extern wint_t getwc(__FILE * __stream);
    extern wint_t getwchar(void);
    extern wint_t fputwc(wchar_t __wc, __FILE * __stream);
    extern wint_t putwc(wchar_t __wc, __FILE * __stream);
    extern wint_t putwchar(wchar_t __wc);
    extern wchar_t * fgetws(wchar_t *__restrict __ws, int __n, __FILE *__restrict __stream);
    extern int fputws(__const wchar_t *__restrict __ws, __FILE *__restrict __stream);
    extern wint_t ungetwc(wint_t __wc, __FILE * __stream);
    extern wint_t getwc_unlocked(__FILE * __stream);
    extern wint_t getwchar_unlocked(void);
    extern wint_t fgetwc_unlocked(__FILE * __stream);
    extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream);
    extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream);
    extern wint_t putwchar_unlocked(wchar_t __wc);
    extern wchar_t * fgetws_unlocked(wchar_t *__restrict __ws, int __n, __FILE *__restrict __stream);
    extern int fputws_unlocked(__const wchar_t *__restrict __ws, __FILE *__restrict __stream);
    extern size_t wcsftime(wchar_t *__restrict __s, size_t __maxsize, __const wchar_t *__restrict __format, __const struct tm *__restrict __tp) throw ();
    extern size_t wcsftime_l(wchar_t *__restrict __s, size_t __maxsize, __const wchar_t *__restrict __format, __const struct tm *__restrict __tp, __locale_t __loc) throw ();
}
namespace std __attribute__((__visibility__("default"))) {
    using ::mbstate_t;
}
namespace std __attribute__((__visibility__("default"))) {
    using ::wint_t;
    using ::btowc;
    using ::fgetwc;
    using ::fgetws;
    using ::fputwc;
    using ::fputws;
    using ::fwide;
    using ::fwprintf;
    using ::fwscanf;
    using ::getwc;
    using ::getwchar;
    using ::mbrlen;
    using ::mbrtowc;
    using ::mbsinit;
    using ::mbsrtowcs;
    using ::putwc;
    using ::putwchar;
    using ::swprintf;
    using ::swscanf;
    using ::ungetwc;
    using ::vfwprintf;
    using ::vfwscanf;
    using ::vswprintf;
    using ::vswscanf;
    using ::vwprintf;
    using ::vwscanf;
    using ::wcrtomb;
    using ::wcscat;
    using ::wcscmp;
    using ::wcscoll;
    using ::wcscpy;
    using ::wcscspn;
    using ::wcsftime;
    using ::wcslen;
    using ::wcsncat;
    using ::wcsncmp;
    using ::wcsncpy;
    using ::wcsrtombs;
    using ::wcsspn;
    using ::wcstod;
    using ::wcstof;
    using ::wcstok;
    using ::wcstol;
    using ::wcstoul;
    using ::wcsxfrm;
    using ::wctob;
    using ::wmemcmp;
    using ::wmemcpy;
    using ::wmemmove;
    using ::wmemset;
    using ::wprintf;
    using ::wscanf;
    using ::wcschr;
    inline wchar_t * wcschr(wchar_t * __p, wchar_t __c)
    {
        return wcschr(const_cast<const wchar_t * >(__p), __c);
    }
    using ::wcspbrk;
    inline wchar_t * wcspbrk(wchar_t * __s1, const wchar_t * __s2)
    {
        return wcspbrk(const_cast<const wchar_t * >(__s1), __s2);
    }
    using ::wcsrchr;
    inline wchar_t * wcsrchr(wchar_t * __p, wchar_t __c)
    {
        return wcsrchr(const_cast<const wchar_t * >(__p), __c);
    }
    using ::wcsstr;
    inline wchar_t * wcsstr(wchar_t * __s1, const wchar_t * __s2)
    {
        return wcsstr(const_cast<const wchar_t * >(__s1), __s2);
    }
    using ::wmemchr;
    inline wchar_t * wmemchr(wchar_t * __p, wchar_t __c, size_t __n)
    {
        return wmemchr(const_cast<const wchar_t * >(__p), __c, __n);
    }
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    using ::wcstold;
    using ::wcstoll;
    using ::wcstoull;
}
namespace std __attribute__((__visibility__("default"))) {
    using ::__gnu_cxx::wcstold;
    using ::__gnu_cxx::wcstoll;
    using ::__gnu_cxx::wcstoull;
}
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
typedef long int int64_t;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long int uint64_t;
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long int uint_least64_t;
typedef signed char int_fast8_t;
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef long int intptr_t;
typedef unsigned long int uintptr_t;
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
namespace std __attribute__((__visibility__("default"))) {
    typedef int64_t streamoff;
    typedef ptrdiff_t streamsize;
    template<typename _StateT >
    class fpos
    {
        private :
            streamoff _M_off;
            _StateT _M_state;
        public :
            fpos()
                : _M_off(0), _M_state() 
            {
            }
            fpos(streamoff __off)
                : _M_off(__off), _M_state() 
            {
            }
            operator streamoff() const
            {
                return _M_off;
            }
            void state(_StateT __st)
            {
                _M_state = __st;
            }
            _StateT state() const
            {
                return _M_state;
            }
            fpos & operator +=(streamoff __off)
            {
                _M_off += __off;
                return *this;
            }
            fpos & operator -=(streamoff __off)
            {
                _M_off -= __off;
                return *this;
            }
            fpos operator +(streamoff __off) const
            {
                fpos __pos(*this);
                __pos += __off;
                return __pos;
            }
            fpos operator -(streamoff __off) const
            {
                fpos __pos(*this);
                __pos -= __off;
                return __pos;
            }
            streamoff operator -(const fpos & __other) const
            {
                return _M_off - __other._M_off;
            }
    };
    template<typename _StateT >
    inline bool operator ==(const fpos< _StateT > & __lhs, const fpos< _StateT > & __rhs)
    {
        return streamoff(__lhs) == streamoff(__rhs);
    }
    template<typename _StateT >
    inline bool operator !=(const fpos< _StateT > & __lhs, const fpos< _StateT > & __rhs)
    {
        return streamoff(__lhs) != streamoff(__rhs);
    }
    typedef fpos< mbstate_t > streampos;
    typedef fpos< mbstate_t > wstreampos;
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_ios;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_streambuf;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_istream;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_ostream;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_iostream;
    template<typename _CharT, typename _Traits = char_traits< _CharT >, typename _Alloc = allocator< _CharT > >
    class basic_stringbuf;
    template<typename _CharT, typename _Traits = char_traits< _CharT >, typename _Alloc = allocator< _CharT > >
    class basic_istringstream;
    template<typename _CharT, typename _Traits = char_traits< _CharT >, typename _Alloc = allocator< _CharT > >
    class basic_ostringstream;
    template<typename _CharT, typename _Traits = char_traits< _CharT >, typename _Alloc = allocator< _CharT > >
    class basic_stringstream;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_filebuf;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_ifstream;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_ofstream;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class basic_fstream;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class istreambuf_iterator;
    template<typename _CharT, typename _Traits = char_traits< _CharT > >
    class ostreambuf_iterator;
    class ios_base;
    typedef basic_ios< char > ios;
    typedef basic_streambuf< char > streambuf;
    typedef basic_istream< char > istream;
    typedef basic_ostream< char > ostream;
    typedef basic_iostream< char > iostream;
    typedef basic_stringbuf< char > stringbuf;
    typedef basic_istringstream< char > istringstream;
    typedef basic_ostringstream< char > ostringstream;
    typedef basic_stringstream< char > stringstream;
    typedef basic_filebuf< char > filebuf;
    typedef basic_ifstream< char > ifstream;
    typedef basic_ofstream< char > ofstream;
    typedef basic_fstream< char > fstream;
    typedef basic_ios< wchar_t > wios;
    typedef basic_streambuf< wchar_t > wstreambuf;
    typedef basic_istream< wchar_t > wistream;
    typedef basic_ostream< wchar_t > wostream;
    typedef basic_iostream< wchar_t > wiostream;
    typedef basic_stringbuf< wchar_t > wstringbuf;
    typedef basic_istringstream< wchar_t > wistringstream;
    typedef basic_ostringstream< wchar_t > wostringstream;
    typedef basic_stringstream< wchar_t > wstringstream;
    typedef basic_filebuf< wchar_t > wfilebuf;
    typedef basic_ifstream< wchar_t > wifstream;
    typedef basic_ofstream< wchar_t > wofstream;
    typedef basic_fstream< wchar_t > wfstream;
}
extern "C"
{
    typedef unsigned char __u_char;
    typedef unsigned short int __u_short;
    typedef unsigned int __u_int;
    typedef unsigned long int __u_long;
    typedef signed char __int8_t;
    typedef unsigned char __uint8_t;
    typedef signed short int __int16_t;
    typedef unsigned short int __uint16_t;
    typedef signed int __int32_t;
    typedef unsigned int __uint32_t;
    typedef signed long int __int64_t;
    typedef unsigned long int __uint64_t;
    typedef long int __quad_t;
    typedef unsigned long int __u_quad_t;
    typedef unsigned long int __dev_t;
    typedef unsigned int __uid_t;
    typedef unsigned int __gid_t;
    typedef unsigned long int __ino_t;
    typedef unsigned long int __ino64_t;
    typedef unsigned int __mode_t;
    typedef unsigned long int __nlink_t;
    typedef long int __off_t;
    typedef long int __off64_t;
    typedef int __pid_t;
    typedef struct 
    {
            int __val[2];
    } __fsid_t;
    typedef long int __clock_t;
    typedef unsigned long int __rlim_t;
    typedef unsigned long int __rlim64_t;
    typedef unsigned int __id_t;
    typedef long int __time_t;
    typedef unsigned int __useconds_t;
    typedef long int __suseconds_t;
    typedef int __daddr_t;
    typedef long int __swblk_t;
    typedef int __key_t;
    typedef int __clockid_t;
    typedef void * __timer_t;
    typedef long int __blksize_t;
    typedef long int __blkcnt_t;
    typedef long int __blkcnt64_t;
    typedef unsigned long int __fsblkcnt_t;
    typedef unsigned long int __fsblkcnt64_t;
    typedef unsigned long int __fsfilcnt_t;
    typedef unsigned long int __fsfilcnt64_t;
    typedef long int __ssize_t;
    typedef __off64_t __loff_t;
    typedef __quad_t * __qaddr_t;
    typedef char * __caddr_t;
    typedef long int __intptr_t;
    typedef unsigned int __socklen_t;
    typedef struct 
    {
            __off_t __pos;
            __mbstate_t __state;
    } _G_fpos_t;
    typedef struct 
    {
            __off64_t __pos;
            __mbstate_t __state;
    } _G_fpos64_t;
    typedef int _G_int16_t __attribute__((__mode__(__HI__)));
    typedef int _G_int32_t __attribute__((__mode__(__SI__)));
    typedef unsigned int _G_uint16_t __attribute__((__mode__(__HI__)));
    typedef unsigned int _G_uint32_t __attribute__((__mode__(__SI__)));
    struct _IO_jump_t;
    struct _IO_FILE;
    typedef void _IO_lock_t;
    struct _IO_marker
    {
            struct _IO_marker * _next;
            struct _IO_FILE * _sbuf;
            int _pos;
    };
    enum __codecvt_result
    {
        __codecvt_ok, 
        __codecvt_partial, 
        __codecvt_error, 
        __codecvt_noconv
    };
    struct _IO_FILE
    {
            int _flags;
            char * _IO_read_ptr;
            char * _IO_read_end;
            char * _IO_read_base;
            char * _IO_write_base;
            char * _IO_write_ptr;
            char * _IO_write_end;
            char * _IO_buf_base;
            char * _IO_buf_end;
            char * _IO_save_base;
            char * _IO_backup_base;
            char * _IO_save_end;
            struct _IO_marker * _markers;
            struct _IO_FILE * _chain;
            int _fileno;
            int _flags2;
            __off_t _old_offset;
            unsigned short _cur_column;
            signed char _vtable_offset;
            char _shortbuf[1];
            _IO_lock_t * _lock;
            __off64_t _offset;
            void * __pad1;
            void * __pad2;
            void * __pad3;
            void * __pad4;
            size_t __pad5;
            int _mode;
            char _unused2[15 * sizeof(int) - 4 * sizeof(void *) - sizeof(size_t)];
    };
    struct _IO_FILE_plus;
    extern struct _IO_FILE_plus _IO_2_1_stdin_;
    extern struct _IO_FILE_plus _IO_2_1_stdout_;
    extern struct _IO_FILE_plus _IO_2_1_stderr_;
    typedef __ssize_t __io_read_fn(void * __cookie, char * __buf, size_t __nbytes);
    typedef __ssize_t __io_write_fn(void * __cookie, __const char * __buf, size_t __n);
    typedef int __io_seek_fn(void * __cookie, __off64_t * __pos, int __w);
    typedef int __io_close_fn(void * __cookie);
    typedef __io_read_fn cookie_read_function_t;
    typedef __io_write_fn cookie_write_function_t;
    typedef __io_seek_fn cookie_seek_function_t;
    typedef __io_close_fn cookie_close_function_t;
    typedef struct 
    {
            __io_read_fn * read;
            __io_write_fn * write;
            __io_seek_fn * seek;
            __io_close_fn * close;
    } _IO_cookie_io_functions_t;
    typedef _IO_cookie_io_functions_t cookie_io_functions_t;
    struct _IO_cookie_file;
    extern void _IO_cookie_init(struct _IO_cookie_file * __cfile, int __read_write, void * __cookie, _IO_cookie_io_functions_t __fns);
    extern "C"
    {
        extern int __underflow(_IO_FILE *);
        extern int __uflow(_IO_FILE *);
        extern int __overflow(_IO_FILE *, int);
        extern int _IO_getc(_IO_FILE * __fp);
        extern int _IO_putc(int __c, _IO_FILE * __fp);
        extern int _IO_feof(_IO_FILE * __fp) throw ();
        extern int _IO_ferror(_IO_FILE * __fp) throw ();
        extern int _IO_peekc_locked(_IO_FILE * __fp);
        extern void _IO_flockfile(_IO_FILE *) throw ();
        extern void _IO_funlockfile(_IO_FILE *) throw ();
        extern int _IO_ftrylockfile(_IO_FILE *) throw ();
        extern int _IO_vfscanf(_IO_FILE *__restrict, const char *__restrict, __gnuc_va_list, int *__restrict);
        extern int _IO_vfprintf(_IO_FILE *__restrict, const char *__restrict, __gnuc_va_list);
        extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
        extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);
        extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
        extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
        extern void _IO_free_backup_area(_IO_FILE *) throw ();
    }
    typedef __gnuc_va_list va_list;
    typedef _G_fpos_t fpos_t;
    typedef _G_fpos64_t fpos64_t;
    extern struct _IO_FILE * stdin;
    extern struct _IO_FILE * stdout;
    extern struct _IO_FILE * stderr;
    extern int remove(__const char * __filename) throw ();
    extern int rename(__const char * __old, __const char * __new) throw ();
    extern int renameat(int __oldfd, __const char * __old, int __newfd, __const char * __new) throw ();
    extern FILE * tmpfile(void);
    extern FILE * tmpfile64(void);
    extern char * tmpnam(char * __s) throw ();
    extern char * tmpnam_r(char * __s) throw ();
    extern char * tempnam(__const char * __dir, __const char * __pfx) throw () __attribute__((__malloc__));
    extern int fclose(FILE * __stream);
    extern int fflush(FILE * __stream);
    extern int fflush_unlocked(FILE * __stream);
    extern int fcloseall(void);
    extern FILE * fopen(__const char *__restrict __filename, __const char *__restrict __modes);
    extern FILE * freopen(__const char *__restrict __filename, __const char *__restrict __modes, FILE *__restrict __stream);
    extern FILE * fopen64(__const char *__restrict __filename, __const char *__restrict __modes);
    extern FILE * freopen64(__const char *__restrict __filename, __const char *__restrict __modes, FILE *__restrict __stream);
    extern FILE * fdopen(int __fd, __const char * __modes) throw ();
    extern FILE * fopencookie(void *__restrict __magic_cookie, __const char *__restrict __modes, _IO_cookie_io_functions_t __io_funcs) throw ();
    extern FILE * fmemopen(void * __s, size_t __len, __const char * __modes) throw ();
    extern FILE * open_memstream(char * * __bufloc, size_t * __sizeloc) throw ();
    extern void setbuf(FILE *__restrict __stream, char *__restrict __buf) throw ();
    extern int setvbuf(FILE *__restrict __stream, char *__restrict __buf, int __modes, size_t __n) throw ();
    extern void setbuffer(FILE *__restrict __stream, char *__restrict __buf, size_t __size) throw ();
    extern void setlinebuf(FILE * __stream) throw ();
    extern int fprintf(FILE *__restrict __stream, __const char *__restrict __format, ...);
    extern int printf(__const char *__restrict __format, ...);
    extern int sprintf(char *__restrict __s, __const char *__restrict __format, ...) throw ();
    extern int vfprintf(FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg);
    extern int vprintf(__const char *__restrict __format, __gnuc_va_list __arg);
    extern int vsprintf(char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) throw ();
    extern int snprintf(char *__restrict __s, size_t __maxlen, __const char *__restrict __format, ...) throw () __attribute__((__format__(__printf__, 3, 4)));
    extern int vsnprintf(char *__restrict __s, size_t __maxlen, __const char *__restrict __format, __gnuc_va_list __arg) throw () __attribute__((__format__(__printf__, 3, 0)));
    extern int vasprintf(char * *__restrict __ptr, __const char *__restrict __f, __gnuc_va_list __arg) throw () __attribute__((__format__(__printf__, 2, 0)));
    extern int __asprintf(char * *__restrict __ptr, __const char *__restrict __fmt, ...) throw () __attribute__((__format__(__printf__, 2, 3)));
    extern int asprintf(char * *__restrict __ptr, __const char *__restrict __fmt, ...) throw () __attribute__((__format__(__printf__, 2, 3)));
    extern int vdprintf(int __fd, __const char *__restrict __fmt, __gnuc_va_list __arg) __attribute__((__format__(__printf__, 2, 0)));
    extern int dprintf(int __fd, __const char *__restrict __fmt, ...) __attribute__((__format__(__printf__, 2, 3)));
    extern int fscanf(FILE *__restrict __stream, __const char *__restrict __format, ...);
    extern int scanf(__const char *__restrict __format, ...);
    extern int sscanf(__const char *__restrict __s, __const char *__restrict __format, ...) throw ();
    extern int vfscanf(FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__format__(__scanf__, 2, 0)));
    extern int vscanf(__const char *__restrict __format, __gnuc_va_list __arg) __attribute__((__format__(__scanf__, 1, 0)));
    extern int vsscanf(__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) throw () __attribute__((__format__(__scanf__, 2, 0)));
    extern int fgetc(FILE * __stream);
    extern int getc(FILE * __stream);
    extern int getchar(void);
    extern int getc_unlocked(FILE * __stream);
    extern int getchar_unlocked(void);
    extern int fgetc_unlocked(FILE * __stream);
    extern int fputc(int __c, FILE * __stream);
    extern int putc(int __c, FILE * __stream);
    extern int putchar(int __c);
    extern int fputc_unlocked(int __c, FILE * __stream);
    extern int putc_unlocked(int __c, FILE * __stream);
    extern int putchar_unlocked(int __c);
    extern int getw(FILE * __stream);
    extern int putw(int __w, FILE * __stream);
    extern char * fgets(char *__restrict __s, int __n, FILE *__restrict __stream);
    extern char * gets(char * __s);
    extern char * fgets_unlocked(char *__restrict __s, int __n, FILE *__restrict __stream);
    extern __ssize_t __getdelim(char * *__restrict __lineptr, size_t *__restrict __n, int __delimiter, FILE *__restrict __stream);
    extern __ssize_t getdelim(char * *__restrict __lineptr, size_t *__restrict __n, int __delimiter, FILE *__restrict __stream);
    extern __ssize_t getline(char * *__restrict __lineptr, size_t *__restrict __n, FILE *__restrict __stream);
    extern int fputs(__const char *__restrict __s, FILE *__restrict __stream);
    extern int puts(__const char * __s);
    extern int ungetc(int __c, FILE * __stream);
    extern size_t fread(void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream);
    extern size_t fwrite(__const void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __s);
    extern int fputs_unlocked(__const char *__restrict __s, FILE *__restrict __stream);
    extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream);
    extern size_t fwrite_unlocked(__const void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream);
    extern int fseek(FILE * __stream, long int __off, int __whence);
    extern long int ftell(FILE * __stream);
    extern void rewind(FILE * __stream);
    extern int fseeko(FILE * __stream, __off_t __off, int __whence);
    extern __off_t ftello(FILE * __stream);
    extern int fgetpos(FILE *__restrict __stream, fpos_t *__restrict __pos);
    extern int fsetpos(FILE * __stream, __const fpos_t * __pos);
    extern int fseeko64(FILE * __stream, __off64_t __off, int __whence);
    extern __off64_t ftello64(FILE * __stream);
    extern int fgetpos64(FILE *__restrict __stream, fpos64_t *__restrict __pos);
    extern int fsetpos64(FILE * __stream, __const fpos64_t * __pos);
    extern void clearerr(FILE * __stream) throw ();
    extern int feof(FILE * __stream) throw ();
    extern int ferror(FILE * __stream) throw ();
    extern void clearerr_unlocked(FILE * __stream) throw ();
    extern int feof_unlocked(FILE * __stream) throw ();
    extern int ferror_unlocked(FILE * __stream) throw ();
    extern void perror(__const char * __s);
    extern int sys_nerr;
    extern __const char *__const sys_errlist[];
    extern int _sys_nerr;
    extern __const char *__const _sys_errlist[];
    extern int fileno(FILE * __stream) throw ();
    extern int fileno_unlocked(FILE * __stream) throw ();
    extern FILE * popen(__const char * __command, __const char * __modes);
    extern int pclose(FILE * __stream);
    extern char * ctermid(char * __s) throw ();
    extern char * cuserid(char * __s);
    struct obstack;
    extern int obstack_printf(struct obstack *__restrict __obstack, __const char *__restrict __format, ...) throw () __attribute__((__format__(__printf__, 2, 3)));
    extern int obstack_vprintf(struct obstack *__restrict __obstack, __const char *__restrict __format, __gnuc_va_list __args) throw () __attribute__((__format__(__printf__, 2, 0)));
    extern void flockfile(FILE * __stream) throw ();
    extern int ftrylockfile(FILE * __stream) throw ();
    extern void funlockfile(FILE * __stream) throw ();
}
namespace std __attribute__((__visibility__("default"))) {
    using ::FILE;
    using ::fpos_t;
    using ::clearerr;
    using ::fclose;
    using ::feof;
    using ::ferror;
    using ::fflush;
    using ::fgetc;
    using ::fgetpos;
    using ::fgets;
    using ::fopen;
    using ::fprintf;
    using ::fputc;
    using ::fputs;
    using ::fread;
    using ::freopen;
    using ::fscanf;
    using ::fseek;
    using ::fsetpos;
    using ::ftell;
    using ::fwrite;
    using ::getc;
    using ::getchar;
    using ::gets;
    using ::perror;
    using ::printf;
    using ::putc;
    using ::putchar;
    using ::puts;
    using ::remove;
    using ::rename;
    using ::rewind;
    using ::scanf;
    using ::setbuf;
    using ::setvbuf;
    using ::sprintf;
    using ::sscanf;
    using ::tmpfile;
    using ::tmpnam;
    using ::ungetc;
    using ::vfprintf;
    using ::vprintf;
    using ::vsprintf;
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    using ::snprintf;
    using ::vfscanf;
    using ::vscanf;
    using ::vsnprintf;
    using ::vsscanf;
}
namespace std __attribute__((__visibility__("default"))) {
    using ::__gnu_cxx::snprintf;
    using ::__gnu_cxx::vfscanf;
    using ::__gnu_cxx::vscanf;
    using ::__gnu_cxx::vsnprintf;
    using ::__gnu_cxx::vsscanf;
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    template<typename _CharT >
    struct _Char_types
    {
            typedef unsigned long int_type;
            typedef std::streampos pos_type;
            typedef std::streamoff off_type;
            typedef std::mbstate_t state_type;
    };
    template<typename _CharT >
    struct char_traits
    {
            typedef _CharT char_type;
            typedef typename _Char_types< _CharT >::int_type int_type;
            typedef typename _Char_types< _CharT >::pos_type pos_type;
            typedef typename _Char_types< _CharT >::off_type off_type;
            typedef typename _Char_types< _CharT >::state_type state_type;
            static void assign(char_type & __c1, const char_type & __c2)
            {
                __c1 = __c2;
            }
            static bool eq(const char_type & __c1, const char_type & __c2)
            {
                return __c1 == __c2;
            }
            static bool lt(const char_type & __c1, const char_type & __c2)
            {
                return __c1 < __c2;
            }
            static int compare(const char_type * __s1, const char_type * __s2, std::size_t __n);
            static std::size_t length(const char_type * __s);
            static const char_type * find(const char_type * __s, std::size_t __n, const char_type & __a);
            static char_type * move(char_type * __s1, const char_type * __s2, std::size_t __n);
            static char_type * copy(char_type * __s1, const char_type * __s2, std::size_t __n);
            static char_type * assign(char_type * __s, std::size_t __n, char_type __a);
            static char_type to_char_type(const int_type & __c)
            {
                return static_cast<char_type >(__c);
            }
            static int_type to_int_type(const char_type & __c)
            {
                return static_cast<int_type >(__c);
            }
            static bool eq_int_type(const int_type & __c1, const int_type & __c2)
            {
                return __c1 == __c2;
            }
            static int_type eof()
            {
                return static_cast<int_type >((-1));
            }
            static int_type not_eof(const int_type & __c)
            {
                return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type());
            }
    };
    template<typename _CharT >
    int char_traits< _CharT >::compare(const char_type * __s1, const char_type * __s2, std::size_t __n)
    {
        for (std::size_t __i = 0;
            __i < __n;
            ++__i)
        if (lt(__s1[__i], __s2[__i]))
            return -1;
        else
            if (lt(__s2[__i], __s1[__i]))
                return 1;
        return 0;
    }
    template<typename _CharT >
    std::size_t char_traits< _CharT >::length(const char_type * __p)
    {
        std::size_t __i = 0;
        while (!eq(__p[__i], char_type()))
            ++__i;
        return __i;
    }
    template<typename _CharT >
    const typename char_traits< _CharT >::char_type * char_traits< _CharT >::find(const char_type * __s, std::size_t __n, const char_type & __a)
    {
        for (std::size_t __i = 0;
            __i < __n;
            ++__i)
        if (eq(__s[__i], __a))
            return __s + __i;
        return 0;
    }
    template<typename _CharT >
    typename char_traits< _CharT >::char_type * char_traits< _CharT >::move(char_type * __s1, const char_type * __s2, std::size_t __n)
    {
        return static_cast<_CharT * >(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)));
    }
    template<typename _CharT >
    typename char_traits< _CharT >::char_type * char_traits< _CharT >::copy(char_type * __s1, const char_type * __s2, std::size_t __n)
    {
        std::copy(__s2, __s2 + __n, __s1);
        return __s1;
    }
    template<typename _CharT >
    typename char_traits< _CharT >::char_type * char_traits< _CharT >::assign(char_type * __s, std::size_t __n, char_type __a)
    {
        std::fill_n(__s, __n, __a);
        return __s;
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<class _CharT >
    struct char_traits : public __gnu_cxx::char_traits< _CharT >
    {
    };
    template<>
    struct char_traits< char >
    {
            typedef char char_type;
            typedef int int_type;
            typedef streampos pos_type;
            typedef streamoff off_type;
            typedef mbstate_t state_type;
            static void assign(char_type & __c1, const char_type & __c2)
            {
                __c1 = __c2;
            }
            static bool eq(const char_type & __c1, const char_type & __c2)
            {
                return __c1 == __c2;
            }
            static bool lt(const char_type & __c1, const char_type & __c2)
            {
                return __c1 < __c2;
            }
            static int compare(const char_type * __s1, const char_type * __s2, size_t __n)
            {
                return __builtin_memcmp(__s1, __s2, __n);
            }
            static size_t length(const char_type * __s)
            {
                return __builtin_strlen(__s);
            }
            static const char_type * find(const char_type * __s, size_t __n, const char_type & __a)
            {
                return static_cast<const char_type * >(__builtin_memchr(__s, __a, __n));
            }
            static char_type * move(char_type * __s1, const char_type * __s2, size_t __n)
            {
                return static_cast<char_type * >(__builtin_memmove(__s1, __s2, __n));
            }
            static char_type * copy(char_type * __s1, const char_type * __s2, size_t __n)
            {
                return static_cast<char_type * >(__builtin_memcpy(__s1, __s2, __n));
            }
            static char_type * assign(char_type * __s, size_t __n, char_type __a)
            {
                return static_cast<char_type * >(__builtin_memset(__s, __a, __n));
            }
            static char_type to_char_type(const int_type & __c)
            {
                return static_cast<char_type >(__c);
            }
            static int_type to_int_type(const char_type & __c)
            {
                return static_cast<int_type >(static_cast<unsigned char >(__c));
            }
            static bool eq_int_type(const int_type & __c1, const int_type & __c2)
            {
                return __c1 == __c2;
            }
            static int_type eof()
            {
                return static_cast<int_type >((-1));
            }
            static int_type not_eof(const int_type & __c)
            {
                return (__c == eof()) ? 0 : __c;
            }
    };
    template<>
    struct char_traits< wchar_t >
    {
            typedef wchar_t char_type;
            typedef wint_t int_type;
            typedef streamoff off_type;
            typedef wstreampos pos_type;
            typedef mbstate_t state_type;
            static void assign(char_type & __c1, const char_type & __c2)
            {
                __c1 = __c2;
            }
            static bool eq(const char_type & __c1, const char_type & __c2)
            {
                return __c1 == __c2;
            }
            static bool lt(const char_type & __c1, const char_type & __c2)
            {
                return __c1 < __c2;
            }
            static int compare(const char_type * __s1, const char_type * __s2, size_t __n)
            {
                return wmemcmp(__s1, __s2, __n);
            }
            static size_t length(const char_type * __s)
            {
                return wcslen(__s);
            }
            static const char_type * find(const char_type * __s, size_t __n, const char_type & __a)
            {
                return wmemchr(__s, __a, __n);
            }
            static char_type * move(char_type * __s1, const char_type * __s2, size_t __n)
            {
                return wmemmove(__s1, __s2, __n);
            }
            static char_type * copy(char_type * __s1, const char_type * __s2, size_t __n)
            {
                return wmemcpy(__s1, __s2, __n);
            }
            static char_type * assign(char_type * __s, size_t __n, char_type __a)
            {
                return wmemset(__s, __a, __n);
            }
            static char_type to_char_type(const int_type & __c)
            {
                return char_type(__c);
            }
            static int_type to_int_type(const char_type & __c)
            {
                return int_type(__c);
            }
            static bool eq_int_type(const int_type & __c1, const int_type & __c2)
            {
                return __c1 == __c2;
            }
            static int_type eof()
            {
                return static_cast<int_type >((0xffffffffu));
            }
            static int_type not_eof(const int_type & __c)
            {
                return eq_int_type(__c, eof()) ? 0 : __c;
            }
    };
}
enum 
{
    __LC_CTYPE = 0, 
    __LC_NUMERIC = 1, 
    __LC_TIME = 2, 
    __LC_COLLATE = 3, 
    __LC_MONETARY = 4, 
    __LC_MESSAGES = 5, 
    __LC_ALL = 6, 
    __LC_PAPER = 7, 
    __LC_NAME = 8, 
    __LC_ADDRESS = 9, 
    __LC_TELEPHONE = 10, 
    __LC_MEASUREMENT = 11, 
    __LC_IDENTIFICATION = 12
};
extern "C"
{
    struct lconv
    {
            char * decimal_point;
            char * thousands_sep;
            char * grouping;
            char * int_curr_symbol;
            char * currency_symbol;
            char * mon_decimal_point;
            char * mon_thousands_sep;
            char * mon_grouping;
            char * positive_sign;
            char * negative_sign;
            char int_frac_digits;
            char frac_digits;
            char p_cs_precedes;
            char p_sep_by_space;
            char n_cs_precedes;
            char n_sep_by_space;
            char p_sign_posn;
            char n_sign_posn;
            char int_p_cs_precedes;
            char int_p_sep_by_space;
            char int_n_cs_precedes;
            char int_n_sep_by_space;
            char int_p_sign_posn;
            char int_n_sign_posn;
    };
    extern char * setlocale(int __category, __const char * __locale) throw ();
    extern struct lconv * localeconv(void) throw ();
    typedef __locale_t locale_t;
    extern __locale_t newlocale(int __category_mask, __const char * __locale, __locale_t __base) throw ();
    extern __locale_t duplocale(__locale_t __dataset) throw ();
    extern void freelocale(__locale_t __dataset) throw ();
    extern __locale_t uselocale(__locale_t __dataset) throw ();
}
namespace std __attribute__((__visibility__("default"))) {
    using ::lconv;
    using ::setlocale;
    using ::localeconv;
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    extern "C"
    __typeof (uselocale) __uselocale;

}
namespace std __attribute__((__visibility__("default"))) {
    typedef __locale_t __c_locale;
    inline int __convert_from_v(const __c_locale & __cloc __attribute__((__unused__)), char * __out, const int __size __attribute__((__unused__)), const char * __fmt, ...)
    {
        __c_locale __old = __gnu_cxx::__uselocale(__cloc);
        __builtin_va_list __args;
        __builtin_va_start(__args, __fmt);
        const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);
        __builtin_va_end(__args);
        __gnu_cxx::__uselocale(__old);
        return __ret;
    }
}
extern "C"
{
    enum 
    {
        _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)), 
        _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)), 
        _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)), 
        _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)), 
        _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)), 
        _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)), 
        _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)), 
        _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)), 
        _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)), 
        _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)), 
        _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)), 
        _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
    };
    extern __const unsigned short int * * __ctype_b_loc(void) __attribute__((__const));
    extern __const __int32_t * * __ctype_tolower_loc(void) __attribute__((__const));
    extern __const __int32_t * * __ctype_toupper_loc(void) __attribute__((__const));
    extern int isalnum(int) throw ();
    extern int isalpha(int) throw ();
    extern int iscntrl(int) throw ();
    extern int isdigit(int) throw ();
    extern int islower(int) throw ();
    extern int isgraph(int) throw ();
    extern int isprint(int) throw ();
    extern int ispunct(int) throw ();
    extern int isspace(int) throw ();
    extern int isupper(int) throw ();
    extern int isxdigit(int) throw ();
    extern int tolower(int __c) throw ();
    extern int toupper(int __c) throw ();
    extern int isblank(int) throw ();
    extern int isctype(int __c, int __mask) throw ();
    extern int isascii(int __c) throw ();
    extern int toascii(int __c) throw ();
    extern int _toupper(int) throw ();
    extern int _tolower(int) throw ();
    extern int isalnum_l(int, __locale_t) throw ();
    extern int isalpha_l(int, __locale_t) throw ();
    extern int iscntrl_l(int, __locale_t) throw ();
    extern int isdigit_l(int, __locale_t) throw ();
    extern int islower_l(int, __locale_t) throw ();
    extern int isgraph_l(int, __locale_t) throw ();
    extern int isprint_l(int, __locale_t) throw ();
    extern int ispunct_l(int, __locale_t) throw ();
    extern int isspace_l(int, __locale_t) throw ();
    extern int isupper_l(int, __locale_t) throw ();
    extern int isxdigit_l(int, __locale_t) throw ();
    extern int isblank_l(int, __locale_t) throw ();
    extern int __tolower_l(int __c, __locale_t __l) throw ();
    extern int tolower_l(int __c, __locale_t __l) throw ();
    extern int __toupper_l(int __c, __locale_t __l) throw ();
    extern int toupper_l(int __c, __locale_t __l) throw ();
}
namespace std __attribute__((__visibility__("default"))) {
    using ::isalnum;
    using ::isalpha;
    using ::iscntrl;
    using ::isdigit;
    using ::isgraph;
    using ::islower;
    using ::isprint;
    using ::ispunct;
    using ::isspace;
    using ::isupper;
    using ::isxdigit;
    using ::tolower;
    using ::toupper;
}
namespace std __attribute__((__visibility__("default"))) {
    class locale;
    template<typename _Facet >
    bool has_facet(const locale &) throw ();
    template<typename _Facet >
    const _Facet & use_facet(const locale &);
    template<typename _CharT >
    bool isspace(_CharT, const locale &);
    template<typename _CharT >
    bool isprint(_CharT, const locale &);
    template<typename _CharT >
    bool iscntrl(_CharT, const locale &);
    template<typename _CharT >
    bool isupper(_CharT, const locale &);
    template<typename _CharT >
    bool islower(_CharT, const locale &);
    template<typename _CharT >
    bool isalpha(_CharT, const locale &);
    template<typename _CharT >
    bool isdigit(_CharT, const locale &);
    template<typename _CharT >
    bool ispunct(_CharT, const locale &);
    template<typename _CharT >
    bool isxdigit(_CharT, const locale &);
    template<typename _CharT >
    bool isalnum(_CharT, const locale &);
    template<typename _CharT >
    bool isgraph(_CharT, const locale &);
    template<typename _CharT >
    _CharT toupper(_CharT, const locale &);
    template<typename _CharT >
    _CharT tolower(_CharT, const locale &);
    class ctype_base;
    template<typename _CharT >
    class ctype;
    template<>
    class ctype< char >;
    template<>
    class ctype< wchar_t >;
    template<typename _CharT >
    class ctype_byname;
    class codecvt_base;
    template<typename _InternT, typename _ExternT, typename _StateT >
    class codecvt;
    template<>
    class codecvt< char, char, mbstate_t >;
    template<>
    class codecvt< wchar_t, char, mbstate_t >;
    template<typename _InternT, typename _ExternT, typename _StateT >
    class codecvt_byname;
    template<typename _CharT, typename _InIter = istreambuf_iterator< _CharT > >
    class num_get;
    template<typename _CharT, typename _OutIter = ostreambuf_iterator< _CharT > >
    class num_put;
    template<typename _CharT >
    class numpunct;
    template<typename _CharT >
    class numpunct_byname;
    template<typename _CharT >
    class collate;
    template<typename _CharT >
    class collate_byname;
    class time_base;
    template<typename _CharT, typename _InIter = istreambuf_iterator< _CharT > >
    class time_get;
    template<typename _CharT, typename _InIter = istreambuf_iterator< _CharT > >
    class time_get_byname;
    template<typename _CharT, typename _OutIter = ostreambuf_iterator< _CharT > >
    class time_put;
    template<typename _CharT, typename _OutIter = ostreambuf_iterator< _CharT > >
    class time_put_byname;
    class money_base;
    template<typename _CharT, typename _InIter = istreambuf_iterator< _CharT > >
    class money_get;
    template<typename _CharT, typename _OutIter = ostreambuf_iterator< _CharT > >
    class money_put;
    template<typename _CharT, bool _Intl = false >
    class moneypunct;
    template<typename _CharT, bool _Intl = false >
    class moneypunct_byname;
    class messages_base;
    template<typename _CharT >
    class messages;
    template<typename _CharT >
    class messages_byname;
}
#pragma GCC visibility push(default)
struct timespec
{
        __time_t tv_sec;
        long int tv_nsec;
};
struct sched_param
{
        int __sched_priority;
};
extern "C"
{
    extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw ();
    extern int unshare(int __flags) throw ();
    extern int sched_getcpu(void) throw ();
}
struct __sched_param
{
        int __sched_priority;
};
typedef unsigned long int __cpu_mask;
typedef struct 
{
        __cpu_mask __bits[1024 / (8 * sizeof(__cpu_mask))];
} cpu_set_t;
extern "C"
{
    extern int __sched_cpucount(size_t __setsize, const cpu_set_t * __setp) throw ();
    extern cpu_set_t * __sched_cpualloc(size_t __count) throw ();
    extern void __sched_cpufree(cpu_set_t * __set) throw ();
}
extern "C"
{
    extern int sched_setparam(__pid_t __pid, __const struct sched_param * __param) throw ();
    extern int sched_getparam(__pid_t __pid, struct sched_param * __param) throw ();
    extern int sched_setscheduler(__pid_t __pid, int __policy, __const struct sched_param * __param) throw ();
    extern int sched_getscheduler(__pid_t __pid) throw ();
    extern int sched_yield(void) throw ();
    extern int sched_get_priority_max(int __algorithm) throw ();
    extern int sched_get_priority_min(int __algorithm) throw ();
    extern int sched_rr_get_interval(__pid_t __pid, struct timespec * __t) throw ();
    extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, __const cpu_set_t * __cpuset) throw ();
    extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset) throw ();
}
extern "C"
{
    typedef __clock_t clock_t;
    typedef __time_t time_t;
    typedef __clockid_t clockid_t;
    typedef __timer_t timer_t;
    struct tm
    {
            int tm_sec;
            int tm_min;
            int tm_hour;
            int tm_mday;
            int tm_mon;
            int tm_year;
            int tm_wday;
            int tm_yday;
            int tm_isdst;
            long int tm_gmtoff;
            __const char * tm_zone;
    };
    struct itimerspec
    {
            struct timespec it_interval;
            struct timespec it_value;
    };
    struct sigevent;
    typedef __pid_t pid_t;
    extern clock_t clock(void) throw ();
    extern time_t time(time_t * __timer) throw ();
    extern double difftime(time_t __time1, time_t __time0) throw () __attribute__((__const__));
    extern time_t mktime(struct tm * __tp) throw ();
    extern size_t strftime(char *__restrict __s, size_t __maxsize, __const char *__restrict __format, __const struct tm *__restrict __tp) throw ();
    extern char * strptime(__const char *__restrict __s, __const char *__restrict __fmt, struct tm * __tp) throw ();
    extern size_t strftime_l(char *__restrict __s, size_t __maxsize, __const char *__restrict __format, __const struct tm *__restrict __tp, __locale_t __loc) throw ();
    extern char * strptime_l(__const char *__restrict __s, __const char *__restrict __fmt, struct tm * __tp, __locale_t __loc) throw ();
    extern struct tm * gmtime(__const time_t * __timer) throw ();
    extern struct tm * localtime(__const time_t * __timer) throw ();
    extern struct tm * gmtime_r(__const time_t *__restrict __timer, struct tm *__restrict __tp) throw ();
    extern struct tm * localtime_r(__const time_t *__restrict __timer, struct tm *__restrict __tp) throw ();
    extern char * asctime(__const struct tm * __tp) throw ();
    extern char * ctime(__const time_t * __timer) throw ();
    extern char * asctime_r(__const struct tm *__restrict __tp, char *__restrict __buf) throw ();
    extern char * ctime_r(__const time_t *__restrict __timer, char *__restrict __buf) throw ();
    extern char * __tzname[2];
    extern int __daylight;
    extern long int __timezone;
    extern char * tzname[2];
    extern void tzset(void) throw ();
    extern int daylight;
    extern long int timezone;
    extern int stime(__const time_t * __when) throw ();
    extern time_t timegm(struct tm * __tp) throw ();
    extern time_t timelocal(struct tm * __tp) throw ();
    extern int dysize(int __year) throw () __attribute__((__const__));
    extern int nanosleep(__const struct timespec * __requested_time, struct timespec * __remaining);
    extern int clock_getres(clockid_t __clock_id, struct timespec * __res) throw ();
    extern int clock_gettime(clockid_t __clock_id, struct timespec * __tp) throw ();
    extern int clock_settime(clockid_t __clock_id, __const struct timespec * __tp) throw ();
    extern int clock_nanosleep(clockid_t __clock_id, int __flags, __const struct timespec * __req, struct timespec * __rem);
    extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw ();
    extern int timer_create(clockid_t __clock_id, struct sigevent *__restrict __evp, timer_t *__restrict __timerid) throw ();
    extern int timer_delete(timer_t __timerid) throw ();
    extern int timer_settime(timer_t __timerid, int __flags, __const struct itimerspec *__restrict __value, struct itimerspec *__restrict __ovalue) throw ();
    extern int timer_gettime(timer_t __timerid, struct itimerspec * __value) throw ();
    extern int timer_getoverrun(timer_t __timerid) throw ();
    extern int getdate_err;
    extern struct tm * getdate(__const char * __string);
    extern int getdate_r(__const char *__restrict __string, struct tm *__restrict __resbufp);
}
extern "C"
{
    typedef int __sig_atomic_t;
    typedef struct 
    {
            unsigned long int __val[(1024 / (8 * sizeof(unsigned long int)))];
    } __sigset_t;
    typedef __sigset_t sigset_t;
}
typedef unsigned long int pthread_t;
typedef union 
{
        char __size[56];
        long int __align;
} pthread_attr_t;
typedef struct __pthread_internal_list
{
        struct __pthread_internal_list * __prev;
        struct __pthread_internal_list * __next;
} __pthread_list_t;
typedef union 
{
        struct __pthread_mutex_s
        {
                int __lock;
                unsigned int __count;
                int __owner;
                unsigned int __nusers;
                int __kind;
                int __spins;
                __pthread_list_t __list;
        } __data;
        char __size[40];
        long int __align;
} pthread_mutex_t;
typedef union 
{
        char __size[4];
        int __align;
} pthread_mutexattr_t;
typedef union 
{
        struct 
        {
                int __lock;
                unsigned int __futex;
                __extension__
                unsigned long long int __total_seq;
                __extension__
                unsigned long long int __wakeup_seq;
                __extension__
                unsigned long long int __woken_seq;
                void * __mutex;
                unsigned int __nwaiters;
                unsigned int __broadcast_seq;
        } __data;
        char __size[48];
        __extension__
        long long int __align;
} pthread_cond_t;
typedef union 
{
        char __size[4];
        int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union 
{
        struct 
        {
                int __lock;
                unsigned int __nr_readers;
                unsigned int __readers_wakeup;
                unsigned int __writer_wakeup;
                unsigned int __nr_readers_queued;
                unsigned int __nr_writers_queued;
                int __writer;
                int __shared;
                unsigned long int __pad1;
                unsigned long int __pad2;
                unsigned int __flags;
        } __data;
        char __size[56];
        long int __align;
} pthread_rwlock_t;
typedef union 
{
        char __size[8];
        long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union 
{
        char __size[32];
        long int __align;
} pthread_barrier_t;
typedef union 
{
        char __size[4];
        int __align;
} pthread_barrierattr_t;
typedef long int __jmp_buf[8];
enum 
{
    PTHREAD_CREATE_JOINABLE, 
    PTHREAD_CREATE_DETACHED
};
enum 
{
    PTHREAD_MUTEX_TIMED_NP, 
    PTHREAD_MUTEX_RECURSIVE_NP, 
    PTHREAD_MUTEX_ERRORCHECK_NP, 
    PTHREAD_MUTEX_ADAPTIVE_NP, 
    PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
    PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP, 
    PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP, 
    PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL, 
    PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
};
enum 
{
    PTHREAD_MUTEX_STALLED_NP, 
    PTHREAD_MUTEX_ROBUST_NP
};
enum 
{
    PTHREAD_PRIO_NONE, 
    PTHREAD_PRIO_INHERIT, 
    PTHREAD_PRIO_PROTECT
};
enum 
{
    PTHREAD_RWLOCK_PREFER_READER_NP, 
    PTHREAD_RWLOCK_PREFER_WRITER_NP, 
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
    PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
enum 
{
    PTHREAD_INHERIT_SCHED, 
    PTHREAD_EXPLICIT_SCHED
};
enum 
{
    PTHREAD_SCOPE_SYSTEM, 
    PTHREAD_SCOPE_PROCESS
};
enum 
{
    PTHREAD_PROCESS_PRIVATE, 
    PTHREAD_PROCESS_SHARED
};
struct _pthread_cleanup_buffer
{
        void (* __routine)(void *);
        void * __arg;
        int __canceltype;
        struct _pthread_cleanup_buffer * __prev;
};
enum 
{
    PTHREAD_CANCEL_ENABLE, 
    PTHREAD_CANCEL_DISABLE
};
enum 
{
    PTHREAD_CANCEL_DEFERRED, 
    PTHREAD_CANCEL_ASYNCHRONOUS
};
extern "C"
{
    extern int pthread_create(pthread_t *__restrict __newthread, __const pthread_attr_t *__restrict __attr, void * (* __start_routine)(void *), void *__restrict __arg) throw () __attribute__((__nonnull__(1, 3)));
    extern void pthread_exit(void * __retval) __attribute__((__noreturn__));
    extern int pthread_join(pthread_t __th, void * * __thread_return);
    extern int pthread_tryjoin_np(pthread_t __th, void * * __thread_return) throw ();
    extern int pthread_timedjoin_np(pthread_t __th, void * * __thread_return, __const struct timespec * __abstime);
    extern int pthread_detach(pthread_t __th) throw ();
    extern pthread_t pthread_self(void) throw () __attribute__((__const__));
    extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw ();
    extern int pthread_attr_init(pthread_attr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_destroy(pthread_attr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getdetachstate(__const pthread_attr_t * __attr, int * __detachstate) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getguardsize(__const pthread_attr_t * __attr, size_t * __guardsize) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getschedparam(__const pthread_attr_t *__restrict __attr, struct sched_param *__restrict __param) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setschedparam(pthread_attr_t *__restrict __attr, __const struct sched_param *__restrict __param) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_getschedpolicy(__const pthread_attr_t *__restrict __attr, int *__restrict __policy) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getinheritsched(__const pthread_attr_t *__restrict __attr, int *__restrict __inherit) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getscope(__const pthread_attr_t *__restrict __attr, int *__restrict __scope) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getstackaddr(__const pthread_attr_t *__restrict __attr, void * *__restrict __stackaddr) throw () __attribute__((__nonnull__(1, 2))) __attribute__((__deprecated__));
    extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw () __attribute__((__nonnull__(1))) __attribute__((__deprecated__));
    extern int pthread_attr_getstacksize(__const pthread_attr_t *__restrict __attr, size_t *__restrict __stacksize) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_getstack(__const pthread_attr_t *__restrict __attr, void * *__restrict __stackaddr, size_t *__restrict __stacksize) throw () __attribute__((__nonnull__(1, 2, 3)));
    extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, size_t __stacksize) throw () __attribute__((__nonnull__(1)));
    extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, size_t __cpusetsize, __const cpu_set_t * __cpuset) throw () __attribute__((__nonnull__(1, 3)));
    extern int pthread_attr_getaffinity_np(__const pthread_attr_t * __attr, size_t __cpusetsize, cpu_set_t * __cpuset) throw () __attribute__((__nonnull__(1, 3)));
    extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw () __attribute__((__nonnull__(2)));
    extern int pthread_setschedparam(pthread_t __target_thread, int __policy, __const struct sched_param * __param) throw () __attribute__((__nonnull__(3)));
    extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict __policy, struct sched_param *__restrict __param) throw () __attribute__((__nonnull__(2, 3)));
    extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw ();
    extern int pthread_getconcurrency(void) throw ();
    extern int pthread_setconcurrency(int __level) throw ();
    extern int pthread_yield(void) throw ();
    extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, __const cpu_set_t * __cpuset) throw () __attribute__((__nonnull__(3)));
    extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t * __cpuset) throw () __attribute__((__nonnull__(3)));
    extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void)) __attribute__((__nonnull__(1, 2)));
    extern int pthread_setcancelstate(int __state, int * __oldstate);
    extern int pthread_setcanceltype(int __type, int * __oldtype);
    extern int pthread_cancel(pthread_t __th);
    extern void pthread_testcancel(void);
    typedef struct 
    {
            struct 
            {
                    __jmp_buf __cancel_jmp_buf;
                    int __mask_was_saved;
            } __cancel_jmp_buf[1];
            void * __pad[4];
    } __pthread_unwind_buf_t __attribute__((__aligned__));
    struct __pthread_cleanup_frame
    {
            void (* __cancel_routine)(void *);
            void * __cancel_arg;
            int __do_it;
            int __cancel_type;
    };
    class __pthread_cleanup_class
    {
            void (* __cancel_routine)(void *);
            void * __cancel_arg;
            int __do_it;
            int __cancel_type;
        public :
            __pthread_cleanup_class(void (* __fct)(void *), void * __arg)
                : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
            {
            }
            ~__pthread_cleanup_class()
            {
                if (__do_it)
                    __cancel_routine(__cancel_arg);
            }
            void __setdoit(int __newval)
            {
                __do_it = __newval;
            }
            void __defer()
            {
                pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &__cancel_type);
            }
            void __restore() const
            {
                pthread_setcanceltype(__cancel_type, 0);
            }
    };
    struct __jmp_buf_tag;
    extern int __sigsetjmp(struct __jmp_buf_tag * __env, int __savemask) throw ();
    extern int pthread_mutex_init(pthread_mutex_t * __mutex, __const pthread_mutexattr_t * __mutexattr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict __mutex, __const struct timespec *__restrict __abstime) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutex_getprioceiling(__const pthread_mutex_t *__restrict __mutex, int *__restrict __prioceiling) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict __mutex, int __prioceiling, int *__restrict __old_ceiling) throw () __attribute__((__nonnull__(1, 3)));
    extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_getpshared(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __pshared) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_gettype(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __kind) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_getprotocol(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __protocol) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_getprioceiling(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __prioceiling) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw () __attribute__((__nonnull__(1)));
    extern int pthread_mutexattr_getrobust_np(__const pthread_mutexattr_t * __attr, int * __robustness) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_init(pthread_rwlock_t *__restrict __rwlock, __const pthread_rwlockattr_t *__restrict __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict __rwlock, __const struct timespec *__restrict __abstime) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict __rwlock, __const struct timespec *__restrict __abstime) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlockattr_getpshared(__const pthread_rwlockattr_t *__restrict __attr, int *__restrict __pshared) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw () __attribute__((__nonnull__(1)));
    extern int pthread_rwlockattr_getkind_np(__const pthread_rwlockattr_t *__restrict __attr, int *__restrict __pref) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw () __attribute__((__nonnull__(1)));
    extern int pthread_cond_init(pthread_cond_t *__restrict __cond, __const pthread_condattr_t *__restrict __cond_attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_cond_destroy(pthread_cond_t * __cond) throw () __attribute__((__nonnull__(1)));
    extern int pthread_cond_signal(pthread_cond_t * __cond) throw () __attribute__((__nonnull__(1)));
    extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw () __attribute__((__nonnull__(1)));
    extern int pthread_cond_wait(pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex) __attribute__((__nonnull__(1, 2)));
    extern int pthread_cond_timedwait(pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex, __const struct timespec *__restrict __abstime) __attribute__((__nonnull__(1, 2, 3)));
    extern int pthread_condattr_init(pthread_condattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_condattr_getpshared(__const pthread_condattr_t *__restrict __attr, int *__restrict __pshared) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw () __attribute__((__nonnull__(1)));
    extern int pthread_condattr_getclock(__const pthread_condattr_t *__restrict __attr, __clockid_t *__restrict __clock_id) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw () __attribute__((__nonnull__(1)));
    extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw () __attribute__((__nonnull__(1)));
    extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw () __attribute__((__nonnull__(1)));
    extern int pthread_barrier_init(pthread_barrier_t *__restrict __barrier, __const pthread_barrierattr_t *__restrict __attr, unsigned int __count) throw () __attribute__((__nonnull__(1)));
    extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw () __attribute__((__nonnull__(1)));
    extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw () __attribute__((__nonnull__(1)));
    extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw () __attribute__((__nonnull__(1)));
    extern int pthread_barrierattr_getpshared(__const pthread_barrierattr_t *__restrict __attr, int *__restrict __pshared) throw () __attribute__((__nonnull__(1, 2)));
    extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw () __attribute__((__nonnull__(1)));
    extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw () __attribute__((__nonnull__(1)));
    extern int pthread_key_delete(pthread_key_t __key) throw ();
    extern void * pthread_getspecific(pthread_key_t __key) throw ();
    extern int pthread_setspecific(pthread_key_t __key, __const void * __pointer) throw ();
    extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw () __attribute__((__nonnull__(2)));
    extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw ();
}
extern "C"
{
    typedef __ssize_t ssize_t;
    typedef __gid_t gid_t;
    typedef __uid_t uid_t;
    typedef __off_t off_t;
    typedef __off64_t off64_t;
    typedef __useconds_t useconds_t;
    typedef __socklen_t socklen_t;
    extern int access(__const char * __name, int __type) throw () __attribute__((__nonnull__(1)));
    extern int euidaccess(__const char * __name, int __type) throw () __attribute__((__nonnull__(1)));
    extern int eaccess(__const char * __name, int __type) throw () __attribute__((__nonnull__(1)));
    extern int faccessat(int __fd, __const char * __file, int __type, int __flag) throw () __attribute__((__nonnull__(2)));
    extern __off_t lseek(int __fd, __off_t __offset, int __whence) throw ();
    extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence) throw ();
    extern int close(int __fd);
    extern ssize_t read(int __fd, void * __buf, size_t __nbytes);
    extern ssize_t write(int __fd, __const void * __buf, size_t __n);
    extern ssize_t pread(int __fd, void * __buf, size_t __nbytes, __off_t __offset);
    extern ssize_t pwrite(int __fd, __const void * __buf, size_t __n, __off_t __offset);
    extern ssize_t pread64(int __fd, void * __buf, size_t __nbytes, __off64_t __offset);
    extern ssize_t pwrite64(int __fd, __const void * __buf, size_t __n, __off64_t __offset);
    extern int pipe(int __pipedes[2]) throw ();
    extern unsigned int alarm(unsigned int __seconds) throw ();
    extern unsigned int sleep(unsigned int __seconds);
    extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval) throw ();
    extern int usleep(__useconds_t __useconds);
    extern int pause(void);
    extern int chown(__const char * __file, __uid_t __owner, __gid_t __group) throw () __attribute__((__nonnull__(1)));
    extern int fchown(int __fd, __uid_t __owner, __gid_t __group) throw ();
    extern int lchown(__const char * __file, __uid_t __owner, __gid_t __group) throw () __attribute__((__nonnull__(1)));
    extern int fchownat(int __fd, __const char * __file, __uid_t __owner, __gid_t __group, int __flag) throw () __attribute__((__nonnull__(2)));
    extern int chdir(__const char * __path) throw () __attribute__((__nonnull__(1)));
    extern int fchdir(int __fd) throw ();
    extern char * getcwd(char * __buf, size_t __size) throw ();
    extern char * get_current_dir_name(void) throw ();
    extern char * getwd(char * __buf) throw () __attribute__((__nonnull__(1))) __attribute__((__deprecated__));
    extern int dup(int __fd) throw ();
    extern int dup2(int __fd, int __fd2) throw ();
    extern char * * __environ;
    extern char * * environ;
    extern int execve(__const char * __path, char *__const __argv[], char *__const __envp[]) throw () __attribute__((__nonnull__(1)));
    extern int fexecve(int __fd, char *__const __argv[], char *__const __envp[]) throw ();
    extern int execv(__const char * __path, char *__const __argv[]) throw () __attribute__((__nonnull__(1)));
    extern int execle(__const char * __path, __const char * __arg, ...) throw () __attribute__((__nonnull__(1)));
    extern int execl(__const char * __path, __const char * __arg, ...) throw () __attribute__((__nonnull__(1)));
    extern int execvp(__const char * __file, char *__const __argv[]) throw () __attribute__((__nonnull__(1)));
    extern int execlp(__const char * __file, __const char * __arg, ...) throw () __attribute__((__nonnull__(1)));
    extern int nice(int __inc) throw ();
    extern void _exit(int __status) __attribute__((__noreturn__));
    enum 
    {
        _PC_LINK_MAX, 
        _PC_MAX_CANON, 
        _PC_MAX_INPUT, 
        _PC_NAME_MAX, 
        _PC_PATH_MAX, 
        _PC_PIPE_BUF, 
        _PC_CHOWN_RESTRICTED, 
        _PC_NO_TRUNC, 
        _PC_VDISABLE, 
        _PC_SYNC_IO, 
        _PC_ASYNC_IO, 
        _PC_PRIO_IO, 
        _PC_SOCK_MAXBUF, 
        _PC_FILESIZEBITS, 
        _PC_REC_INCR_XFER_SIZE, 
        _PC_REC_MAX_XFER_SIZE, 
        _PC_REC_MIN_XFER_SIZE, 
        _PC_REC_XFER_ALIGN, 
        _PC_ALLOC_SIZE_MIN, 
        _PC_SYMLINK_MAX, 
        _PC_2_SYMLINKS
    };
    enum 
    {
        _SC_ARG_MAX, 
        _SC_CHILD_MAX, 
        _SC_CLK_TCK, 
        _SC_NGROUPS_MAX, 
        _SC_OPEN_MAX, 
        _SC_STREAM_MAX, 
        _SC_TZNAME_MAX, 
        _SC_JOB_CONTROL, 
        _SC_SAVED_IDS, 
        _SC_REALTIME_SIGNALS, 
        _SC_PRIORITY_SCHEDULING, 
        _SC_TIMERS, 
        _SC_ASYNCHRONOUS_IO, 
        _SC_PRIORITIZED_IO, 
        _SC_SYNCHRONIZED_IO, 
        _SC_FSYNC, 
        _SC_MAPPED_FILES, 
        _SC_MEMLOCK, 
        _SC_MEMLOCK_RANGE, 
        _SC_MEMORY_PROTECTION, 
        _SC_MESSAGE_PASSING, 
        _SC_SEMAPHORES, 
        _SC_SHARED_MEMORY_OBJECTS, 
        _SC_AIO_LISTIO_MAX, 
        _SC_AIO_MAX, 
        _SC_AIO_PRIO_DELTA_MAX, 
        _SC_DELAYTIMER_MAX, 
        _SC_MQ_OPEN_MAX, 
        _SC_MQ_PRIO_MAX, 
        _SC_VERSION, 
        _SC_PAGESIZE, 
        _SC_RTSIG_MAX, 
        _SC_SEM_NSEMS_MAX, 
        _SC_SEM_VALUE_MAX, 
        _SC_SIGQUEUE_MAX, 
        _SC_TIMER_MAX, 
        _SC_BC_BASE_MAX, 
        _SC_BC_DIM_MAX, 
        _SC_BC_SCALE_MAX, 
        _SC_BC_STRING_MAX, 
        _SC_COLL_WEIGHTS_MAX, 
        _SC_EQUIV_CLASS_MAX, 
        _SC_EXPR_NEST_MAX, 
        _SC_LINE_MAX, 
        _SC_RE_DUP_MAX, 
        _SC_CHARCLASS_NAME_MAX, 
        _SC_2_VERSION, 
        _SC_2_C_BIND, 
        _SC_2_C_DEV, 
        _SC_2_FORT_DEV, 
        _SC_2_FORT_RUN, 
        _SC_2_SW_DEV, 
        _SC_2_LOCALEDEF, 
        _SC_PII, 
        _SC_PII_XTI, 
        _SC_PII_SOCKET, 
        _SC_PII_INTERNET, 
        _SC_PII_OSI, 
        _SC_POLL, 
        _SC_SELECT, 
        _SC_UIO_MAXIOV, 
        _SC_IOV_MAX = _SC_UIO_MAXIOV, 
        _SC_PII_INTERNET_STREAM, 
        _SC_PII_INTERNET_DGRAM, 
        _SC_PII_OSI_COTS, 
        _SC_PII_OSI_CLTS, 
        _SC_PII_OSI_M, 
        _SC_T_IOV_MAX, 
        _SC_THREADS, 
        _SC_THREAD_SAFE_FUNCTIONS, 
        _SC_GETGR_R_SIZE_MAX, 
        _SC_GETPW_R_SIZE_MAX, 
        _SC_LOGIN_NAME_MAX, 
        _SC_TTY_NAME_MAX, 
        _SC_THREAD_DESTRUCTOR_ITERATIONS, 
        _SC_THREAD_KEYS_MAX, 
        _SC_THREAD_STACK_MIN, 
        _SC_THREAD_THREADS_MAX, 
        _SC_THREAD_ATTR_STACKADDR, 
        _SC_THREAD_ATTR_STACKSIZE, 
        _SC_THREAD_PRIORITY_SCHEDULING, 
        _SC_THREAD_PRIO_INHERIT, 
        _SC_THREAD_PRIO_PROTECT, 
        _SC_THREAD_PROCESS_SHARED, 
        _SC_NPROCESSORS_CONF, 
        _SC_NPROCESSORS_ONLN, 
        _SC_PHYS_PAGES, 
        _SC_AVPHYS_PAGES, 
        _SC_ATEXIT_MAX, 
        _SC_PASS_MAX, 
        _SC_XOPEN_VERSION, 
        _SC_XOPEN_XCU_VERSION, 
        _SC_XOPEN_UNIX, 
        _SC_XOPEN_CRYPT, 
        _SC_XOPEN_ENH_I18N, 
        _SC_XOPEN_SHM, 
        _SC_2_CHAR_TERM, 
        _SC_2_C_VERSION, 
        _SC_2_UPE, 
        _SC_XOPEN_XPG2, 
        _SC_XOPEN_XPG3, 
        _SC_XOPEN_XPG4, 
        _SC_CHAR_BIT, 
        _SC_CHAR_MAX, 
        _SC_CHAR_MIN, 
        _SC_INT_MAX, 
        _SC_INT_MIN, 
        _SC_LONG_BIT, 
        _SC_WORD_BIT, 
        _SC_MB_LEN_MAX, 
        _SC_NZERO, 
        _SC_SSIZE_MAX, 
        _SC_SCHAR_MAX, 
        _SC_SCHAR_MIN, 
        _SC_SHRT_MAX, 
        _SC_SHRT_MIN, 
        _SC_UCHAR_MAX, 
        _SC_UINT_MAX, 
        _SC_ULONG_MAX, 
        _SC_USHRT_MAX, 
        _SC_NL_ARGMAX, 
        _SC_NL_LANGMAX, 
        _SC_NL_MSGMAX, 
        _SC_NL_NMAX, 
        _SC_NL_SETMAX, 
        _SC_NL_TEXTMAX, 
        _SC_XBS5_ILP32_OFF32, 
        _SC_XBS5_ILP32_OFFBIG, 
        _SC_XBS5_LP64_OFF64, 
        _SC_XBS5_LPBIG_OFFBIG, 
        _SC_XOPEN_LEGACY, 
        _SC_XOPEN_REALTIME, 
        _SC_XOPEN_REALTIME_THREADS, 
        _SC_ADVISORY_INFO, 
        _SC_BARRIERS, 
        _SC_BASE, 
        _SC_C_LANG_SUPPORT, 
        _SC_C_LANG_SUPPORT_R, 
        _SC_CLOCK_SELECTION, 
        _SC_CPUTIME, 
        _SC_THREAD_CPUTIME, 
        _SC_DEVICE_IO, 
        _SC_DEVICE_SPECIFIC, 
        _SC_DEVICE_SPECIFIC_R, 
        _SC_FD_MGMT, 
        _SC_FIFO, 
        _SC_PIPE, 
        _SC_FILE_ATTRIBUTES, 
        _SC_FILE_LOCKING, 
        _SC_FILE_SYSTEM, 
        _SC_MONOTONIC_CLOCK, 
        _SC_MULTI_PROCESS, 
        _SC_SINGLE_PROCESS, 
        _SC_NETWORKING, 
        _SC_READER_WRITER_LOCKS, 
        _SC_SPIN_LOCKS, 
        _SC_REGEXP, 
        _SC_REGEX_VERSION, 
        _SC_SHELL, 
        _SC_SIGNALS, 
        _SC_SPAWN, 
        _SC_SPORADIC_SERVER, 
        _SC_THREAD_SPORADIC_SERVER, 
        _SC_SYSTEM_DATABASE, 
        _SC_SYSTEM_DATABASE_R, 
        _SC_TIMEOUTS, 
        _SC_TYPED_MEMORY_OBJECTS, 
        _SC_USER_GROUPS, 
        _SC_USER_GROUPS_R, 
        _SC_2_PBS, 
        _SC_2_PBS_ACCOUNTING, 
        _SC_2_PBS_LOCATE, 
        _SC_2_PBS_MESSAGE, 
        _SC_2_PBS_TRACK, 
        _SC_SYMLOOP_MAX, 
        _SC_STREAMS, 
        _SC_2_PBS_CHECKPOINT, 
        _SC_V6_ILP32_OFF32, 
        _SC_V6_ILP32_OFFBIG, 
        _SC_V6_LP64_OFF64, 
        _SC_V6_LPBIG_OFFBIG, 
        _SC_HOST_NAME_MAX, 
        _SC_TRACE, 
        _SC_TRACE_EVENT_FILTER, 
        _SC_TRACE_INHERIT, 
        _SC_TRACE_LOG, 
        _SC_LEVEL1_ICACHE_SIZE, 
        _SC_LEVEL1_ICACHE_ASSOC, 
        _SC_LEVEL1_ICACHE_LINESIZE, 
        _SC_LEVEL1_DCACHE_SIZE, 
        _SC_LEVEL1_DCACHE_ASSOC, 
        _SC_LEVEL1_DCACHE_LINESIZE, 
        _SC_LEVEL2_CACHE_SIZE, 
        _SC_LEVEL2_CACHE_ASSOC, 
        _SC_LEVEL2_CACHE_LINESIZE, 
        _SC_LEVEL3_CACHE_SIZE, 
        _SC_LEVEL3_CACHE_ASSOC, 
        _SC_LEVEL3_CACHE_LINESIZE, 
        _SC_LEVEL4_CACHE_SIZE, 
        _SC_LEVEL4_CACHE_ASSOC, 
        _SC_LEVEL4_CACHE_LINESIZE, 
        _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50, 
        _SC_RAW_SOCKETS
    };
    enum 
    {
        _CS_PATH, 
        _CS_V6_WIDTH_RESTRICTED_ENVS, 
        _CS_GNU_LIBC_VERSION, 
        _CS_GNU_LIBPTHREAD_VERSION, 
        _CS_LFS_CFLAGS = 1000, 
        _CS_LFS_LDFLAGS, 
        _CS_LFS_LIBS, 
        _CS_LFS_LINTFLAGS, 
        _CS_LFS64_CFLAGS, 
        _CS_LFS64_LDFLAGS, 
        _CS_LFS64_LIBS, 
        _CS_LFS64_LINTFLAGS, 
        _CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
        _CS_XBS5_ILP32_OFF32_LDFLAGS, 
        _CS_XBS5_ILP32_OFF32_LIBS, 
        _CS_XBS5_ILP32_OFF32_LINTFLAGS, 
        _CS_XBS5_ILP32_OFFBIG_CFLAGS, 
        _CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
        _CS_XBS5_ILP32_OFFBIG_LIBS, 
        _CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
        _CS_XBS5_LP64_OFF64_CFLAGS, 
        _CS_XBS5_LP64_OFF64_LDFLAGS, 
        _CS_XBS5_LP64_OFF64_LIBS, 
        _CS_XBS5_LP64_OFF64_LINTFLAGS, 
        _CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
        _CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
        _CS_XBS5_LPBIG_OFFBIG_LIBS, 
        _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
        _CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
        _CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
        _CS_POSIX_V6_ILP32_OFF32_LIBS, 
        _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
        _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
        _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
        _CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
        _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
        _CS_POSIX_V6_LP64_OFF64_CFLAGS, 
        _CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
        _CS_POSIX_V6_LP64_OFF64_LIBS, 
        _CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
        _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
        _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
        _CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
        _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
    };
    extern long int pathconf(__const char * __path, int __name) throw () __attribute__((__nonnull__(1)));
    extern long int fpathconf(int __fd, int __name) throw ();
    extern long int sysconf(int __name) throw ();
    extern size_t confstr(int __name, char * __buf, size_t __len) throw ();
    extern __pid_t getpid(void) throw ();
    extern __pid_t getppid(void) throw ();
    extern __pid_t getpgrp(void) throw ();
    extern __pid_t __getpgid(__pid_t __pid) throw ();
    extern __pid_t getpgid(__pid_t __pid) throw ();
    extern int setpgid(__pid_t __pid, __pid_t __pgid) throw ();
    extern int setpgrp(void) throw ();
    extern __pid_t setsid(void) throw ();
    extern __pid_t getsid(__pid_t __pid) throw ();
    extern __uid_t getuid(void) throw ();
    extern __uid_t geteuid(void) throw ();
    extern __gid_t getgid(void) throw ();
    extern __gid_t getegid(void) throw ();
    extern int getgroups(int __size, __gid_t __list[]) throw ();
    extern int group_member(__gid_t __gid) throw ();
    extern int setuid(__uid_t __uid) throw ();
    extern int setreuid(__uid_t __ruid, __uid_t __euid) throw ();
    extern int seteuid(__uid_t __uid) throw ();
    extern int setgid(__gid_t __gid) throw ();
    extern int setregid(__gid_t __rgid, __gid_t __egid) throw ();
    extern int setegid(__gid_t __gid) throw ();
    extern int getresuid(__uid_t * __ruid, __uid_t * __euid, __uid_t * __suid) throw ();
    extern int getresgid(__gid_t * __rgid, __gid_t * __egid, __gid_t * __sgid) throw ();
    extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid) throw ();
    extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid) throw ();
    extern __pid_t fork(void) throw ();
    extern __pid_t vfork(void) throw ();
    extern char * ttyname(int __fd) throw ();
    extern int ttyname_r(int __fd, char * __buf, size_t __buflen) throw () __attribute__((__nonnull__(2)));
    extern int isatty(int __fd) throw ();
    extern int ttyslot(void) throw ();
    extern int link(__const char * __from, __const char * __to) throw () __attribute__((__nonnull__(1, 2)));
    extern int linkat(int __fromfd, __const char * __from, int __tofd, __const char * __to, int __flags) throw () __attribute__((__nonnull__(2, 4)));
    extern int symlink(__const char * __from, __const char * __to) throw () __attribute__((__nonnull__(1, 2)));
    extern ssize_t readlink(__const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __attribute__((__nonnull__(1, 2)));
    extern int symlinkat(__const char * __from, int __tofd, __const char * __to) throw () __attribute__((__nonnull__(1, 3)));
    extern ssize_t readlinkat(int __fd, __const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __attribute__((__nonnull__(2, 3)));
    extern int unlink(__const char * __name) throw () __attribute__((__nonnull__(1)));
    extern int unlinkat(int __fd, __const char * __name, int __flag) throw () __attribute__((__nonnull__(2)));
    extern int rmdir(__const char * __path) throw () __attribute__((__nonnull__(1)));
    extern __pid_t tcgetpgrp(int __fd) throw ();
    extern int tcsetpgrp(int __fd, __pid_t __pgrp_id) throw ();
    extern char * getlogin(void);
    extern int getlogin_r(char * __name, size_t __name_len) __attribute__((__nonnull__(1)));
    extern int setlogin(__const char * __name) throw () __attribute__((__nonnull__(1)));
    extern "C"
    {
        extern char * optarg;
        extern int optind;
        extern int opterr;
        extern int optopt;
        extern int getopt(int ___argc, char *const * ___argv, const char * __shortopts) throw ();
    }
    extern int gethostname(char * __name, size_t __len) throw () __attribute__((__nonnull__(1)));
    extern int sethostname(__const char * __name, size_t __len) throw () __attribute__((__nonnull__(1)));
    extern int sethostid(long int __id) throw ();
    extern int getdomainname(char * __name, size_t __len) throw () __attribute__((__nonnull__(1)));
    extern int setdomainname(__const char * __name, size_t __len) throw () __attribute__((__nonnull__(1)));
    extern int vhangup(void) throw ();
    extern int revoke(__const char * __file) throw () __attribute__((__nonnull__(1)));
    extern int profil(unsigned short int * __sample_buffer, size_t __size, size_t __offset, unsigned int __scale) throw () __attribute__((__nonnull__(1)));
    extern int acct(__const char * __name) throw ();
    extern char * getusershell(void) throw ();
    extern void endusershell(void) throw ();
    extern void setusershell(void) throw ();
    extern int daemon(int __nochdir, int __noclose) throw ();
    extern int chroot(__const char * __path) throw () __attribute__((__nonnull__(1)));
    extern char * getpass(__const char * __prompt) __attribute__((__nonnull__(1)));
    extern int fsync(int __fd);
    extern long int gethostid(void);
    extern void sync(void) throw ();
    extern int getpagesize(void) throw () __attribute__((__const__));
    extern int getdtablesize(void) throw ();
    extern int truncate(__const char * __file, __off_t __length) throw () __attribute__((__nonnull__(1)));
    extern int truncate64(__const char * __file, __off64_t __length) throw () __attribute__((__nonnull__(1)));
    extern int ftruncate(int __fd, __off_t __length) throw ();
    extern int ftruncate64(int __fd, __off64_t __length) throw ();
    extern int brk(void * __addr) throw ();
    extern void * sbrk(intptr_t __delta) throw ();
    extern long int syscall(long int __sysno, ...) throw ();
    extern int lockf(int __fd, int __cmd, __off_t __len);
    extern int lockf64(int __fd, int __cmd, __off64_t __len);
    extern int fdatasync(int __fildes);
    extern char * crypt(__const char * __key, __const char * __salt) throw () __attribute__((__nonnull__(1, 2)));
    extern void encrypt(char * __block, int __edflag) throw () __attribute__((__nonnull__(1)));
    extern void swab(__const void *__restrict __from, void *__restrict __to, ssize_t __n) throw () __attribute__((__nonnull__(1, 2)));
    extern char * ctermid(char * __s) throw ();
}
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
static __typeof (pthread_once) __gthrw_pthread_once __attribute__((__weakref__("pthread_once")));
static __typeof (pthread_getspecific) __gthrw_pthread_getspecific __attribute__((__weakref__("pthread_getspecific")));
static __typeof (pthread_setspecific) __gthrw_pthread_setspecific __attribute__((__weakref__("pthread_setspecific")));
static __typeof (pthread_create) __gthrw_pthread_create __attribute__((__weakref__("pthread_create")));
static __typeof (pthread_cancel) __gthrw_pthread_cancel __attribute__((__weakref__("pthread_cancel")));
static __typeof (pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__((__weakref__("pthread_mutex_lock")));
static __typeof (pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__((__weakref__("pthread_mutex_trylock")));
static __typeof (pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__((__weakref__("pthread_mutex_unlock")));
static __typeof (pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__((__weakref__("pthread_mutex_init")));
static __typeof (pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__((__weakref__("pthread_cond_broadcast")));
static __typeof (pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__((__weakref__("pthread_cond_wait")));
static __typeof (pthread_key_create) __gthrw_pthread_key_create __attribute__((__weakref__("pthread_key_create")));
static __typeof (pthread_key_delete) __gthrw_pthread_key_delete __attribute__((__weakref__("pthread_key_delete")));
static __typeof (pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__((__weakref__("pthread_mutexattr_init")));
static __typeof (pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__((__weakref__("pthread_mutexattr_settype")));
static __typeof (pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__((__weakref__("pthread_mutexattr_destroy")));
static inline int __gthread_active_p(void)
{
    static void *const __gthread_active_ptr = __extension__ (void *) &__gthrw_pthread_cancel;
    return __gthread_active_ptr != 0;
}
static inline int __gthread_once(__gthread_once_t * once, void (* func)(void))
{
    if (__gthread_active_p())
        return __gthrw_pthread_once(once, func);
    else
        return -1;
}
static inline int __gthread_key_create(__gthread_key_t * key, void (* dtor)(void *))
{
    return __gthrw_pthread_key_create(key, dtor);
}
static inline int __gthread_key_delete(__gthread_key_t key)
{
    return __gthrw_pthread_key_delete(key);
}
static inline void * __gthread_getspecific(__gthread_key_t key)
{
    return __gthrw_pthread_getspecific(key);
}
static inline int __gthread_setspecific(__gthread_key_t key, const void * ptr)
{
    return __gthrw_pthread_setspecific(key, ptr);
}
static inline int __gthread_mutex_lock(__gthread_mutex_t * mutex)
{
    if (__gthread_active_p())
        return __gthrw_pthread_mutex_lock(mutex);
    else
        return 0;
}
static inline int __gthread_mutex_trylock(__gthread_mutex_t * mutex)
{
    if (__gthread_active_p())
        return __gthrw_pthread_mutex_trylock(mutex);
    else
        return 0;
}
static inline int __gthread_mutex_unlock(__gthread_mutex_t * mutex)
{
    if (__gthread_active_p())
        return __gthrw_pthread_mutex_unlock(mutex);
    else
        return 0;
}
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t * mutex)
{
    return __gthread_mutex_lock(mutex);
}
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t * mutex)
{
    return __gthread_mutex_trylock(mutex);
}
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t * mutex)
{
    return __gthread_mutex_unlock(mutex);
}
static inline int __gthread_cond_broadcast(__gthread_cond_t * cond)
{
    return __gthrw_pthread_cond_broadcast(cond);
}
static inline int __gthread_cond_wait(__gthread_cond_t * cond, __gthread_mutex_t * mutex)
{
    return __gthrw_pthread_cond_wait(cond, mutex);
}
static inline int __gthread_cond_wait_recursive(__gthread_cond_t * cond, __gthread_recursive_mutex_t * mutex)
{
    return __gthread_cond_wait(cond, mutex);
}
#pragma GCC visibility pop
typedef int _Atomic_word;
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
    static inline _Atomic_word __exchange_and_add(volatile _Atomic_word * __mem, int __val)
    {
        return __sync_fetch_and_add(__mem, __val);
    }
    static inline void __atomic_add(volatile _Atomic_word * __mem, int __val)
    {
        __sync_fetch_and_add(__mem, __val);
    }
    static inline _Atomic_word __exchange_and_add_single(_Atomic_word * __mem, int __val)
    {
        _Atomic_word __result = *__mem;
        *__mem += __val;
        return __result;
    }
    static inline void __atomic_add_single(_Atomic_word * __mem, int __val)
    {
        *__mem += __val;
    }
    static inline _Atomic_word __attribute__((__unused__)) __exchange_and_add_dispatch(_Atomic_word * __mem, int __val)
    {
        if (__gthread_active_p())
            return __exchange_and_add(__mem, __val);
        else
            return __exchange_and_add_single(__mem, __val);
    }
    static inline void __attribute__((__unused__)) __atomic_add_dispatch(_Atomic_word * __mem, int __val)
    {
        if (__gthread_active_p())
            __atomic_add(__mem, __val);
        else
            __atomic_add_single(__mem, __val);
    }
}
#pragma GCC visibility push(default)
namespace __cxxabiv1 {
    class __forced_unwind
    {
            virtual ~__forced_unwind() throw ();
            virtual void __pure_dummy() = 0;
    };
}
#pragma GCC visibility pop
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    inline void __ostream_write(basic_ostream< _CharT, _Traits > & __out, const _CharT * __s, streamsize __n)
    {
        typedef basic_ostream< _CharT, _Traits > __ostream_type;
        typedef typename __ostream_type::ios_base __ios_base;
        const streamsize __put = __out.rdbuf()->sputn(__s, __n);
        if (__put != __n)
            __out.setstate(__ios_base::badbit);
    }
    template<typename _CharT, typename _Traits >
    inline void __ostream_fill(basic_ostream< _CharT, _Traits > & __out, streamsize __n)
    {
        typedef basic_ostream< _CharT, _Traits > __ostream_type;
        typedef typename __ostream_type::ios_base __ios_base;
        const _CharT __c = __out.fill();
        for (;
            __n > 0;
            --__n)
        {
            const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
            if (_Traits::eq_int_type(__put, _Traits::eof()))
            {
                __out.setstate(__ios_base::badbit);
                break;
            }
        }
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & __ostream_insert(basic_ostream< _CharT, _Traits > & __out, const _CharT * __s, streamsize __n)
    {
        typedef basic_ostream< _CharT, _Traits > __ostream_type;
        typedef typename __ostream_type::ios_base __ios_base;
        typename __ostream_type::sentry __cerb(__out);
        if (__cerb)
        {
            try
            {
                const streamsize __w = __out.width();
                if (__w > __n)
                {
                    const bool __left = ((__out.flags() & __ios_base::adjustfield) == __ios_base::left);
                    if (!__left)
                        __ostream_fill(__out, __w - __n);
                    if (__out.good())
                        __ostream_write(__out, __s, __n);
                    if (__left && __out.good())
                        __ostream_fill(__out, __w - __n);
                }
                else
                    __ostream_write(__out, __s, __n);
                __out.width(0);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                __out._M_setstate(__ios_base::badbit);
                throw;
            }
            catch (...)
            {
                __out._M_setstate(__ios_base::badbit);
            }
        }
        return __out;
    }
    extern template ostream & __ostream_insert(ostream &, const char *, streamsize);
    extern template wostream & __ostream_insert(wostream &, const wchar_t *, streamsize);
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Arg, typename _Result >
    struct unary_function
    {
            typedef _Arg argument_type;
            typedef _Result result_type;
    };
    template<typename _Arg1, typename _Arg2, typename _Result >
    struct binary_function
    {
            typedef _Arg1 first_argument_type;
            typedef _Arg2 second_argument_type;
            typedef _Result result_type;
    };
    template<typename _Tp >
    struct plus : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x + __y;
            }
    };
    template<typename _Tp >
    struct minus : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x - __y;
            }
    };
    template<typename _Tp >
    struct multiplies : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x * __y;
            }
    };
    template<typename _Tp >
    struct divides : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x / __y;
            }
    };
    template<typename _Tp >
    struct modulus : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x % __y;
            }
    };
    template<typename _Tp >
    struct negate : public unary_function< _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x) const
            {
                return -__x;
            }
    };
    template<typename _Tp >
    struct equal_to : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x == __y;
            }
    };
    template<typename _Tp >
    struct not_equal_to : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x != __y;
            }
    };
    template<typename _Tp >
    struct greater : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x > __y;
            }
    };
    template<typename _Tp >
    struct less : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x < __y;
            }
    };
    template<typename _Tp >
    struct greater_equal : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x >= __y;
            }
    };
    template<typename _Tp >
    struct less_equal : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x <= __y;
            }
    };
    template<typename _Tp >
    struct logical_and : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x && __y;
            }
    };
    template<typename _Tp >
    struct logical_or : public binary_function< _Tp, _Tp, bool >
    {
            bool operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x || __y;
            }
    };
    template<typename _Tp >
    struct logical_not : public unary_function< _Tp, bool >
    {
            bool operator ()(const _Tp & __x) const
            {
                return !__x;
            }
    };
    template<typename _Tp >
    struct bit_and : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x & __y;
            }
    };
    template<typename _Tp >
    struct bit_or : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x | __y;
            }
    };
    template<typename _Tp >
    struct bit_xor : public binary_function< _Tp, _Tp, _Tp >
    {
            _Tp operator ()(const _Tp & __x, const _Tp & __y) const
            {
                return __x ^ __y;
            }
    };
    template<typename _Predicate >
    class unary_negate : public unary_function< typename _Predicate::argument_type, bool >
    {
        protected :
            _Predicate _M_pred;
        public :
            explicit unary_negate(const _Predicate & __x)
                : _M_pred(__x) 
            {
            }
            bool operator ()(const typename _Predicate::argument_type & __x) const
            {
                return !_M_pred(__x);
            }
    };
    template<typename _Predicate >
    inline unary_negate< _Predicate > not1(const _Predicate & __pred)
    {
        return unary_negate< _Predicate >(__pred);
    }
    template<typename _Predicate >
    class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool >
    {
        protected :
            _Predicate _M_pred;
        public :
            explicit binary_negate(const _Predicate & __x)
                : _M_pred(__x) 
            {
            }
            bool operator ()(const typename _Predicate::first_argument_type & __x, const typename _Predicate::second_argument_type & __y) const
            {
                return !_M_pred(__x, __y);
            }
    };
    template<typename _Predicate >
    inline binary_negate< _Predicate > not2(const _Predicate & __pred)
    {
        return binary_negate< _Predicate >(__pred);
    }
    template<typename _Arg, typename _Result >
    class pointer_to_unary_function : public unary_function< _Arg, _Result >
    {
        protected :
            _Result (* _M_ptr)(_Arg);
        public :
            pointer_to_unary_function()
            {
            }
            explicit pointer_to_unary_function(_Result (* __x)(_Arg))
                : _M_ptr(__x) 
            {
            }
            _Result operator ()(_Arg __x) const
            {
                return _M_ptr(__x);
            }
    };
    template<typename _Arg, typename _Result >
    inline pointer_to_unary_function< _Arg, _Result > ptr_fun(_Result (* __x)(_Arg))
    {
        return pointer_to_unary_function< _Arg, _Result >(__x);
    }
    template<typename _Arg1, typename _Arg2, typename _Result >
    class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result >
    {
        protected :
            _Result (* _M_ptr)(_Arg1, _Arg2);
        public :
            pointer_to_binary_function()
            {
            }
            explicit pointer_to_binary_function(_Result (* __x)(_Arg1, _Arg2))
                : _M_ptr(__x) 
            {
            }
            _Result operator ()(_Arg1 __x, _Arg2 __y) const
            {
                return _M_ptr(__x, __y);
            }
    };
    template<typename _Arg1, typename _Arg2, typename _Result >
    inline pointer_to_binary_function< _Arg1, _Arg2, _Result > ptr_fun(_Result (* __x)(_Arg1, _Arg2))
    {
        return pointer_to_binary_function< _Arg1, _Arg2, _Result >(__x);
    }
    template<typename _Tp >
    struct _Identity : public unary_function< _Tp, _Tp >
    {
            _Tp & operator ()(_Tp & __x) const
            {
                return __x;
            }
            const _Tp & operator ()(const _Tp & __x) const
            {
                return __x;
            }
    };
    template<typename _Pair >
    struct _Select1st : public unary_function< _Pair, typename _Pair::first_type >
    {
            typename _Pair::first_type & operator ()(_Pair & __x) const
            {
                return __x.first;
            }
            const typename _Pair::first_type & operator ()(const _Pair & __x) const
            {
                return __x.first;
            }
    };
    template<typename _Pair >
    struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type >
    {
            typename _Pair::second_type & operator ()(_Pair & __x) const
            {
                return __x.second;
            }
            const typename _Pair::second_type & operator ()(const _Pair & __x) const
            {
                return __x.second;
            }
    };
    template<typename _Ret, typename _Tp >
    class mem_fun_t : public unary_function< _Tp *, _Ret >
    {
        public :
            explicit mem_fun_t(_Ret (_Tp:: * __pf)())
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(_Tp * __p) const
            {
                return (__p ->* _M_f)();
            }
        private :
            _Ret (_Tp:: * _M_f)();
    };
    template<typename _Ret, typename _Tp >
    class const_mem_fun_t : public unary_function< const _Tp *, _Ret >
    {
        public :
            explicit const_mem_fun_t(_Ret (_Tp:: * __pf)() const)
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(const _Tp * __p) const
            {
                return (__p ->* _M_f)();
            }
        private :
            _Ret (_Tp:: * _M_f)() const;
    };
    template<typename _Ret, typename _Tp >
    class mem_fun_ref_t : public unary_function< _Tp, _Ret >
    {
        public :
            explicit mem_fun_ref_t(_Ret (_Tp:: * __pf)())
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(_Tp & __r) const
            {
                return (__r .* _M_f)();
            }
        private :
            _Ret (_Tp:: * _M_f)();
    };
    template<typename _Ret, typename _Tp >
    class const_mem_fun_ref_t : public unary_function< _Tp, _Ret >
    {
        public :
            explicit const_mem_fun_ref_t(_Ret (_Tp:: * __pf)() const)
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(const _Tp & __r) const
            {
                return (__r .* _M_f)();
            }
        private :
            _Ret (_Tp:: * _M_f)() const;
    };
    template<typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret >
    {
        public :
            explicit mem_fun1_t(_Ret (_Tp:: * __pf)(_Arg))
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(_Tp * __p, _Arg __x) const
            {
                return (__p ->* _M_f)(__x);
            }
        private :
            _Ret (_Tp:: * _M_f)(_Arg);
    };
    template<typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret >
    {
        public :
            explicit const_mem_fun1_t(_Ret (_Tp:: * __pf)(_Arg) const)
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(const _Tp * __p, _Arg __x) const
            {
                return (__p ->* _M_f)(__x);
            }
        private :
            _Ret (_Tp:: * _M_f)(_Arg) const;
    };
    template<typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret >
    {
        public :
            explicit mem_fun1_ref_t(_Ret (_Tp:: * __pf)(_Arg))
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(_Tp & __r, _Arg __x) const
            {
                return (__r .* _M_f)(__x);
            }
        private :
            _Ret (_Tp:: * _M_f)(_Arg);
    };
    template<typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret >
    {
        public :
            explicit const_mem_fun1_ref_t(_Ret (_Tp:: * __pf)(_Arg) const)
                : _M_f(__pf) 
            {
            }
            _Ret operator ()(const _Tp & __r, _Arg __x) const
            {
                return (__r .* _M_f)(__x);
            }
        private :
            _Ret (_Tp:: * _M_f)(_Arg) const;
    };
    template<typename _Ret, typename _Tp >
    inline mem_fun_t< _Ret, _Tp > mem_fun(_Ret (_Tp:: * __f)())
    {
        return mem_fun_t< _Ret, _Tp >(__f);
    }
    template<typename _Ret, typename _Tp >
    inline const_mem_fun_t< _Ret, _Tp > mem_fun(_Ret (_Tp:: * __f)() const)
    {
        return const_mem_fun_t< _Ret, _Tp >(__f);
    }
    template<typename _Ret, typename _Tp >
    inline mem_fun_ref_t< _Ret, _Tp > mem_fun_ref(_Ret (_Tp:: * __f)())
    {
        return mem_fun_ref_t< _Ret, _Tp >(__f);
    }
    template<typename _Ret, typename _Tp >
    inline const_mem_fun_ref_t< _Ret, _Tp > mem_fun_ref(_Ret (_Tp:: * __f)() const)
    {
        return const_mem_fun_ref_t< _Ret, _Tp >(__f);
    }
    template<typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_t< _Ret, _Tp, _Arg > mem_fun(_Ret (_Tp:: * __f)(_Arg))
    {
        return mem_fun1_t< _Ret, _Tp, _Arg >(__f);
    }
    template<typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_t< _Ret, _Tp, _Arg > mem_fun(_Ret (_Tp:: * __f)(_Arg) const)
    {
        return const_mem_fun1_t< _Ret, _Tp, _Arg >(__f);
    }
    template<typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_ref_t< _Ret, _Tp, _Arg > mem_fun_ref(_Ret (_Tp:: * __f)(_Arg))
    {
        return mem_fun1_ref_t< _Ret, _Tp, _Arg >(__f);
    }
    template<typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg > mem_fun_ref(_Ret (_Tp:: * __f)(_Arg) const)
    {
        return const_mem_fun1_ref_t< _Ret, _Tp, _Arg >(__f);
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Operation >
    class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type >
    {
        protected :
            _Operation op;
            typename _Operation::first_argument_type value;
        public :
            binder1st(const _Operation & __x, const typename _Operation::first_argument_type & __y)
                : op(__x), value(__y) 
            {
            }
            typename _Operation::result_type operator ()(const typename _Operation::second_argument_type & __x) const
            {
                return op(value, __x);
            }
            typename _Operation::result_type operator ()(typename _Operation::second_argument_type & __x) const
            {
                return op(value, __x);
            }
    };
    template<typename _Operation, typename _Tp >
    inline binder1st< _Operation > bind1st(const _Operation & __fn, const _Tp & __x)
    {
        typedef typename _Operation::first_argument_type _Arg1_type;
        return binder1st< _Operation >(__fn, _Arg1_type(__x));
    }
    template<typename _Operation >
    class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type >
    {
        protected :
            _Operation op;
            typename _Operation::second_argument_type value;
        public :
            binder2nd(const _Operation & __x, const typename _Operation::second_argument_type & __y)
                : op(__x), value(__y) 
            {
            }
            typename _Operation::result_type operator ()(const typename _Operation::first_argument_type & __x) const
            {
                return op(__x, value);
            }
            typename _Operation::result_type operator ()(typename _Operation::first_argument_type & __x) const
            {
                return op(__x, value);
            }
    };
    template<typename _Operation, typename _Tp >
    inline binder2nd< _Operation > bind2nd(const _Operation & __fn, const _Tp & __x)
    {
        typedef typename _Operation::second_argument_type _Arg2_type;
        return binder2nd< _Operation >(__fn, _Arg2_type(__x));
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits, typename _Alloc >
    class basic_string
    {
            typedef typename _Alloc::template rebind< _CharT >::other _CharT_alloc_type;
        public :
            typedef _Traits traits_type;
            typedef typename _Traits::char_type value_type;
            typedef _Alloc allocator_type;
            typedef typename _CharT_alloc_type::size_type size_type;
            typedef typename _CharT_alloc_type::difference_type difference_type;
            typedef typename _CharT_alloc_type::reference reference;
            typedef typename _CharT_alloc_type::const_reference const_reference;
            typedef typename _CharT_alloc_type::pointer pointer;
            typedef typename _CharT_alloc_type::const_pointer const_pointer;
            typedef __gnu_cxx::__normal_iterator< pointer, basic_string > iterator;
            typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string > const_iterator;
            typedef std::reverse_iterator< const_iterator > const_reverse_iterator;
            typedef std::reverse_iterator< iterator > reverse_iterator;
        private :
            struct _Rep_base
            {
                    size_type _M_length;
                    size_type _M_capacity;
                    _Atomic_word _M_refcount;
            };
            struct _Rep : _Rep_base
            {
                    typedef typename _Alloc::template rebind< char >::other _Raw_bytes_alloc;
                    static const size_type _S_max_size;
                    static const _CharT _S_terminal;
                    static size_type _S_empty_rep_storage[];
                    static _Rep & _S_empty_rep()
                    {
                        void * __p = reinterpret_cast<void * >(&_S_empty_rep_storage);
                        return *reinterpret_cast<_Rep * >(__p);
                    }
                    bool _M_is_leaked() const
                    {
                        return this->_M_refcount < 0;
                    }
                    bool _M_is_shared() const
                    {
                        return this->_M_refcount > 0;
                    }
                    void _M_set_leaked()
                    {
                        this->_M_refcount = -1;
                    }
                    void _M_set_sharable()
                    {
                        this->_M_refcount = 0;
                    }
                    void _M_set_length_and_sharable(size_type __n)
                    {
                        this->_M_set_sharable();
                        this->_M_length = __n;
                        traits_type::assign(this->_M_refdata()[__n], _S_terminal);
                    }
                    _CharT * _M_refdata() throw ()
                    {
                        return reinterpret_cast<_CharT * >(this + 1);
                    }
                    _CharT * _M_grab(const _Alloc & __alloc1, const _Alloc & __alloc2)
                    {
                        return (!_M_is_leaked() && __alloc1 == __alloc2) ? _M_refcopy() : _M_clone(__alloc1);
                    }
                    static _Rep * _S_create(size_type, size_type, const _Alloc &);
                    void _M_dispose(const _Alloc & __a)
                    {
                        if (__builtin_expect(this != &_S_empty_rep(), false))
                            if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount, -1) <= 0)
                                _M_destroy(__a);
                    }
                    void _M_destroy(const _Alloc &) throw ();
                    _CharT * _M_refcopy() throw ()
                    {
                        if (__builtin_expect(this != &_S_empty_rep(), false))
                            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
                        return _M_refdata();
                    }
                    _CharT * _M_clone(const _Alloc &, size_type __res = 0);
            };
            struct _Alloc_hider : _Alloc
            {
                    _Alloc_hider(_CharT * __dat, const _Alloc & __a)
                        : _Alloc(__a), _M_p(__dat) 
                    {
                    }
                    _CharT * _M_p;
            };
        public :
            static const size_type npos = static_cast<size_type >(-1);
        private :
            mutable _Alloc_hider _M_dataplus;
            _CharT * _M_data() const
            {
                return _M_dataplus._M_p;
            }
            _CharT * _M_data(_CharT * __p)
            {
                return (_M_dataplus._M_p = __p);
            }
            _Rep * _M_rep() const
            {
                return &((reinterpret_cast<_Rep * >(_M_data()))[-1]);
            }
            iterator _M_ibegin() const
            {
                return iterator(_M_data());
            }
            iterator _M_iend() const
            {
                return iterator(_M_data() + this->size());
            }
            void _M_leak()
            {
                if (!_M_rep()->_M_is_leaked())
                    _M_leak_hard();
            }
            size_type _M_check(size_type __pos, const char * __s) const
            {
                if (__pos > this->size())
                    __throw_out_of_range((__s));
                return __pos;
            }
            void _M_check_length(size_type __n1, size_type __n2, const char * __s) const
            {
                if (this->max_size() - (this->size() - __n1) < __n2)
                    __throw_length_error((__s));
            }
            size_type _M_limit(size_type __pos, size_type __off) const
            {
                const bool __testoff = __off < this->size() - __pos;
                return __testoff ? __off : this->size() - __pos;
            }
            bool _M_disjunct(const _CharT * __s) const
            {
                return (less< const _CharT * >()(__s, _M_data()) || less< const _CharT * >()(_M_data() + this->size(), __s));
            }
            static void _M_copy(_CharT * __d, const _CharT * __s, size_type __n)
            {
                if (__n == 1)
                    traits_type::assign(*__d, *__s);
                else
                    traits_type::copy(__d, __s, __n);
            }
            static void _M_move(_CharT * __d, const _CharT * __s, size_type __n)
            {
                if (__n == 1)
                    traits_type::assign(*__d, *__s);
                else
                    traits_type::move(__d, __s, __n);
            }
            static void _M_assign(_CharT * __d, size_type __n, _CharT __c)
            {
                if (__n == 1)
                    traits_type::assign(*__d, __c);
                else
                    traits_type::assign(__d, __n, __c);
            }
            template<class _Iterator >
            static void _S_copy_chars(_CharT * __p, _Iterator __k1, _Iterator __k2)
            {
                for (;
                    __k1 != __k2;
                    ++__k1 , ++__p)
                traits_type::assign(*__p, *__k1);
            }
            static void _S_copy_chars(_CharT * __p, iterator __k1, iterator __k2)
            {
                _S_copy_chars(__p, __k1.base(), __k2.base());
            }
            static void _S_copy_chars(_CharT * __p, const_iterator __k1, const_iterator __k2)
            {
                _S_copy_chars(__p, __k1.base(), __k2.base());
            }
            static void _S_copy_chars(_CharT * __p, _CharT * __k1, _CharT * __k2)
            {
                _M_copy(__p, __k1, __k2 - __k1);
            }
            static void _S_copy_chars(_CharT * __p, const _CharT * __k1, const _CharT * __k2)
            {
                _M_copy(__p, __k1, __k2 - __k1);
            }
            static int _S_compare(size_type __n1, size_type __n2)
            {
                const difference_type __d = difference_type(__n1 - __n2);
                if (__d > __gnu_cxx::__numeric_traits< int >::__max)
                    return __gnu_cxx::__numeric_traits< int >::__max;
                else
                    if (__d < __gnu_cxx::__numeric_traits< int >::__min)
                        return __gnu_cxx::__numeric_traits< int >::__min;
                    else
                        return int(__d);
            }
            void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
            void _M_leak_hard();
            static _Rep & _S_empty_rep()
            {
                return _Rep::_S_empty_rep();
            }
        public :
            inline basic_string();
            explicit basic_string(const _Alloc & __a);
            basic_string(const basic_string & __str);
            basic_string(const basic_string & __str, size_type __pos, size_type __n = npos);
            basic_string(const basic_string & __str, size_type __pos, size_type __n, const _Alloc & __a);
            basic_string(const _CharT * __s, size_type __n, const _Alloc & __a = _Alloc());
            basic_string(const _CharT * __s, const _Alloc & __a = _Alloc());
            basic_string(size_type __n, _CharT __c, const _Alloc & __a = _Alloc());
            template<class _InputIterator >
            basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc & __a = _Alloc());
            ~basic_string()
            {
                _M_rep()->_M_dispose(this->get_allocator());
            }
            basic_string & operator =(const basic_string & __str)
            {
                return this->assign(__str);
            }
            basic_string & operator =(const _CharT * __s)
            {
                return this->assign(__s);
            }
            basic_string & operator =(_CharT __c)
            {
                this->assign(1, __c);
                return *this;
            }
            iterator begin()
            {
                _M_leak();
                return iterator(_M_data());
            }
            const_iterator begin() const
            {
                return const_iterator(_M_data());
            }
            iterator end()
            {
                _M_leak();
                return iterator(_M_data() + this->size());
            }
            const_iterator end() const
            {
                return const_iterator(_M_data() + this->size());
            }
            reverse_iterator rbegin()
            {
                return reverse_iterator(this->end());
            }
            const_reverse_iterator rbegin() const
            {
                return const_reverse_iterator(this->end());
            }
            reverse_iterator rend()
            {
                return reverse_iterator(this->begin());
            }
            const_reverse_iterator rend() const
            {
                return const_reverse_iterator(this->begin());
            }
        public :
            size_type size() const
            {
                return _M_rep()->_M_length;
            }
            size_type length() const
            {
                return _M_rep()->_M_length;
            }
            size_type max_size() const
            {
                return _Rep::_S_max_size;
            }
            void resize(size_type __n, _CharT __c);
            void resize(size_type __n)
            {
                this->resize(__n, _CharT());
            }
            size_type capacity() const
            {
                return _M_rep()->_M_capacity;
            }
            void reserve(size_type __res_arg = 0);
            void clear()
            {
                _M_mutate(0, this->size(), 0);
            }
            bool empty() const
            {
                return this->size() == 0;
            }
            const_reference operator [](size_type __pos) const
            {
                ;
                return _M_data()[__pos];
            }
            reference operator [](size_type __pos)
            {
                ;
                ;
                _M_leak();
                return _M_data()[__pos];
            }
            const_reference at(size_type __n) const
            {
                if (__n >= this->size())
                    __throw_out_of_range(("basic_string::at"));
                return _M_data()[__n];
            }
            reference at(size_type __n)
            {
                if (__n >= size())
                    __throw_out_of_range(("basic_string::at"));
                _M_leak();
                return _M_data()[__n];
            }
            basic_string & operator +=(const basic_string & __str)
            {
                return this->append(__str);
            }
            basic_string & operator +=(const _CharT * __s)
            {
                return this->append(__s);
            }
            basic_string & operator +=(_CharT __c)
            {
                this->push_back(__c);
                return *this;
            }
            basic_string & append(const basic_string & __str);
            basic_string & append(const basic_string & __str, size_type __pos, size_type __n);
            basic_string & append(const _CharT * __s, size_type __n);
            basic_string & append(const _CharT * __s)
            {
                ;
                return this->append(__s, traits_type::length(__s));
            }
            basic_string & append(size_type __n, _CharT __c);
            template<class _InputIterator >
            basic_string & append(_InputIterator __first, _InputIterator __last)
            {
                return this->replace(_M_iend(), _M_iend(), __first, __last);
            }
            void push_back(_CharT __c)
            {
                const size_type __len = 1 + this->size();
                if (__len > this->capacity() || _M_rep()->_M_is_shared())
                    this->reserve(__len);
                traits_type::assign(_M_data()[this->size()], __c);
                _M_rep()->_M_set_length_and_sharable(__len);
            }
            basic_string & assign(const basic_string & __str);
            basic_string & assign(const basic_string & __str, size_type __pos, size_type __n)
            {
                return this->assign(__str._M_data() + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n));
            }
            basic_string & assign(const _CharT * __s, size_type __n);
            basic_string & assign(const _CharT * __s)
            {
                ;
                return this->assign(__s, traits_type::length(__s));
            }
            basic_string & assign(size_type __n, _CharT __c)
            {
                return _M_replace_aux(size_type(0), this->size(), __n, __c);
            }
            template<class _InputIterator >
            basic_string & assign(_InputIterator __first, _InputIterator __last)
            {
                return this->replace(_M_ibegin(), _M_iend(), __first, __last);
            }
            void insert(iterator __p, size_type __n, _CharT __c)
            {
                this->replace(__p, __p, __n, __c);
            }
            template<class _InputIterator >
            void insert(iterator __p, _InputIterator __beg, _InputIterator __end)
            {
                this->replace(__p, __p, __beg, __end);
            }
            basic_string & insert(size_type __pos1, const basic_string & __str)
            {
                return this->insert(__pos1, __str, size_type(0), __str.size());
            }
            basic_string & insert(size_type __pos1, const basic_string & __str, size_type __pos2, size_type __n)
            {
                return this->insert(__pos1, __str._M_data() + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n));
            }
            basic_string & insert(size_type __pos, const _CharT * __s, size_type __n);
            basic_string & insert(size_type __pos, const _CharT * __s)
            {
                ;
                return this->insert(__pos, __s, traits_type::length(__s));
            }
            basic_string & insert(size_type __pos, size_type __n, _CharT __c)
            {
                return _M_replace_aux(_M_check(__pos, "basic_string::insert"), size_type(0), __n, __c);
            }
            iterator insert(iterator __p, _CharT __c)
            {
                ;
                const size_type __pos = __p - _M_ibegin();
                _M_replace_aux(__pos, size_type(0), size_type(1), __c);
                _M_rep()->_M_set_leaked();
                return iterator(_M_data() + __pos);
            }
            basic_string & erase(size_type __pos = 0, size_type __n = npos)
            {
                _M_mutate(_M_check(__pos, "basic_string::erase"), _M_limit(__pos, __n), size_type(0));
                return *this;
            }
            iterator erase(iterator __position)
            {
                ;
                const size_type __pos = __position - _M_ibegin();
                _M_mutate(__pos, size_type(1), size_type(0));
                _M_rep()->_M_set_leaked();
                return iterator(_M_data() + __pos);
            }
            iterator erase(iterator __first, iterator __last)
            {
                ;
                const size_type __pos = __first - _M_ibegin();
                _M_mutate(__pos, __last - __first, size_type(0));
                _M_rep()->_M_set_leaked();
                return iterator(_M_data() + __pos);
            }
            basic_string & replace(size_type __pos, size_type __n, const basic_string & __str)
            {
                return this->replace(__pos, __n, __str._M_data(), __str.size());
            }
            basic_string & replace(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2)
            {
                return this->replace(__pos1, __n1, __str._M_data() + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2));
            }
            basic_string & replace(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2);
            basic_string & replace(size_type __pos, size_type __n1, const _CharT * __s)
            {
                ;
                return this->replace(__pos, __n1, __s, traits_type::length(__s));
            }
            basic_string & replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
            {
                return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c);
            }
            basic_string & replace(iterator __i1, iterator __i2, const basic_string & __str)
            {
                return this->replace(__i1, __i2, __str._M_data(), __str.size());
            }
            basic_string & replace(iterator __i1, iterator __i2, const _CharT * __s, size_type __n)
            {
                ;
                return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
            }
            basic_string & replace(iterator __i1, iterator __i2, const _CharT * __s)
            {
                ;
                return this->replace(__i1, __i2, __s, traits_type::length(__s));
            }
            basic_string & replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
            {
                ;
                return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
            }
            template<class _InputIterator >
            basic_string & replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)
            {
                ;
                ;
                typedef typename std::__is_integer< _InputIterator >::__type _Integral;
                return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
            }
            basic_string & replace(iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2)
            {
                ;
                ;
                return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __k1, __k2 - __k1);
            }
            basic_string & replace(iterator __i1, iterator __i2, const _CharT * __k1, const _CharT * __k2)
            {
                ;
                ;
                return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __k1, __k2 - __k1);
            }
            basic_string & replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
            {
                ;
                ;
                return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __k1.base(), __k2 - __k1);
            }
            basic_string & replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)
            {
                ;
                ;
                return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __k1.base(), __k2 - __k1);
            }
        private :
            template<class _Integer >
            basic_string & _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, __true_type)
            {
                return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val);
            }
            template<class _InputIterator >
            basic_string & _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type);
            basic_string & _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c);
            basic_string & _M_replace_safe(size_type __pos1, size_type __n1, const _CharT * __s, size_type __n2);
            template<class _InIterator >
            static _CharT * _S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc & __a, __false_type)
            {
                typedef typename iterator_traits< _InIterator >::iterator_category _Tag;
                return _S_construct(__beg, __end, __a, _Tag());
            }
            template<class _Integer >
            static _CharT * _S_construct_aux(_Integer __beg, _Integer __end, const _Alloc & __a, __true_type)
            {
                return _S_construct(static_cast<size_type >(__beg), __end, __a);
            }
            template<class _InIterator >
            static _CharT * _S_construct(_InIterator __beg, _InIterator __end, const _Alloc & __a)
            {
                typedef typename std::__is_integer< _InIterator >::__type _Integral;
                return _S_construct_aux(__beg, __end, __a, _Integral());
            }
            template<class _InIterator >
            static _CharT * _S_construct(_InIterator __beg, _InIterator __end, const _Alloc & __a, input_iterator_tag);
            template<class _FwdIterator >
            static _CharT * _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc & __a, forward_iterator_tag);
            static _CharT * _S_construct(size_type __req, _CharT __c, const _Alloc & __a);
        public :
            size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const;
            void swap(basic_string & __s);
            const _CharT * c_str() const
            {
                return _M_data();
            }
            const _CharT * data() const
            {
                return _M_data();
            }
            allocator_type get_allocator() const
            {
                return _M_dataplus;
            }
            size_type find(const _CharT * __s, size_type __pos, size_type __n) const;
            size_type find(const basic_string & __str, size_type __pos = 0) const
            {
                return this->find(__str.data(), __pos, __str.size());
            }
            size_type find(const _CharT * __s, size_type __pos = 0) const
            {
                ;
                return this->find(__s, __pos, traits_type::length(__s));
            }
            size_type find(_CharT __c, size_type __pos = 0) const;
            size_type rfind(const basic_string & __str, size_type __pos = npos) const
            {
                return this->rfind(__str.data(), __pos, __str.size());
            }
            size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const;
            size_type rfind(const _CharT * __s, size_type __pos = npos) const
            {
                ;
                return this->rfind(__s, __pos, traits_type::length(__s));
            }
            size_type rfind(_CharT __c, size_type __pos = npos) const;
            size_type find_first_of(const basic_string & __str, size_type __pos = 0) const
            {
                return this->find_first_of(__str.data(), __pos, __str.size());
            }
            size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const;
            size_type find_first_of(const _CharT * __s, size_type __pos = 0) const
            {
                ;
                return this->find_first_of(__s, __pos, traits_type::length(__s));
            }
            size_type find_first_of(_CharT __c, size_type __pos = 0) const
            {
                return this->find(__c, __pos);
            }
            size_type find_last_of(const basic_string & __str, size_type __pos = npos) const
            {
                return this->find_last_of(__str.data(), __pos, __str.size());
            }
            size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const;
            size_type find_last_of(const _CharT * __s, size_type __pos = npos) const
            {
                ;
                return this->find_last_of(__s, __pos, traits_type::length(__s));
            }
            size_type find_last_of(_CharT __c, size_type __pos = npos) const
            {
                return this->rfind(__c, __pos);
            }
            size_type find_first_not_of(const basic_string & __str, size_type __pos = 0) const
            {
                return this->find_first_not_of(__str.data(), __pos, __str.size());
            }
            size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const;
            size_type find_first_not_of(const _CharT * __s, size_type __pos = 0) const
            {
                ;
                return this->find_first_not_of(__s, __pos, traits_type::length(__s));
            }
            size_type find_first_not_of(_CharT __c, size_type __pos = 0) const;
            size_type find_last_not_of(const basic_string & __str, size_type __pos = npos) const
            {
                return this->find_last_not_of(__str.data(), __pos, __str.size());
            }
            size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const;
            size_type find_last_not_of(const _CharT * __s, size_type __pos = npos) const
            {
                ;
                return this->find_last_not_of(__s, __pos, traits_type::length(__s));
            }
            size_type find_last_not_of(_CharT __c, size_type __pos = npos) const;
            basic_string substr(size_type __pos = 0, size_type __n = npos) const
            {
                return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n);
            }
            int compare(const basic_string & __str) const
            {
                const size_type __size = this->size();
                const size_type __osize = __str.size();
                const size_type __len = std::min(__size, __osize);
                int __r = traits_type::compare(_M_data(), __str.data(), __len);
                if (!__r)
                    __r = _S_compare(__size, __osize);
                return __r;
            }
            int compare(size_type __pos, size_type __n, const basic_string & __str) const;
            int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2) const;
            int compare(const _CharT * __s) const;
            int compare(size_type __pos, size_type __n1, const _CharT * __s) const;
            int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const;
    };
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string< _CharT, _Traits, _Alloc >::basic_string()
        : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > operator +(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        basic_string< _CharT, _Traits, _Alloc > __str(__lhs);
        __str.append(__rhs);
        return __str;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > operator +(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs);
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > operator +(_CharT __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs);
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string< _CharT, _Traits, _Alloc > operator +(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        basic_string< _CharT, _Traits, _Alloc > __str(__lhs);
        __str.append(__rhs);
        return __str;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string< _CharT, _Traits, _Alloc > operator +(const basic_string< _CharT, _Traits, _Alloc > & __lhs, _CharT __rhs)
    {
        typedef basic_string< _CharT, _Traits, _Alloc > __string_type;
        typedef typename __string_type::size_type __size_type;
        __string_type __str(__lhs);
        __str.append(__size_type(1), __rhs);
        return __str;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator ==(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __lhs.compare(__rhs) == 0;
    }
    template<typename _CharT >
    inline typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, bool >::__type operator ==(const basic_string< _CharT > & __lhs, const basic_string< _CharT > & __rhs)
    {
        return (__lhs.size() == __rhs.size() && !std::char_traits< _CharT >::compare(__lhs.data(), __rhs.data(), __lhs.size()));
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator ==(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __rhs.compare(__lhs) == 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator ==(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        return __lhs.compare(__rhs) == 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator !=(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return !(__lhs == __rhs);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator !=(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return !(__lhs == __rhs);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator !=(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        return !(__lhs == __rhs);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator <(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __lhs.compare(__rhs) < 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator <(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        return __lhs.compare(__rhs) < 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator <(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __rhs.compare(__lhs) > 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator >(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __lhs.compare(__rhs) > 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator >(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        return __lhs.compare(__rhs) > 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator >(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __rhs.compare(__lhs) < 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator <=(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __lhs.compare(__rhs) <= 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator <=(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        return __lhs.compare(__rhs) <= 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator <=(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __rhs.compare(__lhs) >= 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator >=(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __lhs.compare(__rhs) >= 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator >=(const basic_string< _CharT, _Traits, _Alloc > & __lhs, const _CharT * __rhs)
    {
        return __lhs.compare(__rhs) >= 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline bool operator >=(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        return __rhs.compare(__lhs) <= 0;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline void swap(basic_string< _CharT, _Traits, _Alloc > & __lhs, basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        __lhs.swap(__rhs);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_istream< _CharT, _Traits > & operator >>(basic_istream< _CharT, _Traits > & __is, basic_string< _CharT, _Traits, _Alloc > & __str);
    template<>
    basic_istream< char > & operator >>(basic_istream< char > & __is, basic_string< char > & __str);
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline basic_ostream< _CharT, _Traits > & operator <<(basic_ostream< _CharT, _Traits > & __os, const basic_string< _CharT, _Traits, _Alloc > & __str)
    {
        return __ostream_insert(__os, __str.data(), __str.size());
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_istream< _CharT, _Traits > & getline(basic_istream< _CharT, _Traits > & __is, basic_string< _CharT, _Traits, _Alloc > & __str, _CharT __delim);
    template<typename _CharT, typename _Traits, typename _Alloc >
    inline basic_istream< _CharT, _Traits > & getline(basic_istream< _CharT, _Traits > & __is, basic_string< _CharT, _Traits, _Alloc > & __str)
    {
        return getline(__is, __str, __is.widen('\n'));
    }
    template<>
    basic_istream< char > & getline(basic_istream< char > & __in, basic_string< char > & __str, char __delim);
    template<>
    basic_istream< wchar_t > & getline(basic_istream< wchar_t > & __in, basic_string< wchar_t > & __str, wchar_t __delim);
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits, typename _Alloc >
    const typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::_Rep::_S_max_size = (((npos - sizeof(_Rep_base)) / sizeof(_CharT)) - 1) / 4;
    template<typename _CharT, typename _Traits, typename _Alloc >
    const _CharT basic_string< _CharT, _Traits, _Alloc >::_Rep::_S_terminal = _CharT();
    template<typename _CharT, typename _Traits, typename _Alloc >
    const typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::npos;
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::_Rep::_S_empty_rep_storage[(sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) / sizeof(size_type)];
    template<typename _CharT, typename _Traits, typename _Alloc >
    template<typename _InIterator >
    _CharT * basic_string< _CharT, _Traits, _Alloc >::_S_construct(_InIterator __beg, _InIterator __end, const _Alloc & __a, input_iterator_tag)
    {
        if (__beg == __end && __a == _Alloc())
            return _S_empty_rep()._M_refdata();
        _CharT __buf[128];
        size_type __len = 0;
        while (__beg != __end && __len < sizeof (__buf) / sizeof(_CharT))
        {
            __buf[__len++] = *__beg;
            ++__beg;
        }
        _Rep * __r = _Rep::_S_create(__len, size_type(0), __a);
        _M_copy(__r->_M_refdata(), __buf, __len);
        try
        {
            while (__beg != __end)
            {
                if (__len == __r->_M_capacity)
                {
                    _Rep * __another = _Rep::_S_create(__len + 1, __len, __a);
                    _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
                    __r->_M_destroy(__a);
                    __r = __another;
                }
                __r->_M_refdata()[__len++] = *__beg;
                ++__beg;
            }
        }
        catch (...)
        {
            __r->_M_destroy(__a);
            throw;
        }
        __r->_M_set_length_and_sharable(__len);
        return __r->_M_refdata();
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    template<typename _InIterator >
    _CharT * basic_string< _CharT, _Traits, _Alloc >::_S_construct(_InIterator __beg, _InIterator __end, const _Alloc & __a, forward_iterator_tag)
    {
        if (__beg == __end && __a == _Alloc())
            return _S_empty_rep()._M_refdata();
        if (__builtin_expect(__gnu_cxx::__is_null_pointer(__beg) && __beg != __end, 0))
            __throw_logic_error(("basic_string::_S_construct NULL not valid"));
        const size_type __dnew = static_cast<size_type >(std::distance(__beg, __end));
        _Rep * __r = _Rep::_S_create(__dnew, size_type(0), __a);
        try
        {
            _S_copy_chars(__r->_M_refdata(), __beg, __end);
        }
        catch (...)
        {
            __r->_M_destroy(__a);
            throw;
        }
        __r->_M_set_length_and_sharable(__dnew);
        return __r->_M_refdata();
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    _CharT * basic_string< _CharT, _Traits, _Alloc >::_S_construct(size_type __n, _CharT __c, const _Alloc & __a)
    {
        if (__n == 0 && __a == _Alloc())
            return _S_empty_rep()._M_refdata();
        _Rep * __r = _Rep::_S_create(__n, size_type(0), __a);
        if (__n)
            _M_assign(__r->_M_refdata(), __n, __c);
        __r->_M_set_length_and_sharable(__n);
        return __r->_M_refdata();
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(const basic_string & __str)
        : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()), __str.get_allocator()), __str.get_allocator()) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(const _Alloc & __a)
        : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(const basic_string & __str, size_type __pos, size_type __n)
        : _M_dataplus(_S_construct(__str._M_data() + __str._M_check(__pos, "basic_string::basic_string"), __str._M_data() + __str._M_limit(__pos, __n) + __pos, _Alloc()), _Alloc()) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(const basic_string & __str, size_type __pos, size_type __n, const _Alloc & __a)
        : _M_dataplus(_S_construct(__str._M_data() + __str._M_check(__pos, "basic_string::basic_string"), __str._M_data() + __str._M_limit(__pos, __n) + __pos, __a), __a) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(const _CharT * __s, size_type __n, const _Alloc & __a)
        : _M_dataplus(_S_construct(__s, __s + __n, __a), __a) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(const _CharT * __s, const _Alloc & __a)
        : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) : __s + npos, __a), __a) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(size_type __n, _CharT __c, const _Alloc & __a)
        : _M_dataplus(_S_construct(__n, __c, __a), __a) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    template<typename _InputIterator >
    basic_string< _CharT, _Traits, _Alloc >::basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc & __a)
        : _M_dataplus(_S_construct(__beg, __end, __a), __a) 
    {
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::assign(const basic_string & __str)
    {
        if (_M_rep() != __str._M_rep())
        {
            const allocator_type __a = this->get_allocator();
            _CharT * __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
            _M_rep()->_M_dispose(__a);
            _M_data(__tmp);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::assign(const _CharT * __s, size_type __n)
    {
        ;
        _M_check_length(this->size(), __n, "basic_string::assign");
        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
            return _M_replace_safe(size_type(0), this->size(), __s, __n);
        else
        {
            const size_type __pos = __s - _M_data();
            if (__pos >= __n)
                _M_copy(_M_data(), __s, __n);
            else
                if (__pos)
                    _M_move(_M_data(), __s, __n);
            _M_rep()->_M_set_length_and_sharable(__n);
            return *this;
        }
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::append(size_type __n, _CharT __c)
    {
        if (__n)
        {
            _M_check_length(size_type(0), __n, "basic_string::append");
            const size_type __len = __n + this->size();
            if (__len > this->capacity() || _M_rep()->_M_is_shared())
                this->reserve(__len);
            _M_assign(_M_data() + this->size(), __n, __c);
            _M_rep()->_M_set_length_and_sharable(__len);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::append(const _CharT * __s, size_type __n)
    {
        ;
        if (__n)
        {
            _M_check_length(size_type(0), __n, "basic_string::append");
            const size_type __len = __n + this->size();
            if (__len > this->capacity() || _M_rep()->_M_is_shared())
            {
                if (_M_disjunct(__s))
                    this->reserve(__len);
                else
                {
                    const size_type __off = __s - _M_data();
                    this->reserve(__len);
                    __s = _M_data() + __off;
                }
            }
            _M_copy(_M_data() + this->size(), __s, __n);
            _M_rep()->_M_set_length_and_sharable(__len);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::append(const basic_string & __str)
    {
        const size_type __size = __str.size();
        if (__size)
        {
            const size_type __len = __size + this->size();
            if (__len > this->capacity() || _M_rep()->_M_is_shared())
                this->reserve(__len);
            _M_copy(_M_data() + this->size(), __str._M_data(), __size);
            _M_rep()->_M_set_length_and_sharable(__len);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::append(const basic_string & __str, size_type __pos, size_type __n)
    {
        __str._M_check(__pos, "basic_string::append");
        __n = __str._M_limit(__pos, __n);
        if (__n)
        {
            const size_type __len = __n + this->size();
            if (__len > this->capacity() || _M_rep()->_M_is_shared())
                this->reserve(__len);
            _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
            _M_rep()->_M_set_length_and_sharable(__len);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::insert(size_type __pos, const _CharT * __s, size_type __n)
    {
        ;
        _M_check(__pos, "basic_string::insert");
        _M_check_length(size_type(0), __n, "basic_string::insert");
        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
            return _M_replace_safe(__pos, size_type(0), __s, __n);
        else
        {
            const size_type __off = __s - _M_data();
            _M_mutate(__pos, 0, __n);
            __s = _M_data() + __off;
            _CharT * __p = _M_data() + __pos;
            if (__s + __n <= __p)
                _M_copy(__p, __s, __n);
            else
                if (__s >= __p)
                    _M_copy(__p, __s + __n, __n);
                else
                {
                    const size_type __nleft = __p - __s;
                    _M_copy(__p, __s, __nleft);
                    _M_copy(__p + __nleft, __p + __n, __n - __nleft);
                }
            return *this;
        }
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::replace(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2)
    {
        ;
        _M_check(__pos, "basic_string::replace");
        __n1 = _M_limit(__pos, __n1);
        _M_check_length(__n1, __n2, "basic_string::replace");
        bool __left;
        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
            return _M_replace_safe(__pos, __n1, __s, __n2);
        else
            if ((__left = __s + __n2 <= _M_data() + __pos) || _M_data() + __pos + __n1 <= __s)
            {
                size_type __off = __s - _M_data();
                __left ? __off : (__off += __n2 - __n1);
                _M_mutate(__pos, __n1, __n2);
                _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
                return *this;
            }
            else
            {
                const basic_string __tmp(__s, __n2);
                return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
            }
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    void basic_string< _CharT, _Traits, _Alloc >::_Rep::_M_destroy(const _Alloc & __a) throw ()
    {
        const size_type __size = sizeof(_Rep_base) + (this->_M_capacity + 1) * sizeof(_CharT);
        _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char * >(this), __size);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    void basic_string< _CharT, _Traits, _Alloc >::_M_leak_hard()
    {
        if (_M_rep() == &_S_empty_rep())
            return;
        if (_M_rep()->_M_is_shared())
            _M_mutate(0, 0, 0);
        _M_rep()->_M_set_leaked();
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    void basic_string< _CharT, _Traits, _Alloc >::_M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
        const size_type __old_size = this->size();
        const size_type __new_size = __old_size + __len2 - __len1;
        const size_type __how_much = __old_size - __pos - __len1;
        if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
        {
            const allocator_type __a = get_allocator();
            _Rep * __r = _Rep::_S_create(__new_size, this->capacity(), __a);
            if (__pos)
                _M_copy(__r->_M_refdata(), _M_data(), __pos);
            if (__how_much)
                _M_copy(__r->_M_refdata() + __pos + __len2, _M_data() + __pos + __len1, __how_much);
            _M_rep()->_M_dispose(__a);
            _M_data(__r->_M_refdata());
        }
        else
            if (__how_much && __len1 != __len2)
            {
                _M_move(_M_data() + __pos + __len2, _M_data() + __pos + __len1, __how_much);
            }
        _M_rep()->_M_set_length_and_sharable(__new_size);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    void basic_string< _CharT, _Traits, _Alloc >::reserve(size_type __res)
    {
        if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {
            if (__res < this->size())
                __res = this->size();
            const allocator_type __a = get_allocator();
            _CharT * __tmp = _M_rep()->_M_clone(__a, __res - this->size());
            _M_rep()->_M_dispose(__a);
            _M_data(__tmp);
        }
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    void basic_string< _CharT, _Traits, _Alloc >::swap(basic_string & __s)
    {
        if (_M_rep()->_M_is_leaked())
            _M_rep()->_M_set_sharable();
        if (__s._M_rep()->_M_is_leaked())
            __s._M_rep()->_M_set_sharable();
        if (this->get_allocator() == __s.get_allocator())
        {
            _CharT * __tmp = _M_data();
            _M_data(__s._M_data());
            __s._M_data(__tmp);
        }
        else
        {
            const basic_string __tmp1(_M_ibegin(), _M_iend(), __s.get_allocator());
            const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(), this->get_allocator());
            *this = __tmp2;
            __s = __tmp1;
        }
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::_Rep * basic_string< _CharT, _Traits, _Alloc >::_Rep::_S_create(size_type __capacity, size_type __old_capacity, const _Alloc & __alloc)
    {
        if (__capacity > _S_max_size)
            __throw_length_error(("basic_string::_S_create"));
        const size_type __pagesize = 4096;
        const size_type __malloc_header_size = 4 * sizeof(void *);
        if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
            __capacity = 2 * __old_capacity;
        size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
        const size_type __adj_size = __size + __malloc_header_size;
        if (__adj_size > __pagesize && __capacity > __old_capacity)
        {
            const size_type __extra = __pagesize - __adj_size % __pagesize;
            __capacity += __extra / sizeof(_CharT);
            if (__capacity > _S_max_size)
                __capacity = _S_max_size;
            __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
        }
        void * __place = _Raw_bytes_alloc(__alloc).allocate(__size);
        _Rep * __p = new (__place) _Rep;
        __p->_M_capacity = __capacity;
        __p->_M_set_sharable();
        return __p;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    _CharT * basic_string< _CharT, _Traits, _Alloc >::_Rep::_M_clone(const _Alloc & __alloc, size_type __res)
    {
        const size_type __requested_cap = this->_M_length + __res;
        _Rep * __r = _Rep::_S_create(__requested_cap, this->_M_capacity, __alloc);
        if (this->_M_length)
            _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);
        __r->_M_set_length_and_sharable(this->_M_length);
        return __r->_M_refdata();
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    void basic_string< _CharT, _Traits, _Alloc >::resize(size_type __n, _CharT __c)
    {
        const size_type __size = this->size();
        _M_check_length(__size, __n, "basic_string::resize");
        if (__size < __n)
            this->append(__n - __size, __c);
        else
            if (__n < __size)
                this->erase(__n);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    template<typename _InputIterator >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type)
    {
        const basic_string __s(__k1, __k2);
        const size_type __n1 = __i2 - __i1;
        _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
        return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(), __s.size());
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c)
    {
        _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
        _M_mutate(__pos1, __n1, __n2);
        if (__n2)
            _M_assign(_M_data() + __pos1, __n2, __c);
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > & basic_string< _CharT, _Traits, _Alloc >::_M_replace_safe(size_type __pos1, size_type __n1, const _CharT * __s, size_type __n2)
    {
        _M_mutate(__pos1, __n1, __n2);
        if (__n2)
            _M_copy(_M_data() + __pos1, __s, __n2);
        return *this;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > operator +(const _CharT * __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        ;
        typedef basic_string< _CharT, _Traits, _Alloc > __string_type;
        typedef typename __string_type::size_type __size_type;
        const __size_type __len = _Traits::length(__lhs);
        __string_type __str;
        __str.reserve(__len + __rhs.size());
        __str.append(__lhs, __len);
        __str.append(__rhs);
        return __str;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_string< _CharT, _Traits, _Alloc > operator +(_CharT __lhs, const basic_string< _CharT, _Traits, _Alloc > & __rhs)
    {
        typedef basic_string< _CharT, _Traits, _Alloc > __string_type;
        typedef typename __string_type::size_type __size_type;
        __string_type __str;
        const __size_type __len = __rhs.size();
        __str.reserve(__len + 1);
        __str.append(__size_type(1), __lhs);
        __str.append(__rhs);
        return __str;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::copy(_CharT * __s, size_type __n, size_type __pos) const
    {
        _M_check(__pos, "basic_string::copy");
        __n = _M_limit(__pos, __n);
        ;
        if (__n)
            _M_copy(__s, _M_data() + __pos, __n);
        return __n;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find(const _CharT * __s, size_type __pos, size_type __n) const
    {
        ;
        const size_type __size = this->size();
        const _CharT * __data = _M_data();
        if (__n == 0)
            return __pos <= __size ? __pos : npos;
        if (__n <= __size)
        {
            for (;
                __pos <= __size - __n;
                ++__pos)
            if (traits_type::eq(__data[__pos], __s[0]) && traits_type::compare(__data + __pos + 1, __s + 1, __n - 1) == 0)
                return __pos;
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find(_CharT __c, size_type __pos) const
    {
        size_type __ret = npos;
        const size_type __size = this->size();
        if (__pos < __size)
        {
            const _CharT * __data = _M_data();
            const size_type __n = __size - __pos;
            const _CharT * __p = traits_type::find(__data + __pos, __n, __c);
            if (__p)
                __ret = __p - __data;
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::rfind(const _CharT * __s, size_type __pos, size_type __n) const
    {
        ;
        const size_type __size = this->size();
        if (__n <= __size)
        {
            __pos = std::min(size_type(__size - __n), __pos);
            const _CharT * __data = _M_data();
            do
            {
                if (traits_type::compare(__data + __pos, __s, __n) == 0)
                    return __pos;
            }
            while (__pos-- > 0);
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::rfind(_CharT __c, size_type __pos) const
    {
        size_type __size = this->size();
        if (__size)
        {
            if (--__size > __pos)
                __size = __pos;
            for (++__size;
                __size-- > 0;
                )
            if (traits_type::eq(_M_data()[__size], __c))
                return __size;
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find_first_of(const _CharT * __s, size_type __pos, size_type __n) const
    {
        ;
        for (;
            __n && __pos < this->size();
            ++__pos)
        {
            const _CharT * __p = traits_type::find(__s, __n, _M_data()[__pos]);
            if (__p)
                return __pos;
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find_last_of(const _CharT * __s, size_type __pos, size_type __n) const
    {
        ;
        size_type __size = this->size();
        if (__size && __n)
        {
            if (--__size > __pos)
                __size = __pos;
            do
            {
                if (traits_type::find(__s, __n, _M_data()[__size]))
                    return __size;
            }
            while (__size-- != 0);
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const
    {
        ;
        for (;
            __pos < this->size();
            ++__pos)
        if (!traits_type::find(__s, __n, _M_data()[__pos]))
            return __pos;
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find_first_not_of(_CharT __c, size_type __pos) const
    {
        for (;
            __pos < this->size();
            ++__pos)
        if (!traits_type::eq(_M_data()[__pos], __c))
            return __pos;
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const
    {
        ;
        size_type __size = this->size();
        if (__size)
        {
            if (--__size > __pos)
                __size = __pos;
            do
            {
                if (!traits_type::find(__s, __n, _M_data()[__size]))
                    return __size;
            }
            while (__size--);
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string< _CharT, _Traits, _Alloc >::size_type basic_string< _CharT, _Traits, _Alloc >::find_last_not_of(_CharT __c, size_type __pos) const
    {
        size_type __size = this->size();
        if (__size)
        {
            if (--__size > __pos)
                __size = __pos;
            do
            {
                if (!traits_type::eq(_M_data()[__size], __c))
                    return __size;
            }
            while (__size--);
        }
        return npos;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    int basic_string< _CharT, _Traits, _Alloc >::compare(size_type __pos, size_type __n, const basic_string & __str) const
    {
        _M_check(__pos, "basic_string::compare");
        __n = _M_limit(__pos, __n);
        const size_type __osize = __str.size();
        const size_type __len = std::min(__n, __osize);
        int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
        if (!__r)
            __r = _S_compare(__n, __osize);
        return __r;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    int basic_string< _CharT, _Traits, _Alloc >::compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2) const
    {
        _M_check(__pos1, "basic_string::compare");
        __str._M_check(__pos2, "basic_string::compare");
        __n1 = _M_limit(__pos1, __n1);
        __n2 = __str._M_limit(__pos2, __n2);
        const size_type __len = std::min(__n1, __n2);
        int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len);
        if (!__r)
            __r = _S_compare(__n1, __n2);
        return __r;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    int basic_string< _CharT, _Traits, _Alloc >::compare(const _CharT * __s) const
    {
        ;
        const size_type __size = this->size();
        const size_type __osize = traits_type::length(__s);
        const size_type __len = std::min(__size, __osize);
        int __r = traits_type::compare(_M_data(), __s, __len);
        if (!__r)
            __r = _S_compare(__size, __osize);
        return __r;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    int basic_string< _CharT, _Traits, _Alloc >::compare(size_type __pos, size_type __n1, const _CharT * __s) const
    {
        ;
        _M_check(__pos, "basic_string::compare");
        __n1 = _M_limit(__pos, __n1);
        const size_type __osize = traits_type::length(__s);
        const size_type __len = std::min(__n1, __osize);
        int __r = traits_type::compare(_M_data() + __pos, __s, __len);
        if (!__r)
            __r = _S_compare(__n1, __osize);
        return __r;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    int basic_string< _CharT, _Traits, _Alloc >::compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const
    {
        ;
        _M_check(__pos, "basic_string::compare");
        __n1 = _M_limit(__pos, __n1);
        const size_type __len = std::min(__n1, __n2);
        int __r = traits_type::compare(_M_data() + __pos, __s, __len);
        if (!__r)
            __r = _S_compare(__n1, __n2);
        return __r;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_istream< _CharT, _Traits > & operator >>(basic_istream< _CharT, _Traits > & __in, basic_string< _CharT, _Traits, _Alloc > & __str)
    {
        typedef basic_istream< _CharT, _Traits > __istream_type;
        typedef basic_string< _CharT, _Traits, _Alloc > __string_type;
        typedef typename __istream_type::ios_base __ios_base;
        typedef typename __istream_type::int_type __int_type;
        typedef typename __string_type::size_type __size_type;
        typedef ctype< _CharT > __ctype_type;
        typedef typename __ctype_type::ctype_base __ctype_base;
        __size_type __extracted = 0;
        typename __ios_base::iostate __err = __ios_base::goodbit;
        typename __istream_type::sentry __cerb(__in, false);
        if (__cerb)
        {
            try
            {
                __str.erase();
                _CharT __buf[128];
                __size_type __len = 0;
                const streamsize __w = __in.width();
                const __size_type __n = __w > 0 ? static_cast<__size_type >(__w) : __str.max_size();
                const __ctype_type & __ct = use_facet< __ctype_type >(__in.getloc());
                const __int_type __eof = _Traits::eof();
                __int_type __c = __in.rdbuf()->sgetc();
                while (__extracted < __n && !_Traits::eq_int_type(__c, __eof) && !__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))
                {
                    if (__len == sizeof (__buf) / sizeof(_CharT))
                    {
                        __str.append(__buf, sizeof (__buf) / sizeof(_CharT));
                        __len = 0;
                    }
                    __buf[__len++] = _Traits::to_char_type(__c);
                    ++__extracted;
                    __c = __in.rdbuf()->snextc();
                }
                __str.append(__buf, __len);
                if (_Traits::eq_int_type(__c, __eof))
                    __err |= __ios_base::eofbit;
                __in.width(0);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                __in._M_setstate(__ios_base::badbit);
                throw;
            }
            catch (...)
            {
                __in._M_setstate(__ios_base::badbit);
            }
        }
        if (!__extracted)
            __err |= __ios_base::failbit;
        if (__err)
            __in.setstate(__err);
        return __in;
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    basic_istream< _CharT, _Traits > & getline(basic_istream< _CharT, _Traits > & __in, basic_string< _CharT, _Traits, _Alloc > & __str, _CharT __delim)
    {
        typedef basic_istream< _CharT, _Traits > __istream_type;
        typedef basic_string< _CharT, _Traits, _Alloc > __string_type;
        typedef typename __istream_type::ios_base __ios_base;
        typedef typename __istream_type::int_type __int_type;
        typedef typename __string_type::size_type __size_type;
        __size_type __extracted = 0;
        const __size_type __n = __str.max_size();
        typename __ios_base::iostate __err = __ios_base::goodbit;
        typename __istream_type::sentry __cerb(__in, true);
        if (__cerb)
        {
            try
            {
                __str.erase();
                const __int_type __idelim = _Traits::to_int_type(__delim);
                const __int_type __eof = _Traits::eof();
                __int_type __c = __in.rdbuf()->sgetc();
                while (__extracted < __n && !_Traits::eq_int_type(__c, __eof) && !_Traits::eq_int_type(__c, __idelim))
                {
                    __str += _Traits::to_char_type(__c);
                    ++__extracted;
                    __c = __in.rdbuf()->snextc();
                }
                if (_Traits::eq_int_type(__c, __eof))
                    __err |= __ios_base::eofbit;
                else
                    if (_Traits::eq_int_type(__c, __idelim))
                    {
                        ++__extracted;
                        __in.rdbuf()->sbumpc();
                    }
                    else
                        __err |= __ios_base::failbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                __in._M_setstate(__ios_base::badbit);
                throw;
            }
            catch (...)
            {
                __in._M_setstate(__ios_base::badbit);
            }
        }
        if (!__extracted)
            __err |= __ios_base::failbit;
        if (__err)
            __in.setstate(__err);
        return __in;
    }
    extern template class basic_string< char > ;
    extern template basic_istream< char > & operator >>(basic_istream< char > &, string &);
    extern template basic_ostream< char > & operator <<(basic_ostream< char > &, const string &);
    extern template basic_istream< char > & getline(basic_istream< char > &, string &, char);
    extern template basic_istream< char > & getline(basic_istream< char > &, string &);
    extern template class basic_string< wchar_t > ;
    extern template basic_istream< wchar_t > & operator >>(basic_istream< wchar_t > &, wstring &);
    extern template basic_ostream< wchar_t > & operator <<(basic_ostream< wchar_t > &, const wstring &);
    extern template basic_istream< wchar_t > & getline(basic_istream< wchar_t > &, wstring &, wchar_t);
    extern template basic_istream< wchar_t > & getline(basic_istream< wchar_t > &, wstring &);
}
namespace std __attribute__((__visibility__("default"))) {
    class locale
    {
        public :
            typedef int category;
            class facet;
            class id;
            class _Impl;
            friend class facet;
            friend class _Impl;
            template<typename _Facet >
            friend bool has_facet(const locale &) throw ();
            template<typename _Facet >
            friend const _Facet & use_facet(const locale &);
            template<typename _Cache >
            friend struct __use_cache;
            static const category none = 0;
            static const category ctype = 1L << 0;
            static const category numeric = 1L << 1;
            static const category collate = 1L << 2;
            static const category time = 1L << 3;
            static const category monetary = 1L << 4;
            static const category messages = 1L << 5;
            static const category all = (ctype | numeric | collate | time | monetary | messages);
            locale() throw ();
            locale(const locale & __other) throw ();
            explicit locale(const char * __s);
            locale(const locale & __base, const char * __s, category __cat);
            locale(const locale & __base, const locale & __add, category __cat);
            template<typename _Facet >
            locale(const locale & __other, _Facet * __f);
            ~locale() throw ();
            const locale & operator =(const locale & __other) throw ();
            template<typename _Facet >
            locale combine(const locale & __other) const;
            string name() const;
            bool operator ==(const locale & __other) const throw ();
            bool operator !=(const locale & __other) const throw ()
            {
                return !(this->operator ==(__other));
            }
            template<typename _Char, typename _Traits, typename _Alloc >
            bool operator ()(const basic_string< _Char, _Traits, _Alloc > & __s1, const basic_string< _Char, _Traits, _Alloc > & __s2) const;
            static locale global(const locale &);
            static const locale & classic();
        private :
            _Impl * _M_impl;
            static _Impl * _S_classic;
            static _Impl * _S_global;
            static const char *const *const _S_categories;
            enum 
            {
                _S_categories_size = 6 + 6
            };
            static __gthread_once_t _S_once;
            explicit locale(_Impl *) throw ();
            static void _S_initialize();
            static void _S_initialize_once();
            static category _S_normalize_category(category);
            void _M_coalesce(const locale & __base, const locale & __add, category __cat);
    };
    class locale::facet
    {
        private :
            friend class locale;
            friend class locale::_Impl;
            mutable _Atomic_word _M_refcount;
            static __c_locale _S_c_locale;
            static const char _S_c_name[2];
            static __gthread_once_t _S_once;
            static void _S_initialize_once();
        protected :
            explicit facet(size_t __refs = 0) throw ()
                : _M_refcount(__refs ? 1 : 0) 
            {
            }
            virtual ~facet();
            static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0);
            static __c_locale _S_clone_c_locale(__c_locale & __cloc);
            static void _S_destroy_c_locale(__c_locale & __cloc);
            static __c_locale _S_get_c_locale();
            static const char * _S_get_c_name();
        private :
            void _M_add_reference() const throw ()
            {
                __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1);
            }
            void _M_remove_reference() const throw ()
            {
                if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
                {
                    try
                    {
                        delete this;
                    }
                    catch (...)
                    {
                    }
                }
            }
            facet(const facet &);
            facet & operator =(const facet &);
    };
    class locale::id
    {
        private :
            friend class locale;
            friend class locale::_Impl;
            template<typename _Facet >
            friend const _Facet & use_facet(const locale &);
            template<typename _Facet >
            friend bool has_facet(const locale &) throw ();
            mutable size_t _M_index;
            static _Atomic_word _S_refcount;
            void operator =(const id &);
            id(const id &);
        public :
            id()
            {
            }
            size_t _M_id() const;
    };
    class locale::_Impl
    {
        public :
            friend class locale;
            friend class locale::facet;
            template<typename _Facet >
            friend bool has_facet(const locale &) throw ();
            template<typename _Facet >
            friend const _Facet & use_facet(const locale &);
            template<typename _Cache >
            friend struct __use_cache;
        private :
            _Atomic_word _M_refcount;
            const facet * * _M_facets;
            size_t _M_facets_size;
            const facet * * _M_caches;
            char * * _M_names;
            static const locale::id *const _S_id_ctype[];
            static const locale::id *const _S_id_numeric[];
            static const locale::id *const _S_id_collate[];
            static const locale::id *const _S_id_time[];
            static const locale::id *const _S_id_monetary[];
            static const locale::id *const _S_id_messages[];
            static const locale::id *const *const _S_facet_categories[];
            void _M_add_reference() throw ()
            {
                __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1);
            }
            void _M_remove_reference() throw ()
            {
                if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
                {
                    try
                    {
                        delete this;
                    }
                    catch (...)
                    {
                    }
                }
            }
            _Impl(const _Impl &, size_t);
            _Impl(const char *, size_t);
            _Impl(size_t) throw ();
            ~_Impl() throw ();
            _Impl(const _Impl &);
            void operator =(const _Impl &);
            bool _M_check_same_name()
            {
                bool __ret = true;
                if (_M_names[1])
                    for (size_t __i = 0;
                        __ret && __i < _S_categories_size - 1;
                        ++__i)
                    __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
                return __ret;
            }
            void _M_replace_categories(const _Impl *, category);
            void _M_replace_category(const _Impl *, const locale::id *const*);
            void _M_replace_facet(const _Impl *, const locale::id *);
            void _M_install_facet(const locale::id *, const facet *);
            template<typename _Facet >
            void _M_init_facet(_Facet * __facet)
            {
                _M_install_facet(&_Facet::id, __facet);
            }
            void _M_install_cache(const facet *, size_t);
    };
    template<typename _Facet >
    bool has_facet(const locale & __loc) throw ();
    template<typename _Facet >
    const _Facet & use_facet(const locale & __loc);
    template<typename _CharT >
    class collate : public locale::facet
    {
        public :
            typedef _CharT char_type;
            typedef basic_string< _CharT > string_type;
        protected :
            __c_locale _M_c_locale_collate;
        public :
            static locale::id id;
            explicit collate(size_t __refs = 0)
                : facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
            {
            }
            explicit collate(__c_locale __cloc, size_t __refs = 0)
                : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
            {
            }
            int compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const
            {
                return this->do_compare(__lo1, __hi1, __lo2, __hi2);
            }
            string_type transform(const _CharT * __lo, const _CharT * __hi) const
            {
                return this->do_transform(__lo, __hi);
            }
            long hash(const _CharT * __lo, const _CharT * __hi) const
            {
                return this->do_hash(__lo, __hi);
            }
            int _M_compare(const _CharT *, const _CharT *) const;
            size_t _M_transform(_CharT *, const _CharT *, size_t) const;
        protected :
            virtual ~collate()
            {
                _S_destroy_c_locale(_M_c_locale_collate);
            }
            virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const;
            virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const;
            virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const;
    };
    template<typename _CharT >
    locale::id collate< _CharT >::id;
    template<>
    int collate< char >::_M_compare(const char *, const char *) const;
    template<>
    size_t collate< char >::_M_transform(char *, const char *, size_t) const;
    template<>
    int collate< wchar_t >::_M_compare(const wchar_t *, const wchar_t *) const;
    template<>
    size_t collate< wchar_t >::_M_transform(wchar_t *, const wchar_t *, size_t) const;
    template<typename _CharT >
    class collate_byname : public collate< _CharT >
    {
        public :
            typedef _CharT char_type;
            typedef basic_string< _CharT > string_type;
            explicit collate_byname(const char * __s, size_t __refs = 0)
                : collate< _CharT >(__refs) 
            {
                if (__builtin_strcmp(__s, "C") != 0 && __builtin_strcmp(__s, "POSIX") != 0)
                {
                    this->_S_destroy_c_locale(this->_M_c_locale_collate);
                    this->_S_create_c_locale(this->_M_c_locale_collate, __s);
                }
            }
        protected :
            virtual ~collate_byname()
            {
            }
    };
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Facet >
    locale::locale(const locale & __other, _Facet * __f)
    {
        _M_impl = new _Impl (*__other._M_impl, 1);
        try
        {
            _M_impl->_M_install_facet(&_Facet::id, __f);
        }
        catch (...)
        {
            _M_impl->_M_remove_reference();
            throw;
        }
        delete[] _M_impl->_M_names[0];
        _M_impl->_M_names[0] = 0;
    }
    template<typename _Facet >
    locale locale::combine(const locale & __other) const
    {
        _Impl * __tmp = new _Impl (*_M_impl, 1);
        try
        {
            __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
        }
        catch (...)
        {
            __tmp->_M_remove_reference();
            throw;
        }
        return locale(__tmp);
    }
    template<typename _CharT, typename _Traits, typename _Alloc >
    bool locale::operator ()(const basic_string< _CharT, _Traits, _Alloc > & __s1, const basic_string< _CharT, _Traits, _Alloc > & __s2) const
    {
        typedef std::collate< _CharT > __collate_type;
        const __collate_type & __collate = use_facet< __collate_type >(*this);
        return (__collate.compare(__s1.data(), __s1.data() + __s1.length(), __s2.data(), __s2.data() + __s2.length()) < 0);
    }
    template<typename _Facet >
    bool has_facet(const locale & __loc) throw ()
    {
        const size_t __i = _Facet::id._M_id();
        const locale::facet * * __facets = __loc._M_impl->_M_facets;
        return (__i < __loc._M_impl->_M_facets_size && dynamic_cast<const _Facet * >(__facets[__i]));
    }
    template<typename _Facet >
    const _Facet & use_facet(const locale & __loc)
    {
        const size_t __i = _Facet::id._M_id();
        const locale::facet * * __facets = __loc._M_impl->_M_facets;
        if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
            __throw_bad_cast();
        return dynamic_cast<const _Facet & >(*__facets[__i]);
    }
    template<typename _CharT >
    int collate< _CharT >::_M_compare(const _CharT *, const _CharT *) const
    {
        return 0;
    }
    template<typename _CharT >
    size_t collate< _CharT >::_M_transform(_CharT *, const _CharT *, size_t) const
    {
        return 0;
    }
    template<typename _CharT >
    int collate< _CharT >::do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const
    {
        const string_type __one(__lo1, __hi1);
        const string_type __two(__lo2, __hi2);
        const _CharT * __p = __one.c_str();
        const _CharT * __pend = __one.data() + __one.length();
        const _CharT * __q = __two.c_str();
        const _CharT * __qend = __two.data() + __two.length();
        for (;
;
            )
        {
            const int __res = _M_compare(__p, __q);
            if (__res)
                return __res;
            __p += char_traits< _CharT >::length(__p);
            __q += char_traits< _CharT >::length(__q);
            if (__p == __pend && __q == __qend)
                return 0;
            else
                if (__p == __pend)
                    return -1;
                else
                    if (__q == __qend)
                        return 1;
            __p++;
            __q++;
        }
    }
    template<typename _CharT >
    typename collate< _CharT >::string_type collate< _CharT >::do_transform(const _CharT * __lo, const _CharT * __hi) const
    {
        string_type __ret;
        const string_type __str(__lo, __hi);
        const _CharT * __p = __str.c_str();
        const _CharT * __pend = __str.data() + __str.length();
        size_t __len = (__hi - __lo) * 2;
        _CharT * __c = new _CharT [__len];
        try
        {
            for (;
;
                )
            {
                size_t __res = _M_transform(__c, __p, __len);
                if (__res >= __len)
                {
                    __len = __res + 1;
                    delete[] __c , __c = 0;
                    __c = new _CharT [__len];
                    __res = _M_transform(__c, __p, __len);
                }
                __ret.append(__c, __res);
                __p += char_traits< _CharT >::length(__p);
                if (__p == __pend)
                    break;
                __p++;
                __ret.push_back(_CharT());
            }
        }
        catch (...)
        {
            delete[] __c;
            throw;
        }
        delete[] __c;
        return __ret;
    }
    template<typename _CharT >
    long collate< _CharT >::do_hash(const _CharT * __lo, const _CharT * __hi) const
    {
        unsigned long __val = 0;
        for (;
            __lo < __hi;
            ++__lo)
        __val = *__lo + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits< unsigned long >::__digits - 7)));
        return static_cast<long >(__val);
    }
    extern template class collate< char > ;
    extern template class collate_byname< char > ;
    extern template const collate< char > & use_facet< collate< char > >(const locale &);
    extern template bool has_facet< collate< char > >(const locale &);
    extern template class collate< wchar_t > ;
    extern template class collate_byname< wchar_t > ;
    extern template const collate< wchar_t > & use_facet< collate< wchar_t > >(const locale &);
    extern template bool has_facet< collate< wchar_t > >(const locale &);
}
namespace std __attribute__((__visibility__("default"))) {
    enum _Ios_Fmtflags
    {
        _S_boolalpha = 1L << 0, 
        _S_dec = 1L << 1, 
        _S_fixed = 1L << 2, 
        _S_hex = 1L << 3, 
        _S_internal = 1L << 4, 
        _S_left = 1L << 5, 
        _S_oct = 1L << 6, 
        _S_right = 1L << 7, 
        _S_scientific = 1L << 8, 
        _S_showbase = 1L << 9, 
        _S_showpoint = 1L << 10, 
        _S_showpos = 1L << 11, 
        _S_skipws = 1L << 12, 
        _S_unitbuf = 1L << 13, 
        _S_uppercase = 1L << 14, 
        _S_adjustfield = _S_left | _S_right | _S_internal, 
        _S_basefield = _S_dec | _S_oct | _S_hex, 
        _S_floatfield = _S_scientific | _S_fixed, 
        _S_ios_fmtflags_end = 1L << 16
    };
    inline _Ios_Fmtflags operator &(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
    {
        return _Ios_Fmtflags(static_cast<int >(__a) & static_cast<int >(__b));
    }
    inline _Ios_Fmtflags operator |(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
    {
        return _Ios_Fmtflags(static_cast<int >(__a) | static_cast<int >(__b));
    }
    inline _Ios_Fmtflags operator ^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
    {
        return _Ios_Fmtflags(static_cast<int >(__a) ^ static_cast<int >(__b));
    }
    inline _Ios_Fmtflags & operator |=(_Ios_Fmtflags & __a, _Ios_Fmtflags __b)
    {
        return __a = __a | __b;
    }
    inline _Ios_Fmtflags & operator &=(_Ios_Fmtflags & __a, _Ios_Fmtflags __b)
    {
        return __a = __a & __b;
    }
    inline _Ios_Fmtflags & operator ^=(_Ios_Fmtflags & __a, _Ios_Fmtflags __b)
    {
        return __a = __a ^ __b;
    }
    inline _Ios_Fmtflags operator ~(_Ios_Fmtflags __a)
    {
        return _Ios_Fmtflags(~static_cast<int >(__a));
    }
    enum _Ios_Openmode
    {
        _S_app = 1L << 0, 
        _S_ate = 1L << 1, 
        _S_bin = 1L << 2, 
        _S_in = 1L << 3, 
        _S_out = 1L << 4, 
        _S_trunc = 1L << 5, 
        _S_ios_openmode_end = 1L << 16
    };
    inline _Ios_Openmode operator &(_Ios_Openmode __a, _Ios_Openmode __b)
    {
        return _Ios_Openmode(static_cast<int >(__a) & static_cast<int >(__b));
    }
    inline _Ios_Openmode operator |(_Ios_Openmode __a, _Ios_Openmode __b)
    {
        return _Ios_Openmode(static_cast<int >(__a) | static_cast<int >(__b));
    }
    inline _Ios_Openmode operator ^(_Ios_Openmode __a, _Ios_Openmode __b)
    {
        return _Ios_Openmode(static_cast<int >(__a) ^ static_cast<int >(__b));
    }
    inline _Ios_Openmode & operator |=(_Ios_Openmode & __a, _Ios_Openmode __b)
    {
        return __a = __a | __b;
    }
    inline _Ios_Openmode & operator &=(_Ios_Openmode & __a, _Ios_Openmode __b)
    {
        return __a = __a & __b;
    }
    inline _Ios_Openmode & operator ^=(_Ios_Openmode & __a, _Ios_Openmode __b)
    {
        return __a = __a ^ __b;
    }
    inline _Ios_Openmode operator ~(_Ios_Openmode __a)
    {
        return _Ios_Openmode(~static_cast<int >(__a));
    }
    enum _Ios_Iostate
    {
        _S_goodbit = 0, 
        _S_badbit = 1L << 0, 
        _S_eofbit = 1L << 1, 
        _S_failbit = 1L << 2, 
        _S_ios_iostate_end = 1L << 16
    };
    inline _Ios_Iostate operator &(_Ios_Iostate __a, _Ios_Iostate __b)
    {
        return _Ios_Iostate(static_cast<int >(__a) & static_cast<int >(__b));
    }
    inline _Ios_Iostate operator |(_Ios_Iostate __a, _Ios_Iostate __b)
    {
        return _Ios_Iostate(static_cast<int >(__a) | static_cast<int >(__b));
    }
    inline _Ios_Iostate operator ^(_Ios_Iostate __a, _Ios_Iostate __b)
    {
        return _Ios_Iostate(static_cast<int >(__a) ^ static_cast<int >(__b));
    }
    inline _Ios_Iostate & operator |=(_Ios_Iostate & __a, _Ios_Iostate __b)
    {
        return __a = __a | __b;
    }
    inline _Ios_Iostate & operator &=(_Ios_Iostate & __a, _Ios_Iostate __b)
    {
        return __a = __a & __b;
    }
    inline _Ios_Iostate & operator ^=(_Ios_Iostate & __a, _Ios_Iostate __b)
    {
        return __a = __a ^ __b;
    }
    inline _Ios_Iostate operator ~(_Ios_Iostate __a)
    {
        return _Ios_Iostate(~static_cast<int >(__a));
    }
    enum _Ios_Seekdir
    {
        _S_beg = 0, 
        _S_cur = 1, 
        _S_end = 2, 
        _S_ios_seekdir_end = 1L << 16
    };
    class ios_base
    {
        public :
            class failure : public exception
            {
                public :
                    explicit failure(const string & __str) throw ();
                    virtual ~failure() throw ();
                    virtual const char * what() const throw ();
                private :
                    string _M_msg;
            };
            typedef _Ios_Fmtflags fmtflags;
            static const fmtflags boolalpha = _S_boolalpha;
            static const fmtflags dec = _S_dec;
            static const fmtflags fixed = _S_fixed;
            static const fmtflags hex = _S_hex;
            static const fmtflags internal = _S_internal;
            static const fmtflags left = _S_left;
            static const fmtflags oct = _S_oct;
            static const fmtflags right = _S_right;
            static const fmtflags scientific = _S_scientific;
            static const fmtflags showbase = _S_showbase;
            static const fmtflags showpoint = _S_showpoint;
            static const fmtflags showpos = _S_showpos;
            static const fmtflags skipws = _S_skipws;
            static const fmtflags unitbuf = _S_unitbuf;
            static const fmtflags uppercase = _S_uppercase;
            static const fmtflags adjustfield = _S_adjustfield;
            static const fmtflags basefield = _S_basefield;
            static const fmtflags floatfield = _S_floatfield;
            typedef _Ios_Iostate iostate;
            static const iostate badbit = _S_badbit;
            static const iostate eofbit = _S_eofbit;
            static const iostate failbit = _S_failbit;
            static const iostate goodbit = _S_goodbit;
            typedef _Ios_Openmode openmode;
            static const openmode app = _S_app;
            static const openmode ate = _S_ate;
            static const openmode binary = _S_bin;
            static const openmode in = _S_in;
            static const openmode out = _S_out;
            static const openmode trunc = _S_trunc;
            typedef _Ios_Seekdir seekdir;
            static const seekdir beg = _S_beg;
            static const seekdir cur = _S_cur;
            static const seekdir end = _S_end;
            typedef int io_state;
            typedef int open_mode;
            typedef int seek_dir;
            typedef std::streampos streampos;
            typedef std::streamoff streamoff;
            enum event
            {
                erase_event, 
                imbue_event, 
                copyfmt_event
            };
            typedef void (* event_callback)(event, ios_base &, int);
            void register_callback(event_callback __fn, int __index);
        protected :
            streamsize _M_precision;
            streamsize _M_width;
            fmtflags _M_flags;
            iostate _M_exception;
            iostate _M_streambuf_state;
            struct _Callback_list
            {
                    _Callback_list * _M_next;
                    ios_base::event_callback _M_fn;
                    int _M_index;
                    _Atomic_word _M_refcount;
                    _Callback_list(ios_base::event_callback __fn, int __index, _Callback_list * __cb)
                        : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
                    {
                    }
                    void _M_add_reference()
                    {
                        __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1);
                    }
                    int _M_remove_reference()
                    {
                        return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
                    }
            };
            _Callback_list * _M_callbacks;
            void _M_call_callbacks(event __ev) throw ();
            void _M_dispose_callbacks(void);
            struct _Words
            {
                    void * _M_pword;
                    long _M_iword;
                    _Words()
                        : _M_pword(0), _M_iword(0) 
                    {
                    }
            };
            _Words _M_word_zero;
            enum 
            {
                _S_local_word_size = 8
            };
            _Words _M_local_word[_S_local_word_size];
            int _M_word_size;
            _Words * _M_word;
            _Words & _M_grow_words(int __index, bool __iword);
            locale _M_ios_locale;
            void _M_init();
        public :
            class Init
            {
                    friend class ios_base;
                public :
                    Init();
                    ~Init();
                private :
                    static _Atomic_word _S_refcount;
                    static bool _S_synced_with_stdio;
            };
            fmtflags flags() const
            {
                return _M_flags;
            }
            fmtflags flags(fmtflags __fmtfl)
            {
                fmtflags __old = _M_flags;
                _M_flags = __fmtfl;
                return __old;
            }
            fmtflags setf(fmtflags __fmtfl)
            {
                fmtflags __old = _M_flags;
                _M_flags |= __fmtfl;
                return __old;
            }
            fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
            {
                fmtflags __old = _M_flags;
                _M_flags &= ~__mask;
                _M_flags |= (__fmtfl & __mask);
                return __old;
            }
            void unsetf(fmtflags __mask)
            {
                _M_flags &= ~__mask;
            }
            streamsize precision() const
            {
                return _M_precision;
            }
            streamsize precision(streamsize __prec)
            {
                streamsize __old = _M_precision;
                _M_precision = __prec;
                return __old;
            }
            streamsize width() const
            {
                return _M_width;
            }
            streamsize width(streamsize __wide)
            {
                streamsize __old = _M_width;
                _M_width = __wide;
                return __old;
            }
            static bool sync_with_stdio(bool __sync = true);
            locale imbue(const locale & __loc);
            locale getloc() const
            {
                return _M_ios_locale;
            }
            const locale & _M_getloc() const
            {
                return _M_ios_locale;
            }
            static int xalloc() throw ();
            long & iword(int __ix)
            {
                _Words & __word = (__ix < _M_word_size) ? _M_word[__ix] : _M_grow_words(__ix, true);
                return __word._M_iword;
            }
            void * & pword(int __ix)
            {
                _Words & __word = (__ix < _M_word_size) ? _M_word[__ix] : _M_grow_words(__ix, false);
                return __word._M_pword;
            }
            virtual ~ios_base();
        protected :
            ios_base();
        private :
            ios_base(const ios_base &);
            ios_base & operator =(const ios_base &);
    };
    inline ios_base & boolalpha(ios_base & __base)
    {
        __base.setf(ios_base::boolalpha);
        return __base;
    }
    inline ios_base & noboolalpha(ios_base & __base)
    {
        __base.unsetf(ios_base::boolalpha);
        return __base;
    }
    inline ios_base & showbase(ios_base & __base)
    {
        __base.setf(ios_base::showbase);
        return __base;
    }
    inline ios_base & noshowbase(ios_base & __base)
    {
        __base.unsetf(ios_base::showbase);
        return __base;
    }
    inline ios_base & showpoint(ios_base & __base)
    {
        __base.setf(ios_base::showpoint);
        return __base;
    }
    inline ios_base & noshowpoint(ios_base & __base)
    {
        __base.unsetf(ios_base::showpoint);
        return __base;
    }
    inline ios_base & showpos(ios_base & __base)
    {
        __base.setf(ios_base::showpos);
        return __base;
    }
    inline ios_base & noshowpos(ios_base & __base)
    {
        __base.unsetf(ios_base::showpos);
        return __base;
    }
    inline ios_base & skipws(ios_base & __base)
    {
        __base.setf(ios_base::skipws);
        return __base;
    }
    inline ios_base & noskipws(ios_base & __base)
    {
        __base.unsetf(ios_base::skipws);
        return __base;
    }
    inline ios_base & uppercase(ios_base & __base)
    {
        __base.setf(ios_base::uppercase);
        return __base;
    }
    inline ios_base & nouppercase(ios_base & __base)
    {
        __base.unsetf(ios_base::uppercase);
        return __base;
    }
    inline ios_base & unitbuf(ios_base & __base)
    {
        __base.setf(ios_base::unitbuf);
        return __base;
    }
    inline ios_base & nounitbuf(ios_base & __base)
    {
        __base.unsetf(ios_base::unitbuf);
        return __base;
    }
    inline ios_base & internal(ios_base & __base)
    {
        __base.setf(ios_base::internal, ios_base::adjustfield);
        return __base;
    }
    inline ios_base & left(ios_base & __base)
    {
        __base.setf(ios_base::left, ios_base::adjustfield);
        return __base;
    }
    inline ios_base & right(ios_base & __base)
    {
        __base.setf(ios_base::right, ios_base::adjustfield);
        return __base;
    }
    inline ios_base & dec(ios_base & __base)
    {
        __base.setf(ios_base::dec, ios_base::basefield);
        return __base;
    }
    inline ios_base & hex(ios_base & __base)
    {
        __base.setf(ios_base::hex, ios_base::basefield);
        return __base;
    }
    inline ios_base & oct(ios_base & __base)
    {
        __base.setf(ios_base::oct, ios_base::basefield);
        return __base;
    }
    inline ios_base & fixed(ios_base & __base)
    {
        __base.setf(ios_base::fixed, ios_base::floatfield);
        return __base;
    }
    inline ios_base & scientific(ios_base & __base)
    {
        __base.setf(ios_base::scientific, ios_base::floatfield);
        return __base;
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits > *, basic_streambuf< _CharT, _Traits > *, bool &);
    template<typename _CharT, typename _Traits >
    class basic_streambuf
    {
        public :
            typedef _CharT char_type;
            typedef _Traits traits_type;
            typedef typename traits_type::int_type int_type;
            typedef typename traits_type::pos_type pos_type;
            typedef typename traits_type::off_type off_type;
            typedef basic_streambuf< char_type, traits_type > __streambuf_type;
            friend class basic_ios< char_type, traits_type >;
            friend class basic_istream< char_type, traits_type >;
            friend class basic_ostream< char_type, traits_type >;
            friend class istreambuf_iterator< char_type, traits_type >;
            friend class ostreambuf_iterator< char_type, traits_type >;
            friend streamsize __copy_streambufs_eof<  >(__streambuf_type *, __streambuf_type *, bool &);
            template<bool _IsMove, typename _CharT2 >
            friend typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, _CharT2 * >::__type __copy_move_a2(istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >, _CharT2 *);
            template<typename _CharT2 >
            friend typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, istreambuf_iterator< _CharT2 > >::__type find(istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >, const _CharT2 &);
            template<typename _CharT2, typename _Traits2 >
            friend basic_istream< _CharT2, _Traits2 > & operator >>(basic_istream< _CharT2, _Traits2 > &, _CharT2 *);
            template<typename _CharT2, typename _Traits2, typename _Alloc >
            friend basic_istream< _CharT2, _Traits2 > & operator >>(basic_istream< _CharT2, _Traits2 > &, basic_string< _CharT2, _Traits2, _Alloc > &);
            template<typename _CharT2, typename _Traits2, typename _Alloc >
            friend basic_istream< _CharT2, _Traits2 > & getline(basic_istream< _CharT2, _Traits2 > &, basic_string< _CharT2, _Traits2, _Alloc > &, _CharT2);
        protected :
            char_type * _M_in_beg;
            char_type * _M_in_cur;
            char_type * _M_in_end;
            char_type * _M_out_beg;
            char_type * _M_out_cur;
            char_type * _M_out_end;
            locale _M_buf_locale;
        public :
            virtual ~basic_streambuf()
            {
            }
            locale pubimbue(const locale & __loc)
            {
                locale __tmp(this->getloc());
                this->imbue(__loc);
                _M_buf_locale = __loc;
                return __tmp;
            }
            locale getloc() const
            {
                return _M_buf_locale;
            }
            __streambuf_type * pubsetbuf(char_type * __s, streamsize __n)
            {
                return this->setbuf(__s, __n);
            }
            pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode = ios_base::in | ios_base::out)
            {
                return this->seekoff(__off, __way, __mode);
            }
            pos_type pubseekpos(pos_type __sp, ios_base::openmode __mode = ios_base::in | ios_base::out)
            {
                return this->seekpos(__sp, __mode);
            }
            int pubsync()
            {
                return this->sync();
            }
            streamsize in_avail()
            {
                const streamsize __ret = this->egptr() - this->gptr();
                return __ret ? __ret : this->showmanyc();
            }
            int_type snextc()
            {
                int_type __ret = traits_type::eof();
                if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(), __ret), true))
                    __ret = this->sgetc();
                return __ret;
            }
            int_type sbumpc()
            {
                int_type __ret;
                if (__builtin_expect(this->gptr() < this->egptr(), true))
                {
                    __ret = traits_type::to_int_type(*this->gptr());
                    this->gbump(1);
                }
                else
                    __ret = this->uflow();
                return __ret;
            }
            int_type sgetc()
            {
                int_type __ret;
                if (__builtin_expect(this->gptr() < this->egptr(), true))
                    __ret = traits_type::to_int_type(*this->gptr());
                else
                    __ret = this->underflow();
                return __ret;
            }
            streamsize sgetn(char_type * __s, streamsize __n)
            {
                return this->xsgetn(__s, __n);
            }
            int_type sputbackc(char_type __c)
            {
                int_type __ret;
                const bool __testpos = this->eback() < this->gptr();
                if (__builtin_expect(!__testpos || !traits_type::eq(__c, this->gptr()[-1]), false))
                    __ret = this->pbackfail(traits_type::to_int_type(__c));
                else
                {
                    this->gbump(-1);
                    __ret = traits_type::to_int_type(*this->gptr());
                }
                return __ret;
            }
            int_type sungetc()
            {
                int_type __ret;
                if (__builtin_expect(this->eback() < this->gptr(), true))
                {
                    this->gbump(-1);
                    __ret = traits_type::to_int_type(*this->gptr());
                }
                else
                    __ret = this->pbackfail();
                return __ret;
            }
            int_type sputc(char_type __c)
            {
                int_type __ret;
                if (__builtin_expect(this->pptr() < this->epptr(), true))
                {
                    *this->pptr() = __c;
                    this->pbump(1);
                    __ret = traits_type::to_int_type(__c);
                }
                else
                    __ret = this->overflow(traits_type::to_int_type(__c));
                return __ret;
            }
            streamsize sputn(const char_type * __s, streamsize __n)
            {
                return this->xsputn(__s, __n);
            }
        protected :
            basic_streambuf()
                : _M_in_beg(0), _M_in_cur(0), _M_in_end(0), _M_out_beg(0), _M_out_cur(0), _M_out_end(0), _M_buf_locale(locale()) 
            {
            }
            char_type * eback() const
            {
                return _M_in_beg;
            }
            char_type * gptr() const
            {
                return _M_in_cur;
            }
            char_type * egptr() const
            {
                return _M_in_end;
            }
            void gbump(int __n)
            {
                _M_in_cur += __n;
            }
            void setg(char_type * __gbeg, char_type * __gnext, char_type * __gend)
            {
                _M_in_beg = __gbeg;
                _M_in_cur = __gnext;
                _M_in_end = __gend;
            }
            char_type * pbase() const
            {
                return _M_out_beg;
            }
            char_type * pptr() const
            {
                return _M_out_cur;
            }
            char_type * epptr() const
            {
                return _M_out_end;
            }
            void pbump(int __n)
            {
                _M_out_cur += __n;
            }
            void setp(char_type * __pbeg, char_type * __pend)
            {
                _M_out_beg = _M_out_cur = __pbeg;
                _M_out_end = __pend;
            }
            virtual void imbue(const locale &)
            {
            }
            virtual basic_streambuf< char_type, _Traits > * setbuf(char_type *, streamsize)
            {
                return this;
            }
            virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out)
            {
                return pos_type(off_type(-1));
            }
            virtual pos_type seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out)
            {
                return pos_type(off_type(-1));
            }
            virtual int sync()
            {
                return 0;
            }
            virtual streamsize showmanyc()
            {
                return 0;
            }
            virtual streamsize xsgetn(char_type * __s, streamsize __n);
            virtual int_type underflow()
            {
                return traits_type::eof();
            }
            virtual int_type uflow()
            {
                int_type __ret = traits_type::eof();
                const bool __testeof = traits_type::eq_int_type(this->underflow(), __ret);
                if (!__testeof)
                {
                    __ret = traits_type::to_int_type(*this->gptr());
                    this->gbump(1);
                }
                return __ret;
            }
            virtual int_type pbackfail(int_type = traits_type::eof())
            {
                return traits_type::eof();
            }
            virtual streamsize xsputn(const char_type * __s, streamsize __n);
            virtual int_type overflow(int_type = traits_type::eof())
            {
                return traits_type::eof();
            }
        public :
            void stossc()
            {
                if (this->gptr() < this->egptr())
                    this->gbump(1);
                else
                    this->uflow();
            }
        private :
            basic_streambuf(const __streambuf_type & __sb)
                : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur), _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg), _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur), _M_buf_locale(__sb._M_buf_locale) 
            {
            }
            __streambuf_type & operator =(const __streambuf_type &)
            {
                return *this;
            }
            ;
    };
    template<>
    streamsize __copy_streambufs_eof(basic_streambuf< char > * __sbin, basic_streambuf< char > * __sbout, bool & __ineof);
    template<>
    streamsize __copy_streambufs_eof(basic_streambuf< wchar_t > * __sbin, basic_streambuf< wchar_t > * __sbout, bool & __ineof);
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    streamsize basic_streambuf< _CharT, _Traits >::xsgetn(char_type * __s, streamsize __n)
    {
        streamsize __ret = 0;
        while (__ret < __n)
        {
            const streamsize __buf_len = this->egptr() - this->gptr();
            if (__buf_len)
            {
                const streamsize __remaining = __n - __ret;
                const streamsize __len = std::min(__buf_len, __remaining);
                traits_type::copy(__s, this->gptr(), __len);
                __ret += __len;
                __s += __len;
                this->gbump(__len);
            }
            if (__ret < __n)
            {
                const int_type __c = this->uflow();
                if (!traits_type::eq_int_type(__c, traits_type::eof()))
                {
                    traits_type::assign(*__s++, traits_type::to_char_type(__c));
                    ++__ret;
                }
                else
                    break;
            }
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits >
    streamsize basic_streambuf< _CharT, _Traits >::xsputn(const char_type * __s, streamsize __n)
    {
        streamsize __ret = 0;
        while (__ret < __n)
        {
            const streamsize __buf_len = this->epptr() - this->pptr();
            if (__buf_len)
            {
                const streamsize __remaining = __n - __ret;
                const streamsize __len = std::min(__buf_len, __remaining);
                traits_type::copy(this->pptr(), __s, __len);
                __ret += __len;
                __s += __len;
                this->pbump(__len);
            }
            if (__ret < __n)
            {
                int_type __c = this->overflow(traits_type::to_int_type(*__s));
                if (!traits_type::eq_int_type(__c, traits_type::eof()))
                {
                    ++__ret;
                    ++__s;
                }
                else
                    break;
            }
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits >
    streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits > * __sbin, basic_streambuf< _CharT, _Traits > * __sbout, bool & __ineof)
    {
        streamsize __ret = 0;
        __ineof = true;
        typename _Traits::int_type __c = __sbin->sgetc();
        while (!_Traits::eq_int_type(__c, _Traits::eof()))
        {
            __c = __sbout->sputc(_Traits::to_char_type(__c));
            if (_Traits::eq_int_type(__c, _Traits::eof()))
            {
                __ineof = false;
                break;
            }
            ++__ret;
            __c = __sbin->snextc();
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits >
    inline streamsize __copy_streambufs(basic_streambuf< _CharT, _Traits > * __sbin, basic_streambuf< _CharT, _Traits > * __sbout)
    {
        bool __ineof;
        return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }
    extern template class basic_streambuf< char > ;
    extern template streamsize __copy_streambufs(basic_streambuf< char > *, basic_streambuf< char > *);
    extern template streamsize __copy_streambufs_eof(basic_streambuf< char > *, basic_streambuf< char > *, bool &);
    extern template class basic_streambuf< wchar_t > ;
    extern template streamsize __copy_streambufs(basic_streambuf< wchar_t > *, basic_streambuf< wchar_t > *);
    extern template streamsize __copy_streambufs_eof(basic_streambuf< wchar_t > *, basic_streambuf< wchar_t > *, bool &);
}
typedef unsigned long int wctype_t;
enum 
{
    __ISwupper = 0, 
    __ISwlower = 1, 
    __ISwalpha = 2, 
    __ISwdigit = 3, 
    __ISwxdigit = 4, 
    __ISwspace = 5, 
    __ISwprint = 6, 
    __ISwgraph = 7, 
    __ISwblank = 8, 
    __ISwcntrl = 9, 
    __ISwpunct = 10, 
    __ISwalnum = 11, 
    _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))), 
    _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))), 
    _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))), 
    _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))), 
    _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))), 
    _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))), 
    _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))), 
    _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))), 
    _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))), 
    _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))), 
    _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))), 
    _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};
extern "C"
{
    extern int iswalnum(wint_t __wc) throw ();
    extern int iswalpha(wint_t __wc) throw ();
    extern int iswcntrl(wint_t __wc) throw ();
    extern int iswdigit(wint_t __wc) throw ();
    extern int iswgraph(wint_t __wc) throw ();
    extern int iswlower(wint_t __wc) throw ();
    extern int iswprint(wint_t __wc) throw ();
    extern int iswpunct(wint_t __wc) throw ();
    extern int iswspace(wint_t __wc) throw ();
    extern int iswupper(wint_t __wc) throw ();
    extern int iswxdigit(wint_t __wc) throw ();
    extern int iswblank(wint_t __wc) throw ();
    extern wctype_t wctype(__const char * __property) throw ();
    extern int iswctype(wint_t __wc, wctype_t __desc) throw ();
    typedef __const __int32_t * wctrans_t;
    extern wint_t towlower(wint_t __wc) throw ();
    extern wint_t towupper(wint_t __wc) throw ();
}
extern "C"
{
    extern wctrans_t wctrans(__const char * __property) throw ();
    extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw ();
    extern int iswalnum_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswalpha_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswcntrl_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswdigit_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswgraph_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswlower_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswprint_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswpunct_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswspace_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswupper_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswxdigit_l(wint_t __wc, __locale_t __locale) throw ();
    extern int iswblank_l(wint_t __wc, __locale_t __locale) throw ();
    extern wctype_t wctype_l(__const char * __property, __locale_t __locale) throw ();
    extern int iswctype_l(wint_t __wc, wctype_t __desc, __locale_t __locale) throw ();
    extern wint_t towlower_l(wint_t __wc, __locale_t __locale) throw ();
    extern wint_t towupper_l(wint_t __wc, __locale_t __locale) throw ();
    extern wctrans_t wctrans_l(__const char * __property, __locale_t __locale) throw ();
    extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, __locale_t __locale) throw ();
}
namespace std __attribute__((__visibility__("default"))) {
    using ::wctrans_t;
    using ::wctype_t;
    using ::wint_t;
    using ::iswalnum;
    using ::iswalpha;
    using ::iswblank;
    using ::iswcntrl;
    using ::iswctype;
    using ::iswdigit;
    using ::iswgraph;
    using ::iswlower;
    using ::iswprint;
    using ::iswpunct;
    using ::iswspace;
    using ::iswupper;
    using ::iswxdigit;
    using ::towctrans;
    using ::towlower;
    using ::towupper;
    using ::wctrans;
    using ::wctype;
}
namespace std __attribute__((__visibility__("default"))) {
    struct ctype_base
    {
            typedef const int * __to_type;
            typedef unsigned short mask;
            static const mask upper = _ISupper;
            static const mask lower = _ISlower;
            static const mask alpha = _ISalpha;
            static const mask digit = _ISdigit;
            static const mask xdigit = _ISxdigit;
            static const mask space = _ISspace;
            static const mask print = _ISprint;
            static const mask graph = _ISalpha | _ISdigit | _ISpunct;
            static const mask cntrl = _IScntrl;
            static const mask punct = _ISpunct;
            static const mask alnum = _ISalpha | _ISdigit;
    };
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT & >
    {
        public :
            typedef _CharT char_type;
            typedef _Traits traits_type;
            typedef typename _Traits::int_type int_type;
            typedef basic_streambuf< _CharT, _Traits > streambuf_type;
            typedef basic_istream< _CharT, _Traits > istream_type;
            template<typename _CharT2 >
            friend typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, ostreambuf_iterator< _CharT2 > >::__type copy(istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >, ostreambuf_iterator< _CharT2 >);
            template<bool _IsMove, typename _CharT2 >
            friend typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, _CharT2 * >::__type __copy_move_a2(istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >, _CharT2 *);
            template<typename _CharT2 >
            friend typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, istreambuf_iterator< _CharT2 > >::__type find(istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >, const _CharT2 &);
        private :
            mutable streambuf_type * _M_sbuf;
            mutable int_type _M_c;
        public :
            istreambuf_iterator() throw ()
                : _M_sbuf(0), _M_c(traits_type::eof()) 
            {
            }
            istreambuf_iterator(istream_type & __s) throw ()
                : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) 
            {
            }
            istreambuf_iterator(streambuf_type * __s) throw ()
                : _M_sbuf(__s), _M_c(traits_type::eof()) 
            {
            }
            char_type operator *() const
            {
                return traits_type::to_char_type(_M_get());
            }
            istreambuf_iterator & operator ++()
            {
                ;
                if (_M_sbuf)
                {
                    _M_sbuf->sbumpc();
                    _M_c = traits_type::eof();
                }
                return *this;
            }
            istreambuf_iterator operator ++(int)
            {
                ;
                istreambuf_iterator __old = *this;
                if (_M_sbuf)
                {
                    __old._M_c = _M_sbuf->sbumpc();
                    _M_c = traits_type::eof();
                }
                return __old;
            }
            bool equal(const istreambuf_iterator & __b) const
            {
                return _M_at_eof() == __b._M_at_eof();
            }
        private :
            int_type _M_get() const
            {
                const int_type __eof = traits_type::eof();
                int_type __ret = __eof;
                if (_M_sbuf)
                {
                    if (!traits_type::eq_int_type(_M_c, __eof))
                        __ret = _M_c;
                    else
                        if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()), __eof))
                            _M_c = __ret;
                        else
                            _M_sbuf = 0;
                }
                return __ret;
            }
            bool _M_at_eof() const
            {
                const int_type __eof = traits_type::eof();
                return traits_type::eq_int_type(_M_get(), __eof);
            }
    };
    template<typename _CharT, typename _Traits >
    inline bool operator ==(const istreambuf_iterator< _CharT, _Traits > & __a, const istreambuf_iterator< _CharT, _Traits > & __b)
    {
        return __a.equal(__b);
    }
    template<typename _CharT, typename _Traits >
    inline bool operator !=(const istreambuf_iterator< _CharT, _Traits > & __a, const istreambuf_iterator< _CharT, _Traits > & __b)
    {
        return !__a.equal(__b);
    }
    template<typename _CharT, typename _Traits >
    class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void >
    {
        public :
            typedef _CharT char_type;
            typedef _Traits traits_type;
            typedef basic_streambuf< _CharT, _Traits > streambuf_type;
            typedef basic_ostream< _CharT, _Traits > ostream_type;
            template<typename _CharT2 >
            friend typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, ostreambuf_iterator< _CharT2 > >::__type copy(istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >, ostreambuf_iterator< _CharT2 >);
        private :
            streambuf_type * _M_sbuf;
            bool _M_failed;
        public :
            ostreambuf_iterator(ostream_type & __s) throw ()
                : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) 
            {
            }
            ostreambuf_iterator(streambuf_type * __s) throw ()
                : _M_sbuf(__s), _M_failed(!_M_sbuf) 
            {
            }
            ostreambuf_iterator & operator =(_CharT __c)
            {
                if (!_M_failed && _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
                    _M_failed = true;
                return *this;
            }
            ostreambuf_iterator & operator *()
            {
                return *this;
            }
            ostreambuf_iterator & operator ++(int)
            {
                return *this;
            }
            ostreambuf_iterator & operator ++()
            {
                return *this;
            }
            bool failed() const throw ()
            {
                return _M_failed;
            }
            ostreambuf_iterator & _M_put(const _CharT * __ws, streamsize __len)
            {
                if (__builtin_expect(!_M_failed, true) && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len, false))
                    _M_failed = true;
                return *this;
            }
    };
    template<typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, ostreambuf_iterator< _CharT > >::__type copy(istreambuf_iterator< _CharT > __first, istreambuf_iterator< _CharT > __last, ostreambuf_iterator< _CharT > __result)
    {
        if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
        {
            bool __ineof;
            __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
            if (!__ineof)
                __result._M_failed = true;
        }
        return __result;
    }
    template<bool _IsMove, typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, ostreambuf_iterator< _CharT > >::__type __copy_move_a2(_CharT * __first, _CharT * __last, ostreambuf_iterator< _CharT > __result)
    {
        const streamsize __num = __last - __first;
        if (__num > 0)
            __result._M_put(__first, __num);
        return __result;
    }
    template<bool _IsMove, typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, ostreambuf_iterator< _CharT > >::__type __copy_move_a2(const _CharT * __first, const _CharT * __last, ostreambuf_iterator< _CharT > __result)
    {
        const streamsize __num = __last - __first;
        if (__num > 0)
            __result._M_put(__first, __num);
        return __result;
    }
    template<bool _IsMove, typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, _CharT * >::__type __copy_move_a2(istreambuf_iterator< _CharT > __first, istreambuf_iterator< _CharT > __last, _CharT * __result)
    {
        typedef istreambuf_iterator< _CharT > __is_iterator_type;
        typedef typename __is_iterator_type::traits_type traits_type;
        typedef typename __is_iterator_type::streambuf_type streambuf_type;
        typedef typename traits_type::int_type int_type;
        if (__first._M_sbuf && !__last._M_sbuf)
        {
            streambuf_type * __sb = __first._M_sbuf;
            int_type __c = __sb->sgetc();
            while (!traits_type::eq_int_type(__c, traits_type::eof()))
            {
                const streamsize __n = __sb->egptr() - __sb->gptr();
                if (__n > 1)
                {
                    traits_type::copy(__result, __sb->gptr(), __n);
                    __sb->gbump(__n);
                    __result += __n;
                    __c = __sb->underflow();
                }
                else
                {
                    *__result++ = traits_type::to_char_type(__c);
                    __c = __sb->snextc();
                }
            }
        }
        return __result;
    }
    template<typename _CharT >
    typename __gnu_cxx::__enable_if< __is_char< _CharT >::__value, istreambuf_iterator< _CharT > >::__type find(istreambuf_iterator< _CharT > __first, istreambuf_iterator< _CharT > __last, const _CharT & __val)
    {
        typedef istreambuf_iterator< _CharT > __is_iterator_type;
        typedef typename __is_iterator_type::traits_type traits_type;
        typedef typename __is_iterator_type::streambuf_type streambuf_type;
        typedef typename traits_type::int_type int_type;
        if (__first._M_sbuf && !__last._M_sbuf)
        {
            const int_type __ival = traits_type::to_int_type(__val);
            streambuf_type * __sb = __first._M_sbuf;
            int_type __c = __sb->sgetc();
            while (!traits_type::eq_int_type(__c, traits_type::eof()) && !traits_type::eq_int_type(__c, __ival))
            {
                streamsize __n = __sb->egptr() - __sb->gptr();
                if (__n > 1)
                {
                    const _CharT * __p = traits_type::find(__sb->gptr(), __n, __val);
                    if (__p)
                        __n = __p - __sb->gptr();
                    __sb->gbump(__n);
                    __c = __sb->sgetc();
                }
                else
                    __c = __sb->snextc();
            }
            if (!traits_type::eq_int_type(__c, traits_type::eof()))
                __first._M_c = __c;
            else
                __first._M_sbuf = 0;
        }
        return __first;
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Tv >
    void __convert_to_v(const char * __in, _Tv & __out, ios_base::iostate & __err, const __c_locale & __cloc);
    template<>
    void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &);
    template<>
    void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &);
    template<>
    void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &);
    template<typename _CharT, typename _Traits >
    struct __pad
    {
            static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, const streamsize __newlen, const streamsize __oldlen);
    };
    template<typename _CharT >
    _CharT * __add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last);
    template<typename _CharT >
    inline ostreambuf_iterator< _CharT > __write(ostreambuf_iterator< _CharT > __s, const _CharT * __ws, int __len)
    {
        __s._M_put(__ws, __len);
        return __s;
    }
    template<typename _CharT, typename _OutIter >
    inline _OutIter __write(_OutIter __s, const _CharT * __ws, int __len)
    {
        for (int __j = 0;
            __j < __len;
            __j++ , ++__s)
        *__s = __ws[__j];
        return __s;
    }
    template<typename _CharT >
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
        public :
            typedef _CharT char_type;
            bool is(mask __m, char_type __c) const
            {
                return this->do_is(__m, __c);
            }
            const char_type * is(const char_type * __lo, const char_type * __hi, mask * __vec) const
            {
                return this->do_is(__lo, __hi, __vec);
            }
            const char_type * scan_is(mask __m, const char_type * __lo, const char_type * __hi) const
            {
                return this->do_scan_is(__m, __lo, __hi);
            }
            const char_type * scan_not(mask __m, const char_type * __lo, const char_type * __hi) const
            {
                return this->do_scan_not(__m, __lo, __hi);
            }
            char_type toupper(char_type __c) const
            {
                return this->do_toupper(__c);
            }
            const char_type * toupper(char_type * __lo, const char_type * __hi) const
            {
                return this->do_toupper(__lo, __hi);
            }
            char_type tolower(char_type __c) const
            {
                return this->do_tolower(__c);
            }
            const char_type * tolower(char_type * __lo, const char_type * __hi) const
            {
                return this->do_tolower(__lo, __hi);
            }
            char_type widen(char __c) const
            {
                return this->do_widen(__c);
            }
            const char * widen(const char * __lo, const char * __hi, char_type * __to) const
            {
                return this->do_widen(__lo, __hi, __to);
            }
            char narrow(char_type __c, char __dfault) const
            {
                return this->do_narrow(__c, __dfault);
            }
            const char_type * narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const
            {
                return this->do_narrow(__lo, __hi, __dfault, __to);
            }
        protected :
            explicit __ctype_abstract_base(size_t __refs = 0)
                : facet(__refs) 
            {
            }
            virtual ~__ctype_abstract_base()
            {
            }
            virtual bool do_is(mask __m, char_type __c) const = 0;
            virtual const char_type * do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0;
            virtual const char_type * do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0;
            virtual const char_type * do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0;
            virtual char_type do_toupper(char_type) const = 0;
            virtual const char_type * do_toupper(char_type * __lo, const char_type * __hi) const = 0;
            virtual char_type do_tolower(char_type) const = 0;
            virtual const char_type * do_tolower(char_type * __lo, const char_type * __hi) const = 0;
            virtual char_type do_widen(char) const = 0;
            virtual const char * do_widen(const char * __lo, const char * __hi, char_type * __dest) const = 0;
            virtual char do_narrow(char_type, char __dfault) const = 0;
            virtual const char_type * do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __dest) const = 0;
    };
    template<typename _CharT >
    class ctype : public __ctype_abstract_base< _CharT >
    {
        public :
            typedef _CharT char_type;
            typedef typename __ctype_abstract_base< _CharT >::mask mask;
            static locale::id id;
            explicit ctype(size_t __refs = 0)
                : __ctype_abstract_base< _CharT >(__refs) 
            {
            }
        protected :
            virtual ~ctype();
            virtual bool do_is(mask __m, char_type __c) const;
            virtual const char_type * do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const;
            virtual const char_type * do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const;
            virtual const char_type * do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const;
            virtual char_type do_toupper(char_type __c) const;
            virtual const char_type * do_toupper(char_type * __lo, const char_type * __hi) const;
            virtual char_type do_tolower(char_type __c) const;
            virtual const char_type * do_tolower(char_type * __lo, const char_type * __hi) const;
            virtual char_type do_widen(char __c) const;
            virtual const char * do_widen(const char * __lo, const char * __hi, char_type * __dest) const;
            virtual char do_narrow(char_type, char __dfault) const;
            virtual const char_type * do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __dest) const;
    };
    template<typename _CharT >
    locale::id ctype< _CharT >::id;
    template<>
    class ctype< char > : public locale::facet, public ctype_base
    {
        public :
            typedef char char_type;
        protected :
            __c_locale _M_c_locale_ctype;
            bool _M_del;
            __to_type _M_toupper;
            __to_type _M_tolower;
            const mask * _M_table;
            mutable char _M_widen_ok;
            mutable char _M_widen[1 + static_cast<unsigned char >(-1)];
            mutable char _M_narrow[1 + static_cast<unsigned char >(-1)];
            mutable char _M_narrow_ok;
        public :
            static locale::id id;
            static const size_t table_size = 1 + static_cast<unsigned char >(-1);
            explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0);
            explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0);
            inline bool is(mask __m, char __c) const;
            inline const char * is(const char * __lo, const char * __hi, mask * __vec) const;
            inline const char * scan_is(mask __m, const char * __lo, const char * __hi) const;
            inline const char * scan_not(mask __m, const char * __lo, const char * __hi) const;
            char_type toupper(char_type __c) const
            {
                return this->do_toupper(__c);
            }
            const char_type * toupper(char_type * __lo, const char_type * __hi) const
            {
                return this->do_toupper(__lo, __hi);
            }
            char_type tolower(char_type __c) const
            {
                return this->do_tolower(__c);
            }
            const char_type * tolower(char_type * __lo, const char_type * __hi) const
            {
                return this->do_tolower(__lo, __hi);
            }
            char_type widen(char __c) const
            {
                if (_M_widen_ok)
                    return _M_widen[static_cast<unsigned char >(__c)];
                this->_M_widen_init();
                return this->do_widen(__c);
            }
            const char * widen(const char * __lo, const char * __hi, char_type * __to) const
            {
                if (_M_widen_ok == 1)
                {
                    __builtin_memcpy(__to, __lo, __hi - __lo);
                    return __hi;
                }
                if (!_M_widen_ok)
                    _M_widen_init();
                return this->do_widen(__lo, __hi, __to);
            }
            char narrow(char_type __c, char __dfault) const
            {
                if (_M_narrow[static_cast<unsigned char >(__c)])
                    return _M_narrow[static_cast<unsigned char >(__c)];
                const char __t = do_narrow(__c, __dfault);
                if (__t != __dfault)
                    _M_narrow[static_cast<unsigned char >(__c)] = __t;
                return __t;
            }
            const char_type * narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const
            {
                if (__builtin_expect(_M_narrow_ok == 1, true))
                {
                    __builtin_memcpy(__to, __lo, __hi - __lo);
                    return __hi;
                }
                if (!_M_narrow_ok)
                    _M_narrow_init();
                return this->do_narrow(__lo, __hi, __dfault, __to);
            }
            const mask * table() const throw ()
            {
                return _M_table;
            }
            static const mask * classic_table() throw ();
        protected :
            virtual ~ctype();
            virtual char_type do_toupper(char_type) const;
            virtual const char_type * do_toupper(char_type * __lo, const char_type * __hi) const;
            virtual char_type do_tolower(char_type) const;
            virtual const char_type * do_tolower(char_type * __lo, const char_type * __hi) const;
            virtual char_type do_widen(char __c) const
            {
                return __c;
            }
            virtual const char * do_widen(const char * __lo, const char * __hi, char_type * __dest) const
            {
                __builtin_memcpy(__dest, __lo, __hi - __lo);
                return __hi;
            }
            virtual char do_narrow(char_type __c, char) const
            {
                return __c;
            }
            virtual const char_type * do_narrow(const char_type * __lo, const char_type * __hi, char, char * __dest) const
            {
                __builtin_memcpy(__dest, __lo, __hi - __lo);
                return __hi;
            }
        private :
            void _M_widen_init() const
            {
                char __tmp[sizeof (_M_widen)];
                for (size_t __i = 0;
                    __i < sizeof (_M_widen);
                    ++__i)
                __tmp[__i] = __i;
                do_widen(__tmp, __tmp + sizeof (__tmp), _M_widen);
                _M_widen_ok = 1;
                if (__builtin_memcmp(__tmp, _M_widen, sizeof (_M_widen)))
                    _M_widen_ok = 2;
            }
            void _M_narrow_init() const
            {
                char __tmp[sizeof (_M_narrow)];
                for (size_t __i = 0;
                    __i < sizeof (_M_narrow);
                    ++__i)
                __tmp[__i] = __i;
                do_narrow(__tmp, __tmp + sizeof (__tmp), 0, _M_narrow);
                _M_narrow_ok = 1;
                if (__builtin_memcmp(__tmp, _M_narrow, sizeof (_M_narrow)))
                    _M_narrow_ok = 2;
                else
                {
                    char __c;
                    do_narrow(__tmp, __tmp + 1, 1, &__c);
                    if (__c == 1)
                        _M_narrow_ok = 2;
                }
            }
    };
    template<>
    const ctype< char > & use_facet< ctype< char > >(const locale & __loc);
    template<>
    class ctype< wchar_t > : public __ctype_abstract_base< wchar_t >
    {
        public :
            typedef wchar_t char_type;
            typedef wctype_t __wmask_type;
        protected :
            __c_locale _M_c_locale_ctype;
            bool _M_narrow_ok;
            char _M_narrow[128];
            wint_t _M_widen[1 + static_cast<unsigned char >(-1)];
            mask _M_bit[16];
            __wmask_type _M_wmask[16];
        public :
            static locale::id id;
            explicit ctype(size_t __refs = 0);
            explicit ctype(__c_locale __cloc, size_t __refs = 0);
        protected :
            __wmask_type _M_convert_to_wmask(const mask __m) const;
            virtual ~ctype();
            virtual bool do_is(mask __m, char_type __c) const;
            virtual const char_type * do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const;
            virtual const char_type * do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const;
            virtual const char_type * do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const;
            virtual char_type do_toupper(char_type) const;
            virtual const char_type * do_toupper(char_type * __lo, const char_type * __hi) const;
            virtual char_type do_tolower(char_type) const;
            virtual const char_type * do_tolower(char_type * __lo, const char_type * __hi) const;
            virtual char_type do_widen(char) const;
            virtual const char * do_widen(const char * __lo, const char * __hi, char_type * __dest) const;
            virtual char do_narrow(char_type, char __dfault) const;
            virtual const char_type * do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __dest) const;
            void _M_initialize_ctype();
    };
    template<>
    const ctype< wchar_t > & use_facet< ctype< wchar_t > >(const locale & __loc);
    template<typename _CharT >
    class ctype_byname : public ctype< _CharT >
    {
        public :
            typedef typename ctype< _CharT >::mask mask;
            explicit ctype_byname(const char * __s, size_t __refs = 0);
        protected :
            virtual ~ctype_byname()
            {
            }
            ;
    };
    template<>
    class ctype_byname< char > : public ctype< char >
    {
        public :
            explicit ctype_byname(const char * __s, size_t __refs = 0);
        protected :
            virtual ~ctype_byname();
    };
    template<>
    class ctype_byname< wchar_t > : public ctype< wchar_t >
    {
        public :
            explicit ctype_byname(const char * __s, size_t __refs = 0);
        protected :
            virtual ~ctype_byname();
    };
}
namespace std __attribute__((__visibility__("default"))) {
    bool ctype< char >::is(mask __m, char __c) const
    {
        return _M_table[static_cast<unsigned char >(__c)] & __m;
    }
    const char * ctype< char >::is(const char * __low, const char * __high, mask * __vec) const
    {
        while (__low < __high)
            *__vec++ = _M_table[static_cast<unsigned char >(*__low++)];
        return __high;
    }
    const char * ctype< char >::scan_is(mask __m, const char * __low, const char * __high) const
    {
        while (__low < __high && !(_M_table[static_cast<unsigned char >(*__low)] & __m))
            ++__low;
        return __low;
    }
    const char * ctype< char >::scan_not(mask __m, const char * __low, const char * __high) const
    {
        while (__low < __high && (_M_table[static_cast<unsigned char >(*__low)] & __m) != 0)
            ++__low;
        return __low;
    }
}
namespace std __attribute__((__visibility__("default"))) {
    class __num_base
    {
        public :
            enum 
            {
                _S_ominus, 
                _S_oplus, 
                _S_ox, 
                _S_oX, 
                _S_odigits, 
                _S_odigits_end = _S_odigits + 16, 
                _S_oudigits = _S_odigits_end, 
                _S_oudigits_end = _S_oudigits + 16, 
                _S_oe = _S_odigits + 14, 
                _S_oE = _S_oudigits + 14, 
                _S_oend = _S_oudigits_end
            };
            static const char * _S_atoms_out;
            static const char * _S_atoms_in;
            enum 
            {
                _S_iminus, 
                _S_iplus, 
                _S_ix, 
                _S_iX, 
                _S_izero, 
                _S_ie = _S_izero + 14, 
                _S_iE = _S_izero + 20, 
                _S_iend = 26
            };
            static void _S_format_float(const ios_base & __io, char * __fptr, char __mod);
    };
    template<typename _CharT >
    struct __numpunct_cache : public locale::facet
    {
            const char * _M_grouping;
            size_t _M_grouping_size;
            bool _M_use_grouping;
            const _CharT * _M_truename;
            size_t _M_truename_size;
            const _CharT * _M_falsename;
            size_t _M_falsename_size;
            _CharT _M_decimal_point;
            _CharT _M_thousands_sep;
            _CharT _M_atoms_out[__num_base::_S_oend];
            _CharT _M_atoms_in[__num_base::_S_iend];
            bool _M_allocated;
            __numpunct_cache(size_t __refs = 0)
                : facet(__refs), _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false), _M_truename(__null), _M_truename_size(0), _M_falsename(__null), _M_falsename_size(0), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
            {
            }
            ~__numpunct_cache();
            void _M_cache(const locale & __loc);
        private :
            __numpunct_cache & operator =(const __numpunct_cache &);
            explicit __numpunct_cache(const __numpunct_cache &);
    };
    template<typename _CharT >
    __numpunct_cache< _CharT >::~__numpunct_cache()
    {
        if (_M_allocated)
        {
            delete[] _M_grouping;
            delete[] _M_truename;
            delete[] _M_falsename;
        }
    }
    template<typename _CharT >
    class numpunct : public locale::facet
    {
        public :
            typedef _CharT char_type;
            typedef basic_string< _CharT > string_type;
            typedef __numpunct_cache< _CharT > __cache_type;
        protected :
            __cache_type * _M_data;
        public :
            static locale::id id;
            explicit numpunct(size_t __refs = 0)
                : facet(__refs), _M_data(__null) 
            {
                _M_initialize_numpunct();
            }
            explicit numpunct(__cache_type * __cache, size_t __refs = 0)
                : facet(__refs), _M_data(__cache) 
            {
                _M_initialize_numpunct();
            }
            explicit numpunct(__c_locale __cloc, size_t __refs = 0)
                : facet(__refs), _M_data(__null) 
            {
                _M_initialize_numpunct(__cloc);
            }
            char_type decimal_point() const
            {
                return this->do_decimal_point();
            }
            char_type thousands_sep() const
            {
                return this->do_thousands_sep();
            }
            string grouping() const
            {
                return this->do_grouping();
            }
            string_type truename() const
            {
                return this->do_truename();
            }
            string_type falsename() const
            {
                return this->do_falsename();
            }
        protected :
            virtual ~numpunct();
            virtual char_type do_decimal_point() const
            {
                return _M_data->_M_decimal_point;
            }
            virtual char_type do_thousands_sep() const
            {
                return _M_data->_M_thousands_sep;
            }
            virtual string do_grouping() const
            {
                return _M_data->_M_grouping;
            }
            virtual string_type do_truename() const
            {
                return _M_data->_M_truename;
            }
            virtual string_type do_falsename() const
            {
                return _M_data->_M_falsename;
            }
            void _M_initialize_numpunct(__c_locale __cloc = __null);
    };
    template<typename _CharT >
    locale::id numpunct< _CharT >::id;
    template<>
    numpunct< char >::~numpunct();
    template<>
    void numpunct< char >::_M_initialize_numpunct(__c_locale __cloc);
    template<>
    numpunct< wchar_t >::~numpunct();
    template<>
    void numpunct< wchar_t >::_M_initialize_numpunct(__c_locale __cloc);
    template<typename _CharT >
    class numpunct_byname : public numpunct< _CharT >
    {
        public :
            typedef _CharT char_type;
            typedef basic_string< _CharT > string_type;
            explicit numpunct_byname(const char * __s, size_t __refs = 0)
                : numpunct< _CharT >(__refs) 
            {
                if (__builtin_strcmp(__s, "C") != 0 && __builtin_strcmp(__s, "POSIX") != 0)
                {
                    __c_locale __tmp;
                    this->_S_create_c_locale(__tmp, __s);
                    this->_M_initialize_numpunct(__tmp);
                    this->_S_destroy_c_locale(__tmp);
                }
            }
        protected :
            virtual ~numpunct_byname()
            {
            }
    };
    template<typename _CharT, typename _InIter >
    class num_get : public locale::facet
    {
        public :
            typedef _CharT char_type;
            typedef _InIter iter_type;
            static locale::id id;
            explicit num_get(size_t __refs = 0)
                : facet(__refs) 
            {
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, bool & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, long & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned short & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned int & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned long & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, long long & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned long long & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, float & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, double & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, long double & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
            iter_type get(iter_type __in, iter_type __end, ios_base & __io, ios_base::iostate & __err, void * & __v) const
            {
                return this->do_get(__in, __end, __io, __err, __v);
            }
        protected :
            virtual ~num_get()
            {
            }
            iter_type _M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, string & __xtrc) const;
            template<typename _ValueT >
            iter_type _M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT & __v) const;
            template<typename _CharT2 >
            typename __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, int >::__type _M_find(const _CharT2 *, size_t __len, _CharT2 __c) const
            {
                int __ret = -1;
                if (__len <= 10)
                {
                    if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
                        __ret = __c - _CharT2('0');
                }
                else
                {
                    if (__c >= _CharT2('0') && __c <= _CharT2('9'))
                        __ret = __c - _CharT2('0');
                    else
                        if (__c >= _CharT2('a') && __c <= _CharT2('f'))
                            __ret = 10 + (__c - _CharT2('a'));
                        else
                            if (__c >= _CharT2('A') && __c <= _CharT2('F'))
                                __ret = 10 + (__c - _CharT2('A'));
                }
                return __ret;
            }
            template<typename _CharT2 >
            typename __gnu_cxx::__enable_if< !__is_char< _CharT2 >::__value, int >::__type _M_find(const _CharT2 * __zero, size_t __len, _CharT2 __c) const
            {
                int __ret = -1;
                const char_type * __q = char_traits< _CharT2 >::find(__zero, __len, __c);
                if (__q)
                {
                    __ret = __q - __zero;
                    if (__ret > 15)
                        __ret -= 6;
                }
                return __ret;
            }
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, unsigned short &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, unsigned int &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, unsigned long &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, long long &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, unsigned long long &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, float &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, double &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, long double &) const;
            virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate & __err, void *&) const;
    };
    template<typename _CharT, typename _InIter >
    locale::id num_get< _CharT, _InIter >::id;
    template<typename _CharT, typename _OutIter >
    class num_put : public locale::facet
    {
        public :
            typedef _CharT char_type;
            typedef _OutIter iter_type;
            static locale::id id;
            explicit num_put(size_t __refs = 0)
                : facet(__refs) 
            {
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, bool __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, long __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, unsigned long __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, long long __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, unsigned long long __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, double __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, long double __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
            iter_type put(iter_type __s, ios_base & __f, char_type __fill, const void * __v) const
            {
                return this->do_put(__s, __f, __fill, __v);
            }
        protected :
            template<typename _ValueT >
            iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const;
            void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const;
            template<typename _ValueT >
            iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const;
            void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const;
            void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const;
            virtual ~num_put()
            {
            }
            ;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, bool __v) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, long __v) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, unsigned long) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, long long __v) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, unsigned long long) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, double __v) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, long double __v) const;
            virtual iter_type do_put(iter_type, ios_base &, char_type __fill, const void * __v) const;
    };
    template<typename _CharT, typename _OutIter >
    locale::id num_put< _CharT, _OutIter >::id;
    template<typename _CharT >
    inline bool isspace(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::space, __c);
    }
    template<typename _CharT >
    inline bool isprint(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::print, __c);
    }
    template<typename _CharT >
    inline bool iscntrl(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::cntrl, __c);
    }
    template<typename _CharT >
    inline bool isupper(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::upper, __c);
    }
    template<typename _CharT >
    inline bool islower(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::lower, __c);
    }
    template<typename _CharT >
    inline bool isalpha(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::alpha, __c);
    }
    template<typename _CharT >
    inline bool isdigit(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::digit, __c);
    }
    template<typename _CharT >
    inline bool ispunct(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::punct, __c);
    }
    template<typename _CharT >
    inline bool isxdigit(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::xdigit, __c);
    }
    template<typename _CharT >
    inline bool isalnum(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::alnum, __c);
    }
    template<typename _CharT >
    inline bool isgraph(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).is(ctype_base::graph, __c);
    }
    template<typename _CharT >
    inline _CharT toupper(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).toupper(__c);
    }
    template<typename _CharT >
    inline _CharT tolower(_CharT __c, const locale & __loc)
    {
        return use_facet< ctype< _CharT > >(__loc).tolower(__c);
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Facet >
    struct __use_cache
    {
            const _Facet * operator ()(const locale & __loc) const;
    };
    template<typename _CharT >
    struct __use_cache< __numpunct_cache< _CharT > >
    {
            const __numpunct_cache< _CharT > * operator ()(const locale & __loc) const
            {
                const size_t __i = numpunct< _CharT >::id._M_id();
                const locale::facet * * __caches = __loc._M_impl->_M_caches;
                if (!__caches[__i])
                {
                    __numpunct_cache< _CharT > * __tmp = __null;
                    try
                    {
                        __tmp = new __numpunct_cache< _CharT >;
                        __tmp->_M_cache(__loc);
                    }
                    catch (...)
                    {
                        delete __tmp;
                        throw;
                    }
                    __loc._M_impl->_M_install_cache(__tmp, __i);
                }
                return static_cast<const __numpunct_cache< _CharT > * >(__caches[__i]);
            }
    };
    template<typename _CharT >
    void __numpunct_cache< _CharT >::_M_cache(const locale & __loc)
    {
        _M_allocated = true;
        const numpunct< _CharT > & __np = use_facet< numpunct< _CharT > >(__loc);
        _M_grouping_size = __np.grouping().size();
        char * __grouping = new char [_M_grouping_size];
        __np.grouping().copy(__grouping, _M_grouping_size);
        _M_grouping = __grouping;
        _M_use_grouping = (_M_grouping_size && static_cast<signed char >(__np.grouping()[0]) > 0);
        _M_truename_size = __np.truename().size();
        _CharT * __truename = new _CharT [_M_truename_size];
        __np.truename().copy(__truename, _M_truename_size);
        _M_truename = __truename;
        _M_falsename_size = __np.falsename().size();
        _CharT * __falsename = new _CharT [_M_falsename_size];
        __np.falsename().copy(__falsename, _M_falsename_size);
        _M_falsename = __falsename;
        _M_decimal_point = __np.decimal_point();
        _M_thousands_sep = __np.thousands_sep();
        const ctype< _CharT > & __ct = use_facet< ctype< _CharT > >(__loc);
        __ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);
        __ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);
    }
    bool __verify_grouping(const char * __grouping, size_t __grouping_size, const string & __grouping_tmp);
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::_M_extract_float(_InIter __beg, _InIter __end, ios_base & __io, ios_base::iostate & __err, string & __xtrc) const
    {
        typedef char_traits< _CharT > __traits_type;
        typedef __numpunct_cache< _CharT > __cache_type;
        __use_cache< __cache_type > __uc;
        const locale & __loc = __io._M_getloc();
        const __cache_type * __lc = __uc(__loc);
        const _CharT * __lit = __lc->_M_atoms_in;
        char_type __c = char_type();
        bool __testeof = __beg == __end;
        if (!__testeof)
        {
            __c = *__beg;
            const bool __plus = __c == __lit[__num_base::_S_iplus];
            if ((__plus || __c == __lit[__num_base::_S_iminus]) && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) && !(__c == __lc->_M_decimal_point))
            {
                __xtrc += __plus ? '+' : '-';
                if (++__beg != __end)
                    __c = *__beg;
                else
                    __testeof = true;
            }
        }
        bool __found_mantissa = false;
        int __sep_pos = 0;
        while (!__testeof)
        {
            if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) || __c == __lc->_M_decimal_point)
                break;
            else
                if (__c == __lit[__num_base::_S_izero])
                {
                    if (!__found_mantissa)
                    {
                        __xtrc += '0';
                        __found_mantissa = true;
                    }
                    ++__sep_pos;
                    if (++__beg != __end)
                        __c = *__beg;
                    else
                        __testeof = true;
                }
                else
                    break;
        }
        bool __found_dec = false;
        bool __found_sci = false;
        string __found_grouping;
        if (__lc->_M_use_grouping)
            __found_grouping.reserve(32);
        const char_type * __lit_zero = __lit + __num_base::_S_izero;
        if (!__lc->_M_allocated)
            while (!__testeof)
            {
                const int __digit = _M_find(__lit_zero, 10, __c);
                if (__digit != -1)
                {
                    __xtrc += '0' + __digit;
                    __found_mantissa = true;
                }
                else
                    if (__c == __lc->_M_decimal_point && !__found_dec && !__found_sci)
                    {
                        __xtrc += '.';
                        __found_dec = true;
                    }
                    else
                        if ((__c == __lit[__num_base::_S_ie] || __c == __lit[__num_base::_S_iE]) && !__found_sci && __found_mantissa)
                        {
                            __xtrc += 'e';
                            __found_sci = true;
                            if (++__beg != __end)
                            {
                                __c = *__beg;
                                const bool __plus = __c == __lit[__num_base::_S_iplus];
                                if (__plus || __c == __lit[__num_base::_S_iminus])
                                    __xtrc += __plus ? '+' : '-';
                                else
                                    continue;
                            }
                            else
                            {
                                __testeof = true;
                                break;
                            }
                        }
                        else
                            break;
                if (++__beg != __end)
                    __c = *__beg;
                else
                    __testeof = true;
            }
        else
            while (!__testeof)
            {
                if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
                {
                    if (!__found_dec && !__found_sci)
                    {
                        if (__sep_pos)
                        {
                            __found_grouping += static_cast<char >(__sep_pos);
                            __sep_pos = 0;
                        }
                        else
                        {
                            __xtrc.clear();
                            break;
                        }
                    }
                    else
                        break;
                }
                else
                    if (__c == __lc->_M_decimal_point)
                    {
                        if (!__found_dec && !__found_sci)
                        {
                            if (__found_grouping.size())
                                __found_grouping += static_cast<char >(__sep_pos);
                            __xtrc += '.';
                            __found_dec = true;
                        }
                        else
                            break;
                    }
                    else
                    {
                        const char_type * __q = __traits_type::find(__lit_zero, 10, __c);
                        if (__q)
                        {
                            __xtrc += '0' + (__q - __lit_zero);
                            __found_mantissa = true;
                            ++__sep_pos;
                        }
                        else
                            if ((__c == __lit[__num_base::_S_ie] || __c == __lit[__num_base::_S_iE]) && !__found_sci && __found_mantissa)
                            {
                                if (__found_grouping.size() && !__found_dec)
                                    __found_grouping += static_cast<char >(__sep_pos);
                                __xtrc += 'e';
                                __found_sci = true;
                                if (++__beg != __end)
                                {
                                    __c = *__beg;
                                    const bool __plus = __c == __lit[__num_base::_S_iplus];
                                    if ((__plus || __c == __lit[__num_base::_S_iminus]) && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) && !(__c == __lc->_M_decimal_point))
                                        __xtrc += __plus ? '+' : '-';
                                    else
                                        continue;
                                }
                                else
                                {
                                    __testeof = true;
                                    break;
                                }
                            }
                            else
                                break;
                    }
                if (++__beg != __end)
                    __c = *__beg;
                else
                    __testeof = true;
            }
        if (__found_grouping.size())
        {
            if (!__found_dec && !__found_sci)
                __found_grouping += static_cast<char >(__sep_pos);
            if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size, __found_grouping))
                __err |= ios_base::failbit;
        }
        if (__testeof)
            __err |= ios_base::eofbit;
        return __beg;
    }
    template<typename _CharT, typename _InIter >
    template<typename _ValueT >
    _InIter num_get< _CharT, _InIter >::_M_extract_int(_InIter __beg, _InIter __end, ios_base & __io, ios_base::iostate & __err, _ValueT & __v) const
    {
        typedef char_traits< _CharT > __traits_type;
        using __gnu_cxx::__add_unsigned;
        typedef typename __add_unsigned< _ValueT >::__type __unsigned_type;
        typedef __numpunct_cache< _CharT > __cache_type;
        __use_cache< __cache_type > __uc;
        const locale & __loc = __io._M_getloc();
        const __cache_type * __lc = __uc(__loc);
        const _CharT * __lit = __lc->_M_atoms_in;
        char_type __c = char_type();
        const ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;
        const bool __oct = __basefield == ios_base::oct;
        int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);
        bool __testeof = __beg == __end;
        bool __negative = false;
        if (!__testeof)
        {
            __c = *__beg;
            if (__gnu_cxx::__numeric_traits< _ValueT >::__is_signed)
                __negative = __c == __lit[__num_base::_S_iminus];
            if ((__negative || __c == __lit[__num_base::_S_iplus]) && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) && !(__c == __lc->_M_decimal_point))
            {
                if (++__beg != __end)
                    __c = *__beg;
                else
                    __testeof = true;
            }
        }
        bool __found_zero = false;
        int __sep_pos = 0;
        while (!__testeof)
        {
            if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) || __c == __lc->_M_decimal_point)
                break;
            else
                if (__c == __lit[__num_base::_S_izero] && (!__found_zero || __base == 10))
                {
                    __found_zero = true;
                    ++__sep_pos;
                    if (__basefield == 0)
                        __base = 8;
                    if (__base == 8)
                        __sep_pos = 0;
                }
                else
                    if (__found_zero && (__c == __lit[__num_base::_S_ix] || __c == __lit[__num_base::_S_iX]))
                    {
                        if (__basefield == 0)
                            __base = 16;
                        if (__base == 16)
                        {
                            __found_zero = false;
                            __sep_pos = 0;
                        }
                        else
                            break;
                    }
                    else
                        break;
            if (++__beg != __end)
            {
                __c = *__beg;
                if (!__found_zero)
                    break;
            }
            else
                __testeof = true;
        }
        const size_t __len = (__base == 16 ? __num_base::_S_iend - __num_base::_S_izero : __base);
        string __found_grouping;
        if (__lc->_M_use_grouping)
            __found_grouping.reserve(32);
        bool __testfail = false;
        const __unsigned_type __max = __negative ? -__gnu_cxx::__numeric_traits< _ValueT >::__min : __gnu_cxx::__numeric_traits< _ValueT >::__max;
        const __unsigned_type __smax = __max / __base;
        __unsigned_type __result = 0;
        int __digit = 0;
        const char_type * __lit_zero = __lit + __num_base::_S_izero;
        if (!__lc->_M_allocated)
            while (!__testeof)
            {
                __digit = _M_find(__lit_zero, __len, __c);
                if (__digit == -1)
                    break;
                if (__result > __smax)
                    __testfail = true;
                else
                {
                    __result *= __base;
                    __testfail |= __result > __max - __digit;
                    __result += __digit;
                    ++__sep_pos;
                }
                if (++__beg != __end)
                    __c = *__beg;
                else
                    __testeof = true;
            }
        else
            while (!__testeof)
            {
                if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
                {
                    if (__sep_pos)
                    {
                        __found_grouping += static_cast<char >(__sep_pos);
                        __sep_pos = 0;
                    }
                    else
                    {
                        __testfail = true;
                        break;
                    }
                }
                else
                    if (__c == __lc->_M_decimal_point)
                        break;
                    else
                    {
                        const char_type * __q = __traits_type::find(__lit_zero, __len, __c);
                        if (!__q)
                            break;
                        __digit = __q - __lit_zero;
                        if (__digit > 15)
                            __digit -= 6;
                        if (__result > __smax)
                            __testfail = true;
                        else
                        {
                            __result *= __base;
                            __testfail |= __result > __max - __digit;
                            __result += __digit;
                            ++__sep_pos;
                        }
                    }
                if (++__beg != __end)
                    __c = *__beg;
                else
                    __testeof = true;
            }
        if (__found_grouping.size())
        {
            __found_grouping += static_cast<char >(__sep_pos);
            if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size, __found_grouping))
                __err |= ios_base::failbit;
        }
        if (!__testfail && (__sep_pos || __found_zero || __found_grouping.size()))
            __v = __negative ? -__result : __result;
        else
            __err |= ios_base::failbit;
        if (__testeof)
            __err |= ios_base::eofbit;
        return __beg;
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, bool & __v) const
    {
        if (!(__io.flags() & ios_base::boolalpha))
        {
            long __l = -1;
            __beg = _M_extract_int(__beg, __end, __io, __err, __l);
            if (__l == 0 || __l == 1)
                __v = bool(__l);
            else
                __err |= ios_base::failbit;
        }
        else
        {
            typedef __numpunct_cache< _CharT > __cache_type;
            __use_cache< __cache_type > __uc;
            const locale & __loc = __io._M_getloc();
            const __cache_type * __lc = __uc(__loc);
            bool __testf = true;
            bool __testt = true;
            size_t __n;
            bool __testeof = __beg == __end;
            for (__n = 0;
                !__testeof;
                ++__n)
            {
                const char_type __c = *__beg;
                if (__testf)
                {
                    if (__n < __lc->_M_falsename_size)
                        __testf = __c == __lc->_M_falsename[__n];
                    else
                        break;
                }
                if (__testt)
                {
                    if (__n < __lc->_M_truename_size)
                        __testt = __c == __lc->_M_truename[__n];
                    else
                        break;
                }
                if (!__testf && !__testt)
                    break;
                if (++__beg == __end)
                    __testeof = true;
            }
            if (__testf && __n == __lc->_M_falsename_size)
                __v = false;
            else
                if (__testt && __n == __lc->_M_truename_size)
                    __v = true;
                else
                    __err |= ios_base::failbit;
            if (__testeof)
                __err |= ios_base::eofbit;
        }
        return __beg;
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, long & __v) const
    {
        return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned short & __v) const
    {
        return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned int & __v) const
    {
        return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned long & __v) const
    {
        return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, long long & __v) const
    {
        return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, unsigned long long & __v) const
    {
        return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, float & __v) const
    {
        string __xtrc;
        __xtrc.reserve(32);
        __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
        std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
        return __beg;
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, double & __v) const
    {
        string __xtrc;
        __xtrc.reserve(32);
        __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
        std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
        return __beg;
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, long double & __v) const
    {
        string __xtrc;
        __xtrc.reserve(32);
        __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
        std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
        return __beg;
    }
    template<typename _CharT, typename _InIter >
    _InIter num_get< _CharT, _InIter >::do_get(iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, void * & __v) const
    {
        typedef ios_base::fmtflags fmtflags;
        const fmtflags __fmt = __io.flags();
        __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);
        typedef __gnu_cxx::__conditional_type< (sizeof(void *) <= sizeof(unsigned long)), unsigned long, unsigned long long >::__type _UIntPtrType;
        _UIntPtrType __ul;
        __beg = _M_extract_int(__beg, __end, __io, __err, __ul);
        __io.flags(__fmt);
        if (!(__err & ios_base::failbit))
            __v = reinterpret_cast<void * >(__ul);
        return __beg;
    }
    template<typename _CharT, typename _OutIter >
    void num_put< _CharT, _OutIter >::_M_pad(_CharT __fill, streamsize __w, ios_base & __io, _CharT * __new, const _CharT * __cs, int & __len) const
    {
        __pad< _CharT, char_traits< _CharT > >::_S_pad(__io, __fill, __new, __cs, __w, __len);
        __len = static_cast<int >(__w);
    }
    template<typename _CharT, typename _ValueT >
    int __int_to_char(_CharT * __bufend, _ValueT __v, const _CharT * __lit, ios_base::fmtflags __flags, bool __dec)
    {
        _CharT * __buf = __bufend;
        if (__builtin_expect(__dec, true))
        {
            do
            {
                *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
                __v /= 10;
            }
            while (__v != 0);
        }
        else
            if ((__flags & ios_base::basefield) == ios_base::oct)
            {
                do
                {
                    *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
                    __v >>= 3;
                }
                while (__v != 0);
            }
            else
            {
                const bool __uppercase = __flags & ios_base::uppercase;
                const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits;
                do
                {
                    *--__buf = __lit[(__v & 0xf) + __case_offset];
                    __v >>= 4;
                }
                while (__v != 0);
            }
        return __bufend - __buf;
    }
    template<typename _CharT, typename _OutIter >
    void num_put< _CharT, _OutIter >::_M_group_int(const char * __grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT * __new, _CharT * __cs, int & __len) const
    {
        _CharT * __p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len);
        __len = __p - __new;
    }
    template<typename _CharT, typename _OutIter >
    template<typename _ValueT >
    _OutIter num_put< _CharT, _OutIter >::_M_insert_int(_OutIter __s, ios_base & __io, _CharT __fill, _ValueT __v) const
    {
        using __gnu_cxx::__add_unsigned;
        typedef typename __add_unsigned< _ValueT >::__type __unsigned_type;
        typedef __numpunct_cache< _CharT > __cache_type;
        __use_cache< __cache_type > __uc;
        const locale & __loc = __io._M_getloc();
        const __cache_type * __lc = __uc(__loc);
        const _CharT * __lit = __lc->_M_atoms_out;
        const ios_base::fmtflags __flags = __io.flags();
        const int __ilen = 5 * sizeof(_ValueT);
        _CharT * __cs = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * __ilen));
        const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
        const bool __dec = (__basefield != ios_base::oct && __basefield != ios_base::hex);
        const __unsigned_type __u = ((__v > 0 || !__dec) ? __unsigned_type(__v) : -__unsigned_type(__v));
        int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
        __cs += __ilen - __len;
        if (__lc->_M_use_grouping)
        {
            _CharT * __cs2 = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * (__len + 1) * 2));
            _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size, __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
            __cs = __cs2 + 2;
        }
        if (__builtin_expect(__dec, true))
        {
            if (__v >= 0)
            {
                if (bool(__flags & ios_base::showpos) && __gnu_cxx::__numeric_traits< _ValueT >::__is_signed)
                    *--__cs = __lit[__num_base::_S_oplus] , ++__len;
            }
            else
                *--__cs = __lit[__num_base::_S_ominus] , ++__len;
        }
        else
            if (bool(__flags & ios_base::showbase) && __v)
            {
                if (__basefield == ios_base::oct)
                    *--__cs = __lit[__num_base::_S_odigits] , ++__len;
                else
                {
                    const bool __uppercase = __flags & ios_base::uppercase;
                    *--__cs = __lit[__num_base::_S_ox + __uppercase];
                    *--__cs = __lit[__num_base::_S_odigits];
                    __len += 2;
                }
            }
        const streamsize __w = __io.width();
        if (__w > static_cast<streamsize >(__len))
        {
            _CharT * __cs3 = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * __w));
            _M_pad(__fill, __w, __io, __cs3, __cs, __len);
            __cs = __cs3;
        }
        __io.width(0);
        return std::__write(__s, __cs, __len);
    }
    template<typename _CharT, typename _OutIter >
    void num_put< _CharT, _OutIter >::_M_group_float(const char * __grouping, size_t __grouping_size, _CharT __sep, const _CharT * __p, _CharT * __new, _CharT * __cs, int & __len) const
    {
        const int __declen = __p ? __p - __cs : __len;
        _CharT * __p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen);
        int __newlen = __p2 - __new;
        if (__p)
        {
            char_traits< _CharT >::copy(__p2, __p, __len - __declen);
            __newlen += __len - __declen;
        }
        __len = __newlen;
    }
    template<typename _CharT, typename _OutIter >
    template<typename _ValueT >
    _OutIter num_put< _CharT, _OutIter >::_M_insert_float(_OutIter __s, ios_base & __io, _CharT __fill, char __mod, _ValueT __v) const
    {
        typedef __numpunct_cache< _CharT > __cache_type;
        __use_cache< __cache_type > __uc;
        const locale & __loc = __io._M_getloc();
        const __cache_type * __lc = __uc(__loc);
        const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();
        const int __max_digits = __gnu_cxx::__numeric_traits< _ValueT >::__digits10;
        int __len;
        char __fbuf[16];
        __num_base::_S_format_float(__io, __fbuf, __mod);
        int __cs_size = __max_digits * 3;
        char * __cs = static_cast<char * >(__builtin_alloca(__cs_size));
        __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v);
        if (__len >= __cs_size)
        {
            __cs_size = __len + 1;
            __cs = static_cast<char * >(__builtin_alloca(__cs_size));
            __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v);
        }
        const ctype< _CharT > & __ctype = use_facet< ctype< _CharT > >(__loc);
        _CharT * __ws = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * __len));
        __ctype.widen(__cs, __cs + __len, __ws);
        _CharT * __wp = 0;
        const char * __p = char_traits< char >::find(__cs, __len, '.');
        if (__p)
        {
            __wp = __ws + (__p - __cs);
            *__wp = __lc->_M_decimal_point;
        }
        if (__lc->_M_use_grouping && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9' && __cs[1] >= '0' && __cs[2] >= '0')))
        {
            _CharT * __ws2 = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * __len * 2));
            streamsize __off = 0;
            if (__cs[0] == '-' || __cs[0] == '+')
            {
                __off = 1;
                __ws2[0] = __ws[0];
                __len -= 1;
            }
            _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size, __lc->_M_thousands_sep, __wp, __ws2 + __off, __ws + __off, __len);
            __len += __off;
            __ws = __ws2;
        }
        const streamsize __w = __io.width();
        if (__w > static_cast<streamsize >(__len))
        {
            _CharT * __ws3 = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * __w));
            _M_pad(__fill, __w, __io, __ws3, __ws, __len);
            __ws = __ws3;
        }
        __io.width(0);
        return std::__write(__s, __ws, __len);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const
    {
        const ios_base::fmtflags __flags = __io.flags();
        if ((__flags & ios_base::boolalpha) == 0)
        {
            const long __l = __v;
            __s = _M_insert_int(__s, __io, __fill, __l);
        }
        else
        {
            typedef __numpunct_cache< _CharT > __cache_type;
            __use_cache< __cache_type > __uc;
            const locale & __loc = __io._M_getloc();
            const __cache_type * __lc = __uc(__loc);
            const _CharT * __name = __v ? __lc->_M_truename : __lc->_M_falsename;
            int __len = __v ? __lc->_M_truename_size : __lc->_M_falsename_size;
            const streamsize __w = __io.width();
            if (__w > static_cast<streamsize >(__len))
            {
                _CharT * __cs = static_cast<_CharT * >(__builtin_alloca(sizeof(_CharT) * __w));
                _M_pad(__fill, __w, __io, __cs, __name, __len);
                __name = __cs;
            }
            __io.width(0);
            __s = std::__write(__s, __name, __len);
        }
        return __s;
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, long __v) const
    {
        return _M_insert_int(__s, __io, __fill, __v);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, unsigned long __v) const
    {
        return _M_insert_int(__s, __io, __fill, __v);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, long long __v) const
    {
        return _M_insert_int(__s, __io, __fill, __v);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, unsigned long long __v) const
    {
        return _M_insert_int(__s, __io, __fill, __v);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, double __v) const
    {
        return _M_insert_float(__s, __io, __fill, char(), __v);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, long double __v) const
    {
        return _M_insert_float(__s, __io, __fill, 'L', __v);
    }
    template<typename _CharT, typename _OutIter >
    _OutIter num_put< _CharT, _OutIter >::do_put(iter_type __s, ios_base & __io, char_type __fill, const void * __v) const
    {
        const ios_base::fmtflags __flags = __io.flags();
        const ios_base::fmtflags __fmt = ~(ios_base::basefield | ios_base::uppercase | ios_base::internal);
        __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));
        typedef __gnu_cxx::__conditional_type< (sizeof(const void *) <= sizeof(unsigned long)), unsigned long, unsigned long long >::__type _UIntPtrType;
        __s = _M_insert_int(__s, __io, __fill, reinterpret_cast<_UIntPtrType >(__v));
        __io.flags(__flags);
        return __s;
    }
    template<typename _CharT, typename _Traits >
    void __pad< _CharT, _Traits >::_S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, const streamsize __newlen, const streamsize __oldlen)
    {
        const size_t __plen = static_cast<size_t >(__newlen - __oldlen);
        const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;
        if (__adjust == ios_base::left)
        {
            _Traits::copy(__news, __olds, __oldlen);
            _Traits::assign(__news + __oldlen, __plen, __fill);
            return;
        }
        size_t __mod = 0;
        if (__adjust == ios_base::internal)
        {
            const locale & __loc = __io._M_getloc();
            const ctype< _CharT > & __ctype = use_facet< ctype< _CharT > >(__loc);
            if (__ctype.widen('-') == __olds[0] || __ctype.widen('+') == __olds[0])
            {
                __news[0] = __olds[0];
                __mod = 1;
                ++__news;
            }
            else
                if (__ctype.widen('0') == __olds[0] && __oldlen > 1 && (__ctype.widen('x') == __olds[1] || __ctype.widen('X') == __olds[1]))
                {
                    __news[0] = __olds[0];
                    __news[1] = __olds[1];
                    __mod = 2;
                    __news += 2;
                }
        }
        _Traits::assign(__news, __plen, __fill);
        _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }
    template<typename _CharT >
    _CharT * __add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last)
    {
        size_t __idx = 0;
        size_t __ctr = 0;
        while (__last - __first > __gbeg[__idx] && static_cast<signed char >(__gbeg[__idx]) > 0)
        {
            __last -= __gbeg[__idx];
            __idx < __gsize - 1 ? ++__idx : ++__ctr;
        }
        while (__first != __last)
            *__s++ = *__first++;
        while (__ctr--)
        {
            *__s++ = __sep;
            for (char __i = __gbeg[__idx];
                __i > 0;
                --__i)
            *__s++ = *__first++;
        }
        while (__idx--)
        {
            *__s++ = __sep;
            for (char __i = __gbeg[__idx];
                __i > 0;
                --__i)
            *__s++ = *__first++;
        }
        return __s;
    }
    extern template class numpunct< char > ;
    extern template class numpunct_byname< char > ;
    extern template class num_get< char > ;
    extern template class num_put< char > ;
    extern template class ctype_byname< char > ;
    extern template const numpunct< char > & use_facet< numpunct< char > >(const locale &);
    extern template const num_put< char > & use_facet< num_put< char > >(const locale &);
    extern template const num_get< char > & use_facet< num_get< char > >(const locale &);
    extern template bool has_facet< ctype< char > >(const locale &);
    extern template bool has_facet< numpunct< char > >(const locale &);
    extern template bool has_facet< num_put< char > >(const locale &);
    extern template bool has_facet< num_get< char > >(const locale &);
    extern template class numpunct< wchar_t > ;
    extern template class numpunct_byname< wchar_t > ;
    extern template class num_get< wchar_t > ;
    extern template class num_put< wchar_t > ;
    extern template class ctype_byname< wchar_t > ;
    extern template const numpunct< wchar_t > & use_facet< numpunct< wchar_t > >(const locale &);
    extern template const num_put< wchar_t > & use_facet< num_put< wchar_t > >(const locale &);
    extern template const num_get< wchar_t > & use_facet< num_get< wchar_t > >(const locale &);
    extern template bool has_facet< ctype< wchar_t > >(const locale &);
    extern template bool has_facet< numpunct< wchar_t > >(const locale &);
    extern template bool has_facet< num_put< wchar_t > >(const locale &);
    extern template bool has_facet< num_get< wchar_t > >(const locale &);
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _Facet >
    inline const _Facet & __check_facet(const _Facet * __f)
    {
        if (!__f)
            __throw_bad_cast();
        return *__f;
    }
    template<typename _CharT, typename _Traits >
    class basic_ios : public ios_base
    {
        public :
            typedef _CharT char_type;
            typedef typename _Traits::int_type int_type;
            typedef typename _Traits::pos_type pos_type;
            typedef typename _Traits::off_type off_type;
            typedef _Traits traits_type;
            typedef ctype< _CharT > __ctype_type;
            typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits > > __num_put_type;
            typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits > > __num_get_type;
        protected :
            basic_ostream< _CharT, _Traits > * _M_tie;
            mutable char_type _M_fill;
            mutable bool _M_fill_init;
            basic_streambuf< _CharT, _Traits > * _M_streambuf;
            const __ctype_type * _M_ctype;
            const __num_put_type * _M_num_put;
            const __num_get_type * _M_num_get;
        public :
            operator void *() const
            {
                return this->fail() ? 0 : const_cast<basic_ios * >(this);
            }
            bool operator !() const
            {
                return this->fail();
            }
            iostate rdstate() const
            {
                return _M_streambuf_state;
            }
            void clear(iostate __state = goodbit);
            void setstate(iostate __state)
            {
                this->clear(this->rdstate() | __state);
            }
            void _M_setstate(iostate __state)
            {
                _M_streambuf_state |= __state;
                if (this->exceptions() & __state)
                    throw;
            }
            bool good() const
            {
                return this->rdstate() == 0;
            }
            bool eof() const
            {
                return (this->rdstate() & eofbit) != 0;
            }
            bool fail() const
            {
                return (this->rdstate() & (badbit | failbit)) != 0;
            }
            bool bad() const
            {
                return (this->rdstate() & badbit) != 0;
            }
            iostate exceptions() const
            {
                return _M_exception;
            }
            void exceptions(iostate __except)
            {
                _M_exception = __except;
                this->clear(_M_streambuf_state);
            }
            explicit basic_ios(basic_streambuf< _CharT, _Traits > * __sb)
                : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0) 
            {
                this->init(__sb);
            }
            virtual ~basic_ios()
            {
            }
            basic_ostream< _CharT, _Traits > * tie() const
            {
                return _M_tie;
            }
            basic_ostream< _CharT, _Traits > * tie(basic_ostream< _CharT, _Traits > * __tiestr)
            {
                basic_ostream< _CharT, _Traits > * __old = _M_tie;
                _M_tie = __tiestr;
                return __old;
            }
            basic_streambuf< _CharT, _Traits > * rdbuf() const
            {
                return _M_streambuf;
            }
            basic_streambuf< _CharT, _Traits > * rdbuf(basic_streambuf< _CharT, _Traits > * __sb);
            basic_ios & copyfmt(const basic_ios & __rhs);
            char_type fill() const
            {
                if (!_M_fill_init)
                {
                    _M_fill = this->widen(' ');
                    _M_fill_init = true;
                }
                return _M_fill;
            }
            char_type fill(char_type __ch)
            {
                char_type __old = this->fill();
                _M_fill = __ch;
                return __old;
            }
            locale imbue(const locale & __loc);
            char narrow(char_type __c, char __dfault) const
            {
                return __check_facet(_M_ctype).narrow(__c, __dfault);
            }
            char_type widen(char __c) const
            {
                return __check_facet(_M_ctype).widen(__c);
            }
        protected :
            basic_ios()
                : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0) 
            {
            }
            void init(basic_streambuf< _CharT, _Traits > * __sb);
            void _M_cache_locale(const locale & __loc);
    };
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    void basic_ios< _CharT, _Traits >::clear(iostate __state)
    {
        if (this->rdbuf())
            _M_streambuf_state = __state;
        else
            _M_streambuf_state = __state | badbit;
        if (this->exceptions() & this->rdstate())
            __throw_ios_failure(("basic_ios::clear"));
    }
    template<typename _CharT, typename _Traits >
    basic_streambuf< _CharT, _Traits > * basic_ios< _CharT, _Traits >::rdbuf(basic_streambuf< _CharT, _Traits > * __sb)
    {
        basic_streambuf< _CharT, _Traits > * __old = _M_streambuf;
        _M_streambuf = __sb;
        this->clear();
        return __old;
    }
    template<typename _CharT, typename _Traits >
    basic_ios< _CharT, _Traits > & basic_ios< _CharT, _Traits >::copyfmt(const basic_ios & __rhs)
    {
        if (this != &__rhs)
        {
            _Words * __words = (__rhs._M_word_size <= _S_local_word_size) ? _M_local_word : new _Words [__rhs._M_word_size];
            _Callback_list * __cb = __rhs._M_callbacks;
            if (__cb)
                __cb->_M_add_reference();
            _M_call_callbacks(erase_event);
            if (_M_word != _M_local_word)
            {
                delete[] _M_word;
                _M_word = 0;
            }
            _M_dispose_callbacks();
            _M_callbacks = __cb;
            for (int __i = 0;
                __i < __rhs._M_word_size;
                ++__i)
            __words[__i] = __rhs._M_word[__i];
            _M_word = __words;
            _M_word_size = __rhs._M_word_size;
            this->flags(__rhs.flags());
            this->width(__rhs.width());
            this->precision(__rhs.precision());
            this->tie(__rhs.tie());
            this->fill(__rhs.fill());
            _M_ios_locale = __rhs.getloc();
            _M_cache_locale(_M_ios_locale);
            _M_call_callbacks(copyfmt_event);
            this->exceptions(__rhs.exceptions());
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    locale basic_ios< _CharT, _Traits >::imbue(const locale & __loc)
    {
        locale __old(this->getloc());
        ios_base::imbue(__loc);
        _M_cache_locale(__loc);
        if (this->rdbuf() != 0)
            this->rdbuf()->pubimbue(__loc);
        return __old;
    }
    template<typename _CharT, typename _Traits >
    void basic_ios< _CharT, _Traits >::init(basic_streambuf< _CharT, _Traits > * __sb)
    {
        ios_base::_M_init();
        _M_cache_locale(_M_ios_locale);
        _M_fill = _CharT();
        _M_fill_init = false;
        _M_tie = 0;
        _M_exception = goodbit;
        _M_streambuf = __sb;
        _M_streambuf_state = __sb ? goodbit : badbit;
    }
    template<typename _CharT, typename _Traits >
    void basic_ios< _CharT, _Traits >::_M_cache_locale(const locale & __loc)
    {
        if (__builtin_expect(has_facet< __ctype_type >(__loc), true))
            _M_ctype = &use_facet< __ctype_type >(__loc);
        else
            _M_ctype = 0;
        if (__builtin_expect(has_facet< __num_put_type >(__loc), true))
            _M_num_put = &use_facet< __num_put_type >(__loc);
        else
            _M_num_put = 0;
        if (__builtin_expect(has_facet< __num_get_type >(__loc), true))
            _M_num_get = &use_facet< __num_get_type >(__loc);
        else
            _M_num_get = 0;
    }
    extern template class basic_ios< char > ;
    extern template class basic_ios< wchar_t > ;
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    class basic_ostream : virtual public basic_ios< _CharT, _Traits >
    {
        public :
            typedef _CharT char_type;
            typedef typename _Traits::int_type int_type;
            typedef typename _Traits::pos_type pos_type;
            typedef typename _Traits::off_type off_type;
            typedef _Traits traits_type;
            typedef basic_streambuf< _CharT, _Traits > __streambuf_type;
            typedef basic_ios< _CharT, _Traits > __ios_type;
            typedef basic_ostream< _CharT, _Traits > __ostream_type;
            typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits > > __num_put_type;
            typedef ctype< _CharT > __ctype_type;
            explicit basic_ostream(__streambuf_type * __sb)
            {
                this->init(__sb);
            }
            virtual ~basic_ostream()
            {
            }
            class sentry;
            friend class sentry;
            __ostream_type & operator <<(__ostream_type & (* __pf)(__ostream_type &))
            {
                return __pf(*this);
            }
            __ostream_type & operator <<(__ios_type & (* __pf)(__ios_type &))
            {
                __pf(*this);
                return *this;
            }
            __ostream_type & operator <<(ios_base & (* __pf)(ios_base &))
            {
                __pf(*this);
                return *this;
            }
            __ostream_type & operator <<(long __n)
            {
                return _M_insert(__n);
            }
            __ostream_type & operator <<(unsigned long __n)
            {
                return _M_insert(__n);
            }
            __ostream_type & operator <<(bool __n)
            {
                return _M_insert(__n);
            }
            __ostream_type & operator <<(short __n);
            __ostream_type & operator <<(unsigned short __n)
            {
                return _M_insert(static_cast<unsigned long >(__n));
            }
            __ostream_type & operator <<(int __n);
            __ostream_type & operator <<(unsigned int __n)
            {
                return _M_insert(static_cast<unsigned long >(__n));
            }
            __ostream_type & operator <<(long long __n)
            {
                return _M_insert(__n);
            }
            __ostream_type & operator <<(unsigned long long __n)
            {
                return _M_insert(__n);
            }
            __ostream_type & operator <<(double __f)
            {
                return _M_insert(__f);
            }
            __ostream_type & operator <<(float __f)
            {
                return _M_insert(static_cast<double >(__f));
            }
            __ostream_type & operator <<(long double __f)
            {
                return _M_insert(__f);
            }
            __ostream_type & operator <<(const void * __p)
            {
                return _M_insert(__p);
            }
            __ostream_type & operator <<(__streambuf_type * __sb);
            __ostream_type & put(char_type __c);
            void _M_write(const char_type * __s, streamsize __n)
            {
                const streamsize __put = this->rdbuf()->sputn(__s, __n);
                if (__put != __n)
                    this->setstate(ios_base::badbit);
            }
            __ostream_type & write(const char_type * __s, streamsize __n);
            __ostream_type & flush();
            pos_type tellp();
            __ostream_type & seekp(pos_type);
            __ostream_type & seekp(off_type, ios_base::seekdir);
        protected :
            basic_ostream()
            {
                this->init(0);
            }
            template<typename _ValueT >
            __ostream_type & _M_insert(_ValueT __v);
    };
    template<typename _CharT, typename _Traits >
    class basic_ostream< _CharT, _Traits >::sentry
    {
            bool _M_ok;
            basic_ostream< _CharT, _Traits > & _M_os;
        public :
            explicit sentry(basic_ostream< _CharT, _Traits > & __os);
            ~sentry()
            {
                if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
                {
                    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
                        _M_os.setstate(ios_base::badbit);
                }
            }
            operator bool() const
            {
                return _M_ok;
            }
    };
    template<typename _CharT, typename _Traits >
    inline basic_ostream< _CharT, _Traits > & operator <<(basic_ostream< _CharT, _Traits > & __out, _CharT __c)
    {
        return __ostream_insert(__out, &__c, 1);
    }
    template<typename _CharT, typename _Traits >
    inline basic_ostream< _CharT, _Traits > & operator <<(basic_ostream< _CharT, _Traits > & __out, char __c)
    {
        return (__out << __out.widen(__c));
    }
    template<class _Traits >
    inline basic_ostream< char, _Traits > & operator <<(basic_ostream< char, _Traits > & __out, char __c)
    {
        return __ostream_insert(__out, &__c, 1);
    }
    template<class _Traits >
    inline basic_ostream< char, _Traits > & operator <<(basic_ostream< char, _Traits > & __out, signed char __c)
    {
        return (__out << static_cast<char >(__c));
    }
    template<class _Traits >
    inline basic_ostream< char, _Traits > & operator <<(basic_ostream< char, _Traits > & __out, unsigned char __c)
    {
        return (__out << static_cast<char >(__c));
    }
    template<typename _CharT, typename _Traits >
    inline basic_ostream< _CharT, _Traits > & operator <<(basic_ostream< _CharT, _Traits > & __out, const _CharT * __s)
    {
        if (!__s)
            __out.setstate(ios_base::badbit);
        else
            __ostream_insert(__out, __s, static_cast<streamsize >(_Traits::length(__s)));
        return __out;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & operator <<(basic_ostream< _CharT, _Traits > & __out, const char * __s);
    template<class _Traits >
    inline basic_ostream< char, _Traits > & operator <<(basic_ostream< char, _Traits > & __out, const char * __s)
    {
        if (!__s)
            __out.setstate(ios_base::badbit);
        else
            __ostream_insert(__out, __s, static_cast<streamsize >(_Traits::length(__s)));
        return __out;
    }
    template<class _Traits >
    inline basic_ostream< char, _Traits > & operator <<(basic_ostream< char, _Traits > & __out, const signed char * __s)
    {
        return (__out << reinterpret_cast<const char * >(__s));
    }
    template<class _Traits >
    inline basic_ostream< char, _Traits > & operator <<(basic_ostream< char, _Traits > & __out, const unsigned char * __s)
    {
        return (__out << reinterpret_cast<const char * >(__s));
    }
    template<typename _CharT, typename _Traits >
    inline basic_ostream< _CharT, _Traits > & endl(basic_ostream< _CharT, _Traits > & __os)
    {
        return flush(__os.put(__os.widen('\n')));
    }
    template<typename _CharT, typename _Traits >
    inline basic_ostream< _CharT, _Traits > & ends(basic_ostream< _CharT, _Traits > & __os)
    {
        return __os.put(_CharT());
    }
    template<typename _CharT, typename _Traits >
    inline basic_ostream< _CharT, _Traits > & flush(basic_ostream< _CharT, _Traits > & __os)
    {
        return __os.flush();
    }
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits >::sentry::sentry(basic_ostream< _CharT, _Traits > & __os)
        : _M_ok(false), _M_os(__os) 
    {
        if (__os.tie() && __os.good())
            __os.tie()->flush();
        if (__os.good())
            _M_ok = true;
        else
            __os.setstate(ios_base::failbit);
    }
    template<typename _CharT, typename _Traits >
    template<typename _ValueT >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::_M_insert(_ValueT __v)
    {
        sentry __cerb(*this);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const __num_put_type & __np = __check_facet(this->_M_num_put);
                if (__np.put(*this, *this, this->fill(), __v).failed())
                    __err |= ios_base::badbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::operator <<(short __n)
    {
        const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
        if (__fmt == ios_base::oct || __fmt == ios_base::hex)
            return _M_insert(static_cast<long >(static_cast<unsigned short >(__n)));
        else
            return _M_insert(static_cast<long >(__n));
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::operator <<(int __n)
    {
        const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
        if (__fmt == ios_base::oct || __fmt == ios_base::hex)
            return _M_insert(static_cast<long >(static_cast<unsigned int >(__n)));
        else
            return _M_insert(static_cast<long >(__n));
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::operator <<(__streambuf_type * __sbin)
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this);
        if (__cerb && __sbin)
        {
            try
            {
                if (!__copy_streambufs(__sbin, this->rdbuf()))
                    __err |= ios_base::failbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::failbit);
            }
        }
        else
            if (!__sbin)
                __err |= ios_base::badbit;
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::put(char_type __c)
    {
        sentry __cerb(*this);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const int_type __put = this->rdbuf()->sputc(__c);
                if (traits_type::eq_int_type(__put, traits_type::eof()))
                    __err |= ios_base::badbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::write(const _CharT * __s, streamsize __n)
    {
        sentry __cerb(*this);
        if (__cerb)
        {
            try
            {
                _M_write(__s, __n);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::flush()
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        try
        {
            if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
                __err |= ios_base::badbit;
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    typename basic_ostream< _CharT, _Traits >::pos_type basic_ostream< _CharT, _Traits >::tellp()
    {
        pos_type __ret = pos_type(-1);
        try
        {
            if (!this->fail())
                __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::seekp(pos_type __pos)
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        try
        {
            if (!this->fail())
            {
                const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);
                if (__p == pos_type(off_type(-1)))
                    __err |= ios_base::failbit;
            }
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & basic_ostream< _CharT, _Traits >::seekp(off_type __off, ios_base::seekdir __dir)
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        try
        {
            if (!this->fail())
            {
                const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::out);
                if (__p == pos_type(off_type(-1)))
                    __err |= ios_base::failbit;
            }
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_ostream< _CharT, _Traits > & operator <<(basic_ostream< _CharT, _Traits > & __out, const char * __s)
    {
        if (!__s)
            __out.setstate(ios_base::badbit);
        else
        {
            const size_t __clen = char_traits< char >::length(__s);
            try
            {
                struct __ptr_guard
                {
                        _CharT * __p;
                        __ptr_guard(_CharT * __ip)
                            : __p(__ip) 
                        {
                        }
                        ~__ptr_guard()
                        {
                            delete[] __p;
                        }
                        _CharT * __get()
                        {
                            return __p;
                        }
                } __pg(new _CharT [__clen]);
                _CharT * __ws = __pg.__get();
                for (size_t __i = 0;
                    __i < __clen;
                    ++__i)
                __ws[__i] = __out.widen(__s[__i]);
                __ostream_insert(__out, __ws, __clen);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                __out._M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                __out._M_setstate(ios_base::badbit);
            }
        }
        return __out;
    }
    extern template class basic_ostream< char > ;
    extern template ostream & endl(ostream &);
    extern template ostream & ends(ostream &);
    extern template ostream & flush(ostream &);
    extern template ostream & operator <<(ostream &, char);
    extern template ostream & operator <<(ostream &, unsigned char);
    extern template ostream & operator <<(ostream &, signed char);
    extern template ostream & operator <<(ostream &, const char *);
    extern template ostream & operator <<(ostream &, const unsigned char *);
    extern template ostream & operator <<(ostream &, const signed char *);
    extern template ostream & ostream::_M_insert(long);
    extern template ostream & ostream::_M_insert(unsigned long);
    extern template ostream & ostream::_M_insert(bool);
    extern template ostream & ostream::_M_insert(long long);
    extern template ostream & ostream::_M_insert(unsigned long long);
    extern template ostream & ostream::_M_insert(double);
    extern template ostream & ostream::_M_insert(long double);
    extern template ostream & ostream::_M_insert(const void *);
    extern template class basic_ostream< wchar_t > ;
    extern template wostream & endl(wostream &);
    extern template wostream & ends(wostream &);
    extern template wostream & flush(wostream &);
    extern template wostream & operator <<(wostream &, wchar_t);
    extern template wostream & operator <<(wostream &, char);
    extern template wostream & operator <<(wostream &, const wchar_t *);
    extern template wostream & operator <<(wostream &, const char *);
    extern template wostream & wostream::_M_insert(long);
    extern template wostream & wostream::_M_insert(unsigned long);
    extern template wostream & wostream::_M_insert(bool);
    extern template wostream & wostream::_M_insert(long long);
    extern template wostream & wostream::_M_insert(unsigned long long);
    extern template wostream & wostream::_M_insert(double);
    extern template wostream & wostream::_M_insert(long double);
    extern template wostream & wostream::_M_insert(const void *);
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    class basic_istream : virtual public basic_ios< _CharT, _Traits >
    {
        public :
            typedef _CharT char_type;
            typedef typename _Traits::int_type int_type;
            typedef typename _Traits::pos_type pos_type;
            typedef typename _Traits::off_type off_type;
            typedef _Traits traits_type;
            typedef basic_streambuf< _CharT, _Traits > __streambuf_type;
            typedef basic_ios< _CharT, _Traits > __ios_type;
            typedef basic_istream< _CharT, _Traits > __istream_type;
            typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits > > __num_get_type;
            typedef ctype< _CharT > __ctype_type;
        protected :
            streamsize _M_gcount;
        public :
            explicit basic_istream(__streambuf_type * __sb)
                : _M_gcount(streamsize(0)) 
            {
                this->init(__sb);
            }
            virtual ~basic_istream()
            {
                _M_gcount = streamsize(0);
            }
            class sentry;
            friend class sentry;
            __istream_type & operator >>(__istream_type & (* __pf)(__istream_type &))
            {
                return __pf(*this);
            }
            __istream_type & operator >>(__ios_type & (* __pf)(__ios_type &))
            {
                __pf(*this);
                return *this;
            }
            __istream_type & operator >>(ios_base & (* __pf)(ios_base &))
            {
                __pf(*this);
                return *this;
            }
            __istream_type & operator >>(bool & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(short & __n);
            __istream_type & operator >>(unsigned short & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(int & __n);
            __istream_type & operator >>(unsigned int & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(long & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(unsigned long & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(long long & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(unsigned long long & __n)
            {
                return _M_extract(__n);
            }
            __istream_type & operator >>(float & __f)
            {
                return _M_extract(__f);
            }
            __istream_type & operator >>(double & __f)
            {
                return _M_extract(__f);
            }
            __istream_type & operator >>(long double & __f)
            {
                return _M_extract(__f);
            }
            __istream_type & operator >>(void * & __p)
            {
                return _M_extract(__p);
            }
            __istream_type & operator >>(__streambuf_type * __sb);
            streamsize gcount() const
            {
                return _M_gcount;
            }
            int_type get();
            __istream_type & get(char_type & __c);
            __istream_type & get(char_type * __s, streamsize __n, char_type __delim);
            __istream_type & get(char_type * __s, streamsize __n)
            {
                return this->get(__s, __n, this->widen('\n'));
            }
            __istream_type & get(__streambuf_type & __sb, char_type __delim);
            __istream_type & get(__streambuf_type & __sb)
            {
                return this->get(__sb, this->widen('\n'));
            }
            __istream_type & getline(char_type * __s, streamsize __n, char_type __delim);
            __istream_type & getline(char_type * __s, streamsize __n)
            {
                return this->getline(__s, __n, this->widen('\n'));
            }
            __istream_type & ignore();
            __istream_type & ignore(streamsize __n);
            __istream_type & ignore(streamsize __n, int_type __delim);
            int_type peek();
            __istream_type & read(char_type * __s, streamsize __n);
            streamsize readsome(char_type * __s, streamsize __n);
            __istream_type & putback(char_type __c);
            __istream_type & unget();
            int sync();
            pos_type tellg();
            __istream_type & seekg(pos_type);
            __istream_type & seekg(off_type, ios_base::seekdir);
        protected :
            basic_istream()
                : _M_gcount(streamsize(0)) 
            {
                this->init(0);
            }
            template<typename _ValueT >
            __istream_type & _M_extract(_ValueT & __v);
    };
    template<>
    basic_istream< char > & basic_istream< char >::getline(char_type * __s, streamsize __n, char_type __delim);
    template<>
    basic_istream< char > & basic_istream< char >::ignore(streamsize __n);
    template<>
    basic_istream< char > & basic_istream< char >::ignore(streamsize __n, int_type __delim);
    template<>
    basic_istream< wchar_t > & basic_istream< wchar_t >::getline(char_type * __s, streamsize __n, char_type __delim);
    template<>
    basic_istream< wchar_t > & basic_istream< wchar_t >::ignore(streamsize __n);
    template<>
    basic_istream< wchar_t > & basic_istream< wchar_t >::ignore(streamsize __n, int_type __delim);
    template<typename _CharT, typename _Traits >
    class basic_istream< _CharT, _Traits >::sentry
    {
        public :
            typedef _Traits traits_type;
            typedef basic_streambuf< _CharT, _Traits > __streambuf_type;
            typedef basic_istream< _CharT, _Traits > __istream_type;
            typedef typename __istream_type::__ctype_type __ctype_type;
            typedef typename _Traits::int_type __int_type;
            explicit sentry(basic_istream< _CharT, _Traits > & __is, bool __noskipws = false);
            operator bool() const
            {
                return _M_ok;
            }
        private :
            bool _M_ok;
    };
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & operator >>(basic_istream< _CharT, _Traits > & __in, _CharT & __c);
    template<class _Traits >
    inline basic_istream< char, _Traits > & operator >>(basic_istream< char, _Traits > & __in, unsigned char & __c)
    {
        return (__in >> reinterpret_cast<char & >(__c));
    }
    template<class _Traits >
    inline basic_istream< char, _Traits > & operator >>(basic_istream< char, _Traits > & __in, signed char & __c)
    {
        return (__in >> reinterpret_cast<char & >(__c));
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & operator >>(basic_istream< _CharT, _Traits > & __in, _CharT * __s);
    template<>
    basic_istream< char > & operator >>(basic_istream< char > & __in, char * __s);
    template<class _Traits >
    inline basic_istream< char, _Traits > & operator >>(basic_istream< char, _Traits > & __in, unsigned char * __s)
    {
        return (__in >> reinterpret_cast<char * >(__s));
    }
    template<class _Traits >
    inline basic_istream< char, _Traits > & operator >>(basic_istream< char, _Traits > & __in, signed char * __s)
    {
        return (__in >> reinterpret_cast<char * >(__s));
    }
    template<typename _CharT, typename _Traits >
    class basic_iostream : public basic_istream< _CharT, _Traits >, public basic_ostream< _CharT, _Traits >
    {
        public :
            typedef _CharT char_type;
            typedef typename _Traits::int_type int_type;
            typedef typename _Traits::pos_type pos_type;
            typedef typename _Traits::off_type off_type;
            typedef _Traits traits_type;
            typedef basic_istream< _CharT, _Traits > __istream_type;
            typedef basic_ostream< _CharT, _Traits > __ostream_type;
            explicit basic_iostream(basic_streambuf< _CharT, _Traits > * __sb)
                : __istream_type(__sb), __ostream_type(__sb) 
            {
            }
            virtual ~basic_iostream()
            {
            }
        protected :
            basic_iostream()
                : __istream_type(), __ostream_type() 
            {
            }
    };
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & ws(basic_istream< _CharT, _Traits > & __is);
}
namespace std __attribute__((__visibility__("default"))) {
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits >::sentry::sentry(basic_istream< _CharT, _Traits > & __in, bool __noskip)
        : _M_ok(false) 
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        if (__in.good())
        {
            if (__in.tie())
                __in.tie()->flush();
            if (!__noskip && bool(__in.flags() & ios_base::skipws))
            {
                const __int_type __eof = traits_type::eof();
                __streambuf_type * __sb = __in.rdbuf();
                __int_type __c = __sb->sgetc();
                const __ctype_type & __ct = __check_facet(__in._M_ctype);
                while (!traits_type::eq_int_type(__c, __eof) && __ct.is(ctype_base::space, traits_type::to_char_type(__c)))
                    __c = __sb->snextc();
                if (traits_type::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
            }
        }
        if (__in.good() && __err == ios_base::goodbit)
            _M_ok = true;
        else
        {
            __err |= ios_base::failbit;
            __in.setstate(__err);
        }
    }
    template<typename _CharT, typename _Traits >
    template<typename _ValueT >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::_M_extract(_ValueT & __v)
    {
        sentry __cerb(*this, false);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const __num_get_type & __ng = __check_facet(this->_M_num_get);
                __ng.get(*this, 0, *this, __err, __v);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::operator >>(short & __n)
    {
        long __l;
        _M_extract(__l);
        if (!this->fail())
        {
            if (__gnu_cxx::__numeric_traits< short >::__min <= __l && __l <= __gnu_cxx::__numeric_traits< short >::__max)
                __n = short(__l);
            else
                this->setstate(ios_base::failbit);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::operator >>(int & __n)
    {
        long __l;
        _M_extract(__l);
        if (!this->fail())
        {
            if (__gnu_cxx::__numeric_traits< int >::__min <= __l && __l <= __gnu_cxx::__numeric_traits< int >::__max)
                __n = int(__l);
            else
                this->setstate(ios_base::failbit);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::operator >>(__streambuf_type * __sbout)
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this, false);
        if (__cerb && __sbout)
        {
            try
            {
                bool __ineof;
                if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
                    __err |= ios_base::failbit;
                if (__ineof)
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::failbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::failbit);
            }
        }
        else
            if (!__sbout)
                __err |= ios_base::failbit;
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    typename basic_istream< _CharT, _Traits >::int_type basic_istream< _CharT, _Traits >::get(void)
    {
        const int_type __eof = traits_type::eof();
        int_type __c = __eof;
        _M_gcount = 0;
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this, true);
        if (__cerb)
        {
            try
            {
                __c = this->rdbuf()->sbumpc();
                if (!traits_type::eq_int_type(__c, __eof))
                    _M_gcount = 1;
                else
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
        }
        if (!_M_gcount)
            __err |= ios_base::failbit;
        if (__err)
            this->setstate(__err);
        return __c;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::get(char_type & __c)
    {
        _M_gcount = 0;
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this, true);
        if (__cerb)
        {
            try
            {
                const int_type __cb = this->rdbuf()->sbumpc();
                if (!traits_type::eq_int_type(__cb, traits_type::eof()))
                {
                    _M_gcount = 1;
                    __c = traits_type::to_char_type(__cb);
                }
                else
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
        }
        if (!_M_gcount)
            __err |= ios_base::failbit;
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::get(char_type * __s, streamsize __n, char_type __delim)
    {
        _M_gcount = 0;
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this, true);
        if (__cerb)
        {
            try
            {
                const int_type __idelim = traits_type::to_int_type(__delim);
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                int_type __c = __sb->sgetc();
                while (_M_gcount + 1 < __n && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __idelim))
                {
                    *__s++ = traits_type::to_char_type(__c);
                    ++_M_gcount;
                    __c = __sb->snextc();
                }
                if (traits_type::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
        }
        if (__n > 0)
            *__s = char_type();
        if (!_M_gcount)
            __err |= ios_base::failbit;
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::get(__streambuf_type & __sb, char_type __delim)
    {
        _M_gcount = 0;
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this, true);
        if (__cerb)
        {
            try
            {
                const int_type __idelim = traits_type::to_int_type(__delim);
                const int_type __eof = traits_type::eof();
                __streambuf_type * __this_sb = this->rdbuf();
                int_type __c = __this_sb->sgetc();
                char_type __c2 = traits_type::to_char_type(__c);
                while (!traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __idelim) && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
                {
                    ++_M_gcount;
                    __c = __this_sb->snextc();
                    __c2 = traits_type::to_char_type(__c);
                }
                if (traits_type::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
        }
        if (!_M_gcount)
            __err |= ios_base::failbit;
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::getline(char_type * __s, streamsize __n, char_type __delim)
    {
        _M_gcount = 0;
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        sentry __cerb(*this, true);
        if (__cerb)
        {
            try
            {
                const int_type __idelim = traits_type::to_int_type(__delim);
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                int_type __c = __sb->sgetc();
                while (_M_gcount + 1 < __n && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __idelim))
                {
                    *__s++ = traits_type::to_char_type(__c);
                    __c = __sb->snextc();
                    ++_M_gcount;
                }
                if (traits_type::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
                else
                {
                    if (traits_type::eq_int_type(__c, __idelim))
                    {
                        __sb->sbumpc();
                        ++_M_gcount;
                    }
                    else
                        __err |= ios_base::failbit;
                }
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
        }
        if (__n > 0)
            *__s = char_type();
        if (!_M_gcount)
            __err |= ios_base::failbit;
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::ignore(void)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
                    __err |= ios_base::eofbit;
                else
                    _M_gcount = 1;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::ignore(streamsize __n)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb && __n > 0)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                int_type __c = __sb->sgetc();
                bool __large_ignore = false;
                while (true)
                {
                    while (_M_gcount < __n && !traits_type::eq_int_type(__c, __eof))
                    {
                        ++_M_gcount;
                        __c = __sb->snextc();
                    }
                    if (__n == __gnu_cxx::__numeric_traits< streamsize >::__max && !traits_type::eq_int_type(__c, __eof))
                    {
                        _M_gcount = __gnu_cxx::__numeric_traits< streamsize >::__min;
                        __large_ignore = true;
                    }
                    else
                        break;
                }
                if (__large_ignore)
                    _M_gcount = __gnu_cxx::__numeric_traits< streamsize >::__max;
                if (traits_type::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::ignore(streamsize __n, int_type __delim)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb && __n > 0)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                int_type __c = __sb->sgetc();
                bool __large_ignore = false;
                while (true)
                {
                    while (_M_gcount < __n && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __delim))
                    {
                        ++_M_gcount;
                        __c = __sb->snextc();
                    }
                    if (__n == __gnu_cxx::__numeric_traits< streamsize >::__max && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __delim))
                    {
                        _M_gcount = __gnu_cxx::__numeric_traits< streamsize >::__min;
                        __large_ignore = true;
                    }
                    else
                        break;
                }
                if (__large_ignore)
                    _M_gcount = __gnu_cxx::__numeric_traits< streamsize >::__max;
                if (traits_type::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
                else
                    if (traits_type::eq_int_type(__c, __delim))
                    {
                        if (_M_gcount < __gnu_cxx::__numeric_traits< streamsize >::__max)
                            ++_M_gcount;
                        __sb->sbumpc();
                    }
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    typename basic_istream< _CharT, _Traits >::int_type basic_istream< _CharT, _Traits >::peek(void)
    {
        int_type __c = traits_type::eof();
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                __c = this->rdbuf()->sgetc();
                if (traits_type::eq_int_type(__c, traits_type::eof()))
                    __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return __c;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::read(char_type * __s, streamsize __n)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                _M_gcount = this->rdbuf()->sgetn(__s, __n);
                if (_M_gcount != __n)
                    __err |= (ios_base::eofbit | ios_base::failbit);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    streamsize basic_istream< _CharT, _Traits >::readsome(char_type * __s, streamsize __n)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const streamsize __num = this->rdbuf()->in_avail();
                if (__num > 0)
                    _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
                else
                    if (__num == -1)
                        __err |= ios_base::eofbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return _M_gcount;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::putback(char_type __c)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                if (!__sb || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
                    __err |= ios_base::badbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::unget(void)
    {
        _M_gcount = 0;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const int_type __eof = traits_type::eof();
                __streambuf_type * __sb = this->rdbuf();
                if (!__sb || traits_type::eq_int_type(__sb->sungetc(), __eof))
                    __err |= ios_base::badbit;
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return *this;
    }
    template<typename _CharT, typename _Traits >
    int basic_istream< _CharT, _Traits >::sync(void)
    {
        int __ret = -1;
        sentry __cerb(*this, true);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                __streambuf_type * __sb = this->rdbuf();
                if (__sb)
                {
                    if (__sb->pubsync() == -1)
                        __err |= ios_base::badbit;
                    else
                        __ret = 0;
                }
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                this->_M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                this->_M_setstate(ios_base::badbit);
            }
            if (__err)
                this->setstate(__err);
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits >
    typename basic_istream< _CharT, _Traits >::pos_type basic_istream< _CharT, _Traits >::tellg(void)
    {
        pos_type __ret = pos_type(-1);
        try
        {
            if (!this->fail())
                __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        return __ret;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::seekg(pos_type __pos)
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        try
        {
            if (!this->fail())
            {
                const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in);
                if (__p == pos_type(off_type(-1)))
                    __err |= ios_base::failbit;
            }
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & basic_istream< _CharT, _Traits >::seekg(off_type __off, ios_base::seekdir __dir)
    {
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        try
        {
            if (!this->fail())
            {
                const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::in);
                if (__p == pos_type(off_type(-1)))
                    __err |= ios_base::failbit;
            }
        }
        catch (__cxxabiv1::__forced_unwind &)
        {
            this->_M_setstate(ios_base::badbit);
            throw;
        }
        catch (...)
        {
            this->_M_setstate(ios_base::badbit);
        }
        if (__err)
            this->setstate(__err);
        return *this;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & operator >>(basic_istream< _CharT, _Traits > & __in, _CharT & __c)
    {
        typedef basic_istream< _CharT, _Traits > __istream_type;
        typedef typename __istream_type::int_type __int_type;
        typename __istream_type::sentry __cerb(__in, false);
        if (__cerb)
        {
            ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
            try
            {
                const __int_type __cb = __in.rdbuf()->sbumpc();
                if (!_Traits::eq_int_type(__cb, _Traits::eof()))
                    __c = _Traits::to_char_type(__cb);
                else
                    __err |= (ios_base::eofbit | ios_base::failbit);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                __in._M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                __in._M_setstate(ios_base::badbit);
            }
            if (__err)
                __in.setstate(__err);
        }
        return __in;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & operator >>(basic_istream< _CharT, _Traits > & __in, _CharT * __s)
    {
        typedef basic_istream< _CharT, _Traits > __istream_type;
        typedef basic_streambuf< _CharT, _Traits > __streambuf_type;
        typedef typename _Traits::int_type int_type;
        typedef _CharT char_type;
        typedef ctype< _CharT > __ctype_type;
        streamsize __extracted = 0;
        ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
        typename __istream_type::sentry __cerb(__in, false);
        if (__cerb)
        {
            try
            {
                streamsize __num = __in.width();
                if (__num <= 0)
                    __num = __gnu_cxx::__numeric_traits< streamsize >::__max;
                const __ctype_type & __ct = use_facet< __ctype_type >(__in.getloc());
                const int_type __eof = _Traits::eof();
                __streambuf_type * __sb = __in.rdbuf();
                int_type __c = __sb->sgetc();
                while (__extracted < __num - 1 && !_Traits::eq_int_type(__c, __eof) && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))
                {
                    *__s++ = _Traits::to_char_type(__c);
                    ++__extracted;
                    __c = __sb->snextc();
                }
                if (_Traits::eq_int_type(__c, __eof))
                    __err |= ios_base::eofbit;
                *__s = char_type();
                __in.width(0);
            }
            catch (__cxxabiv1::__forced_unwind &)
            {
                __in._M_setstate(ios_base::badbit);
                throw;
            }
            catch (...)
            {
                __in._M_setstate(ios_base::badbit);
            }
        }
        if (!__extracted)
            __err |= ios_base::failbit;
        if (__err)
            __in.setstate(__err);
        return __in;
    }
    template<typename _CharT, typename _Traits >
    basic_istream< _CharT, _Traits > & ws(basic_istream< _CharT, _Traits > & __in)
    {
        typedef basic_istream< _CharT, _Traits > __istream_type;
        typedef basic_streambuf< _CharT, _Traits > __streambuf_type;
        typedef typename __istream_type::int_type __int_type;
        typedef ctype< _CharT > __ctype_type;
        const __ctype_type & __ct = use_facet< __ctype_type >(__in.getloc());
        const __int_type __eof = _Traits::eof();
        __streambuf_type * __sb = __in.rdbuf();
        __int_type __c = __sb->sgetc();
        while (!_Traits::eq_int_type(__c, __eof) && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
            __c = __sb->snextc();
        if (_Traits::eq_int_type(__c, __eof))
            __in.setstate(ios_base::eofbit);
        return __in;
    }
    extern template class basic_istream< char > ;
    extern template istream & ws(istream &);
    extern template istream & operator >>(istream &, char &);
    extern template istream & operator >>(istream &, char *);
    extern template istream & operator >>(istream &, unsigned char &);
    extern template istream & operator >>(istream &, signed char &);
    extern template istream & operator >>(istream &, unsigned char *);
    extern template istream & operator >>(istream &, signed char *);
    extern template istream & istream::_M_extract(unsigned short &);
    extern template istream & istream::_M_extract(unsigned int &);
    extern template istream & istream::_M_extract(long &);
    extern template istream & istream::_M_extract(unsigned long &);
    extern template istream & istream::_M_extract(bool &);
    extern template istream & istream::_M_extract(long long &);
    extern template istream & istream::_M_extract(unsigned long long &);
    extern template istream & istream::_M_extract(float &);
    extern template istream & istream::_M_extract(double &);
    extern template istream & istream::_M_extract(long double &);
    extern template istream & istream::_M_extract(void *&);
    extern template class basic_iostream< char > ;
    extern template class basic_istream< wchar_t > ;
    extern template wistream & ws(wistream &);
    extern template wistream & operator >>(wistream &, wchar_t &);
    extern template wistream & operator >>(wistream &, wchar_t *);
    extern template wistream & wistream::_M_extract(unsigned short &);
    extern template wistream & wistream::_M_extract(unsigned int &);
    extern template wistream & wistream::_M_extract(long &);
    extern template wistream & wistream::_M_extract(unsigned long &);
    extern template wistream & wistream::_M_extract(bool &);
    extern template wistream & wistream::_M_extract(long long &);
    extern template wistream & wistream::_M_extract(unsigned long long &);
    extern template wistream & wistream::_M_extract(float &);
    extern template wistream & wistream::_M_extract(double &);
    extern template wistream & wistream::_M_extract(long double &);
    extern template wistream & wistream::_M_extract(void *&);
    extern template class basic_iostream< wchar_t > ;
}
namespace std __attribute__((__visibility__("default"))) {
    extern istream cin;
    extern ostream cout;
    extern ostream cerr;
    extern ostream clog;
    extern wistream wcin;
    extern wostream wcout;
    extern wostream wcerr;
    extern wostream wclog;
    static ios_base::Init __ioinit;
}
struct A : sigc::trackable
{
        sigc::signal< void, std::string > c;
};
void f(const std::string & str)
{
    std::cerr << "Message " << str << std::endl;
}
int main(int argc, char * argv[])
{
    A a;
    a.c.connect(sigc::ptr_fun(f));
    a.c("Hola!");
}

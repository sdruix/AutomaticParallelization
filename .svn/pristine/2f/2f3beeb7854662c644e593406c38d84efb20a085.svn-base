# OpenMP + Nanos 
[omp-base]
options =
{debug} options = -g
{(instrument|instrumentation)} options = --variable=instrument:1
preprocessor_name = gcc
preprocessor_options = -E
{(instrument|instrumentation),!(openmpt|ompss|nanox)} preprocessor_options = -I -include mintaka.h
compiler_name = gcc
compiler_options = 
linker_name = gcc
linker_options = -Xlinker --add-needed
{openmp} compiler_phase = libtlomp-core.so
{openmp} pragma_prefix = nanos
{openmp} compiler_phase = libtlnanos-version.so
# nanos4
{openmp,!(nanox|openmpt|ompss)} preprocessor_options = -I -D_OPENMP=200505 -include nth_mcc.h
{openmp,!(nanox|openmpt|ompss)} linker_options = -L -Xlinker -rpath -Xlinker 
{openmp,!(nanox|openmpt|ompss),!nanos-dev,!debug,!instrument} linker_options = -lnthreads-pfm 
{openmp,!(nanox|openmpt|ompss),nanos-dev,!debug,!instrument} linker_options = -lnthreads-dev 
{openmp,!(nanox|openmpt|ompss),instrument,!debug} linker_options = -lnthreads-prv -L  -Xlinker -rpath -Xlinker  -lmintaka
{openmp,!(nanox|openmpt|ompss),debug} linker_options = -g -lnthreads-dbg
{openmp,!(nanox|openmpt|ompss),instrument,!debug} 
{openmp,!(nanox|openmpt|ompss),serialize} compiler_phase = libtlomp-serialize.so
{openmp,!(nanox|openmpt|ompss),serialize} compiler_phase = libtlomp-core.so  # Rerun core after serialization
{openmp,!(nanox|openmpt|ompss)} compiler_phase = libtlomp-nanos4.so
# nanos++
{openmp,(nanox|openmpt|ompss)} preprocessor_options = -I -D_OPENMP=200805 -include nanos.h -include nanos_omp.h
{openmp,!debug,!(instrument|instrumentation),(nanox|openmpt|ompss)} linker_options = -L/performance -Xlinker -rpath -Xlinker /performance
{openmp,debug,!(instrument|instrumentation),(nanox|openmpt|ompss)} linker_options = -L/debug -Xlinker -rpath -Xlinker /debug
{openmp,!debug,(instrument|instrumentation),(nanox|openmpt|ompss)} linker_options = -L/instrumentation -Xlinker -rpath -Xlinker /instrumentation
{openmp,debug,(instrument|instrumentation),(nanox|openmpt|ompss)} linker_options = -L/instrumentation-debug -Xlinker -rpath -Xlinker /instrumentation-debug
{openmp,nanox,!(openmpt|ompss)} linker_options = -lnanox -lnanox-c -lnanox-omp
{openmp,!nanox,(openmpt|ompss)} linker_options = -lnanox -lnanox-c -lnanox-ss
{openmp,(nanox|openmpt|ompss)} compiler_phase = libtlomp-fun-tasks.so 
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_dto = show_warnings:bool:0
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlomp-core.so 
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlomp-nanox.so
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlnanox-smp.so
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlnanox-smp_numa.so
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlnanox-smp_ocl.so
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlnanox-cuda.so
{openmp,(nanox|openmpt|ompss),!only-fun-tasks} compiler_phase = libtlnanox-gpu.so


[mcc : omp-base]
language = C
options = -std=gnu99

[mcxx : omp-base]
language = C++
{openmp} preprocessor_options = -include new 
compiler_name = g++
linker_name = g++

# Intel Compiler
[imcc : mcc]
preprocessor_name = 
compiler_name = 
linker_name = 
options = --variable=weaks_as_statics:1

[imcxx : mcxx]
preprocessor_name = 
compiler_name = 
linker_name = 
options = --variable=weaks_as_statics:1

# IBM XL
[xlmcc : mcc]
preprocessor_name = 
preprocessor_uses_stdout = yes
compiler_name = 
linker_name = 

[xlmcxx : mcxx]
preprocessor_name = 
preprocessor_uses_stdout = yes
compiler_name = 
linker_name = 

# nvcc (CUDA)
[mnvcc : omp-base]
language = C
options = --cuda
preprocessor_name = 
preprocessor_options = -D__CUDABE__
compiler_name = 
linker_name = 
compiler_dto = remove_attributes:string:host,device
compiler_phase = libtl-remove-attrs.so

[mnvcxx : omp-base]
language = C++
options = --cuda
preprocessor_name = 
preprocessor_options = -D__CUDABE__
compiler_name = 
linker_name = 
compiler_dto = remove_attributes:string:host,device
compiler_phase = libtl-remove-attrs.so

# Profile mode
[omp-prof-common]
{openmp} preprocessor_options = -D_OPENMP=200805
{openmp} compiler_phase = libtlomp-core.so
{openmp} compiler_phase = libtlomp-profile.so

[omp-profcc : omp-prof-common]
language = C
options = -std=gnu99
preprocessor_name = gcc
preprocessor_options = -E
compiler_name = gcc
linker_name = gcc

[omp-profcxx : omp-prof-common]
language = C++
preprocessor_name = g++
preprocessor_options = -E
compiler_name = g++
compiler_options =
linker_name = g++
linker_options =

# Fortran EXPERIMENTAL support
[mf95]
language = Fortran
options =
preprocessor_name = gfortran
preprocessor_options = -cpp -E
compiler_name = gfortran
compiler_options =
linker_name = gfortran
linker_options =
{openmp} compiler_phase = libtlomp-core.so

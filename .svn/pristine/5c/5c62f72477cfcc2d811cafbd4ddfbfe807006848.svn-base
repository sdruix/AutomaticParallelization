State 1 conflicts: 8 reduce/reduce
State 2 conflicts: 10 reduce/reduce
State 3 conflicts: 10 reduce/reduce
State 4 conflicts: 10 reduce/reduce
State 5 conflicts: 10 reduce/reduce
State 6 conflicts: 10 reduce/reduce
State 7 conflicts: 10 reduce/reduce
State 8 conflicts: 10 reduce/reduce
State 9 conflicts: 10 reduce/reduce
State 10 conflicts: 10 reduce/reduce
State 84 conflicts: 22 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: constant

    2 digit: '0'
    3      | '1'
    4      | '2'
    5      | '3'
    6      | '4'
    7      | '5'
    8      | '6'
    9      | '7'
   10      | '8'
   11      | '9'

   12 constant: integer_constant
   13         | floating_constant

   14 integer_constant: decimal_constant integer_suffix_opt
   15                 | octal_constant integer_suffix_opt
   16                 | hexadecimal_constant integer_suffix_opt

   17 decimal_constant: nonzero_digit
   18                 | decimal_constant digit

   19 octal_constant: '0'
   20               | octal_constant octal_digit

   21 hexadecimal_constant: hexadecimal_prefix hexadecimal_digit
   22                     | hexadecimal_constant hexadecimal_digit

   23 hexadecimal_prefix: '0' 'x'
   24                   | '0' 'X'

   25 nonzero_digit: '1'
   26              | '2'
   27              | '3'
   28              | '4'
   29              | '5'
   30              | '6'
   31              | '7'
   32              | '8'
   33              | '9'

   34 octal_digit: '0'
   35            | '1'
   36            | '2'
   37            | '3'
   38            | '4'
   39            | '5'
   40            | '6'
   41            | '7'

   42 hexadecimal_digit: '0'
   43                  | '1'
   44                  | '2'
   45                  | '3'
   46                  | '4'
   47                  | '5'
   48                  | '6'
   49                  | '7'
   50                  | '8'
   51                  | '9'
   52                  | 'a'
   53                  | 'b'
   54                  | 'c'
   55                  | 'd'
   56                  | 'e'
   57                  | 'f'
   58                  | 'A'
   59                  | 'B'
   60                  | 'C'
   61                  | 'D'
   62                  | 'E'
   63                  | 'F'

   64 integer_suffix_opt: /* empty */
   65                   | unsigned_suffix long_suffix_opt
   66                   | unsigned_suffix long_long_suffix
   67                   | long_suffix unsigned_suffix_opt
   68                   | long_long_suffix unsigned_suffix_opt

   69 unsigned_suffix: 'u'
   70                | 'U'

   71 unsigned_suffix_opt: /* empty */
   72                    | unsigned_suffix

   73 long_suffix: 'l'
   74            | 'L'

   75 long_suffix_opt: /* empty */
   76                | long_suffix

   77 long_long_suffix: 'l' 'l'
   78                 | 'L' 'L'

   79 floating_constant: decimal_floating_constant
   80                  | hexadecimal_floating_constant

   81 decimal_floating_constant: fractional_constant floating_suffix_opt
   82                          | fractional_constant exponent_part floating_suffix_opt
   83                          | digit_sequence exponent_part floating_suffix_opt

   84 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part floating_suffix_opt
   85                              | hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part floating_suffix_opt

   86 fractional_constant: '.' digit_sequence
   87                    | digit_sequence '.' digit_sequence
   88                    | digit_sequence '.'

   89 exponent_part: 'e' digit_sequence
   90              | 'e' '+' digit_sequence
   91              | 'e' '-' digit_sequence
   92              | 'E' digit_sequence
   93              | 'E' '+' digit_sequence
   94              | 'E' '-' digit_sequence

   95 digit_sequence: digit
   96               | digit_sequence digit

   97 hexadecimal_fractional_constant: '.' hexadecimal_digit_sequence
   98                                | hexadecimal_digit_sequence '.' hexadecimal_digit_sequence
   99                                | hexadecimal_digit_sequence '.'

  100 binary_exponent_part: 'p' digit_sequence
  101                     | 'p' '+' digit_sequence
  102                     | 'p' '-' digit_sequence
  103                     | 'P' digit_sequence
  104                     | 'P' '+' digit_sequence
  105                     | 'P' '-' digit_sequence

  106 hexadecimal_digit_sequence: hexadecimal_digit
  107                           | hexadecimal_digit_sequence hexadecimal_digit

  108 floating_suffix_opt: /* empty */
  109                    | 'f'
  110                    | 'F'
  111                    | 'l'
  112                    | 'L'


Terminals, with rules where they appear

$end (0) 0
'+' (43) 90 93 101 104
'-' (45) 91 94 102 105
'.' (46) 86 87 88 97 98 99
'0' (48) 2 19 23 24 34 42
'1' (49) 3 25 35 43
'2' (50) 4 26 36 44
'3' (51) 5 27 37 45
'4' (52) 6 28 38 46
'5' (53) 7 29 39 47
'6' (54) 8 30 40 48
'7' (55) 9 31 41 49
'8' (56) 10 32 50
'9' (57) 11 33 51
'A' (65) 58
'B' (66) 59
'C' (67) 60
'D' (68) 61
'E' (69) 62 92 93 94
'F' (70) 63 110
'L' (76) 74 78 112
'P' (80) 103 104 105
'U' (85) 70
'X' (88) 24
'a' (97) 52
'b' (98) 53
'c' (99) 54
'd' (100) 55
'e' (101) 56 89 90 91
'f' (102) 57 109
'l' (108) 73 77 111
'p' (112) 100 101 102
'u' (117) 69
'x' (120) 23
error (256)


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
start (37)
    on left: 1, on right: 0
digit (38)
    on left: 2 3 4 5 6 7 8 9 10 11, on right: 18 95 96
constant (39)
    on left: 12 13, on right: 1
integer_constant (40)
    on left: 14 15 16, on right: 12
decimal_constant (41)
    on left: 17 18, on right: 14 18
octal_constant (42)
    on left: 19 20, on right: 15 20
hexadecimal_constant (43)
    on left: 21 22, on right: 16 22
hexadecimal_prefix (44)
    on left: 23 24, on right: 21 84 85
nonzero_digit (45)
    on left: 25 26 27 28 29 30 31 32 33, on right: 17
octal_digit (46)
    on left: 34 35 36 37 38 39 40 41, on right: 20
hexadecimal_digit (47)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60 61 62 63, on right: 21 22 106 107
integer_suffix_opt (48)
    on left: 64 65 66 67 68, on right: 14 15 16
unsigned_suffix (49)
    on left: 69 70, on right: 65 66 72
unsigned_suffix_opt (50)
    on left: 71 72, on right: 67 68
long_suffix (51)
    on left: 73 74, on right: 67 76
long_suffix_opt (52)
    on left: 75 76, on right: 65
long_long_suffix (53)
    on left: 77 78, on right: 66 68
floating_constant (54)
    on left: 79 80, on right: 13
decimal_floating_constant (55)
    on left: 81 82 83, on right: 79
hexadecimal_floating_constant (56)
    on left: 84 85, on right: 80
fractional_constant (57)
    on left: 86 87 88, on right: 81 82
exponent_part (58)
    on left: 89 90 91 92 93 94, on right: 82 83
digit_sequence (59)
    on left: 95 96, on right: 83 86 87 88 89 90 91 92 93 94 96 100
    101 102 103 104 105
hexadecimal_fractional_constant (60)
    on left: 97 98 99, on right: 84
binary_exponent_part (61)
    on left: 100 101 102 103 104 105, on right: 84 85
hexadecimal_digit_sequence (62)
    on left: 106 107, on right: 85 97 98 99 107
floating_suffix_opt (63)
    on left: 108 109 110 111 112, on right: 81 82 83 84 85


state 0

    0 $accept: . start $end

    '0'  shift, and go to state 1
    '1'  shift, and go to state 2
    '2'  shift, and go to state 3
    '3'  shift, and go to state 4
    '4'  shift, and go to state 5
    '5'  shift, and go to state 6
    '6'  shift, and go to state 7
    '7'  shift, and go to state 8
    '8'  shift, and go to state 9
    '9'  shift, and go to state 10
    '.'  shift, and go to state 11

    start                          go to state 12
    digit                          go to state 13
    constant                       go to state 14
    integer_constant               go to state 15
    decimal_constant               go to state 16
    octal_constant                 go to state 17
    hexadecimal_constant           go to state 18
    hexadecimal_prefix             go to state 19
    nonzero_digit                  go to state 20
    floating_constant              go to state 21
    decimal_floating_constant      go to state 22
    hexadecimal_floating_constant  go to state 23
    fractional_constant            go to state 24
    digit_sequence                 go to state 25


state 1

    2 digit: '0' .
   19 octal_constant: '0' .
   23 hexadecimal_prefix: '0' . 'x'
   24                   | '0' . 'X'

    'x'  shift, and go to state 26
    'X'  shift, and go to state 27

    $end      reduce using rule 19 (octal_constant)
    '0'       reduce using rule 2 (digit)
    '0'       [reduce using rule 19 (octal_constant)]
    '1'       reduce using rule 2 (digit)
    '1'       [reduce using rule 19 (octal_constant)]
    '2'       reduce using rule 2 (digit)
    '2'       [reduce using rule 19 (octal_constant)]
    '3'       reduce using rule 2 (digit)
    '3'       [reduce using rule 19 (octal_constant)]
    '4'       reduce using rule 2 (digit)
    '4'       [reduce using rule 19 (octal_constant)]
    '5'       reduce using rule 2 (digit)
    '5'       [reduce using rule 19 (octal_constant)]
    '6'       reduce using rule 2 (digit)
    '6'       [reduce using rule 19 (octal_constant)]
    '7'       reduce using rule 2 (digit)
    '7'       [reduce using rule 19 (octal_constant)]
    'u'       reduce using rule 19 (octal_constant)
    'U'       reduce using rule 19 (octal_constant)
    'l'       reduce using rule 19 (octal_constant)
    'L'       reduce using rule 19 (octal_constant)
    $default  reduce using rule 2 (digit)


state 2

    3 digit: '1' .
   25 nonzero_digit: '1' .

    $end      reduce using rule 25 (nonzero_digit)
    '0'       reduce using rule 3 (digit)
    '0'       [reduce using rule 25 (nonzero_digit)]
    '1'       reduce using rule 3 (digit)
    '1'       [reduce using rule 25 (nonzero_digit)]
    '2'       reduce using rule 3 (digit)
    '2'       [reduce using rule 25 (nonzero_digit)]
    '3'       reduce using rule 3 (digit)
    '3'       [reduce using rule 25 (nonzero_digit)]
    '4'       reduce using rule 3 (digit)
    '4'       [reduce using rule 25 (nonzero_digit)]
    '5'       reduce using rule 3 (digit)
    '5'       [reduce using rule 25 (nonzero_digit)]
    '6'       reduce using rule 3 (digit)
    '6'       [reduce using rule 25 (nonzero_digit)]
    '7'       reduce using rule 3 (digit)
    '7'       [reduce using rule 25 (nonzero_digit)]
    '8'       reduce using rule 3 (digit)
    '8'       [reduce using rule 25 (nonzero_digit)]
    '9'       reduce using rule 3 (digit)
    '9'       [reduce using rule 25 (nonzero_digit)]
    'u'       reduce using rule 25 (nonzero_digit)
    'U'       reduce using rule 25 (nonzero_digit)
    'l'       reduce using rule 25 (nonzero_digit)
    'L'       reduce using rule 25 (nonzero_digit)
    $default  reduce using rule 3 (digit)


state 3

    4 digit: '2' .
   26 nonzero_digit: '2' .

    $end      reduce using rule 26 (nonzero_digit)
    '0'       reduce using rule 4 (digit)
    '0'       [reduce using rule 26 (nonzero_digit)]
    '1'       reduce using rule 4 (digit)
    '1'       [reduce using rule 26 (nonzero_digit)]
    '2'       reduce using rule 4 (digit)
    '2'       [reduce using rule 26 (nonzero_digit)]
    '3'       reduce using rule 4 (digit)
    '3'       [reduce using rule 26 (nonzero_digit)]
    '4'       reduce using rule 4 (digit)
    '4'       [reduce using rule 26 (nonzero_digit)]
    '5'       reduce using rule 4 (digit)
    '5'       [reduce using rule 26 (nonzero_digit)]
    '6'       reduce using rule 4 (digit)
    '6'       [reduce using rule 26 (nonzero_digit)]
    '7'       reduce using rule 4 (digit)
    '7'       [reduce using rule 26 (nonzero_digit)]
    '8'       reduce using rule 4 (digit)
    '8'       [reduce using rule 26 (nonzero_digit)]
    '9'       reduce using rule 4 (digit)
    '9'       [reduce using rule 26 (nonzero_digit)]
    'u'       reduce using rule 26 (nonzero_digit)
    'U'       reduce using rule 26 (nonzero_digit)
    'l'       reduce using rule 26 (nonzero_digit)
    'L'       reduce using rule 26 (nonzero_digit)
    $default  reduce using rule 4 (digit)


state 4

    5 digit: '3' .
   27 nonzero_digit: '3' .

    $end      reduce using rule 27 (nonzero_digit)
    '0'       reduce using rule 5 (digit)
    '0'       [reduce using rule 27 (nonzero_digit)]
    '1'       reduce using rule 5 (digit)
    '1'       [reduce using rule 27 (nonzero_digit)]
    '2'       reduce using rule 5 (digit)
    '2'       [reduce using rule 27 (nonzero_digit)]
    '3'       reduce using rule 5 (digit)
    '3'       [reduce using rule 27 (nonzero_digit)]
    '4'       reduce using rule 5 (digit)
    '4'       [reduce using rule 27 (nonzero_digit)]
    '5'       reduce using rule 5 (digit)
    '5'       [reduce using rule 27 (nonzero_digit)]
    '6'       reduce using rule 5 (digit)
    '6'       [reduce using rule 27 (nonzero_digit)]
    '7'       reduce using rule 5 (digit)
    '7'       [reduce using rule 27 (nonzero_digit)]
    '8'       reduce using rule 5 (digit)
    '8'       [reduce using rule 27 (nonzero_digit)]
    '9'       reduce using rule 5 (digit)
    '9'       [reduce using rule 27 (nonzero_digit)]
    'u'       reduce using rule 27 (nonzero_digit)
    'U'       reduce using rule 27 (nonzero_digit)
    'l'       reduce using rule 27 (nonzero_digit)
    'L'       reduce using rule 27 (nonzero_digit)
    $default  reduce using rule 5 (digit)


state 5

    6 digit: '4' .
   28 nonzero_digit: '4' .

    $end      reduce using rule 28 (nonzero_digit)
    '0'       reduce using rule 6 (digit)
    '0'       [reduce using rule 28 (nonzero_digit)]
    '1'       reduce using rule 6 (digit)
    '1'       [reduce using rule 28 (nonzero_digit)]
    '2'       reduce using rule 6 (digit)
    '2'       [reduce using rule 28 (nonzero_digit)]
    '3'       reduce using rule 6 (digit)
    '3'       [reduce using rule 28 (nonzero_digit)]
    '4'       reduce using rule 6 (digit)
    '4'       [reduce using rule 28 (nonzero_digit)]
    '5'       reduce using rule 6 (digit)
    '5'       [reduce using rule 28 (nonzero_digit)]
    '6'       reduce using rule 6 (digit)
    '6'       [reduce using rule 28 (nonzero_digit)]
    '7'       reduce using rule 6 (digit)
    '7'       [reduce using rule 28 (nonzero_digit)]
    '8'       reduce using rule 6 (digit)
    '8'       [reduce using rule 28 (nonzero_digit)]
    '9'       reduce using rule 6 (digit)
    '9'       [reduce using rule 28 (nonzero_digit)]
    'u'       reduce using rule 28 (nonzero_digit)
    'U'       reduce using rule 28 (nonzero_digit)
    'l'       reduce using rule 28 (nonzero_digit)
    'L'       reduce using rule 28 (nonzero_digit)
    $default  reduce using rule 6 (digit)


state 6

    7 digit: '5' .
   29 nonzero_digit: '5' .

    $end      reduce using rule 29 (nonzero_digit)
    '0'       reduce using rule 7 (digit)
    '0'       [reduce using rule 29 (nonzero_digit)]
    '1'       reduce using rule 7 (digit)
    '1'       [reduce using rule 29 (nonzero_digit)]
    '2'       reduce using rule 7 (digit)
    '2'       [reduce using rule 29 (nonzero_digit)]
    '3'       reduce using rule 7 (digit)
    '3'       [reduce using rule 29 (nonzero_digit)]
    '4'       reduce using rule 7 (digit)
    '4'       [reduce using rule 29 (nonzero_digit)]
    '5'       reduce using rule 7 (digit)
    '5'       [reduce using rule 29 (nonzero_digit)]
    '6'       reduce using rule 7 (digit)
    '6'       [reduce using rule 29 (nonzero_digit)]
    '7'       reduce using rule 7 (digit)
    '7'       [reduce using rule 29 (nonzero_digit)]
    '8'       reduce using rule 7 (digit)
    '8'       [reduce using rule 29 (nonzero_digit)]
    '9'       reduce using rule 7 (digit)
    '9'       [reduce using rule 29 (nonzero_digit)]
    'u'       reduce using rule 29 (nonzero_digit)
    'U'       reduce using rule 29 (nonzero_digit)
    'l'       reduce using rule 29 (nonzero_digit)
    'L'       reduce using rule 29 (nonzero_digit)
    $default  reduce using rule 7 (digit)


state 7

    8 digit: '6' .
   30 nonzero_digit: '6' .

    $end      reduce using rule 30 (nonzero_digit)
    '0'       reduce using rule 8 (digit)
    '0'       [reduce using rule 30 (nonzero_digit)]
    '1'       reduce using rule 8 (digit)
    '1'       [reduce using rule 30 (nonzero_digit)]
    '2'       reduce using rule 8 (digit)
    '2'       [reduce using rule 30 (nonzero_digit)]
    '3'       reduce using rule 8 (digit)
    '3'       [reduce using rule 30 (nonzero_digit)]
    '4'       reduce using rule 8 (digit)
    '4'       [reduce using rule 30 (nonzero_digit)]
    '5'       reduce using rule 8 (digit)
    '5'       [reduce using rule 30 (nonzero_digit)]
    '6'       reduce using rule 8 (digit)
    '6'       [reduce using rule 30 (nonzero_digit)]
    '7'       reduce using rule 8 (digit)
    '7'       [reduce using rule 30 (nonzero_digit)]
    '8'       reduce using rule 8 (digit)
    '8'       [reduce using rule 30 (nonzero_digit)]
    '9'       reduce using rule 8 (digit)
    '9'       [reduce using rule 30 (nonzero_digit)]
    'u'       reduce using rule 30 (nonzero_digit)
    'U'       reduce using rule 30 (nonzero_digit)
    'l'       reduce using rule 30 (nonzero_digit)
    'L'       reduce using rule 30 (nonzero_digit)
    $default  reduce using rule 8 (digit)


state 8

    9 digit: '7' .
   31 nonzero_digit: '7' .

    $end      reduce using rule 31 (nonzero_digit)
    '0'       reduce using rule 9 (digit)
    '0'       [reduce using rule 31 (nonzero_digit)]
    '1'       reduce using rule 9 (digit)
    '1'       [reduce using rule 31 (nonzero_digit)]
    '2'       reduce using rule 9 (digit)
    '2'       [reduce using rule 31 (nonzero_digit)]
    '3'       reduce using rule 9 (digit)
    '3'       [reduce using rule 31 (nonzero_digit)]
    '4'       reduce using rule 9 (digit)
    '4'       [reduce using rule 31 (nonzero_digit)]
    '5'       reduce using rule 9 (digit)
    '5'       [reduce using rule 31 (nonzero_digit)]
    '6'       reduce using rule 9 (digit)
    '6'       [reduce using rule 31 (nonzero_digit)]
    '7'       reduce using rule 9 (digit)
    '7'       [reduce using rule 31 (nonzero_digit)]
    '8'       reduce using rule 9 (digit)
    '8'       [reduce using rule 31 (nonzero_digit)]
    '9'       reduce using rule 9 (digit)
    '9'       [reduce using rule 31 (nonzero_digit)]
    'u'       reduce using rule 31 (nonzero_digit)
    'U'       reduce using rule 31 (nonzero_digit)
    'l'       reduce using rule 31 (nonzero_digit)
    'L'       reduce using rule 31 (nonzero_digit)
    $default  reduce using rule 9 (digit)


state 9

   10 digit: '8' .
   32 nonzero_digit: '8' .

    $end      reduce using rule 32 (nonzero_digit)
    '0'       reduce using rule 10 (digit)
    '0'       [reduce using rule 32 (nonzero_digit)]
    '1'       reduce using rule 10 (digit)
    '1'       [reduce using rule 32 (nonzero_digit)]
    '2'       reduce using rule 10 (digit)
    '2'       [reduce using rule 32 (nonzero_digit)]
    '3'       reduce using rule 10 (digit)
    '3'       [reduce using rule 32 (nonzero_digit)]
    '4'       reduce using rule 10 (digit)
    '4'       [reduce using rule 32 (nonzero_digit)]
    '5'       reduce using rule 10 (digit)
    '5'       [reduce using rule 32 (nonzero_digit)]
    '6'       reduce using rule 10 (digit)
    '6'       [reduce using rule 32 (nonzero_digit)]
    '7'       reduce using rule 10 (digit)
    '7'       [reduce using rule 32 (nonzero_digit)]
    '8'       reduce using rule 10 (digit)
    '8'       [reduce using rule 32 (nonzero_digit)]
    '9'       reduce using rule 10 (digit)
    '9'       [reduce using rule 32 (nonzero_digit)]
    'u'       reduce using rule 32 (nonzero_digit)
    'U'       reduce using rule 32 (nonzero_digit)
    'l'       reduce using rule 32 (nonzero_digit)
    'L'       reduce using rule 32 (nonzero_digit)
    $default  reduce using rule 10 (digit)


state 10

   11 digit: '9' .
   33 nonzero_digit: '9' .

    $end      reduce using rule 33 (nonzero_digit)
    '0'       reduce using rule 11 (digit)
    '0'       [reduce using rule 33 (nonzero_digit)]
    '1'       reduce using rule 11 (digit)
    '1'       [reduce using rule 33 (nonzero_digit)]
    '2'       reduce using rule 11 (digit)
    '2'       [reduce using rule 33 (nonzero_digit)]
    '3'       reduce using rule 11 (digit)
    '3'       [reduce using rule 33 (nonzero_digit)]
    '4'       reduce using rule 11 (digit)
    '4'       [reduce using rule 33 (nonzero_digit)]
    '5'       reduce using rule 11 (digit)
    '5'       [reduce using rule 33 (nonzero_digit)]
    '6'       reduce using rule 11 (digit)
    '6'       [reduce using rule 33 (nonzero_digit)]
    '7'       reduce using rule 11 (digit)
    '7'       [reduce using rule 33 (nonzero_digit)]
    '8'       reduce using rule 11 (digit)
    '8'       [reduce using rule 33 (nonzero_digit)]
    '9'       reduce using rule 11 (digit)
    '9'       [reduce using rule 33 (nonzero_digit)]
    'u'       reduce using rule 33 (nonzero_digit)
    'U'       reduce using rule 33 (nonzero_digit)
    'l'       reduce using rule 33 (nonzero_digit)
    'L'       reduce using rule 33 (nonzero_digit)
    $default  reduce using rule 11 (digit)


state 11

   86 fractional_constant: '.' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 38


state 12

    0 $accept: start . $end

    $end  shift, and go to state 39


state 13

   95 digit_sequence: digit .

    $default  reduce using rule 95 (digit_sequence)


state 14

    1 start: constant .

    $default  reduce using rule 1 (start)


state 15

   12 constant: integer_constant .

    $default  reduce using rule 12 (constant)


state 16

   14 integer_constant: decimal_constant . integer_suffix_opt
   18 decimal_constant: decimal_constant . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37
    'u'  shift, and go to state 40
    'U'  shift, and go to state 41
    'l'  shift, and go to state 42
    'L'  shift, and go to state 43

    $default  reduce using rule 64 (integer_suffix_opt)

    digit               go to state 44
    integer_suffix_opt  go to state 45
    unsigned_suffix     go to state 46
    long_suffix         go to state 47
    long_long_suffix    go to state 48


state 17

   15 integer_constant: octal_constant . integer_suffix_opt
   20 octal_constant: octal_constant . octal_digit

    '0'  shift, and go to state 49
    '1'  shift, and go to state 50
    '2'  shift, and go to state 51
    '3'  shift, and go to state 52
    '4'  shift, and go to state 53
    '5'  shift, and go to state 54
    '6'  shift, and go to state 55
    '7'  shift, and go to state 56
    'u'  shift, and go to state 40
    'U'  shift, and go to state 41
    'l'  shift, and go to state 42
    'L'  shift, and go to state 43

    $default  reduce using rule 64 (integer_suffix_opt)

    octal_digit         go to state 57
    integer_suffix_opt  go to state 58
    unsigned_suffix     go to state 46
    long_suffix         go to state 47
    long_long_suffix    go to state 48


state 18

   16 integer_constant: hexadecimal_constant . integer_suffix_opt
   22 hexadecimal_constant: hexadecimal_constant . hexadecimal_digit

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80
    'u'  shift, and go to state 40
    'U'  shift, and go to state 41
    'l'  shift, and go to state 42
    'L'  shift, and go to state 43

    $default  reduce using rule 64 (integer_suffix_opt)

    hexadecimal_digit   go to state 81
    integer_suffix_opt  go to state 82
    unsigned_suffix     go to state 46
    long_suffix         go to state 47
    long_long_suffix    go to state 48


state 19

   21 hexadecimal_constant: hexadecimal_prefix . hexadecimal_digit
   84 hexadecimal_floating_constant: hexadecimal_prefix . hexadecimal_fractional_constant binary_exponent_part floating_suffix_opt
   85                              | hexadecimal_prefix . hexadecimal_digit_sequence binary_exponent_part floating_suffix_opt

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80
    '.'  shift, and go to state 83

    hexadecimal_digit                go to state 84
    hexadecimal_fractional_constant  go to state 85
    hexadecimal_digit_sequence       go to state 86


state 20

   17 decimal_constant: nonzero_digit .

    $default  reduce using rule 17 (decimal_constant)


state 21

   13 constant: floating_constant .

    $default  reduce using rule 13 (constant)


state 22

   79 floating_constant: decimal_floating_constant .

    $default  reduce using rule 79 (floating_constant)


state 23

   80 floating_constant: hexadecimal_floating_constant .

    $default  reduce using rule 80 (floating_constant)


state 24

   81 decimal_floating_constant: fractional_constant . floating_suffix_opt
   82                          | fractional_constant . exponent_part floating_suffix_opt

    'e'  shift, and go to state 87
    'f'  shift, and go to state 88
    'E'  shift, and go to state 89
    'F'  shift, and go to state 90
    'l'  shift, and go to state 91
    'L'  shift, and go to state 92

    $default  reduce using rule 108 (floating_suffix_opt)

    exponent_part        go to state 93
    floating_suffix_opt  go to state 94


state 25

   83 decimal_floating_constant: digit_sequence . exponent_part floating_suffix_opt
   87 fractional_constant: digit_sequence . '.' digit_sequence
   88                    | digit_sequence . '.'
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37
    'e'  shift, and go to state 87
    'E'  shift, and go to state 89
    '.'  shift, and go to state 95

    digit          go to state 96
    exponent_part  go to state 97


state 26

   23 hexadecimal_prefix: '0' 'x' .

    $default  reduce using rule 23 (hexadecimal_prefix)


state 27

   24 hexadecimal_prefix: '0' 'X' .

    $default  reduce using rule 24 (hexadecimal_prefix)


state 28

    2 digit: '0' .

    $default  reduce using rule 2 (digit)


state 29

    3 digit: '1' .

    $default  reduce using rule 3 (digit)


state 30

    4 digit: '2' .

    $default  reduce using rule 4 (digit)


state 31

    5 digit: '3' .

    $default  reduce using rule 5 (digit)


state 32

    6 digit: '4' .

    $default  reduce using rule 6 (digit)


state 33

    7 digit: '5' .

    $default  reduce using rule 7 (digit)


state 34

    8 digit: '6' .

    $default  reduce using rule 8 (digit)


state 35

    9 digit: '7' .

    $default  reduce using rule 9 (digit)


state 36

   10 digit: '8' .

    $default  reduce using rule 10 (digit)


state 37

   11 digit: '9' .

    $default  reduce using rule 11 (digit)


state 38

   86 fractional_constant: '.' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 86 (fractional_constant)

    digit  go to state 96


state 39

    0 $accept: start $end .

    $default  accept


state 40

   69 unsigned_suffix: 'u' .

    $default  reduce using rule 69 (unsigned_suffix)


state 41

   70 unsigned_suffix: 'U' .

    $default  reduce using rule 70 (unsigned_suffix)


state 42

   73 long_suffix: 'l' .
   77 long_long_suffix: 'l' . 'l'

    'l'  shift, and go to state 98

    $default  reduce using rule 73 (long_suffix)


state 43

   74 long_suffix: 'L' .
   78 long_long_suffix: 'L' . 'L'

    'L'  shift, and go to state 99

    $default  reduce using rule 74 (long_suffix)


state 44

   18 decimal_constant: decimal_constant digit .

    $default  reduce using rule 18 (decimal_constant)


state 45

   14 integer_constant: decimal_constant integer_suffix_opt .

    $default  reduce using rule 14 (integer_constant)


state 46

   65 integer_suffix_opt: unsigned_suffix . long_suffix_opt
   66                   | unsigned_suffix . long_long_suffix

    'l'  shift, and go to state 42
    'L'  shift, and go to state 43

    $default  reduce using rule 75 (long_suffix_opt)

    long_suffix       go to state 100
    long_suffix_opt   go to state 101
    long_long_suffix  go to state 102


state 47

   67 integer_suffix_opt: long_suffix . unsigned_suffix_opt

    'u'  shift, and go to state 40
    'U'  shift, and go to state 41

    $default  reduce using rule 71 (unsigned_suffix_opt)

    unsigned_suffix      go to state 103
    unsigned_suffix_opt  go to state 104


state 48

   68 integer_suffix_opt: long_long_suffix . unsigned_suffix_opt

    'u'  shift, and go to state 40
    'U'  shift, and go to state 41

    $default  reduce using rule 71 (unsigned_suffix_opt)

    unsigned_suffix      go to state 103
    unsigned_suffix_opt  go to state 105


state 49

   34 octal_digit: '0' .

    $default  reduce using rule 34 (octal_digit)


state 50

   35 octal_digit: '1' .

    $default  reduce using rule 35 (octal_digit)


state 51

   36 octal_digit: '2' .

    $default  reduce using rule 36 (octal_digit)


state 52

   37 octal_digit: '3' .

    $default  reduce using rule 37 (octal_digit)


state 53

   38 octal_digit: '4' .

    $default  reduce using rule 38 (octal_digit)


state 54

   39 octal_digit: '5' .

    $default  reduce using rule 39 (octal_digit)


state 55

   40 octal_digit: '6' .

    $default  reduce using rule 40 (octal_digit)


state 56

   41 octal_digit: '7' .

    $default  reduce using rule 41 (octal_digit)


state 57

   20 octal_constant: octal_constant octal_digit .

    $default  reduce using rule 20 (octal_constant)


state 58

   15 integer_constant: octal_constant integer_suffix_opt .

    $default  reduce using rule 15 (integer_constant)


state 59

   42 hexadecimal_digit: '0' .

    $default  reduce using rule 42 (hexadecimal_digit)


state 60

   43 hexadecimal_digit: '1' .

    $default  reduce using rule 43 (hexadecimal_digit)


state 61

   44 hexadecimal_digit: '2' .

    $default  reduce using rule 44 (hexadecimal_digit)


state 62

   45 hexadecimal_digit: '3' .

    $default  reduce using rule 45 (hexadecimal_digit)


state 63

   46 hexadecimal_digit: '4' .

    $default  reduce using rule 46 (hexadecimal_digit)


state 64

   47 hexadecimal_digit: '5' .

    $default  reduce using rule 47 (hexadecimal_digit)


state 65

   48 hexadecimal_digit: '6' .

    $default  reduce using rule 48 (hexadecimal_digit)


state 66

   49 hexadecimal_digit: '7' .

    $default  reduce using rule 49 (hexadecimal_digit)


state 67

   50 hexadecimal_digit: '8' .

    $default  reduce using rule 50 (hexadecimal_digit)


state 68

   51 hexadecimal_digit: '9' .

    $default  reduce using rule 51 (hexadecimal_digit)


state 69

   52 hexadecimal_digit: 'a' .

    $default  reduce using rule 52 (hexadecimal_digit)


state 70

   53 hexadecimal_digit: 'b' .

    $default  reduce using rule 53 (hexadecimal_digit)


state 71

   54 hexadecimal_digit: 'c' .

    $default  reduce using rule 54 (hexadecimal_digit)


state 72

   55 hexadecimal_digit: 'd' .

    $default  reduce using rule 55 (hexadecimal_digit)


state 73

   56 hexadecimal_digit: 'e' .

    $default  reduce using rule 56 (hexadecimal_digit)


state 74

   57 hexadecimal_digit: 'f' .

    $default  reduce using rule 57 (hexadecimal_digit)


state 75

   58 hexadecimal_digit: 'A' .

    $default  reduce using rule 58 (hexadecimal_digit)


state 76

   59 hexadecimal_digit: 'B' .

    $default  reduce using rule 59 (hexadecimal_digit)


state 77

   60 hexadecimal_digit: 'C' .

    $default  reduce using rule 60 (hexadecimal_digit)


state 78

   61 hexadecimal_digit: 'D' .

    $default  reduce using rule 61 (hexadecimal_digit)


state 79

   62 hexadecimal_digit: 'E' .

    $default  reduce using rule 62 (hexadecimal_digit)


state 80

   63 hexadecimal_digit: 'F' .

    $default  reduce using rule 63 (hexadecimal_digit)


state 81

   22 hexadecimal_constant: hexadecimal_constant hexadecimal_digit .

    $default  reduce using rule 22 (hexadecimal_constant)


state 82

   16 integer_constant: hexadecimal_constant integer_suffix_opt .

    $default  reduce using rule 16 (integer_constant)


state 83

   97 hexadecimal_fractional_constant: '.' . hexadecimal_digit_sequence

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80

    hexadecimal_digit           go to state 106
    hexadecimal_digit_sequence  go to state 107


state 84

   21 hexadecimal_constant: hexadecimal_prefix hexadecimal_digit .
  106 hexadecimal_digit_sequence: hexadecimal_digit .

    '0'       reduce using rule 21 (hexadecimal_constant)
    '0'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '1'       reduce using rule 21 (hexadecimal_constant)
    '1'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '2'       reduce using rule 21 (hexadecimal_constant)
    '2'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '3'       reduce using rule 21 (hexadecimal_constant)
    '3'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '4'       reduce using rule 21 (hexadecimal_constant)
    '4'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '5'       reduce using rule 21 (hexadecimal_constant)
    '5'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '6'       reduce using rule 21 (hexadecimal_constant)
    '6'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '7'       reduce using rule 21 (hexadecimal_constant)
    '7'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '8'       reduce using rule 21 (hexadecimal_constant)
    '8'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '9'       reduce using rule 21 (hexadecimal_constant)
    '9'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'a'       reduce using rule 21 (hexadecimal_constant)
    'a'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'b'       reduce using rule 21 (hexadecimal_constant)
    'b'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'c'       reduce using rule 21 (hexadecimal_constant)
    'c'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'd'       reduce using rule 21 (hexadecimal_constant)
    'd'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'e'       reduce using rule 21 (hexadecimal_constant)
    'e'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'f'       reduce using rule 21 (hexadecimal_constant)
    'f'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'A'       reduce using rule 21 (hexadecimal_constant)
    'A'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'B'       reduce using rule 21 (hexadecimal_constant)
    'B'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'C'       reduce using rule 21 (hexadecimal_constant)
    'C'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'D'       reduce using rule 21 (hexadecimal_constant)
    'D'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'E'       reduce using rule 21 (hexadecimal_constant)
    'E'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    'F'       reduce using rule 21 (hexadecimal_constant)
    'F'       [reduce using rule 106 (hexadecimal_digit_sequence)]
    '.'       reduce using rule 106 (hexadecimal_digit_sequence)
    'p'       reduce using rule 106 (hexadecimal_digit_sequence)
    'P'       reduce using rule 106 (hexadecimal_digit_sequence)
    $default  reduce using rule 21 (hexadecimal_constant)


state 85

   84 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_fractional_constant . binary_exponent_part floating_suffix_opt

    'p'  shift, and go to state 108
    'P'  shift, and go to state 109

    binary_exponent_part  go to state 110


state 86

   85 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_digit_sequence . binary_exponent_part floating_suffix_opt
   98 hexadecimal_fractional_constant: hexadecimal_digit_sequence . '.' hexadecimal_digit_sequence
   99                                | hexadecimal_digit_sequence . '.'
  107 hexadecimal_digit_sequence: hexadecimal_digit_sequence . hexadecimal_digit

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80
    '.'  shift, and go to state 111
    'p'  shift, and go to state 108
    'P'  shift, and go to state 109

    hexadecimal_digit     go to state 112
    binary_exponent_part  go to state 113


state 87

   89 exponent_part: 'e' . digit_sequence
   90              | 'e' . '+' digit_sequence
   91              | 'e' . '-' digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115

    digit           go to state 13
    digit_sequence  go to state 116


state 88

  109 floating_suffix_opt: 'f' .

    $default  reduce using rule 109 (floating_suffix_opt)


state 89

   92 exponent_part: 'E' . digit_sequence
   93              | 'E' . '+' digit_sequence
   94              | 'E' . '-' digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37
    '+'  shift, and go to state 117
    '-'  shift, and go to state 118

    digit           go to state 13
    digit_sequence  go to state 119


state 90

  110 floating_suffix_opt: 'F' .

    $default  reduce using rule 110 (floating_suffix_opt)


state 91

  111 floating_suffix_opt: 'l' .

    $default  reduce using rule 111 (floating_suffix_opt)


state 92

  112 floating_suffix_opt: 'L' .

    $default  reduce using rule 112 (floating_suffix_opt)


state 93

   82 decimal_floating_constant: fractional_constant exponent_part . floating_suffix_opt

    'f'  shift, and go to state 88
    'F'  shift, and go to state 90
    'l'  shift, and go to state 91
    'L'  shift, and go to state 92

    $default  reduce using rule 108 (floating_suffix_opt)

    floating_suffix_opt  go to state 120


state 94

   81 decimal_floating_constant: fractional_constant floating_suffix_opt .

    $default  reduce using rule 81 (decimal_floating_constant)


state 95

   87 fractional_constant: digit_sequence '.' . digit_sequence
   88                    | digit_sequence '.' .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 88 (fractional_constant)

    digit           go to state 13
    digit_sequence  go to state 121


state 96

   96 digit_sequence: digit_sequence digit .

    $default  reduce using rule 96 (digit_sequence)


state 97

   83 decimal_floating_constant: digit_sequence exponent_part . floating_suffix_opt

    'f'  shift, and go to state 88
    'F'  shift, and go to state 90
    'l'  shift, and go to state 91
    'L'  shift, and go to state 92

    $default  reduce using rule 108 (floating_suffix_opt)

    floating_suffix_opt  go to state 122


state 98

   77 long_long_suffix: 'l' 'l' .

    $default  reduce using rule 77 (long_long_suffix)


state 99

   78 long_long_suffix: 'L' 'L' .

    $default  reduce using rule 78 (long_long_suffix)


state 100

   76 long_suffix_opt: long_suffix .

    $default  reduce using rule 76 (long_suffix_opt)


state 101

   65 integer_suffix_opt: unsigned_suffix long_suffix_opt .

    $default  reduce using rule 65 (integer_suffix_opt)


state 102

   66 integer_suffix_opt: unsigned_suffix long_long_suffix .

    $default  reduce using rule 66 (integer_suffix_opt)


state 103

   72 unsigned_suffix_opt: unsigned_suffix .

    $default  reduce using rule 72 (unsigned_suffix_opt)


state 104

   67 integer_suffix_opt: long_suffix unsigned_suffix_opt .

    $default  reduce using rule 67 (integer_suffix_opt)


state 105

   68 integer_suffix_opt: long_long_suffix unsigned_suffix_opt .

    $default  reduce using rule 68 (integer_suffix_opt)


state 106

  106 hexadecimal_digit_sequence: hexadecimal_digit .

    $default  reduce using rule 106 (hexadecimal_digit_sequence)


state 107

   97 hexadecimal_fractional_constant: '.' hexadecimal_digit_sequence .
  107 hexadecimal_digit_sequence: hexadecimal_digit_sequence . hexadecimal_digit

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80

    $default  reduce using rule 97 (hexadecimal_fractional_constant)

    hexadecimal_digit  go to state 112


state 108

  100 binary_exponent_part: 'p' . digit_sequence
  101                     | 'p' . '+' digit_sequence
  102                     | 'p' . '-' digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37
    '+'  shift, and go to state 123
    '-'  shift, and go to state 124

    digit           go to state 13
    digit_sequence  go to state 125


state 109

  103 binary_exponent_part: 'P' . digit_sequence
  104                     | 'P' . '+' digit_sequence
  105                     | 'P' . '-' digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37
    '+'  shift, and go to state 126
    '-'  shift, and go to state 127

    digit           go to state 13
    digit_sequence  go to state 128


state 110

   84 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part . floating_suffix_opt

    'f'  shift, and go to state 88
    'F'  shift, and go to state 90
    'l'  shift, and go to state 91
    'L'  shift, and go to state 92

    $default  reduce using rule 108 (floating_suffix_opt)

    floating_suffix_opt  go to state 129


state 111

   98 hexadecimal_fractional_constant: hexadecimal_digit_sequence '.' . hexadecimal_digit_sequence
   99                                | hexadecimal_digit_sequence '.' .

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80

    $default  reduce using rule 99 (hexadecimal_fractional_constant)

    hexadecimal_digit           go to state 106
    hexadecimal_digit_sequence  go to state 130


state 112

  107 hexadecimal_digit_sequence: hexadecimal_digit_sequence hexadecimal_digit .

    $default  reduce using rule 107 (hexadecimal_digit_sequence)


state 113

   85 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part . floating_suffix_opt

    'f'  shift, and go to state 88
    'F'  shift, and go to state 90
    'l'  shift, and go to state 91
    'L'  shift, and go to state 92

    $default  reduce using rule 108 (floating_suffix_opt)

    floating_suffix_opt  go to state 131


state 114

   90 exponent_part: 'e' '+' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 132


state 115

   91 exponent_part: 'e' '-' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 133


state 116

   89 exponent_part: 'e' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 89 (exponent_part)

    digit  go to state 96


state 117

   93 exponent_part: 'E' '+' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 134


state 118

   94 exponent_part: 'E' '-' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 135


state 119

   92 exponent_part: 'E' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 92 (exponent_part)

    digit  go to state 96


state 120

   82 decimal_floating_constant: fractional_constant exponent_part floating_suffix_opt .

    $default  reduce using rule 82 (decimal_floating_constant)


state 121

   87 fractional_constant: digit_sequence '.' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 87 (fractional_constant)

    digit  go to state 96


state 122

   83 decimal_floating_constant: digit_sequence exponent_part floating_suffix_opt .

    $default  reduce using rule 83 (decimal_floating_constant)


state 123

  101 binary_exponent_part: 'p' '+' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 136


state 124

  102 binary_exponent_part: 'p' '-' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 137


state 125

   96 digit_sequence: digit_sequence . digit
  100 binary_exponent_part: 'p' digit_sequence .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 100 (binary_exponent_part)

    digit  go to state 96


state 126

  104 binary_exponent_part: 'P' '+' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 138


state 127

  105 binary_exponent_part: 'P' '-' . digit_sequence

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    digit           go to state 13
    digit_sequence  go to state 139


state 128

   96 digit_sequence: digit_sequence . digit
  103 binary_exponent_part: 'P' digit_sequence .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 103 (binary_exponent_part)

    digit  go to state 96


state 129

   84 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part floating_suffix_opt .

    $default  reduce using rule 84 (hexadecimal_floating_constant)


state 130

   98 hexadecimal_fractional_constant: hexadecimal_digit_sequence '.' hexadecimal_digit_sequence .
  107 hexadecimal_digit_sequence: hexadecimal_digit_sequence . hexadecimal_digit

    '0'  shift, and go to state 59
    '1'  shift, and go to state 60
    '2'  shift, and go to state 61
    '3'  shift, and go to state 62
    '4'  shift, and go to state 63
    '5'  shift, and go to state 64
    '6'  shift, and go to state 65
    '7'  shift, and go to state 66
    '8'  shift, and go to state 67
    '9'  shift, and go to state 68
    'a'  shift, and go to state 69
    'b'  shift, and go to state 70
    'c'  shift, and go to state 71
    'd'  shift, and go to state 72
    'e'  shift, and go to state 73
    'f'  shift, and go to state 74
    'A'  shift, and go to state 75
    'B'  shift, and go to state 76
    'C'  shift, and go to state 77
    'D'  shift, and go to state 78
    'E'  shift, and go to state 79
    'F'  shift, and go to state 80

    $default  reduce using rule 98 (hexadecimal_fractional_constant)

    hexadecimal_digit  go to state 112


state 131

   85 hexadecimal_floating_constant: hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part floating_suffix_opt .

    $default  reduce using rule 85 (hexadecimal_floating_constant)


state 132

   90 exponent_part: 'e' '+' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 90 (exponent_part)

    digit  go to state 96


state 133

   91 exponent_part: 'e' '-' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 91 (exponent_part)

    digit  go to state 96


state 134

   93 exponent_part: 'E' '+' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 93 (exponent_part)

    digit  go to state 96


state 135

   94 exponent_part: 'E' '-' digit_sequence .
   96 digit_sequence: digit_sequence . digit

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 94 (exponent_part)

    digit  go to state 96


state 136

   96 digit_sequence: digit_sequence . digit
  101 binary_exponent_part: 'p' '+' digit_sequence .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 101 (binary_exponent_part)

    digit  go to state 96


state 137

   96 digit_sequence: digit_sequence . digit
  102 binary_exponent_part: 'p' '-' digit_sequence .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 102 (binary_exponent_part)

    digit  go to state 96


state 138

   96 digit_sequence: digit_sequence . digit
  104 binary_exponent_part: 'P' '+' digit_sequence .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 104 (binary_exponent_part)

    digit  go to state 96


state 139

   96 digit_sequence: digit_sequence . digit
  105 binary_exponent_part: 'P' '-' digit_sequence .

    '0'  shift, and go to state 28
    '1'  shift, and go to state 29
    '2'  shift, and go to state 30
    '3'  shift, and go to state 31
    '4'  shift, and go to state 32
    '5'  shift, and go to state 33
    '6'  shift, and go to state 34
    '7'  shift, and go to state 35
    '8'  shift, and go to state 36
    '9'  shift, and go to state 37

    $default  reduce using rule 105 (binary_exponent_part)

    digit  go to state 96

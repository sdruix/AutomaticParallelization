<?xml version="1.0" encoding="UTF-8"?>
<configurationDescriptor version="95">
  <logicalFolder name="root" displayName="root" projectFiles="true" kind="ROOT">
    <df root="." name="0">
      <df name="autom4te.cache">
      </df>
      <df name="bin">
      </df>
      <df name="config">
      </df>
      <df name="doc">
      </df>
      <df name="doc-pak">
        <df name="doc">
        </df>
      </df>
      <df name="gnulib">
        <in>dummy.c</in>
        <in>mkdtemp.c</in>
        <in>siglist.h</in>
        <in>strsignal.c</in>
        <in>tempname.c</in>
        <in>tempname.h</in>
      </df>
      <df name="lib">
        <df name="mcxx">
        </df>
        <in>char_trie.c</in>
        <in>extstruct.c</in>
        <in>extstruct.h</in>
        <in>filename.c</in>
        <in>filename.h</in>
        <in>libutils-common.h</in>
        <in>mcxx_refcount.c</in>
        <in>mcxx_refcount.h</in>
        <in>perish.c</in>
        <in>red_black_tree.c</in>
        <in>red_black_tree.h</in>
        <in>string_utils.c</in>
        <in>string_utils.h</in>
        <in>tpp.c</in>
        <in>uniquestr.h</in>
      </df>
      <df name="m4">
      </df>
      <df name="omp_to_hmpp">
        <df name="common">
          <in>FunctionCallsPred.hpp</in>
          <in>FunctionDefinitionPred.hpp</in>
        </df>
        <df name="inline">
          <in>inline.cpp</in>
          <in>inline_phase.cpp</in>
          <in>inline_phase.hpp</in>
        </df>
        <df name="outline">
          <in>outline_phase.cpp</in>
          <in>outline_phase.hpp</in>
        </df>
        <df name="s2s">
          <df name="log">
          </df>
          <in>mV.cpp</in>
        </df>
      </df>
      <df name="omp_to_mpi">
        <df name="execution">
        </df>
        <df name="trans">
          <in>test.c</in>
          <in>testR.c</in>
          <in>trans_phase.cpp</in>
          <in>trans_phase.hpp</in>
        </df>
      </df>
      <df name="scripts">
      </df>
      <df name="share">
        <df name="mcxx">
          <df name="config.d">
          </df>
        </df>
      </df>
      <df name="src">
        <df name="driver">
          <df name="fortran">
            <in>prescanner-driver.c</in>
            <in>prescanner-driver.h</in>
          </df>
          <in>cxx-configfile-lexer.c</in>
          <in>cxx-configfile-lexer.h</in>
          <in>cxx-configfile-lexer.l</in>
          <in>cxx-configfile-parser-internal.h</in>
          <in>cxx-configfile-parser.c</in>
          <in>cxx-configfile-parser.h</in>
          <in>cxx-configfile-parser.y</in>
          <in>cxx-configfile.c</in>
          <in>cxx-configfile.h</in>
          <in>cxx-configoptions.c</in>
          <in>cxx-configoptions.gperf</in>
          <in>cxx-debugflags.c</in>
          <in>cxx-debugflags.gperf</in>
          <in>cxx-driver-decls.h</in>
          <in>cxx-driver-utils.c</in>
          <in>cxx-driver-utils.h</in>
          <in>cxx-driver-vars.c</in>
          <in>cxx-driver.c</in>
          <in>cxx-driver.h</in>
          <in>cxx-embed.c</in>
          <in>cxx-embed.h</in>
          <in>cxx-embedder.c</in>
          <in>cxx-fileextensions.c</in>
          <in>cxx-fileextensions.gperf</in>
          <in>cxx-multifile.c</in>
          <in>cxx-multifile.h</in>
          <in>cxx-parameters.c</in>
          <in>cxx-parameters.h</in>
          <in>cxx-profile.c</in>
          <in>cxx-profile.h</in>
        </df>
        <df name="frontend">
          <df name="fortran">
            <in>fortran03-buildscope.c</in>
            <in>fortran03-buildscope.h</in>
            <in>fortran03-exprtype.c</in>
            <in>fortran03-exprtype.h</in>
            <in>fortran03-intrinsics.c</in>
            <in>fortran03-intrinsics.h</in>
            <in>fortran03-lexer.h</in>
            <in>fortran03-modules-bits.h</in>
            <in>fortran03-modules.c</in>
            <in>fortran03-modules.h</in>
            <in>fortran03-nodecl.c</in>
            <in>fortran03-nodecl.h</in>
            <in>fortran03-parser-internal.h</in>
            <in>fortran03-parser.c</in>
            <in>fortran03-parser.h</in>
            <in>fortran03-prettyprint.c</in>
            <in>fortran03-prettyprint.h</in>
            <in>fortran03-scanner.c</in>
            <in>fortran03-scope-decls.h</in>
            <in>fortran03-scope.c</in>
            <in>fortran03-scope.h</in>
            <in>fortran03-split.c</in>
            <in>fortran03-split.h</in>
            <in>fortran03-subparse.y</in>
            <in>fortran03-typeutils.c</in>
            <in>fortran03-typeutils.h</in>
            <in>fortran03-utils.c</in>
            <in>fortran03-utils.h</in>
            <in>fortran03.l</in>
            <in>fortran03.y</in>
            <in>libmf03-common.h</in>
            <in>libmf03-prescanner-common.h</in>
            <in>prescanner-identifier.c</in>
            <in>prescanner-identifier.h</in>
            <in>prescanner-process-decls.h</in>
            <in>prescanner-process.c</in>
            <in>prescanner-process.h</in>
            <in>prescanner.l</in>
          </df>
          <in>c99-parser-internal.h</in>
          <in>c99-parser.c</in>
          <in>c99-parser.h</in>
          <in>c99-scanner.c</in>
          <in>c99-upc.y</in>
          <in>c99.l</in>
          <in>c99.y</in>
          <in>cxx-ambig-handler.y</in>
          <in>cxx-ambiguity.c</in>
          <in>cxx-ambiguity.h</in>
          <in>cxx-ast-decls.h</in>
          <in>cxx-ast.c</in>
          <in>cxx-ast.h</in>
          <in>cxx-asttype-all.def</in>
          <in>cxx-asttype-base.def</in>
          <in>cxx-asttype-cuda.def</in>
          <in>cxx-asttype-extensions.def</in>
          <in>cxx-asttype-fortran.def</in>
          <in>cxx-asttype-gcc.def</in>
          <in>cxx-asttype-omp.def</in>
          <in>cxx-asttype-pragma.def</in>
          <in>cxx-asttype-superscalar.def</in>
          <in>cxx-asttype-upc.def</in>
          <in>cxx-asttype-xl.def</in>
          <in>cxx-asttype.c</in>
          <in>cxx-asttype.def</in>
          <in>cxx-asttype.h</in>
          <in>cxx-attrnames.c</in>
          <in>cxx-attrnames.def</in>
          <in>cxx-attrnames.h</in>
          <in>cxx-buildscope-decls.h</in>
          <in>cxx-buildscope.c</in>
          <in>cxx-buildscope.h</in>
          <in>cxx-cexpr-decls.h</in>
          <in>cxx-cexpr.c</in>
          <in>cxx-cexpr.h</in>
          <in>cxx-construct.y</in>
          <in>cxx-cuda.c</in>
          <in>cxx-cuda.h</in>
          <in>cxx-cuda.y</in>
          <in>cxx-dyninit.c</in>
          <in>cxx-dyninit.h</in>
          <in>cxx-entity-specs.def</in>
          <in>cxx-entity-specs.h</in>
          <in>cxx-entrylist-decls.h</in>
          <in>cxx-entrylist.c</in>
          <in>cxx-entrylist.h</in>
          <in>cxx-exprtype-decls.h</in>
          <in>cxx-exprtype.c</in>
          <in>cxx-exprtype.h</in>
          <in>cxx-extensions.y</in>
          <in>cxx-gccbuiltins.c</in>
          <in>cxx-gccbuiltins.h</in>
          <in>cxx-gccspubuiltins.c</in>
          <in>cxx-gccspubuiltins.def</in>
          <in>cxx-gccspubuiltins.h</in>
          <in>cxx-gccsupport-decls.h</in>
          <in>cxx-gccsupport.c</in>
          <in>cxx-gccsupport.h</in>
          <in>cxx-graphviz.c</in>
          <in>cxx-graphviz.h</in>
          <in>cxx-html.c</in>
          <in>cxx-html.h</in>
          <in>cxx-instantiation.c</in>
          <in>cxx-instantiation.h</in>
          <in>cxx-koenig.c</in>
          <in>cxx-koenig.h</in>
          <in>cxx-lexer.h</in>
          <in>cxx-lexer.l</in>
          <in>cxx-macros.h</in>
          <in>cxx-nodecl-checker.c</in>
          <in>cxx-nodecl-checker.h</in>
          <in>cxx-nodecl-output.c</in>
          <in>cxx-nodecl-output.h</in>
          <in>cxx-nodecl.c</in>
          <in>cxx-nodecl.def</in>
          <in>cxx-nodecl.h</in>
          <in>cxx-omp.y</in>
          <in>cxx-overload-decls.h</in>
          <in>cxx-overload.c</in>
          <in>cxx-overload.h</in>
          <in>cxx-parser-internal.h</in>
          <in>cxx-parser.c</in>
          <in>cxx-parser.h</in>
          <in>cxx-placeholders.y</in>
          <in>cxx-pragma.y</in>
          <in>cxx-prettyprint-internal.h</in>
          <in>cxx-prettyprint.c</in>
          <in>cxx-prettyprint.h</in>
          <in>cxx-printscope.c</in>
          <in>cxx-printscope.h</in>
          <in>cxx-process.c</in>
          <in>cxx-process.h</in>
          <in>cxx-scanner.c</in>
          <in>cxx-scope-decls.h</in>
          <in>cxx-scope.c</in>
          <in>cxx-scope.h</in>
          <in>cxx-scopelink-decls.h</in>
          <in>cxx-scopelink.c</in>
          <in>cxx-scopelink.h</in>
          <in>cxx-solvetemplate.c</in>
          <in>cxx-solvetemplate.h</in>
          <in>cxx-subparse.y</in>
          <in>cxx-superscalar.y</in>
          <in>cxx-tltype.c</in>
          <in>cxx-tltype.h</in>
          <in>cxx-type-decls.h</in>
          <in>cxx-type-trie.c</in>
          <in>cxx-type-trie.h</in>
          <in>cxx-typededuc.c</in>
          <in>cxx-typededuc.h</in>
          <in>cxx-typeenviron-decls.h</in>
          <in>cxx-typeenviron.c</in>
          <in>cxx-typeenviron.h</in>
          <in>cxx-typeorder.c</in>
          <in>cxx-typeorder.h</in>
          <in>cxx-typeunif-decls.h</in>
          <in>cxx-typeunif.c</in>
          <in>cxx-typeunif.h</in>
          <in>cxx-typeutils.c</in>
          <in>cxx-typeutils.h</in>
          <in>cxx-upc.c</in>
          <in>cxx-upc.h</in>
          <in>cxx-utils.c</in>
          <in>cxx-utils.h</in>
          <in>cxx-xl.y</in>
          <in>cxx03.l</in>
          <in>cxx03.y</in>
          <in>dll-exports.def</in>
          <in>libmcxx-common.h</in>
        </df>
        <df name="mcxx_tl">
          <in>cxx-compilerphases.cpp</in>
          <in>cxx-compilerphases.hpp</in>
        </df>
        <df name="tl">
          <df name="examples">
            <df name="basic_phase">
              <in>tl-basic_test.cpp</in>
              <in>tl-basic_test.hpp</in>
            </df>
            <df name="decl_closure">
              <in>tl-decl_closure.cpp</in>
              <in>tl-decl_closure.hpp</in>
            </df>
            <df name="multifile_test">
              <in>multifile.cpp</in>
            </df>
            <df name="mypragma">
              <in>tl-mypragma.cpp</in>
              <in>tl-mypragma.hpp</in>
            </df>
            <df name="parameters">
              <in>tl-example-parameters.cpp</in>
              <in>tl-example-parameters.hpp</in>
            </df>
          </df>
          <df name="hlt">
            <in>hlt-blocking.cpp</in>
            <in>hlt-blocking.hpp</in>
            <in>hlt-collapse.cpp</in>
            <in>hlt-collapse.hpp</in>
            <in>hlt-common.hpp</in>
            <in>hlt-composition.cpp</in>
            <in>hlt-composition.hpp</in>
            <in>hlt-distribution.cpp</in>
            <in>hlt-distribution.hpp</in>
            <in>hlt-exception.cpp</in>
            <in>hlt-exception.hpp</in>
            <in>hlt-extension.cpp</in>
            <in>hlt-extension.hpp</in>
            <in>hlt-fusion.cpp</in>
            <in>hlt-fusion.hpp</in>
            <in>hlt-inline.cpp</in>
            <in>hlt-inline.hpp</in>
            <in>hlt-interchange.cpp</in>
            <in>hlt-interchange.hpp</in>
            <in>hlt-outline.cpp</in>
            <in>hlt-outline.hpp</in>
            <in>hlt-peeling.cpp</in>
            <in>hlt-peeling.hpp</in>
            <in>hlt-pragma.cpp</in>
            <in>hlt-pragma.hpp</in>
            <in>hlt-simd.cpp</in>
            <in>hlt-simd.hpp</in>
            <in>hlt-stripmine.cpp</in>
            <in>hlt-stripmine.hpp</in>
            <in>hlt-task-aggregation-bundling.cpp</in>
            <in>hlt-task-aggregation-common.hpp</in>
            <in>hlt-task-aggregation-predication.cpp</in>
            <in>hlt-task-aggregation-simple.cpp</in>
            <in>hlt-task-aggregation.cpp</in>
            <in>hlt-task-aggregation.hpp</in>
            <in>hlt-transform.cpp</in>
            <in>hlt-transform.hpp</in>
            <in>hlt-unroll-omp.cpp</in>
            <in>hlt-unroll-omp.hpp</in>
            <in>hlt-unroll.cpp</in>
            <in>hlt-unroll.hpp</in>
          </df>
          <df name="instr">
            <in>tl-instrumentation.cpp</in>
            <in>tl-instrumentation.hpp</in>
            <in>tl-instrumentcalls.cpp</in>
            <in>tl-instrumentcalls.hpp</in>
            <in>tl-instrumentfilter.cpp</in>
            <in>tl-instrumentfilter.hpp</in>
          </df>
          <df name="instr_pthreads">
            <in>tl-instrumentation.cpp</in>
            <in>tl-instrumentation.hpp</in>
            <in>tl-instrumentcalls.cpp</in>
            <in>tl-instrumentcalls.hpp</in>
            <in>tl-instrumentfilter.cpp</in>
            <in>tl-instrumentfilter.hpp</in>
          </df>
          <df name="manip">
            <in>tl-remove-attrs.cpp</in>
            <in>tl-remove-attrs.hpp</in>
          </df>
          <df name="omp">
            <df name="core">
              <in>tl-omp-collapse.cpp</in>
              <in>tl-omp-constructs.def</in>
              <in>tl-omp-core.cpp</in>
              <in>tl-omp-core.hpp</in>
              <in>tl-omp-deps.cpp</in>
              <in>tl-omp-deps.hpp</in>
              <in>tl-omp-target.cpp</in>
              <in>tl-omp-target.hpp</in>
              <in>tl-omp-tasks.cpp</in>
              <in>tl-omp-tasks.hpp</in>
              <in>tl-omp-udr.cpp</in>
              <in>tl-omp-udr.hpp</in>
              <in>tl-omp-udr_2.cpp</in>
              <in>tl-omp-udr_2.hpp</in>
              <in>tl-omp.cpp</in>
              <in>tl-omp.hpp</in>
            </df>
            <df name="fun-tasks">
              <in>tl-omp-fun-tasks.cpp</in>
              <in>tl-omp-fun-tasks.hpp</in>
            </df>
            <df name="nanos-common">
              <in>tl-nanos-atomic.cpp</in>
              <in>tl-nanos-atomic.hpp</in>
              <in>tl-nanos-threadprivate.cpp</in>
              <in>tl-nanos-threadprivate.hpp</in>
              <in>tl-nanos.cpp</in>
              <in>tl-nanos.hpp</in>
            </df>
            <df name="nanos4">
              <in>tl-adf.cpp</in>
              <in>tl-atomic.cpp</in>
              <in>tl-barrier.cpp</in>
              <in>tl-critical.cpp</in>
              <in>tl-datasharing.cpp</in>
              <in>tl-debug.cpp</in>
              <in>tl-declare.cpp</in>
              <in>tl-flush.cpp</in>
              <in>tl-for.cpp</in>
              <in>tl-functionfilter.cpp</in>
              <in>tl-functionfilter.hpp</in>
              <in>tl-loop.cpp</in>
              <in>tl-master.cpp</in>
              <in>tl-ompserialize.cpp</in>
              <in>tl-ompserialize.hpp</in>
              <in>tl-omptransform.cpp</in>
              <in>tl-omptransform.hpp</in>
              <in>tl-ordered.cpp</in>
              <in>tl-outline.cpp</in>
              <in>tl-parallel.cpp</in>
              <in>tl-parallel_for.cpp</in>
              <in>tl-parallel_sections.cpp</in>
              <in>tl-parameterinfo.hpp</in>
              <in>tl-pretransform.cpp</in>
              <in>tl-pretransform.hpp</in>
              <in>tl-reduction.cpp</in>
              <in>tl-section.cpp</in>
              <in>tl-sections.cpp</in>
              <in>tl-single.cpp</in>
              <in>tl-spawn-old.cpp</in>
              <in>tl-spawn.cpp</in>
              <in>tl-symbols.cpp</in>
              <in>tl-target.cpp</in>
              <in>tl-task.cpp</in>
              <in>tl-taskaggregation.cpp</in>
              <in>tl-taskaggregation.hpp</in>
              <in>tl-taskchunk.cpp</in>
              <in>tl-taskchunk.hpp</in>
              <in>tl-taskgroup.cpp</in>
              <in>tl-taskserialize.hpp</in>
              <in>tl-taskwait.cpp</in>
              <in>tl-taskyield.cpp</in>
              <in>tl-threadprivate.cpp</in>
              <in>tl-transaction-expression.cpp</in>
              <in>tl-transaction-expression.hpp</in>
              <in>tl-transaction.cpp</in>
              <in>tl-warning.cpp</in>
            </df>
            <df name="nanox">
              <df name="devices">
                <df name="common">
                  <in>nanox-find_common.cpp</in>
                  <in>nanox-find_common.hpp</in>
                </df>
                <df name="cuda">
                  <in>nanox-cuda.cpp</in>
                  <in>nanox-cuda.hpp</in>
                </df>
                <df name="gpu">
                  <in>nanox-gpu.cpp</in>
                  <in>nanox-gpu.hpp</in>
                </df>
                <df name="smp">
                  <in>nanox-smp.cpp</in>
                  <in>nanox-smp.hpp</in>
                  <in>smp-reduction.cpp</in>
                </df>
                <df name="smp_numa">
                  <in>nanox-smp_numa.cpp</in>
                  <in>nanox-smp_numa.hpp</in>
                </df>
                <df name="smp_ocl">
                  <in>nanox-smp_ocl.cpp</in>
                  <in>nanox-smp_ocl.hpp</in>
                </df>
              </df>
              <in>tl-atomic.cpp</in>
              <in>tl-barrier.cpp</in>
              <in>tl-critical.cpp</in>
              <in>tl-data-env.cpp</in>
              <in>tl-data-env.hpp</in>
              <in>tl-devices.cpp</in>
              <in>tl-devices.hpp</in>
              <in>tl-flush.cpp</in>
              <in>tl-for.cpp</in>
              <in>tl-master.cpp</in>
              <in>tl-omp-common.cpp</in>
              <in>tl-omp-global.cpp</in>
              <in>tl-omp-nanox.cpp</in>
              <in>tl-omp-nanox.hpp</in>
              <in>tl-omp-vla.cpp</in>
              <in>tl-parallel-common.cpp</in>
              <in>tl-parallel-common.hpp</in>
              <in>tl-parallel.cpp</in>
              <in>tl-section.cpp</in>
              <in>tl-sections.cpp</in>
              <in>tl-single.cpp</in>
              <in>tl-target.cpp</in>
              <in>tl-task.cpp</in>
              <in>tl-taskwait.cpp</in>
              <in>tl-threadprivate.cpp</in>
            </df>
            <df name="profile">
              <in>omp-closure.cpp</in>
              <in>omp-profile.cpp</in>
              <in>omp-profile.hpp</in>
            </df>
            <df name="ss2omp">
              <in>tl-ss2omp.cpp</in>
              <in>tl-ss2omp.hpp</in>
            </df>
          </df>
          <df name="ss_valgrind">
            <in>tl-ss-valgrind.cpp</in>
            <in>tl-ss-valgrind.hpp</in>
          </df>
          <df name="stm_func">
            <in>stm_function_transform.cpp</in>
            <in>stm_function_transform.hpp</in>
            <in>tl-functionfilter.cpp</in>
            <in>tl-functionfilter.hpp</in>
          </df>
          <df name="superscalar">
            <in>calculator-parser-types.h</in>
            <in>calculator-parser.c</in>
            <in>calculator-parser.y</in>
            <in>cxx-ss-attrnames.h</in>
            <in>tl-access-bounds-list.hpp</in>
            <in>tl-access-bounds.hpp</in>
            <in>tl-ast-predicates.hpp</in>
            <in>tl-attributes.hpp</in>
            <in>tl-augmented-symbol.hpp</in>
            <in>tl-calculator.cpp</in>
            <in>tl-calculator.hpp</in>
            <in>tl-code-conversion-v3.cpp</in>
            <in>tl-code-conversion-v3.hpp</in>
            <in>tl-code-conversion-v4.cpp</in>
            <in>tl-code-conversion-v4.hpp</in>
            <in>tl-code-conversion-v5.cpp</in>
            <in>tl-code-conversion-v5.hpp</in>
            <in>tl-configurator.cpp</in>
            <in>tl-configurator.hpp</in>
            <in>tl-exceptions.hpp</in>
            <in>tl-function-data.hpp</in>
            <in>tl-function-router.cpp</in>
            <in>tl-function-router.hpp</in>
            <in>tl-function-table.cpp</in>
            <in>tl-function-table.hpp</in>
            <in>tl-parameter-expression.cpp</in>
            <in>tl-parameter-expression.hpp</in>
            <in>tl-parameter-region-list.hpp</in>
            <in>tl-preanalysis.cpp</in>
            <in>tl-preanalysis.hpp</in>
            <in>tl-region-list.hpp</in>
            <in>tl-region.cpp</in>
            <in>tl-region.hpp</in>
            <in>tl-source-bits.cpp</in>
            <in>tl-source-bits.hpp</in>
            <in>tl-task-analysis.cpp</in>
            <in>tl-task-analysis.hpp</in>
            <in>tl-task-manifest.cpp</in>
            <in>tl-task-manifest.hpp</in>
            <in>tl-task-reshaper.cpp</in>
            <in>tl-task-reshaper.hpp</in>
            <in>tl-task-table.cpp</in>
            <in>tl-task-table.hpp</in>
            <in>tl-transform-directives-v3.cpp</in>
            <in>tl-transform-directives-v3.hpp</in>
            <in>tl-transform-directives-v4.cpp</in>
            <in>tl-transform-directives-v4.hpp</in>
            <in>tl-transform-directives.cpp</in>
            <in>tl-transform-directives.hpp</in>
            <in>tl-type-utils.hpp</in>
          </df>
          <df name="testing">
            <df name="sizeof">
              <in>tl-test-sizeof.cpp</in>
              <in>tl-test-sizeof.hpp</in>
            </df>
          </df>
          <in>tl-ast.cpp</in>
          <in>tl-ast.hpp</in>
          <in>tl-builtin.cpp</in>
          <in>tl-builtin.hpp</in>
          <in>tl-clauses-info.cpp</in>
          <in>tl-clauses-info.hpp</in>
          <in>tl-common.hpp</in>
          <in>tl-compilerphase.cpp</in>
          <in>tl-compilerphase.hpp</in>
          <in>tl-compilerpipeline.cpp</in>
          <in>tl-compilerpipeline.hpp</in>
          <in>tl-context.cpp</in>
          <in>tl-context.hpp</in>
          <in>tl-counters.cpp</in>
          <in>tl-counters.hpp</in>
          <in>tl-cuda.cpp</in>
          <in>tl-cuda.hpp</in>
          <in>tl-datareference.cpp</in>
          <in>tl-datareference.hpp</in>
          <in>tl-declarationclosure.cpp</in>
          <in>tl-declarationclosure.hpp</in>
          <in>tl-dto.cpp</in>
          <in>tl-dto.hpp</in>
          <in>tl-externalvars.cpp</in>
          <in>tl-externalvars.hpp</in>
          <in>tl-for-nest.cpp</in>
          <in>tl-for-nest.hpp</in>
          <in>tl-fortran.cpp</in>
          <in>tl-fortran.hpp</in>
          <in>tl-functor.cpp</in>
          <in>tl-functor.hpp</in>
          <in>tl-handler.cpp</in>
          <in>tl-handler.hpp</in>
          <in>tl-langconstruct.cpp</in>
          <in>tl-langconstruct.hpp</in>
          <in>tl-lexer-tokens.hpp</in>
          <in>tl-lexer.cpp</in>
          <in>tl-lexer.hpp</in>
          <in>tl-multifile.cpp</in>
          <in>tl-multifile.hpp</in>
          <in>tl-object.cpp</in>
          <in>tl-object.hpp</in>
          <in>tl-objectlist.cpp</in>
          <in>tl-objectlist.hpp</in>
          <in>tl-overload.cpp</in>
          <in>tl-overload.hpp</in>
          <in>tl-pragmasupport.cpp</in>
          <in>tl-pragmasupport.hpp</in>
          <in>tl-predicate.cpp</in>
          <in>tl-predicate.hpp</in>
          <in>tl-predicateutils.cpp</in>
          <in>tl-predicateutils.hpp</in>
          <in>tl-refptr.hpp</in>
          <in>tl-scope.cpp</in>
          <in>tl-scope.hpp</in>
          <in>tl-scopelink.cpp</in>
          <in>tl-scopelink.hpp</in>
          <in>tl-setdto-phase.cpp</in>
          <in>tl-setdto-phase.hpp</in>
          <in>tl-simd.cpp</in>
          <in>tl-simd.hpp</in>
          <in>tl-source.cpp</in>
          <in>tl-source.hpp</in>
          <in>tl-statement.cpp</in>
          <in>tl-statement.hpp</in>
          <in>tl-static-callgraph.cpp</in>
          <in>tl-static-callgraph.hpp</in>
          <in>tl-symbol.cpp</in>
          <in>tl-symbol.hpp</in>
          <in>tl-templates.cpp</in>
          <in>tl-templates.hpp</in>
          <in>tl-traverse.cpp</in>
          <in>tl-traverse.hpp</in>
          <in>tl-type.cpp</in>
          <in>tl-type.hpp</in>
        </df>
      </df>
      <in>config.h</in>
    </df>
  </logicalFolder>
  <projectmakefile>Makefile</projectmakefile>
  <confs>
    <conf name="Default" type="0">
      <toolsSet>
        <developmentServer>localhost</developmentServer>
        <platform>2</platform>
      </toolsSet>
      <compile>
        <compiledirpicklist>
          <compiledirpicklistitem>.</compiledirpicklistitem>
          <compiledirpicklistitem>${AUTO_FOLDER}</compiledirpicklistitem>
        </compiledirpicklist>
        <compiledir>${AUTO_FOLDER}</compiledir>
        <compilecommandpicklist>
          <compilecommandpicklistitem>${MAKE} ${ITEM_NAME}.o</compilecommandpicklistitem>
          <compilecommandpicklistitem>${AUTO_COMPILE}</compilecommandpicklistitem>
        </compilecommandpicklist>
        <compilecommand>${AUTO_COMPILE}</compilecommand>
      </compile>
      <dbx_gdbdebugger version="1">
        <gdb_pathmaps>
        </gdb_pathmaps>
        <gdb_interceptlist>
          <gdbinterceptoptions gdb_all="false" gdb_unhandled="true" gdb_unexpected="true"/>
        </gdb_interceptlist>
        <gdb_signals>
        </gdb_signals>
        <gdb_options>
          <DebugOptions>
          </DebugOptions>
        </gdb_options>
        <gdb_buildfirst gdb_buildfirst_overriden="false" gdb_buildfirst_old="false"/>
      </dbx_gdbdebugger>
      <nativedebugger version="1">
        <engine>gdb</engine>
      </nativedebugger>
      <runprofile version="9">
        <runcommandpicklist>
          <runcommandpicklistitem>trans-phasec++ test.c -o testR.c -I/usr/lib/openmpi/include/ -L/usr/lib/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasec++ test.c -o testR.c -I/usr/lib/openmpi/include/ -L/usr/lib/openmpi/lib/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -o testR.c </runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -o testR.c -I/usr/lib/openmpi/include/ -L/usr/lib/openmpi/lib/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -o testR.c -I/usr/lib/openmpi/include/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasec++ test.c -y -o testR.c -I/usr/lib/openmpi/include/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -y -o testR.c -c -I/usr/lib/openmpi/include/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -y -o testR.c -E -I/usr/lib/openmpi/include/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -y -o testR.c --pp=off -I/usr/lib/openmpi/include/</runcommandpicklistitem>
          <runcommandpicklistitem>trans-phasecc test.c -y -o testR.c -I/usr/lib/openmpi/include/</runcommandpicklistitem>
        </runcommandpicklist>
        <runcommand>trans-phasecc test.c -y -o testR.c -I/usr/lib/openmpi/include/</runcommand>
        <rundir>/home/sdruix/mcxx/omp_to_mpi/trans</rundir>
        <buildfirst>true</buildfirst>
        <terminal-type>0</terminal-type>
        <remove-instrumentation>0</remove-instrumentation>
        <environment>
        </environment>
      </runprofile>
    </conf>
  </confs>
</configurationDescriptor>

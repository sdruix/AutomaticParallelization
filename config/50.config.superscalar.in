[cellss-ppu-cc]
language = C
options = --variable=generate-non-task-side:yes --variable=generate-task-side:no --variable=generate-task-ids:yes --variable=generate-task-adapters:no --variable=align-memory:yes
preprocessor_name = ppu-c99
preprocessor_options = -E
{gcc} preprocessor_options =  -m32 -I@SUPERSCALAR_INCLUDES@/cellss -include CellSS.h
{xlc} preprocessor_options =  -q32 -I@SUPERSCALAR_INCLUDES@/cellss -qinclude=CellSS.h
{gcc} preprocessor_options = -DPPU_CODE -maltivec -include malloc.h
{xlc} preprocessor_options = -DPPU_CODE -maltivec -qinclude=malloc.h
preprocessor_options = -D__STARSS=1 -D__STARSS_ABI_VERSION=@superscalar_version@ -D__STARSS_CELL=1
compiler_name = ppu-c99
{gcc} compiler_options = -g3 -m32 -maltivec
{xlc} compiler_options = -g -q32 -qaltivec
linker_name = ppu-g++
linker_options = -g3 -m32 -L@SUPERSCALAR_LIBS@ -lCellSS -lspe2 -lpthread
compiler_phase = libtlsuperscalar-configurator.so
compiler_phase = libtlsuperscalar-preanalysis.so
compiler_phase = libtlsuperscalar-task-analysis.so
compiler_phase = libtlsuperscalar-function-router.so
compiler_phase = libtlsuperscalar-transform-directives.so
compiler_phase = libtlsuperscalar-code-conversion.so
compiler_phase = libtlsuperscalar-task-manifest.so
pragma_prefix = css

[cellss-spu-cc]
language = C
options = --variable=generate-non-task-side:no --variable=generate-task-side:yes --variable=generate-task-ids:no --variable=generate-task-adapters:yes --variable=align-memory:yes
preprocessor_name = spu-c99
preprocessor_options = -E -I@SUPERSCALAR_INCLUDES@/cellss
{gcc} preprocessor_options = -include CellSS.h
{xlc} preprocessor_options = -qinclude=CellSS.h
preprocessor_options = -DSPU_CODE -D__STARSS=1 -D__STARSS_ABI_VERSION=@superscalar_version@ -D__STARSS_CELL=1

compiler_name = spu-c99
compiler_options = -g3
linker_name = spu-c99
linker_options = -g3 -L@SUPERSCALAR_LIBS@/spu -lCellSS-spu
compiler_phase = libtlsuperscalar-configurator.so
compiler_phase = libtlsuperscalar-preanalysis.so
compiler_phase = libtlsuperscalar-task-analysis.so
compiler_phase = libtlsuperscalar-function-router.so
compiler_phase = libtlsuperscalar-transform-directives.so
compiler_phase = libtlsuperscalar-code-conversion.so
compiler_phase = libtlsuperscalar-task-manifest.so
pragma_prefix = css

[smpss-cc]
language = C
options = --variable=generate-non-task-side:yes --variable=generate-task-side:yes --variable=generate-task-ids:yes --variable=generate-task-adapters:yes --variable=align-memory:yes
preprocessor_name = gcc
{xlc} preprocessor_name = xlc
{icc} preprocessor_name = icc
preprocessor_options = -std=c99 -E -I@SUPERSCALAR_INCLUDES@
{gcc} preprocessor_options = -include CellSS.h 
{xlc} preprocessor_options = -qinclude=CellSS.h 
{icc} preprocessor_options = -include CellSS.h 
preprocessor_options = -D__STARSS=1 -D__STARSS_ABI_VERSION=@superscalar_version@ -D__STARSS_SMP=1

compiler_name = gcc
{gcc} compiler_options = -g3 -std=c99
{xlc} compiler_options = -g -qlanglvl=std99
{icc} compiler_options = -g -std=c99
linker_name = g++
linker_options = -g3 -L@SUPERSCALAR_LIBS@ -lSMPSS -lpthread
compiler_phase = libtlsuperscalar-configurator.so
compiler_phase = libtlsuperscalar-preanalysis.so
compiler_phase = libtlsuperscalar-task-analysis.so
compiler_phase = libtlsuperscalar-function-router.so
compiler_phase = libtlsuperscalar-transform-directives.so
compiler_phase = libtlsuperscalar-code-conversion.so
{reshape} compiler_phase = libtlsuperscalar-task-reshaper.so
compiler_phase = libtlsuperscalar-task-manifest.so
pragma_prefix = css
